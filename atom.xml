<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欠擬合 | UNder-fitting</title>
  
  <subtitle>Fun Driven Frontend Developer 最近的夢想是能夠光榮地回鄉工作。
如果你也對日劇、機器學習、日文、前後端開發、React、程式、咖啡有興趣，或許我們可以聊聊
</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kjj6198.github.io/"/>
  <updated>2018-09-08T15:30:58.000Z</updated>
  <id>http://kjj6198.github.io/</id>
  
  <author>
    <name>Kalan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在 17 直播的 365 天</title>
    <link href="http://kjj6198.github.io/2018/09/08/%E5%9C%A817%E7%9B%B4%E6%92%AD%E7%9A%84365%E5%A4%A9/"/>
    <id>http://kjj6198.github.io/2018/09/08/在17直播的365天/</id>
    <published>2018-09-08T15:30:13.000Z</published>
    <updated>2018-09-08T15:30:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>其實這 12 個月算是意外撿到的，因為大學時期在實習時，沒有把學業跟工作的時間分配好，導致當時的必修被當得一塌糊塗，再來是因為沒有在時間內處理好實習學分，導致要多花一年把漏掉的學分補回來。</p><p>這其實是我蠻懊悔的事，畢竟卡著一個兵役在，有很多事情（像出國）都沒辦法如期進行。雖然這段時間的確學到了很多事情，但也讓我明白了一件事：</p><blockquote><p>一旦開始賺錢，一切都回不去了</p></blockquote><p>開始工作後拿到的薪水是打工時好幾倍以上，難免就會不小心把學業丟到一邊，空閒時間也難免會只想做自己喜歡的事。</p><p>一失足成千古恨，但想想其實人生很長，一年雖然可以改變很多東西，但實在不需要為了這段時間惋惜什麼。所以我相當珍惜這一年，對我來說這是我保有學生身份，同時幾乎是以正職的方式在一家公司上班的機會。</p><p>我很幸運在這樣的年紀可以經歷一家公司興起與倒閉、見證一家公司成長、在一家雖然是新創但已經有 500~600 人規模的公司上班。的確也是因為延畢才有這樣的體驗，否則當完兵後是否還有這樣的機緣也就說不準了。</p><p>加入這間公司後從一開始的期待、接手大型系統後的興奮、開發複雜資料流的挑戰、到最後逐漸失望，老實說在這裡學習到很多東西。</p><h3 id="工作內容"><a href="#工作內容" class="headerlink" title="工作內容"></a>工作內容</h3><h4 id="活動開發"><a href="#活動開發" class="headerlink" title="活動開發"></a>活動開發</h4><p>剛開始是以活動組的身份加入前端團隊的。</p><p>起初我是蠻排斥寫活動的（小活動），因為現在的小活動形式幾乎相同，都已經逐漸變成寫設定檔、下 query 拿資料，除了某些規則比較特別的活動可能需要自己寫資料邏輯之外，剩下的活動都不太好玩，而且需要極高度的細心（活動計算的方式有時很複雜，很容易就會出錯）。也常常會有需求在開發途中變更、跟設計來回對稿、調文案、手動上傳圖片等等的瑣碎工作。也因此當時主管會盡量平均分配大、小活動給大家，也會盡量輪流開發不同的 task 來調劑一下身心。偶爾（或者常常）會有規模比較大的活動，會有不同的規則以及 UI，這部分就比較有挑戰。</p><p>不過離開活動組也有一陣子了，聽說規則越來越多，還衍伸出了各種變化，有興趣的人歡迎來挑戰看看。</p><p>寫資料產生的邏輯是蠻好玩的一件事，為了因應活動規則會有排行榜，針對大量資料的排名不可能每次都直接從資料庫下 query，而是非一般正規化的方式拿資料、產生靜態檔上傳到 CDN，再讓前端頁面 fetch。</p><p>有時會需要拿使用者等級方便做分組，並且為按照活動開始時間為準。但是使用者的資料存放在 mongo，而點數的資料則存放在 MySQL 當中。雖然等級分組似乎可以用 <code>WHERE level &gt; 50 OR level &lt; 50</code> 做到，但在實際開發的場景中，小於 30 等的用戶有將近幾百萬人，這樣的 SQL 很容易造成效能上極大的損失。</p><h4 id="內部系統後台"><a href="#內部系統後台" class="headerlink" title="內部系統後台"></a>內部系統後台</h4><p>在內部系統中，主要開發過兩個系統：文案編輯器與出帳系統</p><p>內部系統是在 2015 年底左右開始開發的，會特別提到這個時間是因為當時 React 還剛起步，還是那麼 <code>createClass</code> 的時代，babel, webpack 也才剛興起（可能還在 webpack1），大家都還在用 flux 管理狀態跟資料流。也因此有許多 legacy code 到現在還沒有完全 migrate 完，在開發上有時也稍嫌綁手綁腳一點。</p><p>這個系統初期是由主管 eason 一手開發的，從這裡可以看出他的功力，從無到有打造出一個系統是一件相當不容易的事，除了架構本身之外，也要懂得業務端實際的需求，不然就會淪為 Dashboard 相當好看，但沒有一樣功能是符合業務需求的下場，最後只好打掉重練。</p><p>為了因應公司快速擴張，admin 的功能也逐漸增加，也越來越多人協同開發過 Admin 系統，所以這裡的 coding style 也逐漸變得有些混亂，後來我在開發出帳系統的時候試著加入了 storybook 跟拆出一些共用的元件。有時候大家都只是懶得去做 setup 的事情而已，所以自從做了這件事之後，大家也變得能主動去寫 story，或者是維護共同元件。單打獨鬥是一回事，但怎麼跟一群人合作又是另外一回事了。</p><h4 id="文案編輯器"><a href="#文案編輯器" class="headerlink" title="文案編輯器"></a>文案編輯器</h4><p>這個小工具只是為了方便在開發活動時，每次文案如果有調整，就要跑一次 commit, push, CI, deploy 的過程，大概要 10 ~ 15 分鐘才能呈現在頁面上。在活動頁面中，都會有一頁為活動說明。原本的文案都是直接寫死變數在 Javascript 當中，但是時常遇到活動組人員更改文案的需求，這時就需要耗費不少時間在修改、跑 CI、重新部署等流程。為了顧及效能，當時並沒有直接將文案等放入資料庫處理。</p><p>為了改善工程師的麻煩和繁瑣的等待，與同事討論解決辦法與可行性後，我和同事(scars) 在後台開發了文案編輯器，方便修改、發佈活動的文案。</p><p>這個文案編輯器透過 <code>markdown</code> 來撰寫，並且透過 GCS 的 API 上傳到 CDN。再由前端呼叫 API 讀取文案內容並解析 markdown 為 HTML。以往修改文案需要 10 ~ 15 分鐘不等，現在只要重新上傳新的檔案就能即時更新，而且可以直接讓 CDN 分攤大量請求。原本主管的意思是不希望文案決定後還要給他們修改的空間，不過為了加速開發，所以先在後台編輯，再上傳到 CDN，活動頁面只要去下載 .json 檔並且 render 就可以了。</p><p>當初是提案乾脆放到資料庫裡，不過仔細想一下好像沒什麼必要放到資料庫，首先為了因應大量 request 的需求，勢必要另外做快取，而且還要新增一個欄位（或 table），不如直接讓 CDN 做完這些事就可以了。</p><p>這個編輯器很簡單，由 scars 幫忙優化 UI 後沿用至今，想起來還是覺得相當欣慰。</p><h4 id="出帳系統"><a href="#出帳系統" class="headerlink" title="出帳系統"></a>出帳系統</h4><p>出帳系統是主管交付我第一個比較大型的系統，為了要改善越來越龐大且複雜的出帳流程，所以打算直接淘汰現有的系統，直接重新開發一遍。很高興主管能夠把這樣高複雜度的出帳系統交付給我。</p><p>那段時期覺得時光過得很快，每天幾乎都在埋頭寫 code、寫各種共用的元件、規劃接下來的架構、和 backend 討論等等，那時候看到需求就覺得很興奮。</p><p>直到後來需求逐漸歪斜，越來越多莫名其妙的功能，且 PM 信誓旦旦保證一定用得上。雖然有點懷疑但還是繼續做了。</p><p>後來交接後逐漸開始 release 給公司內部使用，大部分我們花了很多會議爭吵的功能最後都沒什麼人使用。反倒是一些比較嚴重的問題是直到有人反應後才著手修改，儘管之前已經有人提出過一次。</p><p>出帳系統時常牽扯到大量資料，因此怎麼做好搜尋機制是重點，但顯然後端完全不想碰這塊渾水，PM 也不了解搜尋機制要在哪一端實作，最後演變成前端需要先把全部的資料拉回來之後，再自幹分頁機制與搜尋機制。我們曾經提出希望後端加上分頁機制，而不是每次都拉幾萬筆資料卡得要命，但這個需求延宕了 4 個月後才被排進開發，也不知道做不做得出來。心中只有滿滿的失望。</p><h4 id="17-live"><a href="#17-live" class="headerlink" title="17 live"></a>17 live</h4><p>這是我在 17 最後幾個月擔任的開發工作，主要是維護以及開發 17.live 的新功能。首先要說說這裡的 codebase，簡直乾淨到讓人無法直視，好像多寫一行都可能玷污他一樣。不像 admin 系統，17.live 畢竟是在前端戰國時代後期，前端跟 react 生態圈逐漸成熟後衍生的產物，所以寫起來也相當舒服。</p><p>同時因為主管跟設計 team 都是很要求 UI 細節的人，所以對 UI 互動要求很高。而像這裡有許多像是直播跟留言、送禮等功能都是很複雜的資料流，相對地開發強度也很高。</p><p>用了 react, redux, redux-observable 當作主要架構，幾乎你能聽到前端的技術都用上了。</p><p>我覺得開發網頁版是件相當明智的決定，除了在電腦上看螢幕很大很舒服之外，留言也很方便，也不用侷限於手機的效能跟記憶體，像我拿 iphone SE 如果開 17 App 會整台 iphone 發燙，而且耗電量又大，實在會讓人提不起勇氣打開。</p><p>相比起來，在網頁上的觀看體驗舒服多了（雖然功能比較陽春）。有興趣的可以參考看看：</p><a class="fetch-card" href="https://17.live" target="_balnk" ref="nofollow noreferrer">      <div class="info">        <h2></h2>        <p class="content"></p>        <span>https://17.live</span>      </div>      <div class="img" style="background-image: url(https://storage.googleapis.com/media17-prod-web-assets/17live-share.pngimage/png)">      </div></a><p><strong>Kaihao</strong></p><p>17live 初期的 code 大部分都是他與另外一位已經離職的同事完成的。這些 code 是一看就讓人覺得，好美啊。在初期時就把架構調整到那麼順暢是一件相當不容易的事。每次提出 PR 最先 review 的也都是他，也是 review 最嚴格的一位。另外值得一提的是他只比我大一歲，不過已經是主管級的人物，不管是程式碼和紀律都是值得學習的對象。</p><p><strong>Jasper, Arthur</strong></p><p>這兩位是我加入 17live 後頻繁合作的對象，兩位在前端都有相當深厚的實力，也是主要 17live 的貢獻者。讓我印象深刻的是兩位的 code review 一向嚴謹，也總是會提出很多讓 code 更乾淨的建議，好幾次 PR 都累積了 50, 60 幾個 comment。</p><p>除了寫程式以外，Jasper 本身也有健身的習慣，也喜歡各種運動賽事、也玩過樂團；Arthur 最近也開始培養在寫程式以外的興趣。不過因為我們喜歡的領域不太一樣，所以比較少有講幹話交流的經驗XD。</p><p>其實我也蠻感謝主管最後讓我一起參與 17live 的開發，感受到相當大的挑戰，也從 codebase 與其他人合作中學到很多。</p><p>17live 因為沒有背負太多技術債，也沒有太多隕石需求，所以多了很多機會可以嘗試各種技術及 library。雖然如此，大家都還是很有紀律，所以開發節奏還是相當快。</p><h3 id="團隊文化"><a href="#團隊文化" class="headerlink" title="團隊文化"></a>團隊文化</h3><p>我很喜歡團隊（frontend）裡的文化，像是大家願意丟出問題討論各種解法；每週分享會分享新技術或是工作上的難題，主要是讓大家分享一些在開發上遇到的難題跟技術分享。雖然不少公司也有類似的文化，我自己很喜歡這樣的交流方式，知道大家的難題後就可以不用再踩到類似的地雷。</p><p>同時主管極力維持資訊透明、拒絕各種不合理的需求、鼓勵大家提出自己的想法；要求大家保持紀律跟道德等等，都是讓我覺得很棒的地方。</p><h4 id="訂飲料系統"><a href="#訂飲料系統" class="headerlink" title="訂飲料系統"></a>訂飲料系統</h4><p>之前在 Sudo 時也曾經做過。不過進公司後發現大家訂飲料的需求相當高啊，所以又花了一天寫了一個訂飲料系統。後來又決定用 golang 重寫一次 API，前端直接用 vuejs。</p><p>原本我們是用 Din.Ben.Don! 這個系統，但介面真的太醜了，而且每次忘記保持登入就要再輸入一次密碼（而且又常常忘記）。所以後來就重操舊業把 app 改寫了一次。</p><p>當時想說改成用 golang 的話就可以讓其他人維護了，所以用了 golang + serverless 改寫一遍，這樣也就不用一直讓 heroku cold start。</p><p>截至至今 8 個多月已經累積了 $57,134 的金額。前一陣子同事提醒才發現 slack 有 <a href="https://api.slack.com/dialogs" target="_blank" rel="noopener">dialog API</a>，可以直接在 slack 上發訂單，也就順手接起來了。</p><p><strong>Golang</strong></p><p>為了因應越來越大量的請求，我們的 API server 也從 node.js 逐漸遷移到 golang，不過這裡的 backend 們聽說有許多在加入 17 之前都還沒有寫過 golang，因此我想這裡注重的是架構跟演算法的能力。</p><p>畢竟當要應付的資料數都是從百萬級起跳時，演算法跟資料結構就不再是那麼遙遠的東西，而是實際上會出現在日常開發上的。</p><p>雖然習慣了 Javascript 開發後，會覺得 Golang 寫起來綁手綁腳。像是 default value、解構賦值、ternary operator 等等，在 golang 完全沒有類似的語法糖。</p><p>不過有蠻完整的 built-in package 和方便的資料結構。尤其是 channel 跟 goroutine，搭配 lock 跟 context，不用任何 library 就可以達到不錯的 concurrency 機制。</p><h4 id="分享會"><a href="#分享會" class="headerlink" title="分享會"></a>分享會</h4><p>每個禮拜中午團隊內都有一次分享會，會分享一些在工作上遇到的難題或是新技術等等，像雖然我們大部分的 codebase 都是用 react 開發，但有同事分享了如何入門 vue 以及跟 react 的差別；有人分享了對於 schedule job 的經驗談，包含怎麼 retry, reque 等等 ；有人分享了怎麼整合 deeplink 等等……。可以說每個禮拜最期待的就是這天。</p><p>因為希望大家更樂意分享，所以透過了 github issues 讓大家方便開主題；每次 close issue 後也會打 webhook 統整這次分享的資訊。例如前幾次分享的主題：</p><p><img src="https://cdn-images-1.medium.com/max/1000/1*mhKe6JJ3O03xJqQgfDAC-Q.png" alt="img"></p><h3 id="同事"><a href="#同事" class="headerlink" title="同事"></a>同事</h3><p>前幾份工作幾乎都是在前端只有一人的情況下做開發，這是第一次在前端超過 10 人的團隊裡工作。所以想額外寫寫跟這群人合作的實際感受是什麼，另外因為並不是所有人都有合作過，所以只特別寫出幾位同事：（然後排序完全是照腦袋中想到的順序）</p><h3 id="Eason"><a href="#Eason" class="headerlink" title="Eason"></a>Eason</h3><p>印象最深刻的是大約在剛入職沒多久時，我因為想要提意見，卻害怕因為年紀的關係不被重視，曾經說過像是：「可是我怕大家會因為我的年紀而有一些不開心的情緒」的話。因為雖然大部分的工程師並不在意年齡的差距，只要是合理的建議都會很樂意採納，不過仍然有部分的人會因為年齡、經歷的關係而瞧不起對方，或是感覺自己被羞辱。</p><blockquote><p>如果有人因為你的年齡而不聽你說話，我會把他 fire 掉</p></blockquote><p>這句話對我影響很深，以前我是會因為對方年齡、職位等等而不會把意見提出來的人，不過從此之後我都會盡量試著提出自己的意見跟想法。不過有時好像太堅持自己的立場結果聽起來好像是想要吵架一樣。</p><p>有時候我在想，大家都在網路業打滾，溝通能力絕對沒有到那麼大的鴻溝。所以問題並不是出在溝通能力，而是對方根本不想聽而已。</p><p>再來是他很願意為不合理的事情跳出來，也很為團隊內的同事們著想。所以可以很專注在自己手邊的工作上，雖然我遇過的主管不多，但我很慶幸遇到這樣一位主管。</p><p>eason 對時間很要求，當初面試時有幾個面試者遲到還有被特別記錄下來。而且致力於保持資訊流通，說明目前的營運狀況以及可能會遇到的問題。</p><p>至少前端在招募上所展現出來的態度，是任何公司或團隊都值得學習的。你如何對待面試者，代表一家公司對人才的態度。</p><h3 id="Scars"><a href="#Scars" class="headerlink" title="Scars"></a>Scars</h3><p>目前是活動組的主管，雖然說主管好像距離感比較遠，但實際上除了做管理職的工作之外，他也仍然持續地投入開發工作當中。</p><p>是個已經在業界打滾許久的工程師，從年少輕狂的宅宅蛻變成爸爸了。</p><p>通常在業界打滾很久的工程師會有幾種情況：一是在某家公司升上主管後，思想開始變得迂腐，然後因為太久沒有更新技術線，所以寫 code 通常會變成團隊開發的瓶頸，最後變成空有資歷，沒有實力的主管，跟這種人工作很痛苦；一種是已經經歷過太多不合理的事情與技術迭代，深知各種奇形怪狀的業務需求，知道如何給出建議、在戰場上奮力擋下所有不合理的需求，半夜為了修 bug 赴湯蹈火，最後蛻變無堅不摧的強力主管。</p><p>我很幸運是遇到第二種。</p><h3 id="Henry"><a href="#Henry" class="headerlink" title="Henry"></a>Henry</h3><p>一個很喜歡按別人 emoji 的工程師，唯一的缺點就是嘴巴壞了一點還有不吃小黃瓜。但實際上是個實力很深厚的工程師，曾經 contribute 過 redux 的 repo，也很喜歡各種程式語言以及 functional programming，也對 vue 有涉略，也曾經分享過 talk。合作經驗不多，但時常一起討論一些程式語言的設計，是個難得可以一起談程式語言的同事。</p><h3 id="Otis"><a href="#Otis" class="headerlink" title="Otis"></a>Otis</h3><p>otis 在內部系統組當中扮演很重要的角色，在規劃需求的時候時常可以考慮到各種不同的情況，也很注重程式碼的品質。而且！在 UI 上的細節非常認真，雖然沒有設計師出圖，但是它做出來的 UI 都讓人覺得相當精美。私底下是個喜歡吹薩克斯風的大男孩（？</p><p>雖然並沒有長時間的合作，但一直很喜歡他不斷思考怎麼改善程式碼的方式。</p><h3 id="Jack"><a href="#Jack" class="headerlink" title="Jack"></a>Jack</h3><p>前端的靈魂人物，社交型工程師。</p><p>並非所有影響力都源自於技術深度或是產出（當然這並不是說他 code 寫得很爛），而是懂得怎麼溝通與社交對於開發上是有幫助的，例如從交友跟談話中來修復 bug 或是解決需求問題，通常是找到正確答案的捷徑。</p><p>除了寫程式之外平時是位很喜歡各種事物的人，像是泡咖啡、衝浪、看電影、聽各種獨立音樂、玩 switch等等。我有時會因為想要多寫點程式所以排斥各種麻煩的社交活動，但很慶幸如果有時想要唱歌喝酒時，有一位隨 call 隨到的好同事。</p><h3 id="Ryan"><a href="#Ryan" class="headerlink" title="Ryan"></a>Ryan</h3><p>在團隊當中一直是個令人值得學習的對象，除了不斷增進自己對前端的知識之外，也樂於幫助其他成員，或是分享解法給大家。而且以前竟然是從老師轉換跑道過來的，轉換跑道通常需要很大的勇氣，因為從 0 開始並不是一件容易的事。</p><h3 id="蝌蚪"><a href="#蝌蚪" class="headerlink" title="蝌蚪"></a>蝌蚪</h3><p>原本是位設計師（吧），也曾經當過 PM，也開發過遊戲，現在是活動組，負責開發活動 server。我覺得能夠開發遊戲的工程師很猛，因為要完成一款遊戲要耗費的人力相當驚人（如果不是那種賺快錢的手遊的話…），而且幾乎會用上所有軟體開發的相關知識，例如快取架構、通知系統、成就系統、音效等等，如何優雅地整合這些事情對我來說是相當困難的事，因此我也主觀的認為有開發過完整遊戲架構的人能夠勝任所有軟體開發。</p><p>另外他也用 javascript 自幹了一套迷你的 game engine，叫做 the jack one，原本想要用用看但發現歲月如梭，已經沒有時間了。</p><h3 id="Phyllis"><a href="#Phyllis" class="headerlink" title="Phyllis"></a>Phyllis</h3><p>團隊中的天才同事，完全自歎不如。</p><p>擁有音樂 + 天文雙碩士學歷，精通中文英文法文廣東話等 16 國語言，英文母語程度。曾幫 deemo 等知名音樂遊戲編過曲；曾任台北市立交響樂團、國家交響樂團和馬來西亞愛樂樂團、奏出福爾摩沙音樂協會理事。曾獲歐洲太空總署論文比賽第二名、美國 Bard 音樂學院演奏家文憑全額獎學金、美國緬因州 Kneisel Hall 室內樂音樂節 全額獎學金、倫敦大學學院 Mullard 太空科學中心暑期學生獎學金。</p><p>最近轉行寫前端，完全見識了一個人怎麼進步地如此神速。這種人因為已經有一套學習知識的系統，所以轉換到其他領域時可以利用之前的經驗更快上手，雖然不知道為什麼她要跑來寫前端。</p><p>她能夠在很短的時間內了解業務需求，也能提供一個比較穩健作法（雖然常常不被 PM 採納），能夠跟這樣子的人一起合作也算是很特別的經驗之一。</p><h3 id="Claire"><a href="#Claire" class="headerlink" title="Claire"></a>Claire</h3><p>雖然她是 PM，卻時常跟工程師請教一些技術上的問題，雖然她並不是本科系出身，但非常了解 app 跟活動的業務內容，也知道必須解決的問題是哪些。</p><p>有沒有技術通常不是最大的重點，而是能不能夠解決問題。不過解決問題通常都需要對技術有一定的瞭解，但大部分的 PM 不了解技術，導致不知道怎麼讓需求更加清晰，或是用各種 workaround 試圖解決問題，甚至把簡單的問題複雜化。</p><p>好的 PM 會盡量讓你排除萬難只專注在一件事情上，因為他們知道被打擾的感覺，所以會盡全力創造一個毫無後顧之憂的環境給你最好的開發效率。</p><p>這件事情簡單嗎？你要知道 PM 要應付難纏的需求、說明細節、寫一大堆規格書，又要兼顧開發人員的效率，確保進度按照計畫進行。你之所以沒有感覺，是因為 PM 已經默默地把他處理掉了。</p><p>令人印象深刻的是她為了想要更了解活動開發流程，實際跟工程師請教，然後真的開發出一個小活動上線。合作時間不長，但是我短暫的職涯中見過數一數二的 PM。</p><h3 id="其他同事"><a href="#其他同事" class="headerlink" title="其他同事"></a>其他同事</h3><p>其他有很多同事共事機會不多，不過有些部分我想多提一些</p><h4 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h4><p>雖然沒有跟全部的 team member 合作過，但開發活動頁面的時候常常對他們深厚平面設計實力給震懾到，覺得每張 cover 圖都做得好精緻，也覺得禮物動畫做得相當用心。有時候覺得那麼緊湊的時程，竟然還可以有這樣品質的產出，簡直千錘百鍊。也有可能是我主觀地認為會畫畫的人很厲害而已。</p><p>除了平面設計之外，UI 設計師也很厲害，像是網頁版的 UI 都是由她設計出來的，能夠和這些設計師們合作讓我收穫很多，也學到很多在前端應該要注意的小細節。</p><h4 id="Backend"><a href="#Backend" class="headerlink" title="Backend"></a>Backend</h4><p>跟 backend 的合作經驗也不多，因為大部分都是從已經開發完成的 API 中做串接。但在這裡要面對大量請求數跟各種穩定性，任何在小公司裡頭不會遇到的問題像 sharding、cache 機制、logging、各種 metric、資料庫架構等等，都是在開發 API 的時候就必須要考慮的問題，也因此我很佩服這些工程師們。</p><h4 id="SRE"><a href="#SRE" class="headerlink" title="SRE"></a>SRE</h4><p>雖然我也很少跟 SRE 的同事合作過，不過公司裡頭有很完善的自動化部署流程跟 CI/CD 機制，而且不少專案也透過 SRE 的幫忙逐漸 dockerized 了。一直很佩服他們輪班時需要隨時 oncall 所要承受的壓力。</p><h3 id="產品"><a href="#產品" class="headerlink" title="產品"></a>產品</h3><p>為了面試，我曾經拿起手機下載 17 App，雖然覺得容量大得誇張了一點（我是用 iPhone SE 16G），但打開 app 的當下我是相當興奮的。不管是排版、UI、直播間的互動，都讓我感受到 app 團隊深厚的開發能力。</p><p>後來隨著各種 KPI 的引入，為了各種虛胖的數字開始用一些令人非常不悅的手段。在打開 17 app 時，首先會跳出活動廣告頁面，大概就跟痞客邦的跳板廣告差不多。增加了曝光率，再來會到簽到列表。最後會跳出一個無法關閉的彈窗，要求你進入主播的直播間。按下去之後會直接幫你跳到現在熱門的直播間，整個感覺大概就像<a href="https://fczbkk.com/current-state-of-webdesign/" target="_blank" rel="noopener">這樣</a>。</p><p>雖然我明白要開發像是這種直播 App 需要非常深厚的技術，但把 app 搞成這樣真的令人大吊胃口。對於數據來說，這樣的確讓數字變得更好看了，但完全毀滅掉使用者體驗。</p><p>以前我會用 app 看看一些日本直播主唱歌聊天練練日文，但最近版面實在是有夠擁擠，所以只好刪掉了。</p><p>而如果你忘記帶耳機，剛好又在捷運上，手機又剛好不是靜音，那麼就會直接把聲音播出來。第一次的反應是嚇得半死，在丟臉的情況下把 app 刪掉。從這裡大概可以推敲的出來一些事情，有一則推文深得我心：</p><p><blockquote class="twitter-tweet" data-lang="zh-tw"><p lang="zh" dir="ltr">我們不該一直補莫名的測試來衝涵蓋率，而是看而是要查看是否有不合時宜的程式碼或是沒考慮到的情境，而這在產品上的各項指標也是如此。正常地在使用者身上下功夫，那麼數字分析起來自然有意義；而不是反過來為了衝數字而使些小手段，完全忘了使用者的感受該擺在第一。</p>&mdash; 大澤木小鐵 (@jaceju) <a href="https://twitter.com/jaceju/status/1032799251493834754?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">2018年8月24日</a></blockquote></p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>我相信身為一個腦袋正常的工程師，絕對會對這種需求提出質疑，但最後還是被實作出來了，而且運行了好一段時間。大概就可以想像需求是怎樣煉成的。</p><p>在改版過後，我就很少打開 app。打開 app 要先看到跳版廣告、活動廣告、簽到通知、跳出熱門主播，還會直接放出聲音，真是嚇死人了。我知道在某些不得已的情況下，可能要被迫把產品改成自己不喜歡的樣子，不過我衷心希望公司可以多重視設計的意見，做出恰如其分的 app。</p><h3 id="徵才"><a href="#徵才" class="headerlink" title="徵才"></a>徵才</h3><p>徵才真的很重要。尤其是面談的過程，會讓其他人對公司產生非常強烈的第一印象。例如剛開始去面試時因為沒有獨立的會議室，在會客區的小圓桌內都是開放空間，有時會有很多噪音干擾，也很容易被別人側目，很容易就給別人不好的印象。</p><p>別的部門我不確定，但我很欣賞前端團隊內招募流程。光是把 JD 寫好就已經是中上程度了，從面談中主管會盡力聽你說話，也會盡量讓你知道團隊內的現況。</p><p>這在面試當中是一件相當難得的事情，再來我當時面試時曾經有提過，因為辦公室太大讓我不知道一進門要找誰時，他說會再反映給 HR。</p><p>原本我以為他只是說說而已（畢竟大部分的公司也都是聽聽而已），沒想到他真的有跟 HR 反應，讓我非常感動。</p><p>至於福利的部分，我覺得公司的福利真的很完善，是會讓人非常有感的程度，主要的福利制度在相關的 JD 都找得到就不另外贅述了。</p><h3 id="開發流程"><a href="#開發流程" class="headerlink" title="開發流程"></a>開發流程</h3><p>在 Sudo 我真的流程很懷念這裡的開發流程，套句 denny 寫的：「這種開發上的順暢感如果沒待過不順的團隊是不能理解的」。</p><p>在一個幾十人的小團隊內，可能就有好幾十個 bug 及需求要處理了，更何況是幾百人的團隊，雖然我知道當人數增加之後評估需求以及排程的難度也會加倍，但時常因為各種莫名其妙的需求跟插件，就讓人覺得到底在流程上出了什麼問題，為什麼各種插件跟需求變動那麼多，導致大家常常為了 wordaround 而寫出一些令人不悅的程式碼。</p><p>我能夠理解插件的必要性，尤其是在這種那麼多人合作的狀況下，但沒有完善的配套措施的話，就是讓工程師做不必要的加班而已。配套措施像是，讓 PM 評估插件的重要性之後再實際排入；在評估需求的時候就先保留部分的 story points 給插件；提前告知相關團隊部分需求會延後上線等等。</p><p>在架構逐漸完整之後，任何不合理的小改動，都可能造成巨大的維護成本，往往是無法用增加人手的方式來解決的。</p><p>每個禮拜四的早上是固定的需求會議，不知道為什麼總是會有人遲到。但似乎沒什麼人想要檢討為什麼大家禮拜四早上會遲到。</p><h3 id="開會"><a href="#開會" class="headerlink" title="開會"></a>開會</h3><p>我不知道是第一間公司的做法與眾不同還是這其實是常態，常常實際開會的時間都會遠大於表訂的時間。</p><p>這完全不是一個好徵兆，表示從頭到尾根本沒有評估好開會的時間以及要討論的事情。從開會的方式就能知道一間公司是怎麼對待時間這件事的。曾經提過幾次希望會議可以準時結束，但得到的答案都是我們會努力往這個目標邁進。</p><p>在第一間公司的做法是一旦訂好時間，就必須在那個時間點出現在會議室當中，並且時間一到，主持人就要結束會議，並且公布會議記錄給與會人員或制定相關的 follow up。</p><p>再來是會議的目標，除非這是一個發散，需要大家 brain storming 的會議，不然如果沒有一個精確的目標（確定 app 某頁面的規格、訂出下禮拜的需求），很容易變成各說各話、失焦，最後演變成一大堆無用的會議。</p><p>同時我覺得最重要的就是，時常問自己：「為什麼我要參加這個會議？」，當你得不出答案，很大部分代表這個會議其實不需要你。</p><h3 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h3><p>最近公司發生了很多事，剛開始原本以為都是好玩的嘗試，直到事情越來越不單純，手段越來越拙劣，需求越來越粗糙，我才逐漸明白原來徹底失望是這種感覺。</p><p>在公司裡頭有很多希望改善各種需求的聲音，或者當主管看到不合理的事情時也會試著跟上層溝通。但已經好多次都沒有得到結果，或是擺出一種我會聽你說，但其實什麼都沒有聽進去的嘴臉。</p><p>後來公司的人越來越多，組織當然也越來越混亂。我知道為了應付業務成長可能需要更多的人手，但這成長的速度實在到了令人無法置信的地步。尤其是在我的便當曾經被偷拿走過 4 次，以及某次事件中大家的發言，讓我對這家公司的某些價值觀實在不敢苟同。</p><p>工作仍然很有挑戰，身邊的同事們也是實力跟品格兼具的好夥伴。但這難道是我想要的工作嗎？這真的是一種理想的開發方式嗎？</p><p>我不知道這個選擇對不對，但我決定選擇內心的聲音。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;其實這 12 個月算是意外撿到的，因為大學時期在實習時，沒有把學業跟工作的時間分配好，導致當時的必修被當得一塌糊塗，再來是因為沒有在時間內處
      
    
    </summary>
    
      <category term="雜談" scheme="http://kjj6198.github.io/categories/%E9%9B%9C%E8%AB%87/"/>
    
    
  </entry>
  
  <entry>
    <title>【golang 筆記】 如何為你的專案設定環境變數</title>
    <link href="http://kjj6198.github.io/2018/09/03/golang-env-variable/"/>
    <id>http://kjj6198.github.io/2018/09/03/golang-env-variable/</id>
    <published>2018-09-03T15:02:53.000Z</published>
    <updated>2018-09-03T15:24:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在開發專案的時候常常需要切換不同的環境，也因此我們通常會設定不同的環境變數。不過如果直接寫死在程式當中每次修改起來實在太麻煩了，如果可以透過動態的方式傳入環境變數的話可以減少很多不必要的修改，程式也相對比較乾淨。</p><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><p>一般在 golang 可以利用 <a href="https://golang.org/pkg/flag/" target="_blank" rel="noopener">flag</a> 這個 package 做到類似的效果，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> env <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> accessToken <span class="keyword">string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;    </span><br><span class="line">    flag.StringVar(&amp;env, <span class="string">'ENV'</span>, <span class="string">'development'</span>, <span class="string">'your current env'</span>)</span><br><span class="line">    flag.StringVar(&amp;accessToken, <span class="string">'ACCESS_TOKEN'</span>, <span class="string">'xxx-oo-ooo'</span>, <span class="string">'your API access token'</span>)</span><br><span class="line">    flag.Parse()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// start your application</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者也可以參考<a href="http://www.evanlin.com/go-build-config-ldflags" target="_blank" rel="noopener">這篇文章</a>中提到的方式，用 <code>go build -ldflag</code> 在 compile time 設定變數。</p><p>雖然這樣的確不用寫死值在程式裡頭，但變數仍然要事先定義好。</p><h2 id="透過-YAML-載入"><a href="#透過-YAML-載入" class="headerlink" title="透過 YAML 載入"></a>透過 YAML 載入</h2><p>為了解決上述問題，我們可以透過 yaml（或者你喜歡的 format）來統一管理環境變數。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoadEnv</span><span class="params">(filename <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    file, err := ioutil.ReadFile(filename)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// 在 production，我們可能會直接用 console 設定環境變數</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> config := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">    yaml.Unmarshal(file, &amp;config)</span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> config &#123;</span><br><span class="line">os.Setenv(k, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>將 yaml 裡的變數載入後，在統一用 <code>os.Setenv(k, v)</code> 存入，這樣一來在 local 的環境下就可以很容易地調整變數，記得要把設定當給 ignore 掉，不然如果變數裡頭有敏感資料，又剛好是 public 的 repo 就會被看光光了。</p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>我寫了一個相當簡單的 <a href="https://github.com/kjj6198/configo" target="_blank" rel="noopener">repo</a> 來做這件事，如果在開發上真的有需要的話再持續優化他吧XD</p><a class="fetch-card" href="https://github.com/kjj6198/configo" target="_balnk" ref="nofollow noreferrer">      <div class="info">        <h2>kjj6198/configo</h2>        <p class="content">simple util to inject variable into env variable. Contribute to kjj6198/configo development by creating an account on GitHub.</p>        <span>https://github.com/kjj6198/configo</span>      </div>      <div class="img" style="background-image: url(https://avatars0.githubusercontent.com/u/6581081?s=400&v=4)">      </div></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在開發專案的時候常常需要切換不同的環境，也因此我們通常會設定不同的環境變數。不過如果直接寫死在程式當中每次修改起來實在太麻煩了，如果可以透過
      
    
    </summary>
    
      <category term="golang" scheme="http://kjj6198.github.io/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>瓢蟲 - 伊坂殺手系列第二作</title>
    <link href="http://kjj6198.github.io/2018/08/29/isaka-killer/"/>
    <id>http://kjj6198.github.io/2018/08/29/isaka-killer/</id>
    <published>2018-08-28T16:24:39.000Z</published>
    <updated>2018-08-28T16:31:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://im1.book.com.tw/image/getImage?i=http://www.books.com.tw/img/001/056/68/0010566887.jpg&amp;v=50b3657d&amp;w=348&amp;h=348" alt="瓢蟲"></p><p>我很喜歡伊坂的殺手系列小說。他筆下的殺手並不是絕對的壞、絕對的無情，也不是像一般設定那樣因為遭受過某種重大打擊，對這個世界感到絕望憤而成為殺手。</p><p>伊坂筆下的殺手跟平凡人相同，就如同「上班族」一樣，大家都是為了討生活而工作著。當然這在現實中絕對是不正確啦！不過搬移到小說之後，這樣的殺手並不會造成道德上的擔憂還有讀者心裡的陰影，反而在劇情主軸的進行中，看見了許多人生的歡笑與哀愁。</p><p>伊坂的小說喜歡創造一個天馬行空的設定和奇怪的書名，卻又能夠在故事結尾將這些八字沒一撇的關係緊密結合。</p><p>這次的事件發生在列車上，一連串的殺手相遇，各種背景的人們因為不同的原因、委託而聚在一起，形成一種令人哭笑不得的場面。</p><p>伊坂並不會讓殺人事件只是殺人而已，比起殺人手法、邏輯推理，伊坂更喜歡用「心境」、「道理」來敘述整個故事，這就是他特有的「碎碎念功夫」。</p><p>一起來看看伊坂筆下的殺手吧！ </p><h2 id="水果二人組"><a href="#水果二人組" class="headerlink" title="水果二人組"></a>水果二人組</h2><p>雖然書名是取自那位瓢蟲殺手，但我對「水果二人組」兩人的形象印象比較深刻呢！（後面兩個人都掛了還真是可惜…）</p><p>看他們兩個人對話，「咦？這不就是朋友之間的閒談嗎？」幾句無厘頭的話語、互相調侃的笑語，卻會不約而同地在面對危機時，展現出濃厚的默契。</p><p>就像是故事尾聲中，蜜柑在檸檬的包包中發現了一本自己一直推薦給他，他卻總是找各種理由推辭的小說；還有蜜柑雖然總是說著記不起來小火車的名字，卻在最後發現了檸檬留下的死後訊息，也知道檸檬平時喜歡的小火車的個性。</p><p>其實朋友不就是這樣，默默地記住對方的喜好，嘴巴上卻又不饒人，裝作不在乎一樣。就像蜜柑在檸檬死後才發現那本沒看完的小說，就像檸檬留下的死後訊息被蜜柑發現一樣，兩個人已經沒有機會表達對朋友的感情了。</p><blockquote><p>雖然只是平凡的小事，但為了朋友而付出的感情，是一輩子都忘不了的真實</p></blockquote><p>我很喜歡他們不言自明的默契，還有彼此之間深厚的信賴感。這是我自己的詮釋，或許每個人都對這二人組有不同的看法就是了。</p><p>還有裡面有很多橋段出現的<a href="http://zh.wikipedia.org/wiki/%E7%81%AB%E8%BB%8A%E9%A0%AD%E6%97%A5%E8%A8%98" target="_blank" rel="noopener">湯瑪士小火車</a>。不得不說這個卡通真的是太經典了。</p><p>這部卡通是艾屈萊牧師依照自己的經歷寫成了故事書，最後再翻拍成動畫卡通。這個卡通是許多90年代後的人童年必備電視節目之一，每次播放時間一到，就會準時打開電視收看，當時可是蒐集了很多火車頭哦！！！！！！！！！！！（不過現在都丟掉了，換我弟在蒐集哈哈）</p><p>喜歡湯瑪士的努力、胖總管的堅定和嚴格的管理、高登的善良熱心……，每次看到壞火車出現（通常冒黑煙的就是了）就覺得很氣憤，幸好故事都是好人打敗壞人的劇情。</p><p>伊坂還真是厲害，事前的蒐集資料做得很充足，竟然研究了那麼多火車頭的個性，進而創造出一個湯瑪士迷的角色，把火車頭的個性完美揉合在故事當中，從主角的口中配合著劇情娓娓道出。 </p><h2 id="瓢蟲"><a href="#瓢蟲" class="headerlink" title="瓢蟲"></a>瓢蟲</h2><p>瓢蟲的英文叫作「ladybirds」、「ladybugs」，所謂的 lady 就是聖母瑪利亞。為什麼會有這樣的由來呢？是因為傳說中聖母瑪利亞於人間所受到的「七苦」，瓢蟲的翅膀上那七個斑點，彷彿承受著瑪利亞的七苦般。</p><p>而這位殺手「七尾」正符合了這樣的取名。似乎把人間所有的疾苦都吸收過來了，不管做什麼事都一定會衰到極點。看到這裡也不得不佩服伊坂的功力，竟然將書名如此巧妙地連結起來。</p><p>七尾的「衰」，不僅為小說創造出許多歡樂，也讓故事多了一份綺麗的幻想，「好吧！那就當作是在承受瑪利亞的七苦好了。」</p><p>但更令我印象深刻的是，就算執行任務中，再怎麼不順利、再怎麼衰運上身，他仍會一件一件處理好眼前的變故和突如其來的危機。就如同瓢蟲背著七苦而飛，「七尾」在無奈調侃自己的不幸中，也會默默地把交代的事情處理好。 </p><h2 id="那位討人厭的國中生"><a href="#那位討人厭的國中生" class="headerlink" title="那位討人厭的國中生"></a>那位討人厭的國中生</h2><p>那位國中生，我邊看邊在心中暗罵：「這個小屁孩到底什麼時候才要死？」。</p><p>他屬於標準的自以為念過很多書，就用書中的知識恃才傲物，為所欲為的假高材生。</p><p>其實，在叛逆的青春時期，誰不會自我意識過剩呢？想要對這個世界說些什麼，用自己的價值觀生活。長大之後才猛然省悟，原來當初自己傻得可以。</p><h2 id="人是會迎合其他人的動物"><a href="#人是會迎合其他人的動物" class="headerlink" title="人是會迎合其他人的動物"></a>人是會迎合其他人的動物</h2><p>當人類出重大決策時，往往會參考群眾的反應，而非出於自己的判斷。所謂的群眾效應正是如此。這並不是缺陷，在大部分的情況下，人們可以從不熟悉的環境中迅速掌握資訊、情報，以便做出相對應的行為。</p><p>但我們要思考的是，我們是否讓這樣的行為模式控制了我們呢？如果不去思考、只順應著現況改變的話，總有一天是要吃虧的對吧！</p><p>所以那位國中生雖然氣焰囂張，卻仍然順利地控制人心。只要理解這些淺規則，人們就會在不知不覺中被巨大的力量給操控。</p><h2 id="他真的那麼厲害嗎？還是只是大家聽信傳聞罷了"><a href="#他真的那麼厲害嗎？還是只是大家聽信傳聞罷了" class="headerlink" title="他真的那麼厲害嗎？還是只是大家聽信傳聞罷了"></a>他真的那麼厲害嗎？還是只是大家聽信傳聞罷了</h2><p>類似的談話一定常常出現在日常生活中吧！「這門課超容易過的！！」「聽說那個老師很嚴格。」，然後就這樣口耳相傳，最後大家只依照傳聞中的狀況來選課而不是內心真正想要的。那麼，大學的自由、大學的自主學習，不就在這樣的謠言中被摧毀了嗎？別人說的話可以聽，但不要太相信。</p><h2 id="結尾"><a href="#結尾" class="headerlink" title="結尾"></a>結尾</h2><p>伊坂的厲害之處，在於他並不會只是單純描述劇情而已，還會將社會現象、人心做連結，在角色對話中顯現出來。這方面他也做了不少功課，恐懼、群眾行為、墨菲定律、國家……，伊坂把這樣沈重的話題搬到小說裡，卻顯得相對輕鬆，讓我們在這樣的氣氛中思考：啊！原來以前也有發生過類似的事情，我都是這樣的想法。</p><h3 id="延伸閱讀：（參考書目）"><a href="#延伸閱讀：（參考書目）" class="headerlink" title="延伸閱讀：（參考書目）"></a>延伸閱讀：（參考書目）</h3><ul><li><a href="http://www.books.com.tw/products/0010370922" target="_blank" rel="noopener">群眾是可以掌握的：《隱藏的邏輯，掌握群眾行為的不敗模式》</a></li><li><a href="http://zh.wikipedia.org/wiki/%E5%8D%A2%E6%97%BA%E8%BE%BE%E5%A4%A7%E5%B1%A0%E6%9D%80" target="_blank" rel="noopener">盧安達大屠殺</a></li><li><a href="http://www.books.com.tw/products/0010444397" target="_blank" rel="noopener">你真的理解風險嗎？《販賣恐懼：脫軌的風險判斷》</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://im1.book.com.tw/image/getImage?i=http://www.books.com.tw/img/001/056/68/0010566887.jpg&amp;amp;v=50b3657d&amp;amp;w=348&amp;amp;h=34
      
    
    </summary>
    
      <category term="讀書心得" scheme="http://kjj6198.github.io/categories/%E8%AE%80%E6%9B%B8%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="伊坂幸太郎" scheme="http://kjj6198.github.io/tags/%E4%BC%8A%E5%9D%82%E5%B9%B8%E5%A4%AA%E9%83%8E/"/>
    
  </entry>
  
  <entry>
    <title>透過 vuex 與 webpack dynamic import 動態載入 module</title>
    <link href="http://kjj6198.github.io/2018/08/20/vuex-dynamic-import/"/>
    <id>http://kjj6198.github.io/2018/08/20/vuex-dynamic-import/</id>
    <published>2018-08-19T16:00:00.000Z</published>
    <updated>2018-08-29T12:34:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>在最近的專案中用到 vue 來開發，而如果要管理比較複雜的資料流貨狀態，通常都是用 vuex 來當作 Single Truth of Source 的 store。在 vue 裡頭建立 store 時，都是把所有的 module 寫完後，再統一放到 vue 的 root 當中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    profile,</span><br><span class="line">    users,</span><br><span class="line">    menus,</span><br><span class="line">    list,</span><br><span class="line">    food,</span><br><span class="line">    product,</span><br><span class="line">    todo,</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>這在一般的中小型專案中沒有什麼問題，不過一旦專案的架構變得越來越大，很容易讓 store 的資料結構變得越來越大且越來越複雜。而且 module 裡頭的 action, mutations 一多，難免會增加不少不必要的 bundle size，也不是所有的 module 都是在 app 初始化之後就要馬上使用到。關於這點 vue 透過了 webpack 的 dynamic import 機制<a href="https://vuejs.org/v2/guide/components-dynamic-async.html#Async-Components" target="_blank" rel="noopener">動態載入 component</a>。</p><p>在 vuex 當中則可以透過 <code>store.registerModule</code> 的方式在有需要的時候才將 module 放進 store，有了這個 API，我們也可以搭配 webpack dynamic import 的機制來減少 bundle size，並且盡可能地讓所有的操作變得簡單，在 app 初始化的時候，我們也只需要放入必要的 module 即可。</p><p>今天就來跟大家介紹如何透過 webpack dynamic import 的機制做到動態載入 module。</p><h2 id="Webpack-Dynamic-Import"><a href="#Webpack-Dynamic-Import" class="headerlink" title="Webpack Dynamic Import"></a><a href="https://webpack.js.org/guides/code-splitting/#dynamic-imports" target="_blank" rel="noopener">Webpack Dynamic Import</a></h2><p>在開始之前，我們先來講講 webpack dynamic import 的機制。一般而言在 webpack 要做到 code splitting 的方法有</p><ul><li>設定多個 entry </li><li>透過 SplitChunks 這個 plugin 來拆分出不同的 chunk</li><li><strong>透過 dynamic import 的機制引入程式碼</strong></li></ul><p>如果我們要在 component 當中動態引入對應的 module 的話，最方便的方法應該是透過 dynamic import 的機制。它能夠讓 <code>import()</code> 變成一個 return Promise 的函數，在 webpack build 的時候，會自動把這些檔案拆分出來變成其他 chunks，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "CreateMenu" */</span> <span class="string">'./pages/NewMenu.js'</span>),</span><br></pre></td></tr></table></figure><p>在 webpack build 的時候會把 <code>CreateMenu.js</code> 拆出來變成一個 chunk。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Version: webpack 4.16.3</span><br><span class="line">Time: 112ms</span><br><span class="line">Built at: 2018-08-20 14:49:40</span><br><span class="line">                                   Asset       Size                        Chunks             Chunk Names</span><br><span class="line">                     Profile.c943bf21.js   32.7 KiB                       Profile  [emitted]  Profile</span><br></pre></td></tr></table></figure><p>官方提供了撰寫 comment 的方式來決定 chunk name，在 debug 的時候比較清楚目前引入的是哪個 chunk。</p><p><em>要搭配這個機制需要額外設定 babel 的 plugin <a href="https://babeljs.io/docs/plugins/syntax-dynamic-import/#installation" target="_blank" rel="noopener">Syntax Dynamic Import Babel Plugin</a>。</em></p><p>知道了 webpack dynamic import 的使用方式後，我們來整合一下 vuex。</p><h2 id="引入時機"><a href="#引入時機" class="headerlink" title="引入時機"></a>引入時機</h2><p>要透過動態引入 module 的方式，勢必要考慮幾個問題：</p><ul><li>在什麼時候引入 module？</li><li>如果發生錯誤導致無法載入該如何處理？</li></ul><h3 id="什麼時候引入-module？"><a href="#什麼時候引入-module？" class="headerlink" title="什麼時候引入 module？"></a>什麼時候引入 module？</h3><p>當 component 可能需要 store 的狀態時載入（廢話）。所以我們可以這樣寫：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// component.vue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        <span class="keyword">import</span>(<span class="string">'./modules/menus'</span>).then(<span class="function"><span class="params">menus</span> =&gt;</span> <span class="keyword">this</span>.$store.registerModule(<span class="string">'menus'</span>, menus.default));</span><br><span class="line">    &#125;,</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="comment">// your template</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起來很單純，不過很快就會遇到幾個問題：</p><ul><li>如果在 render 的時候還沒有載入完成，那麽當 template 當中取用 <code>menus</code> 的資料時，會因為 undefined 而整個爆炸</li><li>如果在其他 component 已經載入過了，也會有錯誤 <code>duplicate getter key: menus</code></li></ul><p>為了修正以上的問題，我們稍微修改一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// component.vue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">       loaded: <span class="literal">false</span> </span><br><span class="line">    &#125;),</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.$store.state.menus) &#123;</span><br><span class="line">            <span class="keyword">import</span>(<span class="string">'./modules/menus'</span>).then(<span class="function"><span class="params">menus</span> =&gt;</span> &#123;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">this</span>.$store.registerModule(<span class="string">'menus'</span>, menus.default);</span><br><span class="line">                <span class="keyword">this</span>.loaded = <span class="literal">true</span>;</span><br><span class="line">            &#125;);            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.loaded = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> loaded ? h() : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看其來確實好多了，不過在每個需要 store 資料的 component 當中都做重複的事難免有些麻煩，我們把它拆出來變成一個通用的 HOC component。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">export default function createMenuModule(Component, moduleName, dynamicModule) &#123;</span><br><span class="line">  return Vue.component(`dynamicModule-$&#123;Component.name || &apos;Component&apos;&#125;`, &#123;</span><br><span class="line">    data: () =&gt; (&#123;</span><br><span class="line">      isLoaded: false,</span><br><span class="line">    &#125;),</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      if (this.$store.state[moduleName]) &#123;</span><br><span class="line">      dynamicModule</span><br><span class="line">      .then(module =&gt; this.$store.registerModule(moduleName, module.default)) // register module into store      </span><br><span class="line">  &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    render(h) &#123;</span><br><span class="line">      return this.isLoaded ? (</span><br><span class="line">&lt;Component &#123;...this.$props&#125; /&gt;</span><br><span class="line">      ) : null;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// MenuList.js</span><br><span class="line">export default createModule(MenuList, import(/* webpackChunkName: Menus */ &apos;./modules/menus&apos;)); // return a higher order vue component</span><br></pre></td></tr></table></figure><p>這樣子一來，就可以安心地在有需要的時候引入對應的 module，而在 component 當中不需要每次都處理惱人的載入邏輯與處理。當然你也可以修改一下參數，讓這個 function 可以接收多個 module。當然要考慮的事情又變多了（怎麼做 module name mapping、多個 promise 處理等），但概念是類似的。</p><h3 id="有需要時再載入"><a href="#有需要時再載入" class="headerlink" title="有需要時再載入"></a>有需要時再載入</h3><p>剛剛的範例中解決了我們前面提到的問題，不過仔細一看可以發現，如果我們直接將 <code>import()</code> 寫在參數裡頭，好像不管怎樣都一定會發送請求耶！如果<strong>可以先查看 store 裡頭有沒有對應的資料再決定要不要載入呢？</strong>。</p><p>所以我們接下來要再修改一下函數，讓 store 可以當作參數傳遞。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">createMenuModule</span>(<span class="params">Component, moduleName, loader = (</span>) =&gt; <span class="title">Promise</span>.<span class="title">resolve</span>(<span class="params"></span>)) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Vue.component(<span class="string">`dynamicModule-<span class="subst">$&#123;Component.name || <span class="string">'Component'</span>&#125;</span>`</span>, &#123;</span><br><span class="line">    data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      isLoaded: <span class="literal">false</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.$store.state[moduleName]) &#123;</span><br><span class="line">loader()</span><br><span class="line">      .then(<span class="function"><span class="params">module</span> =&gt;</span> <span class="keyword">this</span>.$store.registerModule(moduleName, <span class="built_in">module</span>.default)) <span class="comment">// register module into store      </span></span><br><span class="line">  &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    render(h) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.isLoaded ? (</span><br><span class="line">&lt;Component &#123;...this.$props&#125; /&gt;</span><br><span class="line">      ) : <span class="literal">null</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MenuList.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createModule(MenuList, <span class="string">'menus'</span>, &#123;</span><br><span class="line">  loader: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./modules/menus'</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>把最後一個參數當作 function 傳入就好了，當然也可以在 loader 上做更多處理（error handling, error logging, GA…），讓整個 component 更加穩固。如果要做得更仔細一點，第三個參數也可以傳入像是 timeout, LoadingComponent 的機制，讓這個 higher order function 更加實用。（不過大部分的情況下都是希望 module 越快載入越好）</p><h2 id="錯誤處理"><a href="#錯誤處理" class="headerlink" title="錯誤處理"></a>錯誤處理</h2><p>雖然我們希望 promise 順利載入，天下太平。但實際上有太多因素會影響 module 的載入。大部分是網路不穩或中途離線等等，因此我們需要一個錯誤處理機制。</p><p>在 mounted 的時候我們可以利用 catch 來處理錯誤，並且設定一個新的 data 來記錄 error 的資訊。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">createMenuModule</span>(<span class="params">Component, moduleName, loader = (</span>) =&gt; <span class="title">Promise</span>.<span class="title">resolve</span>(<span class="params"></span>)) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Vue.component(<span class="string">`DynamicModule-<span class="subst">$&#123;Component.name || <span class="string">'Component'</span>&#125;</span>`</span>, &#123;</span><br><span class="line">    data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      isLoaded: <span class="literal">false</span>,</span><br><span class="line">      error: <span class="literal">null</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.$store.state[moduleName]) &#123;</span><br><span class="line">loader()</span><br><span class="line">      .then(<span class="function"><span class="params">module</span> =&gt;</span> <span class="keyword">this</span>.$store.registerModule(moduleName, <span class="built_in">module</span>.default)) <span class="comment">// register module into store</span></span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.error = err</span><br><span class="line">            sendToLoggingService(err);</span><br><span class="line">        &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    render(h) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.error) &#123;</span><br><span class="line">        <span class="keyword">return</span> h(<span class="string">'pre'</span>, <span class="keyword">this</span>.error);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.isLoaded ? (</span><br><span class="line">&lt;Component &#123;...this.$props&#125; /&gt;</span><br><span class="line">      ) : <span class="literal">null</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MenuList.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createModule(MenuList, <span class="string">'menus'</span>, &#123;</span><br><span class="line">  loader: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./modules/menus'</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>當然也可以善用 vue 的 errorCaptured，或是實作一個 <code>ErrorBoundary</code> 元件來記錄這些資訊。</p><h2 id="什麼時候要-unregister"><a href="#什麼時候要-unregister" class="headerlink" title="什麼時候要 unregister"></a>什麼時候要 unregister</h2><p>什麼時候要  unregister 呢？在前半段當中我們處理了載入的部分，但卸載的話並無法直接在 component unmount 實作，因為我們並不知道是否有其他元件有存取 store 的資料，所以除非是相當確信只會有單一元件使用，不然不要隨意 unregisterModule。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>在 react 當中沒有那麼方便，不過有 <a href="https://github.com/jamiebuilds/react-loadable" target="_blank" rel="noopener">react-loadable</a> 可以用。但 redux 沒有類似 registerReducer 的 API，必須自己實作。如果有使用像是 redux-observable 或是 redux-saga（動態載入 epic 或是 saga） 的話，也可以透過類似的方式實作。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>比起 react 與 redux，vue 的生態系當中對非同步載入的支援更好（更容易實作）。當然引入這樣的機制難免會提高 debug 的複雜度，雖然有效減少了 bundle size。但也要搭配各種機制才能讓整個 app 運行的更加穩固。</p><p>本文試著提出在動態載入時可能遇到的問題以及解決方式，希望可以幫助到正為 bundle size 所苦的開發者們。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在最近的專案中用到 vue 來開發，而如果要管理比較複雜的資料流貨狀態，通常都是用 vuex 來當作 Single Truth of Source 的 store。在 vue 裡頭建立 store 時，都是把所有的 module 寫完後，再統一放到 vue 的 root 當
      
    
    </summary>
    
      <category term="前端" scheme="http://kjj6198.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="http://kjj6198.github.io/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="webpack" scheme="http://kjj6198.github.io/tags/webpack/"/>
    
      <category term="vuex" scheme="http://kjj6198.github.io/tags/vuex/"/>
    
      <category term="vue" scheme="http://kjj6198.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>make 與 new 的差別</title>
    <link href="http://kjj6198.github.io/2018/08/15/golang-make-and-new/"/>
    <id>http://kjj6198.github.io/2018/08/15/golang-make-and-new/</id>
    <published>2018-08-15T10:00:00.000Z</published>
    <updated>2018-08-17T15:48:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 golang 有兩個保留字 <code>make</code> 與 <code>new</code>，也是剛開始學習 golang 的時候容易搞混的地方，這邊做個簡單的筆記。</p><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><p>new 可以用來初始化泛型，<strong>並且返回儲存位址</strong>。所以通常我們會用指標變數來接 <code>new</code> 過後的型別。特別要注意的是，new 會自動用 zeroed value 來初始化型別，也就是字串會是<code>&quot;&quot;</code>，number 會是 <code>0</code>，channel, func, map, slice 等等則會是 <code>nil</code>。</p><p>因為這個特性，如果我們對 map 做以下的操作的話，會出現 <code>panic: assignment to entry in nil map</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">people := <span class="built_in">new</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">p := *people</span><br><span class="line">p[<span class="string">"name"</span>] = <span class="string">"Kalan"</span> <span class="comment">// panic: assignment to entry in nil map</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因為初始化的 map 會是 nil map，不像其他的 primitive type 一樣有預設值。</p><p>如果用 <code>struct</code> 做初始化，也可以直接用 <code>&amp;</code> 代表指向的位址，下面兩個寫法效果是一樣的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := &amp;Person&#123;&#125;</span><br><span class="line">    p := <span class="built_in">new</span>(Person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好處是上面的 <code>Person</code> 也可以根據自己想要傳入的值額外再做設定，但 new 則是全部的 field 都會直接塞 zeroed value。</p><h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><p><code>make</code> 與 <code>new</code> 不同，是用來初始化一些特別的型別，像是 channel, map, slice 等等。另外特別要注意的是 <strong>make 並不會回傳指標</strong>，如果要拿到指標，就要考慮用像是 new 的方式來初始化型別。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    receiver := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>) <span class="comment">// 初始化 channel，但不回傳指標</span></span><br><span class="line">    person := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">    people := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">100</span>) <span class="comment">// 初始化長度為 100 的字串陣列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>還是要再度強調一次，<strong>make 不會回傳指標！</strong>下面這段程式碼會噴錯：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">person := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">fmt.Println(*person) <span class="comment">// invalid indirect of person</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p><code>make</code> 與 <code>new</code> 在剛開始學習 golang 時容易搞混，有時參數要傳入指標時也會一不小心就用 make 來傳，這時候知道這兩者的區別就相當重要。</p><h4 id="更多閱讀"><a href="#更多閱讀" class="headerlink" title="更多閱讀"></a>更多閱讀</h4><ul><li><a href="https://golang.org/doc/effective_go.html#allocation_make" target="_blank" rel="noopener">https://golang.org/doc/effective_go.html#allocation_make</a></li><li><a href="https://golang.org/doc/effective_go.html#allocation_new" target="_blank" rel="noopener">https://golang.org/doc/effective_go.html#allocation_new</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 golang 有兩個保留字 &lt;code&gt;make&lt;/code&gt; 與 &lt;code&gt;new&lt;/code&gt;，也是剛開始學習 golang 的時候容易搞混的地方，這邊做個簡單的筆記。&lt;/p&gt;
&lt;h2 id=&quot;new&quot;&gt;&lt;a href=&quot;#new&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="golang" scheme="http://kjj6198.github.io/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>再談生日悖論（Birthday Paradox）</title>
    <link href="http://kjj6198.github.io/2018/05/02/birthday-paradox/"/>
    <id>http://kjj6198.github.io/2018/05/02/birthday-paradox/</id>
    <published>2018-05-01T16:00:00.000Z</published>
    <updated>2018-05-09T15:54:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>生日悖論是個剛開始上統計學時，老師很喜歡拿來唬弄學生的招式。通常老師會徐徐從錢包拿出 100 元，並且問學生，在教室中有沒有兩個人同一天生日？</p><p>直覺上，我們可能會以為機率很低。不過事實上只要超過 23 人，2 人同一天生日的機率就有 50% 以上。</p><p>一部分的原因是我們將問題「其中兩人同一天生日」與「其中有人跟你同一天生日」聯想在一起，但兩者的機率是完全不一樣的。</p><p>「其中有人跟自己同一天生日」的機率為 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>1</mn></mrow><mrow><mn>3</mn><mn>6</mn><mn>5</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{365}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.845108em;"></span><span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">5</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>，不過「其中兩人同一天生日」的話因為範圍變廣了，機率自然也會增加。不過仍然有些違反直覺，照理來說，應該是呈現線性成長的才對吧？但事實上只要超過某個值，這個機率就會快速上升，我們下面會談到。</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="補集"><a href="#補集" class="headerlink" title="補集"></a>補集</h3><p>我們可以透過補集的方式來計算至少有兩人同一天生日的機率，也就是用 1 減去所有人生日都不相同的機率。那麼要怎麼計算呢？我們先來想想兩個人生日不同的機率：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>3</mn><mn>6</mn><mn>5</mn></mrow><mrow><mn>3</mn><mn>6</mn><mn>5</mn></mrow></mfrac><mo>×</mo><mfrac><mrow><mn>3</mn><mn>6</mn><mn>4</mn></mrow><mrow><mn>3</mn><mn>6</mn><mn>5</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{365}{365}\times\frac{364}{365}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.845108em;"></span><span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">5</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">5</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">×</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">5</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">4</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>（第一個人有 365 天可以選，第二個人則是 364 天）；接下來在想想三個人生日不同的機率 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>3</mn><mn>6</mn><mn>5</mn></mrow><mrow><mn>3</mn><mn>6</mn><mn>5</mn></mrow></mfrac><mo>×</mo><mfrac><mrow><mn>3</mn><mn>6</mn><mn>4</mn></mrow><mrow><mn>3</mn><mn>6</mn><mn>5</mn></mrow></mfrac><mo>×</mo><mfrac><mrow><mn>3</mn><mn>6</mn><mn>3</mn></mrow><mrow><mn>3</mn><mn>6</mn><mn>5</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{365}{365}\times\frac{364}{365}\times\frac{363}{365}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.845108em;"></span><span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">5</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">5</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">×</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">5</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">4</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">×</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">5</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">3</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>。看出來了嗎？如果有 n 個人，則機率為<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>3</mn><mn>6</mn><mn>5</mn></mrow><mrow><mn>3</mn><mn>6</mn><mn>5</mn></mrow></mfrac><mo>×</mo><mfrac><mrow><mn>3</mn><mn>6</mn><mn>4</mn></mrow><mrow><mn>3</mn><mn>6</mn><mn>5</mn></mrow></mfrac><mo>×</mo><mfrac><mrow><mn>3</mn><mn>6</mn><mn>3</mn></mrow><mrow><mn>3</mn><mn>6</mn><mn>5</mn></mrow></mfrac><mo>×</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mrow><mn>3</mn><mn>6</mn><mn>5</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{365}{365}\times\frac{364}{365}\times\frac{363}{365}\times...\frac{n-1}{365}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.845108em;"></span><span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">5</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">5</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">×</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">5</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">4</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">×</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">5</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">3</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">×</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">5</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p><p>所以我們要求算的機率為：<br><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>=</mo><mn>1</mn><mo>−</mo><mo>(</mo><mfrac><mrow><mn>3</mn><mn>6</mn><mn>4</mn></mrow><mrow><mn>3</mn><mn>6</mn><mn>5</mn></mrow></mfrac><mo>×</mo><mfrac><mrow><mn>3</mn><mn>6</mn><mn>3</mn></mrow><mrow><mn>3</mn><mn>6</mn><mn>5</mn></mrow></mfrac><mo>×</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mrow><mn>3</mn><mn>6</mn><mn>5</mn></mrow></mfrac><mo>)</mo><mo>≥</mo><mn>0</mn><mi mathvariant="normal">.</mi><mn>5</mn></mrow><annotation encoding="application/x-tex">P=1-(\frac{364}{365}\times\frac{363}{365}\times...\frac{n-1}{365}) \geq 0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.845108em;"></span><span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mrel">=</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mopen">(</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">5</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">4</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">×</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">5</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">3</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">×</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">3</span><span class="mord mathrm">6</span><span class="mord mathrm">5</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">)</span><span class="mrel">≥</span><span class="mord mathrm">0</span><span class="mord mathrm">.</span><span class="mord mathrm">5</span></span></span></span><br>化簡一下：</p><p><img src="https://d2rkn6fj2nuekp.cloudfront.net/blog/WCM0004.png" alt="WCM0004"></p><p>我們可以利用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>+</mo><mi>x</mi><mo>&lt;</mo><msup><mi>e</mi><mrow><mi>x</mi></mrow></msup></mrow><annotation encoding="application/x-tex">1+x\lt e^{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.664392em;"></span><span class="strut bottom" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mbin">+</span><span class="mord mathit">x</span><span class="mrel">&lt;</span><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>的特性，進一步修改不等式：</p><p><img src="https://d2rkn6fj2nuekp.cloudfront.net/blog/WCM0003.png" alt="WCM0003"></p><p>從這邊可以觀察到，因為可以用自然指數來逼近，所以機率的成長也會隨著人數的增長而呈現指數變化。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>很多時候我們學習數學常常會被公式跟奇形怪狀的題目耍得團團轉，卻一直沒有思考公式背後真正的含義、如何證明出來的，或者更重要的，學這些數學到底是為了解決什麼問題？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;生日悖論是個剛開始上統計學時，老師很喜歡拿來唬弄學生的招式。通常老師會徐徐從錢包拿出 100 元，並且問學生，在教室中有沒有兩個人同一天生日
      
    
    </summary>
    
      <category term="雜談" scheme="http://kjj6198.github.io/categories/%E9%9B%9C%E8%AB%87/"/>
    
    
  </entry>
  
  <entry>
    <title>2017 年度總結</title>
    <link href="http://kjj6198.github.io/2018/01/01/2017-yearly-review/"/>
    <id>http://kjj6198.github.io/2018/01/01/2017-yearly-review/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2018-05-05T16:49:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>哈囉大家，2018 新年快樂 🎉。</p><p>昨天和女友選擇過一個很平凡的跨年，早上各自做彼此的事，晚上在家裡開伙吃飯，再一起跑步，最後一邊寫程式一邊看紅白，結束了 2017 年的最後一天。</p><p>每年年底都會試著回想以前做過的事，但如果沒有加以記錄，好像只能浮現一些零碎的片段 或是不完整的訊息，今年開始做了很多統計，試著記錄每筆開銷、統計自己寫的文章、Github contribution、睡覺時數等等。雖然這些事情看起來的確就像流水帳，但是在年底統計時，這些資料就能夠發揮用處。</p><p>有鑑於此，在昨天試著把一些整理到的資料彙整成網頁，結果發現一天要把這些東西整理完還是太難了，結果就用到稍早才完成。很多想要的效果跟排版都不是那麼理想，原本還想要做個煙火，但來不及只能做個轉場星星。</p><a class="fetch-card" href="https://kjj6198.github.io/yearly-report" target="_balnk" ref="nofollow noreferrer">      <div class="info">        <h2>2017 年度總結 | Yearly Report</h2>        <p class="content">我的 2017 年度總結。在 2017 年發生了很多事（最近幾年過得實在很精彩），以至於想要好好地把今年發生跟學習的事情一一記錄下來。這次比較不一樣的是，我花了一天做了網頁，整理這一年裡的所有發生的大小事，以及一些我覺得很有趣的資料。</p>        <span>https://kjj6198.github.io/yearly-report</span>      </div>      <div class="img" style="background-image: url(https://s3-us-west-2.amazonaws.com/yaoya/avatar.jpg)">      </div></a><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>今年在 Medium 上總共發佈了 74 篇文章，其實閱讀人數一直沒有很理想，不知道是不是標題不夠犀利還是文筆不到位。或者 Medium 的中文使用者本來就不多，不過就算沒有多少人看我想我還是會繼續寫下去的。</p><h3 id="1-自學四年通過日檢-N2-心得-—-7-9K"><a href="#1-自學四年通過日檢-N2-心得-—-7-9K" class="headerlink" title="1. 自學四年通過日檢 N2 心得 — 7.9K"></a><a href="https://medium.com/%E6%97%A5%E8%AA%9E%E5%85%AB%E7%99%BE%E5%B1%8B/%E8%87%AA%E5%AD%B8%E5%9B%9B%E5%B9%B4%E9%80%9A%E9%81%8E%E6%97%A5%E6%AA%A2-n2-%E5%BF%83%E5%BE%97-2e91435250c9" target="_blank" rel="noopener">1. 自學四年通過日檢 N2 心得 — 7.9K</a></h3><a class="fetch-card" href="https://medium.com/%E6%97%A5%E8%AA%9E%E5%85%AB%E7%99%BE%E5%B1%8B/%E8%87%AA%E5%AD%B8%E5%9B%9B%E5%B9%B4%E9%80%9A%E9%81%8E%E6%97%A5%E6%AA%A2-n2-%E5%BF%83%E5%BE%97-2e91435250c9" target="_balnk" ref="nofollow noreferrer">      <div class="info">        <h2>自學四年通過日檢 N2 心得 – 日語八百屋 – Medium自學四年通過日檢 N2 心得 – 日語八百屋 – Medium</h2>        <p class="content">這篇文章會分成兩部分，第一部分談談自己對學習語言的看法，第二部分則是介紹一些我在學習日文時常用的學習資源。 這篇文章不會提到答題技巧或是短期衝刺的秘訣，原因很簡單，日檢等考試都可能會更改制度或題型，未來可能主流的考試也並非 JLPT，過度追求答題技巧可能只會造成反效果而已。</p>        <span>https://medium.com/日語八百屋/自學四年通過日檢-n2-心得-2e91435250c9</span>      </div>      <div class="img" style="background-image: url(https://cdn-images-1.medium.com/max/1200/1*N94QaFraADD7onb_wP-KeA.png)">      </div></a><p>今年通過了日檢 N3, N2，算是完成了自己的目標之一。</p><p>這篇文章當時有分享在 facebook 上，所以觀看人數最高，到現在每週仍然有破百的瀏覽次數。我知道自學四年並不是一個很短的時間，但這裡面並不是在討論一些如何應試的心得，而是把自己一路從完全不會，透過自學的方式一路走到現在的歷程。</p><p>到日本工作是我的目標之一，好奇日本文化也好、想窺探日本人生存的方式也好，這些都是我未來想要體驗的事情之一。</p><h3 id="2-前端面試總結-—-4-6K"><a href="#2-前端面試總結-—-4-6K" class="headerlink" title="2. 前端面試總結 — 4.6K"></a><a href="https://medium.com/d-d-mag/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%A9%A6%E7%B8%BD%E7%B5%90-dfe8bf07bfe1" target="_blank" rel="noopener">2. 前端面試總結 — 4.6K</a></h3><a class="fetch-card" href="https://medium.com/d-d-mag/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%A9%A6%E7%B8%BD%E7%B5%90-dfe8bf07bfe1" target="_balnk" ref="nofollow noreferrer">      <div class="info">        <h2>前端面試總結 – DnD mag – Medium前端面試總結 – DnD mag – Medium</h2>        <p class="content">國立科大資管系，目前已經有兩年工作經驗。平時專注在前端開發，接觸 React、Redux 開發約兩年的時間。除了一般的前端「工程」之外，自己也很喜歡畫面的實作與互動，同時也有在自己的小專案當中練習後端的知識，像是 AWS、Lambda、nodejs、資料庫、機器學習等等，不過最熟悉的還是前端相關。 一般的公司通常在信上附上地址，不過樂天市場會把一些重要的地標標示出來，例如 XX 號出口、在 XX…</p>        <span>https://medium.com/d-d-mag/前端面試總結-dfe8bf07bfe1</span>      </div>            </a><p>今年離開了時刻旅行，到了 17 直播工作。期間也面試了不少公司，我把這些心得整理成一篇文章。前端是繼 JAVA 之後，開始學習的領域之一，當時電腦記憶體只有 2G，任何一個 IDE 開下去都會當掉，因此輕薄短小的 HTML 與 CSS 就成為了首選，結果就一路走到現在了。</p><p>最近也試著往更多元的方向前進，<a href="https://ithelp.ithome.com.tw/users/20103565/ironman/1188" target="_blank" rel="noopener">WebGL</a>、Canvas、資料視覺化，都是我希望接觸的領域，也希望自己能夠更輕易地掌握資料流處理跟互動。</p><h3 id="3-淺談降維方法中的-PCA-與-t-SNE-—-1-5K"><a href="#3-淺談降維方法中的-PCA-與-t-SNE-—-1-5K" class="headerlink" title="3. 淺談降維方法中的 PCA 與 t-SNE — 1.5K"></a><a href="https://medium.com/d-d-mag/%E6%B7%BA%E8%AB%87%E5%85%A9%E7%A8%AE%E9%99%8D%E7%B6%AD%E6%96%B9%E6%B3%95-pca-%E8%88%87-t-sne-d4254916925b" target="_blank" rel="noopener">3. 淺談降維方法中的 PCA 與 t-SNE — 1.5K</a></h3><p>PCA 是在做機器學習時時常使用到的降維方法，但是因為是線性轉換的關係，在變換過程中會喪失太多的訊息。</p><p>這時候可以透過 t-SNE 來改善。t-SNE 是基於 T 分佈的演算法，透過計算 Kullback-Leibler Divergence（KL）的方式來降維，效果會比 PCA 更好，但速度比 PCA 慢很多。</p><h3 id="4-日語學習資源總整理"><a href="#4-日語學習資源總整理" class="headerlink" title="4. 日語學習資源總整理"></a><a href="https://medium.com/%E6%97%A5%E8%AA%9E%E5%85%AB%E7%99%BE%E5%B1%8B/%E6%97%A5%E6%96%87%E5%AD%B8%E7%BF%92%E8%B3%87%E6%BA%90%E7%B8%BD%E6%95%B4%E7%90%86-fd3d065df01a" target="_blank" rel="noopener">4. 日語學習資源總整理</a></h3><p>自學日文會碰到許多困難與挑戰，其中之一就是找到優質的學習資源。我自己是以看書為主、網路資源為輔的方式學習，洋洋灑灑寫了很多筆記。</p><h3 id="5-日本服務業用語"><a href="#5-日本服務業用語" class="headerlink" title="5. 日本服務業用語"></a><a href="https://medium.com/%E6%97%A5%E8%AA%9E%E5%85%AB%E7%99%BE%E5%B1%8B/%E6%97%A5%E6%9C%AC%E6%9C%8D%E5%8B%99%E6%A5%AD%E7%94%A8%E8%AA%9E-ad382a7e034b" target="_blank" rel="noopener">5. 日本服務業用語</a></h3><p>整理了一些常見的日本服務業用語。之前在打工的時候用上幾次。</p><h3 id="6-狂歡雙-11-—-祝我生日快樂"><a href="#6-狂歡雙-11-—-祝我生日快樂" class="headerlink" title="6. 狂歡雙 11 — 祝我生日快樂"></a><a href="https://medium.com/@Shurado/%E7%8B%82%E6%AD%A1%E9%9B%99-11-%E7%A5%9D%E6%88%91%E7%94%9F%E6%97%A5%E5%BF%AB%E6%A8%82-bfabdca3df24" target="_blank" rel="noopener">6. 狂歡雙 11 — 祝我生日快樂</a></h3><p>生日剛好在雙 11，每次生日都可以搶便宜買東西給自己（雖然也很少在買）。這篇文章整理了我在 2017 年做的事情以及一些體悟。</p><h3 id="7-為什麼台灣人無法抵制全聯"><a href="#7-為什麼台灣人無法抵制全聯" class="headerlink" title="7. 為什麼台灣人無法抵制全聯"></a><a href="https://medium.com/@Shurado/%E7%82%BA%E4%BB%80%E9%BA%BC%E5%8F%B0%E7%81%A3%E4%BA%BA%E7%84%A1%E6%B3%95%E6%8A%B5%E5%88%B6%E5%85%A8%E8%81%AF-f54c358c868a" target="_blank" rel="noopener">7. 為什麼台灣人無法抵制全聯</a></h3><p>這是在全聯過勞死新聞出來後所寫的一篇文章，並不是每個人、家庭都有足夠的成本來抵制全聯。而且全聯對於低收入戶家庭有每個月固定額度的補助，這對一個收入不高的小家庭來說是個不無小補的幫助。</p><h3 id="8-淺析幾個-ramda-當中的-API"><a href="#8-淺析幾個-ramda-當中的-API" class="headerlink" title="8. 淺析幾個 ramda 當中的 API"></a><a href="https://medium.com/d-d-mag/%E6%B7%BA%E6%9E%90%E5%B9%BE%E5%80%8B-ramda-%E7%95%B6%E4%B8%AD%E7%9A%84-api-c399a3f73c68" target="_blank" rel="noopener">8. 淺析幾個 ramda 當中的 API</a></h3><p>ramda 是個相當好用的 functional programming 函式庫，這篇文章介紹了一些好用卻不常被提到的 API。</p><h3 id="9-你可能不知道的-Sass-技巧"><a href="#9-你可能不知道的-Sass-技巧" class="headerlink" title="9. 你可能不知道的 Sass 技巧"></a><a href="https://medium.com/d-d-mag/%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84-sass-%E6%8A%80%E5%B7%A7-c97d4d5e0fc4" target="_blank" rel="noopener">9. 你可能不知道的 Sass 技巧</a></h3><p>Sass 除了 nested class 和變數之外，其實還有很多好用的 function 跟使用方式。像是優雅地管理 z-index、更容易地取用變數、錯誤處理等等，都有不錯的效果。</p><h3 id="10-深入探討-redux-與-react-redux"><a href="#10-深入探討-redux-與-react-redux" class="headerlink" title="10. 深入探討 redux 與 react-redux"></a><a href="https://medium.com/d-d-mag/%E6%B7%B1%E5%85%A5%E6%8E%A2%E8%A8%8E-redux-%E8%88%87-react-redux-f6230d6ae83f" target="_blank" rel="noopener">10. 深入探討 redux 與 react-redux</a></h3><p>使用 React 也將近兩年多了，從 0.1x 到現在，整理了 redux 以及使用 react-redux 的技巧。</p><p>Medium 是個寫作、閱讀體驗都非常舒服的平台，雖然最近很多技術文已經出現了 README level 的現象，不過整體來講還是很喜歡。尤其是圖片排版跟網站 parsing，省了不少功夫。後台的統計也很清楚，每個禮拜還會送 e-mail，如果要做統計相當方便。</p><p>不過仍然有幾個缺點：</p><ul><li>不支援 code block，如果要 highlight 只能自己放到 gist 上，不過 gist 在手機 app 上無法觀看。</li><li>不支援 LateX，如果要數學公式還要自己弄成圖片</li></ul><p>關於第一點，因為 Medium 本身有發佈文章的 API，所以就<a href="https://medium.com/d-d-mag/透過-github-webhook-與-lambda-在-medium-上建立文章-4122fc33b429" target="_blank" rel="noopener">自己寫了一個 lambda</a> 把 code block 轉成 gist。</p><p>在 Medium 上還有很多文章，有興趣的話可以到 <a href="https://medium.com/@Shurado" target="_blank" rel="noopener">https://medium.com/@Shurado</a> 看看。</p><a class="fetch-card" href="https://medium.com/@Shurado" target="_balnk" ref="nofollow noreferrer">      <div class="info">        <h2>愷開 – Medium</h2>        <p class="content">Read writing from 愷開 on Medium. https://kjj6198.github.io UNder-fitting Frontend Developer. Every day, 愷開 and thousands of other voices read, write, and share important stories on Medium.</p>        <span>https://medium.com/@Shurado</span>      </div>      <div class="img" style="background-image: url(https://miro.medium.com/max/2400/1*rlx_EMc_4lIj6hQcsgTZ7g.jpeg)">      </div></a><h2 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h2><p>blog 主要寫一些技術文章跟小說心得，大部分都跟 Medium 同步。</p><p><a href="https://kjj6198.github.io/">https://kjj6198.github.io/</a></p><h2 id="日語八百屋"><a href="#日語八百屋" class="headerlink" title="日語八百屋"></a>日語八百屋</h2><p>這是我在今年三月左右創立的週刊，目前已經累積 <strong>40</strong> 多期。未來還會繼續走下去的，這個網站每個月會花費 1,020 的維護成本（資料庫、S3、cloudfront 等等）。</p><p>目前已經累積有 <strong>41</strong> 期週刊；總共有 <strong>219</strong> 篇文章與筆記；共寫了 <strong>71,115</strong> 個字。將近一年下來累積的成果，自己回想起來還是覺得很感動。這並不是什麼殺手級的應用，只是很單純的週刊而已。用一句一拳超人最愛說的話，就是興趣使然。</p><p>這一年也累積了不少讀者的回饋，列出幾個：</p><ul><li>內容多元有趣！！！每周都很期待收到信^0^</li><li>每週一中午的休息時間，很期待讀喔 ❤</li><li>加油 ! 這個活動很有意義。</li><li>我從一開始就訂閱了 每期都有看！ 覺得你寫的很用心很好 讓我更認識日本文化 希望你能繼續做下去 我會一直支持哈哈哈哈</li></ul><p>當然現在工作繁忙，有時難免會想要偷懶一下。</p><p>如果你也對日本文化、日語學習、旅行有興趣，歡迎隨時投稿。因為目前仍然是沒有收入的狀態，我能回饋的只有：</p><ul><li>你的分享會被寄送到 1300 多位訂閱者的信箱</li><li>你的分享會被署名</li><li>你的分享會被放在日語八百屋的 medium 上</li><li>你的分享會放在日語八百屋的官網上</li><li>跟我當好朋友</li></ul><p>以下是日語八百屋的相關資訊：</p><ul><li><a href="https://medium.com/日語八百屋" target="_blank" rel="noopener">Medium</a></li><li><a href="https://www.shurado.com" target="_blank" rel="noopener">官方網站</a></li><li><a href="https://www.facebook.com/nipponyaoya/" target="_blank" rel="noopener">粉絲專頁</a></li><li><a href="https://www.instagram.com/nihongoyaoya" target="_blank" rel="noopener">Instagram</a></li></ul><h3 id="IT-鐵人賽佳作-—-WebGL-與-Three-js-初探"><a href="#IT-鐵人賽佳作-—-WebGL-與-Three-js-初探" class="headerlink" title="IT 鐵人賽佳作 — WebGL 與 Three.js 初探"></a>IT 鐵人賽佳作 — WebGL 與 Three.js 初探</h3><p>這一次想要挑戰比較不同的主題，於是選了一個一直想要好好研究卻沒有實際行動的 WebGL 和 Three.js。剛好下學期還開了一堂電腦圖學的課，要用 OpenGL 實作。</p><p>雖然還沒辦法到 production ready 的程度，不過從中瞭解到很多好玩的技術，像是矩陣轉換、線性內插、double buffering、光照等等。</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>今年一樣也寫了很多 code，不過沒有很認真地分析，只用 <a href="https://developer.github.com/v3/repos/statistics/" target="_blank" rel="noopener">Github API</a> 抓了一些資料。</p><p>2017 年有 <strong>1,205</strong> 個 Contribution；寫了 <strong>889,516</strong> 行程式碼；刪了 <strong>357,516</strong> 行程式碼。（備註：因為有時候忘記 ignore bundle 的代碼以及 node_modules，所以後面兩項數據有蠻多灌水的。）</p><h2 id="Daily-Life"><a href="#Daily-Life" class="headerlink" title="Daily Life"></a>Daily Life</h2><p>在生活上有許多有趣的數據，今年記錄了自己平均睡眠時間（從五月初開始）、iPhone 裡面存的一些資料、收支等等，接下來看看這些資料吧。</p><ul><li><p>平均睡眠時數：5.7 小時</p><p>最近實在太晚睡了，之前有一陣子曾經好轉到規律的生活，但最近事情一直做不完，然後又拖延，所以只好靠熬夜彌補。今年希望可以改善</p></li><li><p>每日走路步數： 6,716 步</p><p>這個數據看起來可能沒什麼感覺，不過這樣換算下來一年至少走了 245 萬步耶，希望薪水可以跟走路步數一樣高XD。</p></li><li><p>慢跑累積里程：73.8 公里</p><p>這應該是丟出來看會被笑到翻掉的數字。我從大概 2 月底左右決定好要要跑步，結果還是很半吊子。希望 2018 拿出來的數字比較好看一點。</p></li></ul><h3 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h3><p>今年去了大阪、京都、奈良、東京，去日本真的很便宜。</p><h3 id="收支"><a href="#收支" class="headerlink" title="收支"></a>收支</h3><p>今年有在記帳軟體上的支出為 223,935，至於收入不太好看就不拿出來獻醜了。</p><h2 id="日劇"><a href="#日劇" class="headerlink" title="日劇"></a>日劇</h2><p>今年看了很多日劇，在這邊順便總結一下，以下按照喜歡順序排名：</p><h3 id="1-四重奏（カルテット）"><a href="#1-四重奏（カルテット）" class="headerlink" title="1. 四重奏（カルテット）"></a>1. 四重奏（カルテット）</h3><p>四重奏對於人生的描寫真的太讚了。故事是描寫一群業餘的樂手，各自隱瞞著的人生故事。每個人都有一點性格上的缺陷，就像團名「甜甜圈」那樣。我很喜歡開場高橋一生的唐揚炸雞+檸檬那段。</p><blockquote><p>唐揚炸雞能洗嗎？</p></blockquote><h3 id="2-派遣女醫第五季（Doctor-X）"><a href="#2-派遣女醫第五季（Doctor-X）" class="headerlink" title="2. 派遣女醫第五季（Doctor-X）"></a>2. 派遣女醫第五季（Doctor-X）</h3><p>雖然前幾季也是在今年看完就是了。西田敏行跟遠藤憲一是兩大賣點，演技相當精湛又逗趣。</p><p>我從中學到最多的是大門的敬業態度，他最常掛在嘴邊的：</p><blockquote><p>私、失敗しないので（我不會失敗）</p></blockquote><p>對於病人來說，只要手術失敗就很有可能發生生命危險，因此每次的開刀都會全力把任何可能發生的事都考量進去。也才能每次都抱著信心地說著「我不會失敗」這種信心爆棚的台詞。</p><h3 id="3-你只想住在吉祥寺嗎？"><a href="#3-你只想住在吉祥寺嗎？" class="headerlink" title="3. 你只想住在吉祥寺嗎？"></a>3. 你只想住在吉祥寺嗎？</h3><p>主角是一對住在吉祥寺，卻常常推薦客人放棄吉祥寺的兩姐妹。畢竟這裡高居日本人想住的城市第一名，要找到一個適合的房子也挺困難的。</p><p>這部日劇一集只有 30 分鐘，非常適合在中午休息時觀看。</p><p>每一集描繪一個故事，這些故事都是小市民的真實生活刻畫，為了改變生活，決定從換新房子開始。裡頭並不會苛刻地要求你努力向上，而是讓房屋成為你發洩情緒的出口。</p><p>工作已經很不容易了，就不要再把自己逼得太緊。請一天假小酌一番、泡個澡，明天再來好好面對生活。深刻感受到生活的重要性。在工作的同時別忘記了，自己是個活生生的人、不是奴隸，有血肉之軀、被打會哭，沒有必要讓工作壓垮自己。</p><blockquote><p>「公司就是這麼渺小的東西，根本沒有必要為這麼渺小的東西傷心」（会社なんて小さいもんだよそんなもんで傷つく必要なんてない）</p></blockquote><h3 id="4-房仲女王"><a href="#4-房仲女王" class="headerlink" title="4. 房仲女王"></a>4. 房仲女王</h3><p>最近剛好搬家完畢，看了這部之後，深深感受到房子對一個人、一個家庭的影響是多麽巨大的。這部日劇主要是在描寫一位房仲業者賣房子的故事。</p><p>每一集都會賣一棟房子，她的名言就是：「沒有我賣不掉的房子。」，我覺得如果能夠把工作做到這種程度的自信，是一件非常專業的事情。</p><p>而說到的秘訣，她的說法很簡單</p><blockquote><p>「我負責的不是一棟房子，而是客戶的整個人生」。</p></blockquote><p>不過在台灣就另當別論了。</p><h3 id="5-過保護的加穗子（過保護のカホコ）"><a href="#5-過保護的加穗子（過保護のカホコ）" class="headerlink" title="5. 過保護的加穗子（過保護のカホコ）"></a>5. 過保護的加穗子（過保護のカホコ）</h3><p>這個取名其實蠻有巧思的，過保護（かほご）跟カホコ（主角名稱）剛好是發音相近。</p><p>如同片名，劇情在敘述一位被家人過度保護的媽寶，在日常生活中的大小事全部仰賴父母幫忙，鮮少遇到挫折，最後因為愛情而逐漸練習獨立。</p><p>這部劇從每個角度切入都能引人省思，像是家長們的「我是為了你好」的大旗道德綁架，不讓孩子們走自己的路；而在溫室中長大的孩子們，或許會思考這難道是我一生要走的路嗎；最後愛情的滋潤下，加穗子逐漸走出溫室，開始練習獨立。</p><p>高畑充希演這種無辜可愛的女孩演得相當出色。</p><h3 id="6-外貌協會（人は見た目が１００パーセント）"><a href="#6-外貌協會（人は見た目が１００パーセント）" class="headerlink" title="6. 外貌協會（人は見た目が１００パーセント）"></a>6. 外貌協會（人は見た目が１００パーセント）</h3><p>這一部日劇如標題所示，描述三個因不會打扮而無法像其他女孩一樣受歡迎，或是在職場上不受重視，聯誼時也無法大放異彩的女生。</p><p>為了讓自己能夠更受歡迎，所以開始練習化妝、聯誼技巧等等，逐漸探討女孩們從完全不會打扮的ブス變成光鮮亮麗的焦點。</p><p>我不是女生，很難想像為了讓自己變得更受歡迎而努力保養的拼勁。不過從這部劇看來，的確是件很辛苦的一件事啊。</p><p>（吐槽：女主角明明就很正）</p><h3 id="7-民眾之敵（民衆の敵）"><a href="#7-民眾之敵（民衆の敵）" class="headerlink" title="7. 民眾之敵（民衆の敵）"></a>7. 民眾之敵（民衆の敵）</h3><p>雖然這部劇是在講政治，但比起一般的政治劇來說劇情是在太過清新以及理想化了。女主角因為想要賺更多的錢，決定選議員，最後變成市長。對於習慣政治劇的觀眾來說恐怕很難符合胃口，不過當成小品來看的話其實還不錯，至少不用到處濺血跟吸毒。</p><p>不過裡頭仍然點出了一些現實與理想的差距，例如政治家可能常常遇到的，為了某些人的福利，可能要犧牲另外一些人的權益。</p><p>或者只專注於眼前的問題，卻沒發現背後有更大的成因等等。</p><blockquote><p>只專注於讓身邊的人幸福</p></blockquote><p>這是女主角很愛說的一句話，雖然看起來短視近利，但我覺得這倒是一個做決策時很好的辦法。因為要讓所有人都幸福實在太困難了，所以就乾脆讓身邊的人幸福就好。看起來很偽善對吧？在現今的世道下如果救了一個人卻沒有救其他人就會被批評偽善。</p><p>（這部劇也有我最愛的高橋一生演出。）</p><h3 id="電影"><a href="#電影" class="headerlink" title="電影"></a>電影</h3><p>今年看的電影都是日本電影居多，以下挑幾部印象深刻的：</p><h3 id="1-不幹了！我開除了黑心公司"><a href="#1-不幹了！我開除了黑心公司" class="headerlink" title="1. 不幹了！我開除了黑心公司"></a>1. 不幹了！我開除了黑心公司</h3><p>這部電影的預告相當吸引我，主角是一位業務，過著平凡的小市民生活，每天承受著壓力、辱罵、道歉中過活。</p><blockquote><p>人究竟是為了什麼而工作的呢？</p></blockquote><p>為了生活不得不低頭工作，忍受各種不合理的對待與委屈，像劇中的男主角一樣，一度找不到生存的意義企圖跳軌自殺。在台灣這樣子的意識型態可能沒有那麼嚴重，不過在日本通常一進入公司，就會在公司待到退休不會再換工作。不過最近受到經濟泡沫的影響，終身雇用制也正在逐漸崩壞當中。不過你我都知道，台灣仍然有許多需要改進的地方，像是之前發生的<a href="https://www.thenewslens.com/article/76105" target="_blank" rel="noopener">全聯過勞死</a>的新聞。</p><p>這讓我想到在「<strong>你只想住在吉祥寺嗎」</strong>其中的一幕。</p><blockquote><p>公司就是這麼渺小的東西，根本沒有必要為了那麼渺小的東西而難過。</p></blockquote><p>如果這份工作真的讓你感受不到熱忱的話，或許該停下來思考一下工作的意義了。</p><h3 id="2-我想吃掉你的胰臟（君の膵臓を食べたい）"><a href="#2-我想吃掉你的胰臟（君の膵臓を食べたい）" class="headerlink" title="2. 我想吃掉你的胰臟（君の膵臓を食べたい）"></a>2. 我想吃掉你的胰臟（君の膵臓を食べたい）</h3><p>在先前的週刊有和大家分享過這部小說以及劇情，電影版也在最近上映了。</p><blockquote><p>聽說哪個身體哪個器官不好，就會吃動物的某個器官來補</p></blockquote><p>劇情似乎有點老套，女主角患病、個性活潑大方、意外認識個性陰暗的男孩、兩人開始一段邂逅、鋪陳幾個灑狗血的橋段。不過名字相當吸引人，許多人應該都會被這個有點奇怪的標題給吸引吧。</p><p>雖然如此，實際上看到電影時還是覺得挺感動的，尤其是女主角活潑的個性，相當吸引人。額外一提，這次看完電影也讓我了解到原來分類書籍是相當深奧的一門學問啊</p><h3 id="解憂雜貨店（ナミヤ雑貨店の奇蹟）"><a href="#解憂雜貨店（ナミヤ雑貨店の奇蹟）" class="headerlink" title="解憂雜貨店（ナミヤ雑貨店の奇蹟）"></a>解憂雜貨店（ナミヤ雑貨店の奇蹟）</h3><p>東野圭吾是我相當喜歡的作家之一，除了純推里之外，他的作品也涵蓋了許多主題，像是<a href="https://www.wikiwand.com/zh-tw/%E4%BC%BD%E5%88%A9%E7%95%A5%E7%B3%BB%E5%88%97" target="_blank" rel="noopener">伽利略系列</a>、物理學湯川等等，還有一些短篇作品（像黑笑、毒笑小說），或多或少在描寫日本社會現象等等。</p><p>解憂雜貨店這種療癒小說，第一次看時是被封面給吸引住的。看完果然也很佩服東野圭吾組織架構的能力，以及多個伏線最後終於完整拼湊的痛快。的確有些劇情太過理想，不過東野圭吾也不是那種只會丟出有夢最美這種漂亮話而已，仍然有許多故事是懷抱理想最後被現實打敗的人。</p><p>另外命名上也相當具有巧思。主角浪矢（ナミヤ）爺爺跟煩惱（悩み（なやみ））剛好順序調換了，這大概是學日文的人理解的會心一笑吧。</p><p>摘錄最後的台詞：</p><blockquote><p>正因為是白紙，才能盡情揮灑。謝謝你最後留給我如此精彩的難題</p></blockquote><blockquote><p>白紙なのだから、どんな地図だって描けます。全てがあなた次第なのです。最後に素晴らしい難問をいただけたこと、感謝申し上げます。</p></blockquote><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>2017 年發生了很多事，如果不是今天特別用這種方式整理，大概沒辦法體會到吧。看到這些數字都有一種幸好當初有記錄下來的感覺，以後或許也會用這樣的方式來回顧自己年度總結吧。</p><p>在 2018 還有很多想要達成的事，如果要用一句話總結，大概就是 <strong>我想做一個有用的人</strong>吧。</p><p>如果對我的文章有興趣，歡迎到以下連結追蹤：</p><ul><li><a href="https://twitter.com/kalanyei" target="_blank" rel="noopener">Twitter</a></li><li><a href="https://medium.com/@Shurado" target="_blank" rel="noopener">Medium</a></li><li><a href="https://kjj6198.github.io">Blog</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;哈囉大家，2018 新年快樂 🎉。&lt;/p&gt;
&lt;p&gt;昨天和女友選擇過一個很平凡的跨年，早上各自做彼此的事，晚上在家裡開伙吃飯，再一起跑步，最後一邊寫程式一邊看紅白，結束了 2017 年的最後一天。&lt;/p&gt;
&lt;p&gt;每年年底都會試著回想以前做過的事，但如果沒有加以記錄，好像只能
      
    
    </summary>
    
      <category term="雜談" scheme="http://kjj6198.github.io/categories/%E9%9B%9C%E8%AB%87/"/>
    
    
      <category term="2017" scheme="http://kjj6198.github.io/tags/2017/"/>
    
  </entry>
  
  <entry>
    <title>Array.sort 淺析</title>
    <link href="http://kjj6198.github.io/2017/12/15/array-sort/"/>
    <id>http://kjj6198.github.io/2017/12/15/array-sort/</id>
    <published>2017-12-14T16:00:00.000Z</published>
    <updated>2017-12-17T06:22:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Array-sort-淺析"><a href="#Array-sort-淺析" class="headerlink" title="Array.sort 淺析"></a>Array.sort 淺析</h1><p>這篇文章不是談論在 Javascript 原生的 sort 要注意的事項。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">11</span>].sort()</span><br><span class="line"><span class="comment">// [1, 11, 2, 20, 3, 30, 8]</span></span><br></pre></td></tr></table></figure><p>因為預設的 sort 方法會把值轉為 String，並按照 char code 做排序，所以才會出現上面的結果。</p><p>今天要來探討 Javascript 的 sort 背後的實作方式。</p><p>從 <a href="https://github.com/v8/v8/blob/master/src/js/array.js#L757" target="_blank" rel="noopener">V8 的實作</a>當中，我們可以看到幾個事實：</p><ul><li>Array 的 sort 是用 quick sort 排序</li><li>在陣列數量小於等於 10 的時候，使用插入排序。</li></ul><p>為了簡化 V8 中的代碼，這邊撰寫一個簡單的快速排序代碼：（僅供參考）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr, p, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (p &lt; r) &#123;</span><br><span class="line">    <span class="keyword">var</span> q = partition(arr, p, r)</span><br><span class="line">    quickSort(arr, q - <span class="number">1</span>, p)</span><br><span class="line">    quickSort(arr, q + <span class="number">1</span>, r)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">arr, p, r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = arr[r];</span><br><span class="line">  <span class="keyword">var</span> i = p - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = p; j &lt; r - <span class="number">1</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[j] &lt;= x) &#123;</span><br><span class="line">      i += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">var</span> tmp = a[j];</span><br><span class="line">      arr[j] = a[i];</span><br><span class="line">      arr[i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> tmp = arr[r];</span><br><span class="line">  arr[r] = a[i + <span class="number">1</span>]</span><br><span class="line">  arr[i + <span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深入探討：為什麼是快速排序？"><a href="#深入探討：為什麼是快速排序？" class="headerlink" title="深入探討：為什麼是快速排序？"></a>深入探討：為什麼是快速排序？</h2><p>快速排序法的實現重點在於如何選擇一個相對好的 pivot，來避免最壞情況的發生。在實際的情況當中，輸入的資料並不一定是隨機的，所以在實務上都會使用 random 的方式來選擇 pivot。</p><p>第一個問題是，<strong>為什麼 V8 使用快速排序？</strong>雖然快速排序的平均時間複雜度可以達到 $O(nlogn)$，但是最壞情況也有可能達到$O(n^2)$。同時，快速排序並不是一個穩定的演算法，也就是兩個同樣值的資料，在排序之後位置可能會不同。</p><h3 id="為什麼不用合併排序？"><a href="#為什麼不用合併排序？" class="headerlink" title="為什麼不用合併排序？"></a>為什麼不用合併排序？</h3><p>合併排序簡單可以分為兩大步驟，先把 array 分解後再調用 merge 不斷合併。不僅平均、最壞、最好時間複雜度都可以達到$O(nlogn)$，演算法本身也是穩定的，為什麼不採用呢？</p><h3 id="In-place"><a href="#In-place" class="headerlink" title="In-place"></a>In-place</h3><p>我們在 quick sort 當中，並不需要對 array 做合併的動作，也就是整個演算法可以不另外耗費空間完成，而 merge sort 需要 $O(n)$ 的空間。因此儘管快速排序有上述的情況發生，但在實務上他仍然是一個相當好的選擇。</p><p>我們可以透過 randomize 的方式（關於如何隨機選取 pivot，實際上還能夠寫一大篇文章來解釋），來避免 $O(n^2)$ 的情形發生。</p><h3 id="Stable"><a href="#Stable" class="headerlink" title="Stable"></a>Stable</h3><p>不過儘管如此，我們還是沒辦法解決 stable 的問題，雖然在大部分的場景當中可能並不重要（畢竟資料排序通常都是由後端實作），不過如果真的碰到時，這就是非常重要的考量了。</p><p><strong>並不是每個瀏覽器的實作都是用 Quicksort</strong></p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>如果仔細看一下 <a href="https://github.com/v8/v8/blob/master/src/js/array.js#L723" target="_blank" rel="noopener">V8 的原始碼</a>，會發現這一段：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="comment">// Insertion sort is faster for short arrays.</span></span><br><span class="line"> <span class="keyword">if</span> (to - <span class="keyword">from</span> &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">   InsertionSort(a, <span class="keyword">from</span>, to);</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>咦，為什麼在陣列數量小於等於 10 的時候要用插入排序法呢？</p><p>要理解原因，我們先回想一下插入排序的原理。插入排序跟撲克牌整理牌的方式很像，每次拿起一張牌，找到一個最適當位置放入，每次的要插入的牌組都是已經整理好的，可以達到原址排序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">  <span class="keyword">var</span> key = arr[j];</span><br><span class="line">    <span class="keyword">var</span> i = j - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &gt;= <span class="number">0</span> &amp;&amp; arr[i] &gt; key) &#123;</span><br><span class="line">      arr[i + <span class="number">1</span>] = arr[i]</span><br><span class="line">      i = i - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[i + <span class="number">1</span>] = key;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入排序雖然跟氣泡排序擁有相同的時間複雜度，不過在交換次數上有很大的不同，氣泡排序有$O(n^2)$的交換次數，而插入排序最多只需要$O(n)$。</p><p>回到最剛開始的問題，<strong>為什麼在陣列數量小於等於 10 的時候要用插入排序法呢？</strong></p><p>對於小數量的陣列而言，如果已經排序好，或是相當接近有序的陣列，插入排序法是唯一可以達到時間複雜度$O(n)$的演算法。這是相當有效率的一件事。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>因為在工作上需要排序，因此開始深入理解了原生的 sort 在背後做了哪些事情。除了要注意 js 會預設轉為字串比較之外，在處理資料量大的陣列時，理解背後的實作方式就顯得相當重要。</p><p>同時我們也了解到，不同的排序演算法都有其適合的場景，在使用 sort 的時候要記得：</p><ul><li>Quick sort 在實務上通常有最好的結果，但要注意 quick sort 並不是穩定的演算法</li><li>Merge sort 雖然能夠達到 $O(nlogn)$ 的時間複雜度，但是需要額外 $O(n)$ 的空間做 merge</li><li>Insertion sort 在小數量的陣列排序上有不錯的效果，最好情形可以在$O(n)$ 比較完成。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Array-sort-淺析&quot;&gt;&lt;a href=&quot;#Array-sort-淺析&quot; class=&quot;headerlink&quot; title=&quot;Array.sort 淺析&quot;&gt;&lt;/a&gt;Array.sort 淺析&lt;/h1&gt;&lt;p&gt;這篇文章不是談論在 Javascript 原生的 s
      
    
    </summary>
    
      <category term="演算法" scheme="http://kjj6198.github.io/categories/%E6%BC%94%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="algorithm" scheme="http://kjj6198.github.io/tags/algorithm/"/>
    
      <category term="sorting" scheme="http://kjj6198.github.io/tags/sorting/"/>
    
  </entry>
  
  <entry>
    <title>如何設計 user friendly 的 table</title>
    <link href="http://kjj6198.github.io/2017/11/24/user-friendly-table/"/>
    <id>http://kjj6198.github.io/2017/11/24/user-friendly-table/</id>
    <published>2017-11-23T16:35:38.000Z</published>
    <updated>2017-12-17T06:39:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>認清一件事實，table 是拿來看，不是被當作絢麗的視覺使用的</p></blockquote><p>最近在後台頻繁有使用表格的需求，如何設計對使用者良好的 table 是一項挑戰，尤其在資料筆數多、欄位多的情況下，使用者很容易就會被額外的元素吸引。</p><p>而在現代 <code>div</code> 排版盛行的影響下，使用 table 很容易就被當成二流的前端工程師。</p><p>其實對於呈現資料上，table 仍然是個相當有效的排版方式，且他們具有的特色可以幫助我們排版更加輕鬆。</p><h2 id="HTML-中的-table"><a href="#HTML-中的-table" class="headerlink" title="HTML 中的 table"></a>HTML 中的 table</h2><p>在 HTML 當中 table 由幾個標籤組成：</p><ul><li><code>thead</code>：定義表頭標題<ul><li><code>tr</code>：定義表頭的 row</li><li><code>th</code>：定義標題</li></ul></li><li><code>tbody</code>：定義表格內容</li><li><code>tfoot</code>：定義表格的結尾部份</li></ul><h2 id="盡量不要拉滿整個-table-寬度"><a href="#盡量不要拉滿整個-table-寬度" class="headerlink" title="盡量不要拉滿整個 table 寬度"></a>盡量不要拉滿整個 table 寬度</h2><p>讓 table 當中內容自行決定寬度。如果拉滿寬度的話，使用者很容易因為兩個 column 之間的距離間隔太長而不容易閱讀。</p><h2 id="選擇顯示欄位"><a href="#選擇顯示欄位" class="headerlink" title="選擇顯示欄位"></a>選擇顯示欄位</h2><p>如果資料的欄位太多（例如超過 10 個以上），可以透過 checkbox 等方式讓使用者選擇希望顯示的欄位。</p><h2 id="加入-lt-caption-gt"><a href="#加入-lt-caption-gt" class="headerlink" title="加入 &lt;caption&gt;"></a>加入 <code>&lt;caption&gt;</code></h2><p>在表格當中可以加入 <code>&lt;caption&gt;</code>，方便標注表格的 title。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>出帳列表<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>人口<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>年紀<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>2017-11-11<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>kalan.chen<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>12375<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>透過 <code>caption-side: top | bottom</code> 可以做定位。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">caption</span> &#123;</span><br><span class="line">  <span class="attribute">caption-side</span>: top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn-images-1.medium.com/max/2000/1*J7yBJAKumOucYIDsRAUa1g.png" alt=""></p><h2 id="移除不必要的顏色與-border"><a href="#移除不必要的顏色與-border" class="headerlink" title="移除不必要的顏色與 border"></a>移除不必要的顏色與 border</h2><p><img src="https://cdn-images-1.medium.com/max/2000/1*5469jk5PDIYQMJq69DWgog.png" alt=""></p><p>雖然乍看之下色彩繽紛，但對於使用者來說，border 和背景顏色都可能造成視覺雜訊，雖然是看似貼心的設計，但可能難以找到想要的資料。</p><p>使用簡單的灰階做辨識，並消除（或者調淡）邊界的顏色，去除不必要的視覺雜訊，讓使用者更容易找到資料。</p><h2 id="表頭跟內容對齊"><a href="#表頭跟內容對齊" class="headerlink" title="表頭跟內容對齊"></a>表頭跟內容對齊</h2><p>一般來說文字會靠左對齊，而數字則是靠右對齊。</p><h2 id="提供簡單的排序與搜尋"><a href="#提供簡單的排序與搜尋" class="headerlink" title="提供簡單的排序與搜尋"></a>提供簡單的排序與搜尋</h2><p>對於後台來說，使用者可能會頻繁搜尋表格內的資料，一個方式是每次都用 ajax 請求更新資料，或者在前端實作。我們可以提供簡單的排序功能，方便使用者快速地找到資料，或是提供簡易的搜尋功能。</p><p>題外話：排序其實可以直接使用 <code>element.appendChild</code> 來做，如果 appendChild 的節點已經出現在 parent 當中，會直接替換位置而不會加入一個新的 node。</p><iframe height="500" scrolling="no" title="table sort" src="//codepen.io/kjj6198/embed/qXgQdL/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/kjj6198/pen/qXgQdL/" target="_blank" rel="noopener">table sort</a> by 愷開 (<a href="https://codepen.io/kjj6198" target="_blank" rel="noopener">@kjj6198</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h2 id="考慮簡單的-print"><a href="#考慮簡單的-print" class="headerlink" title="考慮簡單的 @print"></a>考慮簡單的 @print</h2><p>對於像是出帳系統、記錄等等，營運人員除了在網頁上觀看外，也有可能需要將表格內容列印下來，這時可以使用 <code>@media print</code> 的方式處理列印的細節，例如 font-size 的設定可能要用 <code>pt</code> 表示、將顏色改為黑白、縮短間距等等，都是需要考慮的細節。</p><h2 id="reponsive"><a href="#reponsive" class="headerlink" title="reponsive"></a>reponsive</h2><p>傳統的 table 在做手機版支援時，通常是使用水平滾動的方式來顯示。不過在手機上頻繁滾動對使用者來說仍然不是個理想的操作。</p><p>可以利用 data attribute 搭配 CSS 的 pseudo 完成。在手機上，我們將每一個 row 的顯示改為垂直。像這樣：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">caption</span>&gt;</span>付款紀錄<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>方案內容<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>金額<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>數量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>贊助日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>贊助狀態<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-label</span>=<span class="string">"方案"</span>&gt;</span>一枝草一點露，一人一百支持 TingChi<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-label</span>=<span class="string">"金額"</span>&gt;</span>$100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-label</span>=<span class="string">"數量"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-label</span>=<span class="string">"贊助日期"</span>&gt;</span>2016-12-26<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-label</span>=<span class="string">"贊助狀態"</span>&gt;</span>付款成功<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-label</span>=<span class="string">"方案"</span>&gt;</span>一枝草一點露，一人一百支持 TingChi<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-label</span>=<span class="string">"金額"</span>&gt;</span>$100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-label</span>=<span class="string">"數量"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-label</span>=<span class="string">"贊助日期"</span>&gt;</span>2016-12-26<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-label</span>=<span class="string">"贊助狀態"</span> <span class="attr">data-status</span>=<span class="string">"success"</span>&gt;</span>付款成功<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-label</span>=<span class="string">"方案"</span>&gt;</span>一枝草一點露，一人一百支持 TingChi<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-label</span>=<span class="string">"金額"</span>&gt;</span>$100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-label</span>=<span class="string">"數量"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-label</span>=<span class="string">"贊助日期"</span>&gt;</span>2016-12-26<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-label</span>=<span class="string">"贊助狀態"</span> <span class="attr">data-status</span>=<span class="string">"fail"</span>&gt;</span>付款失敗</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"repay-information"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span>&gt;</span>重新付款<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span>&gt;</span>刪除紀錄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn-images-1.medium.com/max/1000/1*fr66cE0Lh50irSlVsvIHfw.png" alt=""></p><p>轉為</p><p><img src="https://cdn-images-1.medium.com/max/1000/1*k73_3ve_SiW7D2QBqXwlGQ.png" alt=""></p><p>這樣即使在手機上也不需要滾動了。</p><iframe height="500" scrolling="no" title="responsive-table" src="//codepen.io/kjj6198/embed/oBZweY/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/kjj6198/pen/oBZweY/" target="_blank" rel="noopener">responsive-table</a> by 愷開 (<a href="https://codepen.io/kjj6198" target="_blank" rel="noopener">@kjj6198</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"PingFang TC"</span>;</span><br><span class="line">  <span class="selector-tag">td</span> &#123; <span class="attribute">text-align</span>: cetner; &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width: 500px) &#123;</span><br><span class="line">  <span class="selector-tag">table</span> &gt; <span class="selector-tag">thead</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">tbody</span> <span class="selector-tag">tr</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#aaa</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">td</span>:first-child &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">td</span>:not(:first-child) &#123; </span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">    &amp;:before &#123;</span><br><span class="line">      <span class="attribute">float</span>: left;</span><br><span class="line">      <span class="attribute">content</span>: attr(data-label);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>table 在資料呈現上相當方便，寬度的計算、等高都已經幫我們實作完成，在製作後台時，table 也幾乎是觀看資料時不可或缺的排版之一。</p><p>table 的設計上也有一些眉角可以注意，本篇文章提供了幾個製作 table 時需要注意的地方以及簡單的實作，未來如果有其他事項也會逐一加入。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;認清一件事實，table 是拿來看，不是被當作絢麗的視覺使用的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近在後台頻繁有使用表格的需求，如何設計對使用者良好的 table 是一項挑戰，尤其在資料筆數多、欄位多的情況下，使用者很容易就會被額外的元素
      
    
    </summary>
    
      <category term="前端" scheme="http://kjj6198.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="table" scheme="http://kjj6198.github.io/tags/table/"/>
    
      <category term="CSS" scheme="http://kjj6198.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>狂歡雙 11  —  祝我生日快樂</title>
    <link href="http://kjj6198.github.io/2017/11/11/1111-happy-birthday/"/>
    <id>http://kjj6198.github.io/2017/11/11/1111-happy-birthday/</id>
    <published>2017-11-11T15:34:10.000Z</published>
    <updated>2017-11-11T15:37:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>今年 1111，除了各大電商正在雙 11 特價外，今天剛好也是我的滿 23 歲的生日。就把這幾年做的事做個整理吧。這篇文章篇幅很長，而且內容很瑣碎，幾乎都是從筆記跟日記當中東拼西湊寫出來的。</p><p>這篇文章有一大部分是寫給自己警惕用的。</p><h2 id="我是誰？"><a href="#我是誰？" class="headerlink" title="我是誰？"></a>我是誰？</h2><p>有時候，年紀越大越有一種逐漸迷失自己的感覺，每次都以為自己找到一個不錯的目標了，再繼續深究下去卻還有一大堆事情，直到現在我恐怕還是沒辦法講清楚我到底想要做什麼吧。不過人生大概就是這樣，會一直迷惘下去的，因此現在最重要的事情應該是，一旦決定好要做什麼，就不要輕易地反悔，否則就是在浪費人生了。</p><h2 id="勞工大代誌"><a href="#勞工大代誌" class="headerlink" title="勞工大代誌"></a>勞工大代誌</h2><p>這是我在勞工節製作的專案，從四月中旬開始規劃、搜集資料到實作，因為平時還有課業跟工作要顧，所以實際上花的時間不多，最後兩天甚至是熬夜在趕工。</p><p>有更多的原因是因為，寫到一半發現又有更多資料想要搜集，不知不覺就變得非常龐大了。</p><p>我以為給自己時間很充裕了，但仍然有太多議題沒有涵蓋到，像是年金制度、職災統計等等。</p><h3 id="為什麼想要做這份專案"><a href="#為什麼想要做這份專案" class="headerlink" title="為什麼想要做這份專案"></a>為什麼想要做這份專案</h3><p>國中跟高中的時候，或許是職科出身的關係，平時除了從報紙跟電視看看一些新聞外，很少汲取社會的議題和發生的事。</p><p>這樣半懺悔、半好奇的心態，開始搜集了一些台灣過去的勞工運動以及相關數據。像是薪資漲幅、平均工時、出生率等等，這些都是當我看到數據的當下才發現，原來事情那麼大條。<br>工時高居全球、薪資漲幅凍漲將近十年、出生率最後一名、即將邁入超高齡社會等等。</p><p>如果說現在這個渺小的我能夠做些什麼，大概就是勞動節時上街遊行，聽聽勞工的聲音是怎樣，畢竟身為一位準勞工，再過不久大概就會遇到同樣的情境。</p><p>更何況是在我還沒出社會之前，就已經是那麼慘的現況了。</p><p>台灣的勞動環境仍然有許多待改進的地方，後人能夠享受到的果實絕不是理所當然。</p><p>這些前輩們用血汗、用人生、甚至賠上性命來爭取更好的勞工環境。</p><p>身為一位工程師能做的事情不多，這個社會上還有更多用科技無法觸及的事。<br>但能夠拋磚引玉地讓人了解到「啊！原來還有這樣子的事啊」，就好了。</p><p>其實在查資料的時候，有很多讓人鼻酸的故事。</p><p>像是關廠工人臥軌時，民眾大喊輾過去；像是看到台電大樓的紀念碑連名字都沒有，藏在樹叢裡頭；像是看見 101 樹立的國殤紀念碑，卻過了那麼久才知道那是為何而來。</p><p>我們所處的社會當中有太多的理所當然，捷運順利地運作、高鐵能夠平安無事地從高雄開到台北、101 能夠安穩座落在臺北城、垃圾桶的垃圾有人收、廁所有人清、24 小時的便利商店，導致我們常常會忘記那背後隱藏的事情是由多少人的汗水（或是鮮血）堆積起來的，<br>更何況是以前沒有任何勞基法保護的勞工們。</p><h2 id="日語八百屋"><a href="#日語八百屋" class="headerlink" title="日語八百屋"></a>日語八百屋</h2><h3 id="學日文"><a href="#學日文" class="headerlink" title="學日文"></a>學日文</h3><p>我還依稀記得學日文初期，每天都在咖啡廳點完一杯拿鐵後，從中午待到晚上，學習方式也相當土法煉鋼。把書裡頭的課文看過幾遍後，練習書中的習題與文法，再把單字與學到的概念記錄在筆記本上。就這樣持續了一年左右，筆記本已經塞得滿滿的。</p><p>這期間真的空虛寂寞覺得冷，因為沒有人能夠讓你練習，在還沒有到達一定程度前，別人也只會用肥魯宅之類的字眼來嘲笑你而已。當時對我來說最好的方式就是用 lang-8。</p><p>有時候一不小心就會落入寫程式的陷阱，會非常直觀地去用「是否與程式有關」的方式選擇自己的行為。這對當時的我來說是個很好的指標，不過這顯然不該是不去學習新東西的理由。</p><p>幾年前的我曾經寫過「小說，我最愛的毒品」，看得出來當時文筆的稚嫩跟想法的天真。然而我很慶幸當時曾經有各種方式來記錄生活。包含部落格之外，我從國中到現在，已經寫了四本日記。</p><p>雖然用現在的角度來看，不免對自己以前的荒唐與智障莞爾一笑，不過他也的確構築了現在的我。我並不希望自己成為一個除了寫程式以外，眼睛黯淡無光，無法對世上其他事物產生熱情的人。</p><p>大約在前幾個月，我開始準備了線上課程。那對我來說是個很特別的體驗，因為之前並沒有任何日語的教學經驗，但想趁著這個機會來練習自己的教學規劃外，也希望能夠把以前的筆記、經驗統一做個整理。</p><p>規劃期花了我 2~3 個禮拜，從思考一位日語初學者在剛學習日文時會遇到的困難，循序漸進到名詞、形容詞、動詞、敬語常體轉換等等。送出審核時很緊張，很怕自己沒辦法通過。又偷偷地想，如果沒有通過至少我就不用準備了吧XD。</p><p>通過後，陷入了三個月的忙碌期，每天下班回來後就是坐在電腦前錄音，寫講義。幸好當時有規劃好整個課程架構，才讓課程順利上線。</p><p>這讓我深刻體會到線上教學的難處，雖然省下了實體教學的重複性與場地限制，但是每次的影片剪輯都要花將近 3 ~ 4 個小時製作、微調，更別說後期的字幕了，尤其是語言教學要在雙語間切換。</p><p>不過最後仍然順利上線了，對我來說這是個相當有成就感的一件事，看著大家報名與提問，覺得一切都很值得。</p><h2 id="自學日文文章整理"><a href="#自學日文文章整理" class="headerlink" title="自學日文文章整理"></a>自學日文文章整理</h2><ul><li><a href="https://goo.gl/Tm336k" target="_blank" rel="noopener">自學四年通過日檢 N3, N2 心得</a></li><li><a href="https://goo.gl/dnN5Zk" target="_blank" rel="noopener">只要活著就會有痛苦－聲之形</a></li><li><a href="https://goo.gl/LRjtDd" target="_blank" rel="noopener">給初學者的日文自學指南</a></li><li><a href="https://goo.gl/6mieM9" target="_blank" rel="noopener">日語學習資源總整理</a></li><li><a href="https://goo.gl/sW3Lkp" target="_blank" rel="noopener">日檢 N3, N2 文法總整理 - part1</a></li><li><a href="https://goo.gl/KVU5Vf" target="_blank" rel="noopener">日本服務業用語</a></li><li><a href="https://goo.gl/BDweo5" target="_blank" rel="noopener">我的日語學習之道</a></li><li><a href="https://goo.gl/1gkYqv" target="_blank" rel="noopener">日本眾議院選舉</a></li><li><a href="https://goo.gl/KAR7UC" target="_blank" rel="noopener">教科書上的八田與一</a></li><li><a href="https://goo.gl/vmd5i3" target="_blank" rel="noopener">日文主題單字篇 - 剪髮</a></li><li><a href="https://goo.gl/4JKWZm" target="_blank" rel="noopener">「気」的各種用法</a></li></ul><h2 id="語言能力"><a href="#語言能力" class="headerlink" title="語言能力"></a>語言能力</h2><p>在這個年代，語言能力已經算是基本條件。更何況，在台灣比我厲害的人超乎想像。更何況，幾乎每間大學、科大的應外系，標配就是英文和日文。就算精通這兩門語言，也只是統計樣本中的一點而已。</p><h2 id="整理經驗"><a href="#整理經驗" class="headerlink" title="整理經驗"></a>整理經驗</h2><p>大家在小時候是否都有寫過訂正本？如果我們可以把遇到的問題記錄下來，並且把當時的解決辦法記錄下來的話，以後遇到類似的問題就可以比較快的解決。</p><p>我在開發時會把當時遇到的問題、或是自己在開發途中延伸出來的概念記錄下來，並且在月底統一 review 一次，整理過後把概念已經相對完整的筆記統整為一篇文章發佈。</p><blockquote><p>唯一能夠改變你的，只有你自己的行為而已。</p></blockquote><h2 id="你的未來不是擰螺絲工人"><a href="#你的未來不是擰螺絲工人" class="headerlink" title="你的未來不是擰螺絲工人"></a>你的未來不是擰螺絲工人</h2><p>摩登時代是卓別林的著名默劇之一，因為工業化跟經濟大蕭條的影響，勞工們被資本家壓榨，同時也造成百萬人失業。很諷刺的一部電影。</p><p>現在這個資本過剩的年代，生存已經不是太大的問題。</p><p>但如果不思考人生，那麽就跟裡頭的工人差不多，整天在工廠擰螺絲。</p><blockquote><p>比起支配，我更想要幫助別人 - 卓別林</p></blockquote><h2 id="不要做不喜歡做的工作"><a href="#不要做不喜歡做的工作" class="headerlink" title="不要做不喜歡做的工作"></a>不要做不喜歡做的工作</h2><p>對一件事情有熱情是非常助力的。舉例來說好了，當時為了賺錢，早上通常在漢堡王打工，只能透過晚上自學來補足程式上的不足。進入實習後，才發現強度跟之前比起來實在是天壤之別。所有的事情都會在工作的壓力下被放大，產生的效應是非常可怕的一件事情。我在實習之後才接觸了許多當時線上課程完全沒教、業界卻已經逐漸開始引入的東西。</p><p>別人是用一天 10 小時的時間在做自己喜歡的事，而自己只是用閒暇擠出來的三兩分鐘來做，先不說天份上的差距，光是時間上就已經產生足夠顯著的差異了。</p><h2 id="不要跟別人比較修了幾學分"><a href="#不要跟別人比較修了幾學分" class="headerlink" title="不要跟別人比較修了幾學分"></a>不要跟別人比較修了幾學分</h2><p>在現行體制下的大學教育制度下，畢業門檻通常在 120 ~ 140 學分左右，扣除專業選修及必修外，還有將近 30 多學分的通識課。</p><p>說真的，修的通識課是真的學到東西了，還是只是上下交相賊的營養學分而已？在大一的時候我也把學分修滿，到處去找一些看起來不錯的課上，雖然得到一份看似充實的課程表，但真正精華的知識也只有幾堂課而已，更別說在台科大選通識，根本就是個笑話。</p><p>比起推動 XXX 教育，找到自己真正想要幹嘛才是真正重要的事。在高職或許課業上的壓力比較沒有那麼大，但現在的國民教育，幾乎就像職場一樣，把一天 8 小時塞到滿檔，晚上繼續補習。晚上累得要命，更別提深入思考所學的本質、關心週遭事物、甚至是培養興趣。</p><p>因此在追求知識的同時，自己多出去看看週遭的事物、思考、深思熟慮之後再做選擇，比起到處比較學分來得重要多了。</p><h2 id="不要被-Buzzword-影響"><a href="#不要被-Buzzword-影響" class="headerlink" title="不要被 Buzzword 影響"></a>不要被 Buzzword 影響</h2><p>你是真的喜歡現在做的事，還是只是時勢而已？前陣子推廣的程式教育以及多元領域課程、機器學習等等，其實都是假議題，如果不思考自己學習的目的，學習這些領域都只會落入痛苦的泥沼而已。</p><blockquote><p>沒有人能夠幫你決定未來。</p></blockquote><p>如果決定自己要做什麼很難，那麼可以從決定自己不要做什麼開始。</p><h2 id="不要後悔自己的選擇"><a href="#不要後悔自己的選擇" class="headerlink" title="不要後悔自己的選擇"></a>不要後悔自己的選擇</h2><p>人生是一連串的選擇。<br>實習很好，唸書很好，出國留學很好，去旅行也很好，待在台灣也很好，<br>只要那是你想要的，那就好。</p><p>但不要惋惜自己的人生，一旦你厭倦，你就只是在浪費人生。儘管我仍然不確定是否在這個領域上走下去是不是正確的道路。</p><h2 id="不要汲汲營營於逢場作戲的人際關係"><a href="#不要汲汲營營於逢場作戲的人際關係" class="headerlink" title="不要汲汲營營於逢場作戲的人際關係"></a>不要汲汲營營於逢場作戲的人際關係</h2><p>剛上大學的時候常常會去跟同學進行「社交」活動，例如一起吃午餐、逛夜市、唱歌等等，後來想想，或許只是自己只是害怕沒有人的情況下，要不斷在問自己的問題而已。</p><p>這種時間通常才是最重要的，因為後來根本不會有人因為和你吃過飯，有過幾次交流，就突然變成知心好友。更別講有人會把這種行為視為拓展人脈。</p><p>因此如果真心想要在大學中找到比較要好的朋友，或許可以從社團、擔任幹部開始，當一群人有了同一個目標而聚在一起時，也比較容易和彼此交流，而不是午飯間的雜談閒聊而已。</p><h2 id="年輕不是本錢"><a href="#年輕不是本錢" class="headerlink" title="年輕不是本錢"></a>年輕不是本錢</h2><p>很多人都會說年輕是本錢，目前的我很幸運，都還在平均年齡 30 歲以下的團隊工作。</p><p>但是這個社會很多人並不在乎你的經歷、能力是什麼。就像雖然我有兩年多的工作經驗，在社會上仍然會被認為是個剛畢業的大學生，然後再用各種美麗的包裝壓低你的薪水而已。</p><p>他們通常並不在乎你做了什麼，而是你的學歷、有沒有在上市公司上班、多益成績這種根本無法辨識的指標。當然啦具備能力的人通常也會有上述幾個條件，他們根本不在乎學歷年紀這種指標。畢竟資深有時只是代表做的比較久而已。</p><h2 id="臉書"><a href="#臉書" class="headerlink" title="臉書"></a>臉書</h2><p>最近，我把臉書上許多會令我分心粉絲專頁以及內容農場給刪掉了，像是各種行車記錄器影片、蘋果日報、即時動新聞等等。盡量讓我的動態牆不要被各種我不喜歡的事物強姦。</p><p>絕望的是，舉凡youtube 爆紅、某某女星私密照流出、一生要做的幾件事等等，下面的回應都非常熱烈。</p><p>他們看似無傷大雅，可是卻在默默腐蝕我的心靈，尤其像我這種會被下一個影片給吸引的人，一旦點開來第一部影片就會繼續看下去。</p><p>最後，為了避免惱人的通知，我把 Facebook 的 App 也刪掉了。除了剛開始有點不習慣之外，其實沒有太大的變化，反而空出更多時間來。也不會下意識地打開 App，如果真的想滑就用網頁版的，那種單純和不方便的操作方式反而可以減少我在 Facebook 上虛耗的光陰。</p><h2 id="最重要的是思考"><a href="#最重要的是思考" class="headerlink" title="最重要的是思考"></a>最重要的是思考</h2><p>台灣的教育在高中上後直接導向士農工商，成績比較爛的就被丟去二流的職業學校。把課程排爆棚，一天跟上班時間一樣的 8 小時，再加上補習班，根本沒有多餘的時間讓你思考人生、關心周遭的事物，只會讓人變得跟溫順。</p><p>對於一個只要頭腦不要太差，經濟狀況許可的一般人來說，一路安然到大學是個常態分佈現象。但神奇的是這群人在畢業以後，出來做的卻是幾乎在撿角般的工作。他們覺得自己很努力了。</p><p>可是努力這個字本身是個相當諷刺的字眼，尤其是這個年代來說，「努力」基本上已經是個基本條件，而不再是個能夠拿來說嘴的人格特質。在大學時拼命攢學分，去修一些名不見經傳的課程，對於無法用努力取勝的科目就施以小惠，再想辦法矇混過關。</p><p>最後發現四年過去了，找工作時一點屁用都沒有。從小到大我們並沒有好好地去思考自己想要的是什麼，導致念完大學之後已經逐漸喪失獨立思考的能力，變成隨波逐流的島民。</p><p>不要管太多，只要努力工作就好；修法？這是沒辦法的事；薪水被壓榨？就算不開心生活還是要過。於是圈養出了一群已經生活毫無目標可言，每天抱怨的愚民們。</p><p>他們不但鄙視那些地位比較高的人，一旦有人試圖反抗，想要為這個社會發聲，如果他看起來並沒有這群人那麼慘，他們還會沆瀣一氣去阻止這個人，變成了同階級之間的弱弱相殘。很怕其他人不小心就得到了比自己更好的生活。</p><p>這群人很努力，但如果被施以錯誤的教育以及思考上的怠惰，最終或許就會導致這樣的結果。</p><p>因此最重要的在於如何思考，這個目標是一輩子的課題，「生也有涯、而知也無涯」後面常常被省略一句，「以有涯隨無涯，殆已。已而為知者，殆而已矣」，用有限的生命來追求無盡的知（不只限於知識），是很危險的事情。如果這樣做還自以為很聰明，那就更危險了。</p><p>知識上的不足可以用思考彌補，但是不思考又一知半解，什麼事都做不好，那才是最可怕的。而目前的台灣大學生，恐怕都在往這個方向前進。</p><p>至於怎麼練習思考，最剛開始或許可以從閱讀開始。</p><h2 id="2018-年目標"><a href="#2018-年目標" class="headerlink" title="2018 年目標"></a>2018 年目標</h2><p>轉眼間四五年過去了，走了不少冤枉路，每次到自己的生日，都會有種馬齒徒增的焦慮感，也不知道自己是否在一條正確的道路上。回顧一下之前所發生的事，不禁覺得自己有一大半的時間都在虛度光陰。不過儘管如此，他也的確是一部分的我。</p><p>想要做的事情還有很多，但如果真的要說出一個比較完整的目標，大概就是「我想做一個有用的人」吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今年 1111，除了各大電商正在雙 11 特價外，今天剛好也是我的滿 23 歲的生日。就把這幾年做的事做個整理吧。這篇文章篇幅很長，而且內容很瑣碎，幾乎都是從筆記跟日記當中東拼西湊寫出來的。&lt;/p&gt;
&lt;p&gt;這篇文章有一大部分是寫給自己警惕用的。&lt;/p&gt;
&lt;h2 id=&quot;我是
      
    
    </summary>
    
      <category term="雜談" scheme="http://kjj6198.github.io/categories/%E9%9B%9C%E8%AB%87/"/>
    
    
      <category term="雙 11" scheme="http://kjj6198.github.io/tags/%E9%9B%99-11/"/>
    
  </entry>
  
  <entry>
    <title>Better Express error</title>
    <link href="http://kjj6198.github.io/2017/11/10/better-express-error/"/>
    <id>http://kjj6198.github.io/2017/11/10/better-express-error/</id>
    <published>2017-11-09T16:48:23.000Z</published>
    <updated>2017-11-09T16:52:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Better-express-error"><a href="#Better-express-error" class="headerlink" title="Better-express-error"></a>Better-express-error</h2><p>在 express 開發時，如果遇到錯誤，通常是直接印在 error page 上，或者在 production 端直接導到 404, 500 page。</p><p>這雖然沒有什麼值得一提的是，不過說真的，看到這種頁面，你會覺得開心嗎？</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*X2Aflg99Mnj0J6cO.png" alt="default error"></p><p>熟悉 Ruby On Rails 開發的工程師，應該多少都用過 <a href="https://github.com/charliesome/better_errors" target="_blank" rel="noopener">better_errors</a>，或者 rails 本身內建的 error trace page 來 debug。</p><p>不過在 express 上，還沒有看到一個功能類似 better error 的 package，常常只能看這種醜不拉嘰的 error message 仰天長嘯。</p><p>於是，自己做了一個簡單的 middleware 處理這件事。其實本質上就是 bettor errors 的 express 實作啦</p><h3 id="分析錯誤訊息"><a href="#分析錯誤訊息" class="headerlink" title="分析錯誤訊息"></a>分析錯誤訊息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TypeError: range out of bound. Please check http://kjj6198.github.io for more information.</span><br><span class="line">at app.get (/Users/kalan/code/express-error/server/app.js:17:9)</span><br><span class="line">at Layer.handle [as handle_request] (/Users/kalan/code/express-error/node_modules/express/lib/router/layer.js:95:5)</span><br><span class="line">at next (/Users/kalan/code/express-error/node_modules/express/lib/router/route.js:137:13)</span><br><span class="line">at Route.dispatch (/Users/kalan/code/express-error/node_modules/express/lib/router/route.js:112:3)</span><br><span class="line">at Layer.handle [as handle_request] (/Users/kalan/code/express-error/node_modules/express/lib/router/layer.js:95:5)</span><br><span class="line">at /Users/kalan/code/express-error/node_modules/express/lib/router/index.js:281:22</span><br><span class="line">at Function.process_params (/Users/kalan/code/express-error/node_modules/express/lib/router/index.js:335:12)</span><br><span class="line">at next (/Users/kalan/code/express-error/node_modules/express/lib/router/index.js:275:10)</span><br><span class="line">at jsonParser (/Users/kalan/code/express-error/node_modules/body-parser/lib/types/json.js:109:7)</span><br><span class="line">at Layer.handle [as handle_request] (/Users/kalan/code/express-error/node_modules/express/lib/router/layer.js:95:5)</span><br></pre></td></tr></table></figure><p>仔細觀察後可以發現，錯誤訊息的格式是相當整齊規律的。首先，第一行為錯誤名稱與訊息，這通常是最重要的資訊。第二行以後則是調用 stack。at … 是某個函數的呼叫，括號內則是檔名與行數、row 的訊息。</p><p>簡單分析完錯誤訊息後，我們可以把純文字轉為比較有用的資訊。因此透過 <code>split(&#39;\n&#39;)</code>，再根據字串做簡單的正規表達式匹配，就能分成檔名與行數資訊了。</p><h2 id="顯示-Error"><a href="#顯示-Error" class="headerlink" title="顯示 Error"></a>顯示 Error</h2><p>對於第一行的錯誤訊息，通常是最重要的資訊，因為程式碼就是在那邊噴錯的，因此對於第一行錯誤訊息，我們將他放在最顯眼的地方並且 highlight。</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*T2X0Nqo4PGzGvEhf.png" alt="better error(1)"></p><p>而第二行之後的錯誤訊息，用顏色及大小來標示檔案名稱、行數以及調用的函式名稱。</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*-_wnYW14Jo-ue8fd.png" alt="better error(2)"></p><p>比起前面一坨黑黑的文字，這樣簡單的整理已經可以讓開發者可以一目了然到底發生了什麼事。</p><h2 id="顯示檔案內容"><a href="#顯示檔案內容" class="headerlink" title="顯示檔案內容"></a>顯示檔案內容</h2><p>不過，除了顯示錯誤訊息之外，我們也希望能夠同時顯示對應的檔案內容，以及上下文有哪些。因此右半邊可以利用錯誤訊息中提供的檔案名稱與行數，顯示對應的檔案內容。</p><p>對於 nodejs 來說，只要透過 <code>fs.readFileSync</code> 就夠了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">filename, line, row</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> content = fs.readFileSync(filename);</span><br><span class="line">  content.toString()</span><br><span class="line">  .split(<span class="string">'\n'</span>)</span><br><span class="line">  .slice(line - <span class="number">5</span>, line + <span class="number">5</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">content</span> =&gt;</span> <span class="string">`&lt;span&gt;<span class="subst">$&#123;content&#125;</span>&lt;/span&gt;`</span>)</span><br><span class="line">  .join(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這邊是透過很簡單的方式，直接印出前五行及後五行，更聰明的方式是透過像是 AST 之類的技巧，只印出對應到的 function 內容。不過現在我們直接印出前後五行的程式碼即可。</p><p>做一些調整與修改，大概長這樣：</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*PUiGswh8G584aPli.png" alt="better error(3)"></p><p>透過簡單的 highlight，讓開發者馬上知道出錯的地方在哪邊。</p><h2 id="REPL"><a href="#REPL" class="headerlink" title="REPL"></a>REPL</h2><p>除了顯示 error 外，我們還希望這個頁面可以輸入一些簡單的程式，確認問題點後，再實際修改程式碼。</p><p>在 nodejs 當中，有個 VM 的模組，能夠讓你使用 V8 的 Virtual Machine contexts 執行給定的 code。透過這個模組，我們就能夠實現類似 REPL 的功能了！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debugContext = vm.createContext(&#123;</span><br><span class="line">  request: req,</span><br><span class="line">  response: res,</span><br><span class="line">  util: <span class="built_in">require</span>(<span class="string">'util'</span>),</span><br><span class="line">  Buffer: <span class="built_in">require</span>(<span class="string">'buffer'</span>).Buffer,</span><br><span class="line">  stream: <span class="built_in">require</span>(<span class="string">'stream'</span>),</span><br><span class="line">  <span class="built_in">console</span>: &#123;</span><br><span class="line">    log: util.format</span><br><span class="line">  &#125;,</span><br><span class="line">  clear: <span class="string">''</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>把想要暴露的變數傳入 context 當中，在透過 POST 的方式讀取前端的 code，就可以很方便地達到 debug 的效果。</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*j9Xv7cHFRKhIB0qT.png" alt="better error(4)"></p><p>（以上還需要做一些調整）</p><h2 id="全部整合！"><a href="#全部整合！" class="headerlink" title="全部整合！"></a>全部整合！</h2><p><img src="https://cdn-images-1.medium.com/max/2000/0*9tlC_sW6UAyDeHgv.png" alt="better error(5)"></p><p>全部整合起來後，頁面大概會長這樣。</p><p>比起原本的純文字，雖然花了一些功調整頁面 style 與實現 REPL 的功能，不過讓 debug 的流程變得更加流暢了。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p><a href="https://github.com/kjj6198/express-error" target="_blank" rel="noopener">express-error</a></p><p>詳細的實作在這個 repo 裏頭，最近如果比較有空會在將實作抽換為 middleware 的形式方便大家使用。也會逐漸優化整個 layout 與 code highlight 的部分，並且讓整個流程跟畫面更加流暢一些。雖然不知道會過多久就是了 XD</p><p>如果有各種建議也歡迎提出 issue。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Better-express-error&quot;&gt;&lt;a href=&quot;#Better-express-error&quot; class=&quot;headerlink&quot; title=&quot;Better-express-error&quot;&gt;&lt;/a&gt;Better-express-error&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="nodejs" scheme="http://kjj6198.github.io/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://kjj6198.github.io/tags/nodejs/"/>
    
      <category term="express" scheme="http://kjj6198.github.io/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>透過 AWS lambda 上傳 Medium 文章</title>
    <link href="http://kjj6198.github.io/2017/11/10/AWS-lambda-medium/"/>
    <id>http://kjj6198.github.io/2017/11/10/AWS-lambda-medium/</id>
    <published>2017-11-09T16:46:28.000Z</published>
    <updated>2017-11-09T16:50:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Medium 本身不支援 code block 編輯，雖然不知道背後的原因為何（或許工程師並非主要客群），所以如果要高亮程式碼，一個作法是直接貼圖片，一個是貼在 gist 上後再 embed 到文章當中。</p><p>程式碼用圖片貼出雖然可以達到高亮效果，但對工程師來說是一件相當不友善的事，因為無法透過複製貼上的方式來實際測試你的程式碼，或者編輯文章時還要手動修圖，是一件很麻煩的事。</p><p>不過貼上 gist 也有幾個問題</p><ul><li>手機版無法觀看，會直接噴出連結給你而非嵌入的內容</li><li>自己貼 code 到 gist 太麻煩。（不過搭配 vscode sublime 等套件上傳到 gist 也是個不錯的方式）</li></ul><p>為了盡量在 Medium 看到高亮的 code block，最後決定使用 AWS Lambda 解決這件事。</p><h2 id="AWS-Lambda"><a href="#AWS-Lambda" class="headerlink" title="AWS Lambda"></a><a href="https://aws.amazon.com/tw/lambda/" target="_blank" rel="noopener">AWS Lambda</a></h2><p>對於 Lambda 還不了解的讀者，目前網路上已經有很多資源可以觀看，這邊不再贅述。Lambda 是讓 AWS 幫你執行想要的 function，而不用實際去建立一個 server（當然背後還是有 server 啦）。透過這種方式，我們不用寫個 function 就要部署到一台機器，甚至去維護它，我們只需要執行就好。</p><h3 id="Github-Issue"><a href="#Github-Issue" class="headerlink" title="Github Issue"></a>Github Issue</h3><p>為了串接到 lambda 的 endpoint，決定透過 github webhook 觸發。因為在 github 可以使用 issue 寫 markdown，還可以上傳圖片（github 幫你 host）、預覽、code block 等，其實相當方便。想要發布文章時，再透過 close issue 觸發 webhook，再透過 lambda 將 code block 上傳至 gist，最後呼叫 Medium API 建立文章。</p><h3 id="Medium-API"><a href="#Medium-API" class="headerlink" title="Medium API"></a>Medium API</h3><ul><li><a href="https://github.com/Medium/medium-api-docs" target="_blank" rel="noopener">https://github.com/Medium/medium-api-docs</a></li></ul><p>Medium 的 API 短小輕薄，不過方便好用。首先先到個人頁面的 <strong>setting</strong> &gt; <strong>Integration tokens</strong> 生成 token，再透過 token 呼叫建立文章的 API 即可。</p><h3 id="Gist-API"><a href="#Gist-API" class="headerlink" title="Gist API"></a>Gist API</h3><p>gist API 也是一樣，為了不讓自己的 gist 一片混亂，建議可以另外再開一個帳號專門存放文章使用的 code。到 <strong>settings &gt; developer settings &gt; personal access token &gt; generate token</strong> 建立 token，記得勾選 gist 權限。</p><h2 id="串接-Lambda"><a href="#串接-Lambda" class="headerlink" title="串接 Lambda"></a>串接 Lambda</h2><p>前置工作做好後就可以開始串接 lambda 了。</p><p>首先把建立好的 lambda endpoint 放到 github webhook 中，然後隨便找一個可以編譯 markdown 為 HTML 的 package（我是用 <code>marked</code>），結合起來就可以囉！</p><p>一個簡單的實作在<a href="https://github.com/DnD-mag/DnD-lamda" target="_blank" rel="noopener">這裡</a>。雖然稍嫌麻煩，不過其實還挺方便的。不知道 Medium 何時才要支援 code block QQ。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Medium 本身不支援 code block 編輯，雖然不知道背後的原因為何（或許工程師並非主要客群），所以如果要高亮程式碼，一個作法是直接貼圖片，一個是貼在 gist 上後再 embed 到文章當中。&lt;/p&gt;
&lt;p&gt;程式碼用圖片貼出雖然可以達到高亮效果，但對工程師來說是
      
    
    </summary>
    
      <category term="AWS" scheme="http://kjj6198.github.io/categories/AWS/"/>
    
    
      <category term="lambda" scheme="http://kjj6198.github.io/tags/lambda/"/>
    
      <category term="medium" scheme="http://kjj6198.github.io/tags/medium/"/>
    
  </entry>
  
  <entry>
    <title>自學四年通過日檢 N2 心得</title>
    <link href="http://kjj6198.github.io/2017/10/07/jlpt-learning/"/>
    <id>http://kjj6198.github.io/2017/10/07/jlpt-learning/</id>
    <published>2017-10-07T13:47:12.000Z</published>
    <updated>2017-10-07T13:50:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>從大學開始，因為高中畢業後對日本文化相當有興趣，所以開始自學五十音。先談談我的背景：</p><ul><li>高職電子科畢業</li><li>科大資管系</li></ul><p>大學選修初階日文跟進階日文，不過進度本身已超過課程許多。期間雖然一直想報名日檢，但礙於自身實力與經濟考量，所以直到大學快畢業後才報考日檢。</p><p>以下是我這次的日檢成績：</p><ul><li>日本語能力檢定 <strong>N2 (134/180)</strong></li><li>日本語能力檢定 <strong>N3 (163/180)</strong></li></ul><p><img src="https://cdn-images-1.medium.com/max/2000/1*N94QaFraADD7onb_wP-KeA.png" alt="N2"></p><p><img src="https://cdn-images-1.medium.com/max/2000/1*STX_msnfGMBp95gEUNhXlw.png" alt="N3"></p><p>這並不是很亮眼的成績，不過這篇文章會結合我自己自學日文的經驗，並且分享一些學習的技巧，畢竟一直以來依靠許多網路資源，希望能夠回饋給大家。</p><p>這篇文章會分成兩部分，第一部分談談自己對學習語言的看法，第二部分則是介紹一些我在學習日文時常用的學習資源。</p><p>這篇文章不會提到答題技巧或是短期衝刺的秘訣，原因很簡單，日檢等考試都可能會更改制度或題型，未來可能主流的考試也並非 JLPT，過度追求答題技巧可能只會造成反效果而已。</p><h3 id="為什麼要學日文？"><a href="#為什麼要學日文？" class="headerlink" title="為什麼要學日文？"></a>為什麼要學日文？</h3><p>首先先思考：「為什麼要學日文？」。</p><p>英文不論廣度以及對於工作的幫助，毋庸置疑都是一個投資報酬率遠高於日文的語言，想清楚自己為何要學習日文這件事很重要。</p><blockquote><p><em>大家都會一點日文，感覺好像很簡單</em></p></blockquote><blockquote><p><em>我的好朋友們都選日文當通識，我想要跟他們一起上課</em></p></blockquote><blockquote><p><em>日文跟中文蠻像的，應該很好學</em></p></blockquote><blockquote><p><em>學日文應該很有用</em></p></blockquote><p>學習一些大家都會用的日文很簡單，早安晚安、數數、形容詞變化，比較好一點懂得ます形變化就能夠橫行無阻了。不過這真的是你想要的目標嗎？你花了金錢和時間學習一項技能，最後遺忘。</p><p>所以在開始之前，我希望各位都能夠思考學習日文的理由，儘管最後得出的答案可能是興趣、看日劇、看動漫、追星、甚至只是一句爽都好，<strong>只要你知道你在做什麼</strong>。</p><p>這裡推薦大家閱讀一下 Denny 寫的<a href="https://medium.com/@dennyku/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%B8%8D%E9%9C%80%E8%A6%81-%E5%AF%AB%E7%A8%8B%E5%BC%8F-%E8%A3%9C%E7%BF%92%E7%8F%AD-b6b7ca174393" target="_blank" rel="noopener">為什麼你可能不需要「寫程式」補習班？</a>。</p><p>學語言跟學程式很像。學日文的人太多了，如果搞不清楚自己的價值，那麼只能在社會的洪流中被淘汰而已。</p><h3 id="要不要報名補習班？"><a href="#要不要報名補習班？" class="headerlink" title="要不要報名補習班？"></a>要不要報名補習班？</h3><p>在學習日文的路上，如果有人能夠給你適當的指導，那麼絕對能夠少走很多冤枉路，在市面上有很多日語補習班，品質參差不齊。</p><p>所以在被其他補習班的話術迷惑之前，記得先上網做做功課，衡量自己的時間成本後再決定是否需要投入。</p><p>我在大學四年中雖然有修過初級日文及進階日文，但除了初級日文外，自身學習的進度都遠超過課程當中的內容。</p><h3 id="用笨方法學日文"><a href="#用笨方法學日文" class="headerlink" title="用笨方法學日文"></a>用笨方法學日文</h3><h4 id="1-每天-2-小時"><a href="#1-每天-2-小時" class="headerlink" title="1. 每天 2 小時"></a>1. 每天 2 小時</h4><p>學習初期絕對會是最枯燥跟痛苦的時候，因為你沒有任何的基礎觸類旁通，只能緩慢地累積單字量跟文法。這個階段我每天會安排空閒的時間念日文，<strong>然後做筆記</strong>。</p><p>大概 2 個月過後，我已經能夠使用形容詞變化、基本動詞變化，但這時我的單字量並沒有很多，大概只會一些生活常見單字跟動詞而已。</p><p>比起單字，這個時候的重點應該是<strong>盡可能地了解日文的文法規則和句子組成。</strong></p><p>原因很簡單，我們都知道動詞進行式要加 ing 被動是要加上 ed，這是英文當中相當基本的規則。雖然你也可以從大量的句子當中找出這樣的規則，但直接學習文法是了解規則最快的方式。</p><blockquote><p><em>打排球也要知道怎樣算出界跟犯規吧！</em></p></blockquote><p>等到基本文法學習完畢（名詞句變化、形容詞句、形容動詞、動詞變化、敬語常語轉換、て形應用）後，開始能夠看懂大部分的<strong>句子組成架構</strong>後，重點就轉為背單字了。</p><p>特別注意，<strong>動詞是一個語言的靈魂</strong>，動詞變化的掌握度決定你對語言的熟悉程度。所以初期學習日文的目標應該盡量以文法導向，先不用著墨太多會話與單字。</p><h4 id="2-利用零碎時間背單字"><a href="#2-利用零碎時間背單字" class="headerlink" title="2. 利用零碎時間背單字"></a>2. 利用零碎時間背單字</h4><p>下面會講到 Anki 這個應用程式，他能夠根據你對單字的熟悉度更改出現的頻率。</p><p>透過這個應用程式，開始在零碎時間累積單字，並持續加強不熟的文法。</p><p>這個階段也可以開始看一些比較簡單的文章，從文章中練習日本人是如何組織句子的。這個階段會是成長速度最快的階段，因為你已經有足夠的基礎。而這時你應該開始將核心著重於累積單字量上。</p><h4 id="3-深入日本文化"><a href="#3-深入日本文化" class="headerlink" title="3. 深入日本文化"></a>3. 深入日本文化</h4><p>像是「尊敬語」、「謙讓語」，以及他們的變化規則，雖然稍嫌複雜，不過已經有閱讀量跟單字量當作根基，很快就能上手。同時也可以開始針對日文的「複合動詞」、「擬態語」、「熟語」做加強。</p><h4 id="4-針對特定主題"><a href="#4-針對特定主題" class="headerlink" title="4. 針對特定主題"></a>4. 針對特定主題</h4><p>之前撰寫過服務業日語、日語單字剪髮篇，都是在特定情境下背單字，這可以提昇你對單字的熟悉度。</p><h4 id="5-多聞闕疑"><a href="#5-多聞闕疑" class="headerlink" title="5. 多聞闕疑"></a>5. 多聞闕疑</h4><p>如果在學習的階段中遇到一些容易混肴的觀念，像是最常見的「が、は」的使用方式，先不用急著想知道答案，你可能看過 100 種不同的說法。這時候可以先放下心中的疑問，繼續學習，等到累積的閱讀量跟文法夠紮實的時候，自然就會知道。也就是我們常常說的「語感」</p><h3 id="怎麼準備考試的？"><a href="#怎麼準備考試的？" class="headerlink" title="怎麼準備考試的？"></a>怎麼準備考試的？</h3><p>考試前我有買 「EZJapan N3 應考對策」跟「EZJapan N2 應考對策」。大概在前兩週開始寫試題，看解析，把不熟的單字背起來。平常看日劇，NHK 練聽力跟閱讀。</p><p>不過自己平時就有固定學習日文的習慣，所以考前 2 個禮拜時除了做題目練手感之外沒有做太多準備，下面會再提到我有利用哪些資源學習。</p><h3 id="自學資源整理"><a href="#自學資源整理" class="headerlink" title="自學資源整理"></a>自學資源整理</h3><p>之前我有寫過一篇關於自學資源的文章，這邊再補充一些資訊給大家參考。</p><p>在學習日文到一定的程度後，就是靠單字跟閱讀量的累積來決勝負了。學習文法雖然能夠幫助我們快速理解，但是最重要的還是「累積」。</p><p>自己在跌跌撞撞找了很多網站跟資源後，選出幾個我覺得非常有用的網站推薦給大家，希望能夠幫助到一樣在自學之路上跌跌撞撞的學習者們。</p><h4 id="1-Nippon-所藏"><a href="#1-Nippon-所藏" class="headerlink" title="1. Nippon 所藏"></a>1. <a href="http://www.books.com.tw/products/0010729474" target="_blank" rel="noopener">Nippon 所藏</a></h4><p>我喜歡日本文化，所以到書店時如果有看到喜歡的雜誌或書籍就會買下來。其中我最喜歡的就是 Nippon 所藏。他的排版非常用心，而且內容相當豐富，我每一本都買下來了。裏頭也可以學習到很多關於日本流行的話題跟單字。如果程度還沒有很紮實的初學者，每一篇文章都有中文對照，也有提供單字跟文法筆記。</p><ul><li><strong>日本和食 100 品</strong>：提供許多日式料理的食譜，獲益良多。</li><li><strong>日本流行話題 100 選</strong>：結合當時日本時下流行的話題，像是半澤直樹、王牌大律師、家政婦女王、日本核災、晴空塔等等。</li><li><strong>日本潮流 100 選</strong>：以「時尚」為主題，裏頭有許多關於美容美髮相關的單字，有一章節是在討論如何修飾自己的造型、體態，後半段甚至還有約會筆記跟注意事項！</li><li><strong>日本職場案內 100 則</strong>：敘述日本的職場文化以及潛規則，像是年功序列制、團塊世代、寄信時、接電話時、交換名片時要注意的事情，也有一小節是在教你如何使用「尊敬語」與「謙讓語」，如果要到日本工作的朋友們，這本相當推</li></ul><h4 id="2-音速日語學習"><a href="#2-音速日語學習" class="headerlink" title="2. 音速日語學習"></a>2. <a href="https://jp.sonic-learning.com/" target="_blank" rel="noopener">音速日語學習</a></h4><p>大家在學習日文的旅途上應該都有它的陪伴吧，我自己在剛學習日文時是每天都會到音速日語學習中學習一個單元。一個單元雖然不多，不過累積了 3 個月之後就有將近 100 個單元。</p><h4 id="3-日劇"><a href="#3-日劇" class="headerlink" title="3. 日劇"></a>3. 日劇</h4><p>在大學四年中，我看了許多日劇。不過我看日劇時會分成學習和純娛樂兩種，學習時我會把字幕擋起來，遇到聽不太懂的句子就直接暫停重聽，再把新學習到的單字或句子輸入到 Anki 當中之後再複習。</p><p>印象最深刻的是我之前把王牌大律師後面死刑辯論那一段全部背下來了XD。這樣子學習效果很好，因為他強迫你重複去聽某個句子，而且事後的複習又會加深印象以及日劇當中的場景作輔助。（雖然聽力還是我的罩門QQ）</p><h4 id="4-Lang-8"><a href="#4-Lang-8" class="headerlink" title="4. Lang-8"></a>4. <a href="http://lang-8.com/" target="_blank" rel="noopener">Lang-8</a></h4><p><img src="https://cdn-images-1.medium.com/max/2000/1*SnCiZHXA30pEek1ToxwhWg.png" alt="img"></p><p>是我在學習日文中，幫助最大的學習平台，沒有之一。他的運作方式是這樣的，你可以在這個平台上用你想要學習的語言<strong>撰寫日記</strong>，之後就會有相對的母語人士來幫你修改。</p><p>這樣子誰要來幫我改？這個網站的機制做得很好，如果你想要你的日記被別人看到，你就要用你的母語幫別人修改日記，才能拿到點數（Lang-8 裡頭稱作 L-point），點數越高你的排名就會越高，日記的曝光率也就越高。</p><p>所以別人為了拿點數，就會來閱讀、修改你的日記，久而久之就能搜集來自母語者的建議。</p><p>就算你只有 N5, N4 的程度也沒關係，放下自尊跟臉皮寫寫一些文章，今天的心情、發生了什麼事，試著寫下來，就算文法錯了也沒關係。</p><p>不過，也因為如此，偶而會出現修改品質參差不一的情形。例如：有些日本人就硬要你改成敬語。</p><p>或是省略 ている 的 い 時，有些日本人不知道你是不會還是真的不懂，所以就一律幫你加上去等等。所以修改之後的日記品質，必須靠自己確認。</p><p>這的確是讓我學習的一大動力之一，分享日記給日本人看，瀏覽其他國家學習中文後的日記，說真的挺好玩的。可以從中認識一些不錯的朋友也說不定喲！</p><p>很可惜的一點是，目前 Lang-8 這個平台已經不開放註冊了。好像轉移服務到 <a href="https://hinative.com/zh-CN" target="_blank" rel="noopener">HiNative</a> 的平台上去了。Hinative 上比較像是用問問題的模式來進行，個人比較不喜歡，有興趣的讀者們可以參考看看。</p><p>我目前的<strong>排名是 445/410,886</strong>，不過已經荒廢了一陣子。歡迎之前有註冊的朋友們一起交流！</p><h4 id="5-徵求外國朋友佈告欄"><a href="#5-徵求外國朋友佈告欄" class="headerlink" title="5. 徵求外國朋友佈告欄"></a>5. <a href="http://www.jcinfo.net/tw/friends/" target="_blank" rel="noopener">徵求外國朋友佈告欄</a></h4><p>除了日語學習外，也常常會徵求其他國家的朋友。但也有許多來者不善的貼文就是了。</p><p>至於能不能夠找到志同道合的夥伴，需要靠很大的運氣。</p><p>有許多人只是想要和外國人聊聊天而已，並不是真的想要做「語言交換」這個目的。而且就幾次交流的經驗來看，除非雙方都是為了學習語言，不然很容易就陷入純聊天的情況，根本無法進行語言交換。</p><h4 id="6-Anki"><a href="#6-Anki" class="headerlink" title="6. Anki"></a>6. <a href="https://ankiweb.net/" target="_blank" rel="noopener">Anki</a></h4><p>不多說，背單字的神器。我目前也只有累積 4,5000 的單字而已，不過因為我習慣把自己看到有趣的動漫台詞跟<strong>自己的筆記</strong>加進去，所以看單字的時候不至於那麼枯燥。</p><p>像是什麼<strong>趣味でヒーロをやっている者だ</strong>這種句子XD。至少在一片單字海當中，看到幾句中二的台詞能夠調解一下。</p><h4 id="7-日本語之森"><a href="#7-日本語之森" class="headerlink" title="7. 日本語之森"></a>7. <a href="http://nihongonomori.com/" target="_blank" rel="noopener">日本語之森</a></h4><p>文法講解非常清楚。而且資源很豐富，想要短時間加強文法的讀者們可以參考看看！這個網站的特色是都是由日本人來講解文法的，所以可以用更 native 的方式來學習日文。</p><h4 id="8-原文小說"><a href="#8-原文小說" class="headerlink" title="8. 原文小說"></a>8. 原文小說</h4><p>我很喜歡日本推理的作品，像是伊坂幸太郎、米澤穗信、東野圭吾都是我很喜歡的作家，之前到日本時就買了幾本文庫本，在通勤時會拿出來翻，並且把不會的單字用螢光筆匡起來之後回家再查。</p><p>大概持續了兩個月左右，明顯感受到單字量大幅提升，不過看完一本小說的速度好慢QQ，老實說我還沒看完任何一本。</p><h4 id="9-日語八百屋"><a href="#9-日語八百屋" class="headerlink" title="9. 日語八百屋"></a>9. 日語八百屋</h4><p>在今年的 3 月份左右，我成立了<a href="https://www.shurado.com/" target="_blank" rel="noopener">日語八百屋週刊</a>。因為我自己本身有在收集筆記跟文章的習慣，久而久之累積了不少，想說自己做個 email 的服務把這些筆記寄給大家，舒緩一下在漫長日文自學之路中的枯燥苦悶。</p><p><strong>致力於滿足日文、日本、日劇愛好者們的求知慾以及資訊焦慮症。幫助減少學習阻礙、資訊不對稱、增加日本文化知識，內容涵蓋了日語學習、日本旅行、日本文化、動漫、語言學習技巧等等。</strong></p><p>有興趣的朋友們也可以來訂閱看看，如果內容不喜歡隨時可以退訂，或者直接到 <a href="https://medium.com/%E6%97%A5%E8%AA%9E%E5%85%AB%E7%99%BE%E5%B1%8B" target="_blank" rel="noopener">Medium</a> 看看歷期週刊。</p><p>目前已經有 1200 多人訂閱，總共有 24 期週刊內容，也歡迎大家一起分享自己的學習心得或筆記。</p><p><a href="https://www.shurado.com/" target="_blank" rel="noopener">日語八百屋 | 為日本愛好者而生的週刊</a></p><h3 id="寫下來"><a href="#寫下來" class="headerlink" title="寫下來"></a>寫下來</h3><p>寫作是個很好組織自己想法的方式。如果在學習日文時有做筆記的習慣，那麼一年兩年累積下來的量相當可觀。</p><p>同時，如果你能夠將文章發佈在部落格當中，除了能夠幫助到其他人之外，因為需要讓別人看到，所以你更需要強迫自己組織好自己的文章架構。</p><blockquote><p>光是寫下來這件事，你就贏過許多舉足不前的台灣人了。</p></blockquote><h4 id="一些推薦使用的工具"><a href="#一些推薦使用的工具" class="headerlink" title="一些推薦使用的工具"></a>一些推薦使用的工具</h4><ul><li><a href="https://evernote.com/intl/zh-tw/" target="_blank" rel="noopener">Evernote</a> 非常好用的筆記軟體，除了用在日語學習上還可以用在工作、生活當中，他的搜尋機制相當強大，很容易就可以找到自己想要找的東西</li><li>Google drive</li><li><a href="https://typora.io/" target="_blank" rel="noopener">typora</a>：一個 <a href="http://markdown.tw/" target="_blank" rel="noopener">markdown</a> 的編輯器，喜歡 markdown 語法，或是想要嘗試簡潔地寫文章非常推薦這個軟體！</li></ul><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>其實當初沒有想很多，只是一直以來都對日本文化有興趣，想要趁著高中畢業的空檔學習。後來因為科系（資管系）的關係，有部分的技術文章或是部落格都是用日文撰寫，還有一年跑去台大修日本歷史（全日文授課），覺得當初幸好有好好學日文。後來出社會面試後，也因為日文的關係，在面試時遇到日本人時可以多講幾句話加深印象。</p><p>這次考完試給我最大的感受應該就是真正的日文學習之路才剛開始而已。</p><p>如果以檢定為目標，你可能會錯失許多學習日文的美景，不過考取檢定確實是一個測試自己實力的好方法，不管是為了什麼目標考取檢定，我們都應該要知道，檢定只是一個另外一個起點而已。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;從大學開始，因為高中畢業後對日本文化相當有興趣，所以開始自學五十音。先談談我的背景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高職電子科畢業&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="日語學習" scheme="http://kjj6198.github.io/categories/%E6%97%A5%E8%AA%9E%E5%AD%B8%E7%BF%92/"/>
    
    
      <category term="JLPT" scheme="http://kjj6198.github.io/tags/JLPT/"/>
    
      <category term="日檢" scheme="http://kjj6198.github.io/tags/%E6%97%A5%E6%AA%A2/"/>
    
      <category term="日語學習" scheme="http://kjj6198.github.io/tags/%E6%97%A5%E8%AA%9E%E5%AD%B8%E7%BF%92/"/>
    
      <category term="日語八百屋" scheme="http://kjj6198.github.io/tags/%E6%97%A5%E8%AA%9E%E5%85%AB%E7%99%BE%E5%B1%8B/"/>
    
  </entry>
  
  <entry>
    <title>React16 重點整理</title>
    <link href="http://kjj6198.github.io/2017/10/02/react-16-features/"/>
    <id>http://kjj6198.github.io/2017/10/02/react-16-features/</id>
    <published>2017-10-01T16:00:00.000Z</published>
    <updated>2017-10-07T13:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>react 終於正式發佈 v16 了，其實<a href="https://reactjs.org/blog/2017/09/26/react-v16.0.html" target="_blank" rel="noopener">官方部落格</a>的介紹已經相當完整（而且賞心悅目）。本篇文章作為筆記與統整，精簡了部分的細節。</p><h3 id="1-componentDidPatch-error-info"><a href="#1-componentDidPatch-error-info" class="headerlink" title="1. componentDidPatch(error, info)"></a>1. componentDidPatch(error, info)</h3><p>react16 最亮眼的部分，加入 ErrorBoundary 的功能，確保在 lifecycle 時的錯誤不會影響到整個 component。之前如果在 render 時發生錯誤，會導致整個 component 不見。</p><p><strong>只有在 Error 在 lifecycle method 被呼叫時才會傳入 componentDidPatch</strong>，所以在 constructor 之類的地方 throw Error 是不會被 componentDidCatch 給 catch 的。</p><p><code>componentDidCatch</code> 傳入兩個參數 error, info。可以在 componentDidCatch 內處理錯誤，fallback UI 或是呼叫第三方服務紀錄錯誤等等。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'oops'</span>); <span class="comment">// 不會傳入 componentDidCatch</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'oops'</span>);</span><br><span class="line">      <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      post: &#123; <span class="attr">content</span>: <span class="string">''</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  updatePost = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123; ...state, <span class="attr">post</span>: <span class="literal">null</span> &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  componentDidCatch(error, info) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">hasError</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    Logger.warn(error, info);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Post post=&#123;<span class="keyword">this</span>.state.post&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>除了上面的範例之外，你也可以透過 higher order component 的技巧將 <code>componentDidCatch</code> 包裝，或者是設定 <code>ErrorBoundary</code> 等等的 component 統一處理 children 的錯誤。</p><h3 id="2-Text-Only-component"><a href="#2-Text-Only-component" class="headerlink" title="2. Text-Only component"></a>2. Text-Only component</h3><p>刪除了不必要的 span 與 react-text 節點，並且可以直接回傳字串。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Text = <span class="function">(<span class="params">&#123; text &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'pure string!'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Text /&gt; <span class="comment">// render 'pure string', rather than &lt;span&gt;pure string&lt;/span&gt;</span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-ReactDOM-createPortal-component-dom"><a href="#3-ReactDOM-createPortal-component-dom" class="headerlink" title="*3. ReactDOM.createPortal(component, dom)"></a>*3. ReactDOM.createPortal(component, dom)</h3><p><code>createPortal</code> 也是我相當喜歡的新功能之一，他能夠透過在 Component Tree 裡頭另外 render 到其他 DOM 上，並且可以完全脫離 Children 也沒有關係，像是下面的結構。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;Main header&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">      &#123;ReactDOM.createPortal(&lt;Sidebar /</span>&gt;, <span class="built_in">document</span>.querySelector(<span class="string">'#app2'</span>))&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><code>App</code> 裡頭可以透過 <code>ReactDOM.createPortal()</code>，除了閱讀性比較好之外（不用透過 callback 或是直接操作 DOM 的方式），還能夠對 Children 以外的節點操作，對於寫像是 modal 這種可能需要 overlay 的 component 很方便。（overlay 可能要再根節點上，比較好處理）</p><h3 id="4-Custom-Attributes"><a href="#4-Custom-Attributes" class="headerlink" title="4. Custom Attributes"></a>4. Custom Attributes</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">  &lt;div ui-prefix-scroller=<span class="string">'foo'</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )    </span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="5-prevent-update"><a href="#5-prevent-update" class="headerlink" title="5. prevent update"></a>5. prevent update</h3><p>在 setState 回傳 null 不會觸發更新（之前的版本會）。以後不想更新 component 可以透過傳入 null 來解決。</p><h3 id="6-SSR-的支援"><a href="#6-SSR-的支援" class="headerlink" title="6. SSR 的支援"></a>6. SSR 的支援</h3><p>詳細可以參考 <a href="https://hackernoon.com/whats-new-with-server-side-rendering-in-react-16-9b0d78585d67" target="_blank" rel="noopener">What’s new with serverside rendering in react16</a>，值得一提的是 react16 SSR 開始支援 stream，<code>renderToNodeStream(Component)</code> 回傳 stream。</p><p>以及文章作者提到的：</p><blockquote><p>please, please, please make sure you always set <code>NODE_ENV</code> to <code>production</code> when using React SSR in production!</p></blockquote><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>以上就是 React 16 的主要更動。官方部落格有更詳盡的介紹。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;react 終於正式發佈 v16 了，其實&lt;a href=&quot;https://reactjs.org/blog/2017/09/26/react-v16.0.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方部落格&lt;/a&gt;的介紹已經相當完整（而且賞
      
    
    </summary>
    
      <category term="前端" scheme="http://kjj6198.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="react" scheme="http://kjj6198.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>前端面試心得</title>
    <link href="http://kjj6198.github.io/2017/09/02/frontend-interview/"/>
    <id>http://kjj6198.github.io/2017/09/02/frontend-interview/</id>
    <published>2017-09-01T16:00:00.000Z</published>
    <updated>2017-10-08T09:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>終於有時間整理最近的面試歷程了。先總結一些看到的事情：</p><ol><li>通常公司面試只考 Javascript 的熟悉度，多數關於演算法或是解釋原型鍊等等，很少考 DOM 或是 Event 的操作。</li><li>幾乎不考 CSS，就算有也只是簡單判斷 class、ID 優先度這種基本題目而已。</li><li>沒有面試考 HTML，例如 semantic tag、accessilbility、input type 使用等等。</li><li>React、Redux、ES6 語法幾乎成為前端必備技能，Angular 比較少公司採用。</li><li>普遍的獵頭都不夠專業，也有可能是太菜了還沒被專業的獵頭找上</li></ol><p>以下是這次面試的公司：</p><ol><li>Accupass</li><li>Codementor</li><li>Linker Network Inc.</li><li>樂天市場</li><li>17 media</li></ol><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>國立科大資管系，目前已經有兩年工作經驗。平時專注在前端開發，接觸 React、Redux 開發約兩年的時間。除了一般的前端「工程」之外，自己也很喜歡畫面的實作與互動，同時也有在自己的小專案當中練習後端的知識，像是 AWS、Lambda、nodejs、資料庫、機器學習等等，不過最熟悉的還是前端相關。</p><h3 id="期待的工作環境"><a href="#期待的工作環境" class="headerlink" title="期待的工作環境"></a>期待的工作環境</h3><ol><li>能夠和前端團隊一起合作。之前的工作經驗因為前端開發都只有自己一人，所以比較難討論特定的前端技術</li><li>不會有太多突發狀況。像是突然就改需求、砍掉開發中的產品、因為人情而被迫開發的案子等等</li><li>有主產品以及明確的服務</li><li>技術含量高，可以和優秀的團隊一起共事</li></ol><h3 id="找工作的管道"><a href="#找工作的管道" class="headerlink" title="找工作的管道"></a>找工作的管道</h3><ul><li>inside jobboard</li><li>yourator</li><li>104 人力銀行</li><li>f2e jobs</li><li>PTT Soft_Job 版</li></ul><h3 id="1-Accupass-活動通"><a href="#1-Accupass-活動通" class="headerlink" title="1. Accupass 活動通"></a>1. Accupass 活動通</h3><p><strong>應徵職位：Frontend Developer</strong></p><p>一個活動票券的網站，最近正在將架構從 Angular 改寫為 React，原因是原本的 Angular 較難維護，而且很容易產生牽一髮動全身的情形。</p><h4 id="面試前"><a href="#面試前" class="headerlink" title="面試前"></a>面試前</h4><p>在 104 上被邀約面試，是由 PM 邀約面試的。</p><h4 id="面試中"><a href="#面試中" class="headerlink" title="面試中"></a>面試中</h4><p>團隊正在擴編。面試主要聊一些自己的工作經驗以及一些小項目。當天面試我的前端工程師是一位日本人XD，但是中文講得很好（全程都是中文面試）。</p><p>聊了關於 Accupass 的開發狀況、如何開發功能、管理時程等等，也和前端工程師聊技術，從 CSSModules、RxJS 聊到 CycleJS，感覺是個對前端技術很有熱忱的工程師。</p><h4 id="面試結果"><a href="#面試結果" class="headerlink" title="面試結果"></a>面試結果</h4><p>婉拒 offer。</p><p>PM 相當希望我能夠加入 Accupass 團隊，婉拒後也撥了通電話詢問原因，並提及如果以後有機會希望能夠一起合作。不過由於其他職位更吸引我，所以拒絕了 Accupass 的 offer。</p><h3 id="2-Linker-Network-Inc-美商寶蘊凌科網路科技有限公司"><a href="#2-Linker-Network-Inc-美商寶蘊凌科網路科技有限公司" class="headerlink" title="2. Linker Network Inc. 美商寶蘊凌科網路科技有限公司"></a>2. Linker Network Inc. 美商寶蘊凌科網路科技有限公司</h3><p><strong>應徵職位：Frontend Developer</strong></p><p>專門做 IOT、AI、機器學習的雲端運算平台，因為這些 platform 需要 UI 的支持，所以需要前端開發協助。官網還蠻簡陋的，看不出個所以然，不過做的事情技術含量很高。</p><h4 id="面試前-1"><a href="#面試前-1" class="headerlink" title="面試前"></a>面試前</h4><p>在 104 上主動投遞履歷，被電話邀請面試。這間公司做的技術含量很深，也有在線下辦一些社群。</p><h4 id="面試中-1"><a href="#面試中-1" class="headerlink" title="面試中"></a>面試中</h4><p>感覺得出來是個蠻技術含量很紮實的公司。自我介紹談了一下過去的工作經驗，以及用 React, Redux。</p><p>我之後才知道原來當初面試我的是 c9s ，想說怎麼那麼眼熟。感覺得出來是位大大，技術的掌握度很深。（不過本人看起來比較憔悴）</p><p>面試時考了些偏優化的題目，像是：</p><ol><li>js 如何做 minify？<br>這題是要你大概解釋一下 js minify 的過程，最後簡化到如何消除程式碼中不必要的空白。這題的想法很簡單，不過實作起來有一些細節要注意，當時沒有想很多，被提示很多次才寫出來</li><li>前端效能優化可以怎麼做？<br>提了一些常見的方式，不過感覺沒有很合面試官的胃口。像是 base64 編碼減少請求數、快取、ServiceWorker 等等。</li><li>如果要你做一個 SPA 的 framework，你會怎麼做？<br>如果要我做，首先要考慮的是 router 的處理方式，畢竟 SPA 需要依靠前端做 router。後來被提醒了還要考慮 lifecycle 的問題</li><li>一些 Javascript 的問題</li><li>原形鍊的原理</li><li><code>new</code> 背後發生了什麼事？</li><li>如何實作繼承</li><li><code>this</code> 指向誰</li></ol><p>最後由一位看起來是主管的人跟我談一些公司現況、未來發展等等。</p><h4 id="面試結果-1"><a href="#面試結果-1" class="headerlink" title="面試結果"></a>面試結果</h4><p>無聲卡（到現在已經三週），大概是太菜了吧QQ</p><h3 id="3-台灣樂天市場"><a href="#3-台灣樂天市場" class="headerlink" title="3. 台灣樂天市場"></a>3. 台灣樂天市場</h3><p><strong>應徵職位：Frontend Developer</strong></p><p>之前有參加過一次面試，不過因為沒辦法提供全職的上班時間（也不確定是不是）。所以重新又投了一次。辦公室的氣氛跟一般大公司差不多，要有員工證才能進辦公室。</p><h4 id="面試前-2"><a href="#面試前-2" class="headerlink" title="面試前"></a>面試前</h4><p>HR 聯絡，寄給我一張身家調查表以及程式考題。上頭的格式大概跟 104 履歷差不多。這邊我想特別講一下他們的面試邀約信。</p><p>一般的公司通常在信上附上地址，不過樂天市場會把一些重要的地標標示出來，例如 XX 號出口、在 XX 銀行上面、出電梯右轉等等，雖然這是一個微不足道的提醒，但對面試者來說很有用，畢竟誰都不想在大太陽底下看 google map 還不小心走反方向。</p><h4 id="面試中-2"><a href="#面試中-2" class="headerlink" title="面試中"></a>面試中</h4><p>這次的面試比起以前好像又更制式一些，還要寫智力測驗跟人格測驗的考卷，考一些類似加減乘除之類的題目，我好像還錯了幾題XD。整個面試流程又因為這樣拉長了一些時間。</p><p>跟工程師面試的過程蠻愉快的，主要也是聊一些工作經驗以及對技術的了解，兩位工程師感覺也是技術很強的大大。有一位工程師之前已經面試過我，跟我說「我對你的技術能力沒有太大問題」，但是因為卡兵役的關係還是被 reject 掉，整個很感動QQ。</p><p>後來我還發現原來有一位就是 <a href="https://github.com/AllenFang/react-bootstrap-table/" target="_blank" rel="noopener">react-bootstrap-table</a> 的 creator。</p><p>面試主要考了一些 Javascript 的東西，像是：</p><ol><li>遞迴以及實際應用<br>例如有一題反轉字串，主考官叫我用遞迴實現，並問我好處是什麼。我想破頭也想不出來，網路也找不到答案。</li><li>閉包與實際開發應用</li><li>IIFE（立即執行函式） 的好處<br>我舉了幾個例子，不過後來一位工程師跟我分享 jQuery 的原始碼，說用 IIFE 的方式也可以有效幫助 minify（因為把 window 參數化了），這招倒是我以前從來沒想過的。</li><li>React、Redux 的開發場景應用<br>考一些 Redux 常見開發情景、管理 store 的方式、react lifecycle 的應用</li><li>（更新）如何不用 <code>+</code> 實作加法功能<br>這題考對 bit operator 了解。透過 <code>XOR</code> 可以做到，高中的加法器有教XD，不過還是要畫一下真值表。</li><li>（更新）台灣樂天市場有一句令我印象深刻的標語：<strong>複雜的東西簡單化、簡單的東西流程化、流程的東西標準化、標準化的東西自動化。</strong>（不確定原文是不是這樣）</li></ol><p>之後問了一些比較工程化的問題，像是 CI/CD、如何跑開發流程等等，樂天市場的技術線蠻多的，Angular、React、RoR、GraphQL 都有。</p><h4 id="面試結果-2"><a href="#面試結果-2" class="headerlink" title="面試結果"></a>面試結果</h4><p>因為還是資格不符，所以基本上應該是被淘汰。不過前端 team 感覺得出來相當紮實，兩位工程師除了前端外都有其他領域的開發經驗，而且相當友善，面試結束時還請我喝了一杯飲料（雖然是公司的販賣機啦XD），也給了我很多關於職涯上的建議。</p><h3 id="4-Codementor"><a href="#4-Codementor" class="headerlink" title="4. Codementor"></a>4. Codementor</h3><p><strong>應徵職位：Frontend Developer</strong></p><p>做一對一的線上 mentor 的服務。衍伸出來許多服務，像是線上 code review、debug、pair programming 等等。</p><h4 id="面試前-3"><a href="#面試前-3" class="headerlink" title="面試前"></a>面試前</h4><p>因為技術含量高，而且面對的對象又是工程師，想說是個很好練功的地方，在 104 上投遞履歷，隔天收到 HR 線上面試邀請。我還蠻喜歡線上面試的，不用額外跑到公司一趟對工程師來說實在是一大福音啊！</p><h4 id="面試中-3"><a href="#面試中-3" class="headerlink" title="面試中"></a>面試中</h4><p><strong>第一階段 — 工程師面試</strong></p><p>跟 team lead 面試，聊一些過去的工作經驗，問了一些開發上的問題。口頭考了一些 javascript 跟 react 的理解</p><ol><li>閉包</li><li>flux v.s MVC 解決了什麼問題：老實說我沒有實際用過 flux，只有看過架構圖跟 code，所以只能靠自己的理解來回答</li><li>javascript 是如何做到非同步的？談對 call stack 跟 event loop 的理解</li></ol><p><strong>第二階段 — 與 co-founder 面試</strong></p><p>一樣在線上跟 co-founder 聊天。這個階段比較少提技術的部分，自我介紹完了之後，他對我的一個 side project 好像很有興趣XD，問我當初成立的動機以及為什麼沒有把它變成完整的服務。有好一段時間都在談這個小專案，也有談到 code mentor 也有在做類似內容平台的服務。</p><p>後來問了一些 code mentor 的歷史以及一些團隊文化。總共約 30–40 分鐘左右</p><p><strong>第三階段 — 與 CEO 面試</strong></p><p>CEO 人在 California，一樣在線上面試。主要也是聊一些自己的工作內容跟開發經驗以及一些關於人格特質的問題。應該是希望從對談當中聊聊彼此之間的契合程度吧！總共約 30–40 分鐘左右。</p><p>因為 code mentor 的 co-founder 以及 CEO 都是工程師出身，聊起來相當愉快，不會有種從上往下看你的感覺。</p><p>他後來問了一題「你覺得你自己是個聰明人嗎？」。我回答不是，看過越多的程式碼與演算法後更是如此覺得。</p><p>自己可能一輩子都沒辦法設計出像 React 那麼龐大的架構，或是各種排序演算法等等，怎麼想都不覺得自己很聰明。</p><h4 id="面試後"><a href="#面試後" class="headerlink" title="面試後"></a>面試後</h4><p>約五天後被婉拒，好像是找到更 senior 的前端。code mentor 給我的感覺相當愉快，不管是 CEO 或是 team lead 都給我一種對自己產品相當有熱忱的感覺。希望未來還可以跟他們一起合作。</p><h3 id="5-17-media"><a href="#5-17-media" class="headerlink" title="5. 17 media"></a>5. 17 media</h3><p><strong>應徵職位：Frontend Developer</strong></p><p>這應該是我目前面試過最愉快的一間公司。從 f2e jobs 上看到徵才資訊，一直猶豫要不要投履歷，後來是朋友推薦後獲得面試邀約。</p><h4 id="面試中-4"><a href="#面試中-4" class="headerlink" title="面試中"></a>面試中</h4><p>因為 team lead 是用下班時間面試 18:30。我很準時到達辦公室，team lead 也很準時出現在辦公室。這點讓我很欣賞。</p><p>有些公司因為不確定面試者什麼時候來，所以多數都是工程師還在工作的狀態下突然被通知要面試才匆匆忙忙準備相關資料，或者臨時看一下履歷表。問了一下目前到現在面試幾個人了，他還特地秀出 slack 的訊息，還順便註記了幾個人遲到。是個相當重視時間的人。</p><p>剛開始先由 HR 帶領晃過公司一圈。辦公室挺大的，零食櫃跟冰箱很猛，還有咖啡機、咖啡豆、微波爐等器具，聽說 RD team 還有另外一間辦公室，不過當天去的情況看來還是有點擠。</p><p>再來是 team lead 面試，首先先自我介紹跟講一些工作經驗。</p><p>一邊聊一邊帶到目前公司、團隊的狀況。感覺起來是個蠻保護團隊的人。之後就是 live coding 了，為了模擬真實的情況，所以不會斷網路，主要考一些 javascript 常見開發應用跟 built-in function 的實作。</p><p>寫出來之後，team lead 就會從你寫的 code 當中開始討論技術。像是這邊為什麼要這樣寫，有沒有更好的寫法等等，他花了很多時間在討論、問問題以及提出自己對這段 code 的意見，感覺就像實際在 code review 一樣。這邊也花了最久時間，大概也有 1.5hr 左右吧。</p><p>最後會給你一段髒髒的程式碼要你做 code review 跟解 bug，一起討論完之後，面試就結束了。</p><p>出辦公室的時候大概已經 21:50 幾分了吧，他很有耐心都一直在旁邊做事。比較讓我印象深刻的是我們一起討論 <code>\B</code> 的用法，這是很少人會去理解的正規表達式，所以討論完原本的答案後，我就請教他 <code>\`</code>B `的用法。</p><p>他很有耐心地從 \b、\w 到 \B 一個一個解釋，直接解開了我長久以來的疑問。（網路上很少把 <code>\b</code> 解釋的很清楚）</p><p>他給我幾個感覺：</p><ol><li>真實：不會隱瞞公司的狀況，讓你進來後覺得被騙，而且過程中不經意會講一些工作上遇到的無奈與感嘆，感覺已經看過不少風雨。</li><li>真誠：不會用很奇怪的考題來電人，還會跟你一起討論 code quality、這段 code 要如何改進。這在面試當中是一件相當難得的事情。再來我跟他提到因為辦公室太大讓我不知道一進門要找誰時，他說會再反映給 HR。原本我以為他只是說說而已（畢竟大部分的公司也都是聽聽而已），沒想到他真的有跟 HR 反應，讓我非常感動。</li></ol><h4 id="面試結果-3"><a href="#面試結果-3" class="headerlink" title="面試結果"></a>面試結果</h4><p>offer get。HR 打電話來說明 on board 相關流程。</p><h3 id="面試心得"><a href="#面試心得" class="headerlink" title="面試心得"></a>面試心得</h3><p>面試真的好累QQ，如果可以的話實在不想到處奔波，全部採用線上面試，非常符合 lazy engineer 啊！</p><p>這次面試除了「找工作」之外，也見識到許多開發者，他們或許不常出現在各大社群當中，但是論實力跟涵養，都遠比某些在社群上膨風的開發者來得深厚。並不是說參與社群是一件不好的事，還是有很多人為社群貢獻許多，不過線下也有許多人在默默奉獻，不應該用活躍與否來判斷一個人的實力。</p><p>這一次的面試除了「找工作」這件事之外，我學到的是 — 謙遜。在軟體開發的領域中有太多聰明人了，不斷在提醒著自己有多麽無知。</p><h4 id="1-履歷準備"><a href="#1-履歷準備" class="headerlink" title="1. 履歷準備"></a>1. 履歷準備</h4><p>因為我平常就有寫 medium 跟部落格的習慣，履歷表就能順便放進去。而且因為履歷表是放在 github 上，所以很容易更新。</p><h4 id="2-工作經驗"><a href="#2-工作經驗" class="headerlink" title="2. 工作經驗"></a>2. 工作經驗</h4><p>工作經驗並不是把公司名稱、職稱、年資寫進去而已，你負責哪些工作內容、在公司做了什麼事情，盡量寫得具體一些，例如：</p><ul><li>用 React、Redux 管理複雜頁面開發</li><li>優化首頁 Loading 效能</li></ul><p>就比擔任前端開發來得好許多。</p><h4 id="3-Side-Project"><a href="#3-Side-Project" class="headerlink" title="3. Side Project"></a>3. Side Project</h4><p>除了工作以外，如果有自己的 side project 就更好了，身為工程師一定會有自己想要動手解決的問題。</p><p>可以讓面試官知道你喜歡的領域以及技術線，每個專案當中一定會有一些特定的問題是困擾你很久或是花了許多時間解決的。</p><h4 id="4-多問問題"><a href="#4-多問問題" class="headerlink" title="4. 多問問題"></a>4. 多問問題</h4><p>面試應該是個你來我往的雙向溝通，而不是一場你問我答的標準流程而已，知道如何反問對方，也能夠增加對公司的了解程度。</p><p>通常我都會問一些公司內部的問題，主要會針對這幾個方面問：</p><ol><li><strong>有沒有自動化？</strong><br>很多公司都還是土炮手動 SSH 登入部署。這種開發方式很可能間接一步反映到公司文化上，例如：申請預算流程繁瑣、對能夠自動化的東西視若無睹。</li><li><strong>如何解決 bug？</strong><br>解決 bug 的方式可以看出公司如何排程。例如 bug 怎麼被回報的、誰來決定 bug 的優先度等等，通常從對方的回答就能判斷他們是否有一套規範來決定如何排程的</li><li><strong>需求是否常常變動？</strong><br>從需求變動這個問題來看可以從很多角度切入，什麼是常常變動？在什麼時候變動？怎樣才叫做變動？這時候就能看出這間公司是否會出現明明開發時說 A，結果交差卻說 B 的情形了。</li></ol><p>接下來就是從這上面延伸出來的回答繼續追問了，通常看面試官的回答程度大概就知道這間公司的內部情形了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;終於有時間整理最近的面試歷程了。先總結一些看到的事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通常公司面試只考 Javascript 的熟悉度，多數關於
      
    
    </summary>
    
      <category term="前端" scheme="http://kjj6198.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="面試" scheme="http://kjj6198.github.io/tags/%E9%9D%A2%E8%A9%A6/"/>
    
  </entry>
  
  <entry>
    <title>淺談 ramda 中的幾個 API</title>
    <link href="http://kjj6198.github.io/2017/08/25/ramda-introduction/"/>
    <id>http://kjj6198.github.io/2017/08/25/ramda-introduction/</id>
    <published>2017-08-24T16:14:45.000Z</published>
    <updated>2017-08-24T16:15:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>ramda 是個相當好用的函式庫，如果聽過 lodash 或是 underscore 的話，可以將 ramda 想成 <strong>functional programming</strong> 的 lodash，他們的 API 有許多相似性，差別在於 ramda 本身有 FP 的功能，任何的 API 只要你沒有傳入參數，ramda 就會自動幫你做 curry，這提供了相當大的彈性。</p><p>比如說在 lodash 當中，API 常見的使用方式為：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_.map([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], (n) =&gt; n * <span class="number">2</span>); <span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure><p>而在 ramda 當中則是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R.map(<span class="function">(<span class="params">n</span>) =&gt;</span> n * <span class="number">2</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]); <span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure><p>或者你可以這樣寫：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> times2 = R.map(<span class="function">(<span class="params">n</span>) =&gt;</span> n * <span class="number">2</span>); <span class="comment">// return function</span></span><br><span class="line">times2([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]); <span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure><p>這種方式讓我們不用被資料綁死，可以提高復用性。</p><p>如果你想要瞭解更多有關於 FP 的資訊，我推薦這篇文章：<a href="https://www.byvoid.com/zhs/blog/why-functional-programming" target="_blank" rel="noopener">函數式程序設計為什麼至關重要</a></p><h3 id="直觀-functional-programming"><a href="#直觀-functional-programming" class="headerlink" title="直觀 functional programming"></a>直觀 functional programming</h3><ul><li>一樣的 input 會輸出一樣的 output，不會受到外在狀態而改變結果</li><li>沒有副作用</li></ul><p>###為什麼選擇 Ramda</p><p>ramda 的 API 相當多，大部分的 API 也都非常直觀，所以我們也不需要一一細談。不過 ramda 中有許多優秀的 API 或許可以幫助你減少開發上的複雜度，以下介紹幾個我覺得值得一看的 API</p><h4 id="propEq"><a href="#propEq" class="headerlink" title="propEq"></a>propEq</h4><p>接受字串當作屬性，比對傳入的物件屬性值是否相等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'kalan'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">propEq(<span class="string">'name'</span>, <span class="string">'kalan'</span>)(obj); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等價於</span></span><br><span class="line"><span class="keyword">const</span> propEq = <span class="function">(<span class="params">name, value</span>) =&gt;</span> (obj) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> obj[name] === value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="zipObj"><a href="#zipObj" class="headerlink" title="zipObj"></a>zipObj</h4><p>將傳入的參數壓縮為 <code>object</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">R.zipObj([<span class="string">'id'</span>, <span class="string">'title'</span>], [<span class="string">'2'</span>, <span class="string">'mytitle'</span>]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  id: '2',</span></span><br><span class="line"><span class="comment">  title: 'mytitle'</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="ifElse"><a href="#ifElse" class="headerlink" title="ifElse"></a>ifElse</h4><p>在做 branch 的邏輯時相當好用，你可能會問，幹嘛不直接用 <code>if…else</code> 就好？ramda 當中的 API 都是回傳函數，這代表你可以用 compose 來組裝其他 API。</p><h4 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h4><p>將函式組合，執行的順序是由內到外。可以把它聯想為國高中很常見的函數題 <code>f(g(h(x)))</code>。所以要先計算 <code>h(x)</code> 的值，再依序下去。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = compose(</span><br><span class="line">  toInteger,</span><br><span class="line">  toCurrency(<span class="string">'TWD'</span>),</span><br><span class="line">  toUppercase</span><br><span class="line">)(<span class="string">"125000"</span>)</span><br></pre></td></tr></table></figure><h4 id="useWith"><a href="#useWith" class="headerlink" title="useWith"></a>useWith</h4><p>接收一個函數跟函數陣列。將資料丟入函數陣列運算出來的結果，再丟入第一個函數當中。</p><p>善用 <code>useWith</code> 可以幫助我們達到 point free 的效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> currencies = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'TWD'</span>, <span class="attr">shape</span>: <span class="string">'$'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'USD'</span>, <span class="attr">shape</span>: <span class="string">'$'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'JPY'</span>, <span class="attr">shape</span>: <span class="string">'¥'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'CAD'</span>, <span class="attr">shape</span>: <span class="string">'$'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// without useWith</span></span><br><span class="line"><span class="keyword">const</span> getCurrency = <span class="function">(<span class="params">name, dic</span>) =&gt;</span> R.find(</span><br><span class="line">  R.propEq(<span class="string">'name'</span>, name),</span><br><span class="line">  dic</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">getCurrency(<span class="string">'TWD'</span>, currencies); <span class="comment">// $</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// with useWith</span></span><br><span class="line"><span class="keyword">const</span> getCurrency = R.useWith(</span><br><span class="line">  R.find,</span><br><span class="line">  [R.propEq(<span class="string">'name'</span>), R.identity]</span><br><span class="line">); <span class="comment">// 將第一個參數傳入 R.propEq，第二個參數傳入 R.identity，運算後的結果分別丟給 R.find 的第一與第二個參數。</span></span><br><span class="line"></span><br><span class="line">getCurrency(<span class="string">'TWD'</span>, currencies);</span><br></pre></td></tr></table></figure><p>使用 <code>useWith</code> 後消除了 <code>name</code> <code>dic</code> 這兩個參數。</p><p><img src="/Users/kalan/Desktop/fn1.png" alt="fn1"></p><h4 id="converge"><a href="#converge" class="headerlink" title="converge"></a>converge</h4><p>這個函數跟上面的 <code>useWith</code> 有點類似，不過 converge 只接收一個參數。下面這張圖可以很直觀地看出這兩者的差別。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getRange = R.converge(substract, [getFirst, getLast])(numbers); <span class="comment">// return 9</span></span><br></pre></td></tr></table></figure><p><img src="/Users/kalan/Desktop/fn2.png" alt="fn2"></p><h4 id="identity"><a href="#identity" class="headerlink" title="identity"></a>identity</h4><p>有點太直觀了……，反而不知道怎麼解釋。直接用程式碼解釋比較快。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> identify = <span class="function">(<span class="params">arg</span>) =&gt;</span> arg</span><br></pre></td></tr></table></figure><p>至於為什麼要這樣做呢？有時你可能需要組織你的函數達到 chainable，這時 <code>identity</code> 這個函數就能夠派上用場。</p><h4 id="tap"><a href="#tap" class="headerlink" title="tap"></a>tap</h4><p>傳入參數給指定的函數，然後回傳值。這在 debug 或是串接其他第三方的時候相當好用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tap(<span class="built_in">console</span>.log)(<span class="string">'hello world'</span>); <span class="comment">// 傳入 hello world 給 console.log，並且回傳 hello world 這個值</span></span><br></pre></td></tr></table></figure><p>上面的例子可能看不出來 <code>tap</code> 的用處，我們用搭配 <code>compose</code> 一起使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uploadToMedium = <span class="function"><span class="params">article</span> =&gt;</span> API.postArticle(article);</span><br><span class="line"><span class="keyword">const</span> notifyAdmin    = <span class="function"><span class="params">article</span> =&gt;</span> API.notify(article, subscribers);</span><br><span class="line"><span class="keyword">const</span> log = <span class="function"><span class="params">article</span> =&gt;</span> Logger.log(article)</span><br><span class="line"><span class="keyword">const</span> preprocessArticle = <span class="function"><span class="params">article</span> =&gt;</span> article.toLowerCase()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> publishPostFlow = <span class="function">(<span class="params">article</span>) =&gt;</span> compose(</span><br><span class="line">  preprocessArticle,</span><br><span class="line">  R.tap(uploadToMedium),</span><br><span class="line">  R.tap(notifyAdmin),</span><br><span class="line">  R.tap(log)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">publishPostFlow(article);</span><br></pre></td></tr></table></figure><p>這樣一來我們可以很方便地串接其他服務，而不必再撰寫類似 <code>return article</code> 這樣的程式碼，一方面可以減少樣板代碼的麻煩，一方面可以減少出錯的機率。</p><h4 id="pluck"><a href="#pluck" class="headerlink" title="pluck"></a>pluck</h4><p>跟字面上的意思差不多，將指定參數的 value 摘取下來變成新的值。在巢狀物件取值時很有幫助，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">&#123;</span><br><span class="line">  id: <span class="string">'1'</span>,</span><br><span class="line">  content: <span class="string">'content...'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  id: <span class="string">'2'</span>,</span><br><span class="line">  content: <span class="string">'content...'</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  id: <span class="string">'3'</span>,</span><br><span class="line">  content: <span class="string">'content...'</span></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getIds = R.pluck(<span class="string">'id'</span>, data); <span class="comment">// return ['1','2','3']</span></span><br></pre></td></tr></table></figure><h4 id="pick-pickBy-pickAll"><a href="#pick-pickBy-pickAll" class="headerlink" title="pick, pickBy, pickAll"></a>pick, pickBy, pickAll</h4><p>實務上我們可能不會用到物件當中所有的屬性，可能只要取出一些屬性來使用而已，這三個 <code>pick</code> 系列的函數可以很方便做到這件事：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://api.github.com/repos/example/magazine/issues/1"</span>,</span><br><span class="line">  <span class="string">"repository_url"</span>: <span class="string">"https://api.github.com/repos/example/magazine"</span>,</span><br><span class="line">  <span class="string">"labels_url"</span>: <span class="string">"https://api.github.com/repos/example/magazine/issues/1/labels&#123;/name&#125;"</span>,</span><br><span class="line">  <span class="string">"comments_url"</span>: <span class="string">"https://api.github.com/repos/example/magazine/issues/1/comments"</span>,</span><br><span class="line">  <span class="string">"events_url"</span>: <span class="string">"https://api.github.com/repos/example/magazine/issues/1/events"</span>,</span><br><span class="line">  <span class="string">"html_url"</span>: <span class="string">"https://github.com/example/magazine/issues/1"</span>,</span><br><span class="line">  <span class="string">"id"</span>: <span class="number">252372781</span>,</span><br><span class="line">  <span class="string">"number"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"test issue"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">R.pick([<span class="string">'url'</span>, <span class="string">'repository_url'</span>, <span class="string">'id'</span>, <span class="string">'name'</span>], data); <span class="comment">// 回傳這三個屬性的值，如果找不到此屬性直接忽略</span></span><br><span class="line"></span><br><span class="line">R.pickAll([<span class="string">'url'</span>, <span class="string">'repository_url'</span>, <span class="string">'name'</span>], data) <span class="comment">// 回傳值如果屬性存在，沒有的話會回傳 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isURL = <span class="function">(<span class="params">value, key</span>) =&gt;</span> key.indexOf(<span class="string">'_url'</span>) !== <span class="number">-1</span></span><br><span class="line">R.pickBy(isURL, data); <span class="comment">// 回傳任何屬性含有 _url</span></span><br></pre></td></tr></table></figure><h4 id="pathOr"><a href="#pathOr" class="headerlink" title="pathOr"></a>pathOr</h4><p>前端在呼叫後端 API 時，回傳的 JSON 有時會有相當深層的結構，如果用一般的方式 <code>a &amp;&amp; a.b &amp;&amp; a.b.c</code> 的方式取值，不僅程式碼相當雜亂，而且一旦結構過深，就要寫更多的判斷式。</p><p><code>pathOr</code> 接受陣列當作取值的順序，一旦取值回傳 <code>undefined</code> 就會回傳預設值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> article = &#123;</span><br><span class="line">  id: <span class="string">"116208916"</span>,</span><br><span class="line">  author: &#123;</span><br><span class="line">    information: &#123;</span><br><span class="line">      birthday: <span class="string">"1994-11-11"</span>,</span><br><span class="line">      name: <span class="string">'kalan'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    subscribers_count: <span class="number">1239</span></span><br><span class="line">  &#125;,</span><br><span class="line">  content: &#123;</span><br><span class="line">  title: <span class="string">'title'</span>,</span><br><span class="line">body: <span class="string">'body'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果後端回傳的欄位不齊全，很有可能造成錯誤發生，這個時候就能透過 <code>pathOr</code> 來做處理。這樣一來如果生日沒有值的話就會用「未提供生日」這個字串取代。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getBirthday = R.pathOr([<span class="string">'author'</span>, <span class="string">'information'</span>, <span class="string">'birthday'</span>], <span class="string">'未提供生日'</span>);</span><br><span class="line">getBirthday(article);</span><br></pre></td></tr></table></figure><h4 id="memoize"><a href="#memoize" class="headerlink" title="memoize"></a>memoize</h4><p>在計算質數、階層等運算量比較大情景，為了不在每次求值時重新運算一次，可以用 memoize 函數快取已經運算過的結果。</p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>ramda 是個相當好用函式庫，這篇文章提出一些在一般操作比較少見的 API，不過 ramda 本身的 <a href="http://ramdajs.com/docs/" target="_blank" rel="noopener">API</a> 相當豐富，搭配 <code>compose</code> 你可以自由組裝自己的 function，並且利用以上提到方法來簡化你的函數。</p><p>如果你也喜歡這種程式碼風格，歡迎踏入 functional programming 的世界。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;ramda 是個相當好用的函式庫，如果聽過 lodash 或是 underscore 的話，可以將 ramda 想成 &lt;strong&gt;fun
      
    
    </summary>
    
      <category term="前端" scheme="http://kjj6198.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://kjj6198.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://kjj6198.github.io/tags/ramda/"/>
    
      <category term="function programming" scheme="http://kjj6198.github.io/tags/function-programming/"/>
    
  </entry>
  
  <entry>
    <title>你可能不知道的 Sass 技巧</title>
    <link href="http://kjj6198.github.io/2017/08/18/Sass/"/>
    <id>http://kjj6198.github.io/2017/08/18/Sass/</id>
    <published>2017-08-18T09:11:38.000Z</published>
    <updated>2018-08-28T16:18:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>我發現有許多前端工程師只把 sass 當作有變數、nested class 跟 <code>&amp;</code> 的 CSS 來撰寫。</p><p>在 Sass 當中有許多好用的函式跟功能，如果不知道如何使用的話，對一個強大的預處理器來說，這是件相當可惜的事情。<code>Sass3.5</code> 的更新加強了對 css variable 的支持。</p><p>在考慮使用 CSS in Javascript 或是引入 PostCSS 的 plugin 之前，先看看是否能夠用 Sass 達到同樣的目的吧！</p><h4 id="變數宣告"><a href="#變數宣告" class="headerlink" title="變數宣告"></a>變數宣告</h4><p>我們可以透過變數宣告 !defualt, !global</p><h4 id="資料型別-List-Map"><a href="#資料型別-List-Map" class="headerlink" title="資料型別 List, Map"></a>資料型別 List, Map</h4><p>除了一般的變數用 <code>$</code> 開頭宣告之外，其實在 Sass 當中還有兩種資料型別，List 和 Map。List 就像一般 array，而 Map 有點像是 Object。</p><p>如果運用得好，我們可以收斂一下常見的變數，像是 color, font, size 等等。同時 List 與 Map 在 Sass 當中提供了一些函數來操作，像是 <code>map-get</code> <code>map-has-key</code> 等等，以下我們以常見的顏色管理做舉例。</p><h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><p>Sass 的 Map 類似 Javascript 當中的 Object 的功能，提供了 key-value 的方式儲存變數，並且內建一些函式以供操作。</p><p>在顏色宣告時，我們通常都會這樣寫：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mainColor</span>: <span class="number">#aaa</span>;</span><br><span class="line"><span class="variable">$fontColor</span>: <span class="number">#333</span>;</span><br><span class="line"><span class="variable">$dangerColor</span>: red;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.word</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$fontColor</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$mainColor</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-class">.danger</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$dangerColor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果將原本的變數改寫為 Map 的形式：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$colors</span>: (</span><br><span class="line">  main: <span class="number">#aaa</span>,</span><br><span class="line">  font: <span class="number">#333</span>,</span><br><span class="line">  danger: red</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.word</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: map-get(<span class="variable">$colors</span>, font);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: map-get(<span class="variable">$colors</span>, main);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-class">.danger</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: map-get(<span class="variable">$colors</span>, danger);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當然，這個函數還有一些優化的空間，我們下面會再做介紹。</p><h5 id="其他-API"><a href="#其他-API" class="headerlink" title="其他 API"></a>其他 API</h5><ul><li>map-get</li><li>map-has-key</li><li>merge-map</li></ul><h5 id="List"><a href="#List" class="headerlink" title="List"></a>List</h5><p>List 可以簡單的聯想為 array，Sass 內建了一些函數提供操作 List。List 的內容可以是顏色、字串、甚至塞入 Map 也可以。比如說我們想要對一連串的 content 賦值：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tag</span><span class="selector-class">.danger</span>::before &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"danger"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tag</span><span class="selector-class">.normal</span>::before &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"normal"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>當內容一多，寫這種重複的 CSS 是一件很痛苦的事，這時候就可以使用 List 簡化操作。使用 Map 或是 List，也可以用 <code>@each...in</code> 的迴圈來遍歷整個 Map 或是 List。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$contentList</span>: (<span class="string">'danger'</span>, <span class="string">'normal'</span>, <span class="string">'suck'</span>);</span><br><span class="line"></span><br><span class="line">@<span class="keyword">each</span> <span class="variable">$content</span> in <span class="variable">$contentList</span> &#123;</span><br><span class="line">  <span class="selector-class">.tag</span>.#&#123;<span class="variable">$content</span>&#125;::before &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="variable">$content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// compiled</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tag</span><span class="selector-class">.danger</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.tag</span><span class="selector-class">.normal</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.tag</span><span class="selector-class">.suck</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="管理-z-index"><a href="#管理-z-index" class="headerlink" title="管理 z-index"></a>管理 <code>z-index</code></h5><p>運用 List 當中的 API 來管理複雜的 <code>z-index</code>。</p><p><code>z-index</code> 一直是每個前端工程師的心頭之痛，因為很容易就使用 magic number 來管理。一般的解決方法是用變數的方式來管理：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$zindex-dropdown-backdrop</span>:  <span class="number">990</span> !default;</span><br><span class="line"><span class="variable">$zindex-navbar</span>:            <span class="number">1000</span> !default;</span><br><span class="line"><span class="variable">$zindex-dropdown</span>:          <span class="number">1000</span> !default;</span><br><span class="line"><span class="variable">$zindex-fixed</span>:             <span class="number">1030</span> !default;</span><br><span class="line"><span class="variable">$zindex-sticky</span>:            <span class="number">1030</span> !default;</span><br><span class="line"><span class="variable">$zindex-modal-backdrop</span>:    <span class="number">1040</span> !default;</span><br><span class="line"><span class="variable">$zindex-modal</span>:             <span class="number">1050</span> !default;</span><br><span class="line"><span class="variable">$zindex-popover</span>:           <span class="number">1060</span> !default;</span><br><span class="line"><span class="variable">$zindex-tooltip</span>:           <span class="number">1070</span> !default;</span><br><span class="line"><span class="comment">// 取自 bootstrap 代碼</span></span><br></pre></td></tr></table></figure><p>我們可以運用 <code>index</code> 這個 API 搭配 List 達到類似的效果：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$zIndexs</span>: (</span><br><span class="line">  <span class="string">'dropdown-backdrop'</span>,</span><br><span class="line">  <span class="string">'navbar'</span>,</span><br><span class="line">  <span class="string">'normal'</span>,</span><br><span class="line">  <span class="string">'dropdown'</span>,</span><br><span class="line">  <span class="string">'fixed'</span>,</span><br><span class="line">  <span class="string">'sticky'</span>,</span><br><span class="line">  <span class="string">'modal-backdrop'</span>,</span><br><span class="line">  <span class="string">'modal'</span>,</span><br><span class="line">  <span class="string">'popover'</span>,</span><br><span class="line">  <span class="string">'tooltip'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dropdown</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: index(<span class="variable">$zIndexs</span>, <span class="string">'dropdown'</span>) // 類似 indexOf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dropdown-backdrop &#123;</span><br><span class="line">  z-index: index(<span class="variable">$zIndexs</span>, <span class="string">'dropdown-backdrop'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="selector-class">.tooltip</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: index(<span class="variable">$zIndexs</span>, <span class="string">'tooltip'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣一來，我們除了可以減少變數前綴的麻煩，也可以避免用區間來防止 <code>z-index</code> 被其他元素時插入的困擾。（只要直接在 List 加入值就好，不用再修改其他值）。</p><p>以上 Map 與 List 的介紹用實例讓大家了解在實際開發時的運用，當然使用場景不限於以上兩種而已。</p><p>我們之後會再優化這些 function。</p><h6 id="其他-list-函數"><a href="#其他-list-函數" class="headerlink" title="其他 list 函數"></a>其他 list 函數</h6><ul><li><code>nth</code></li><li><code>index</code></li><li><code>join</code></li><li><code>append</code></li><li><code>zip</code></li><li><code>length</code></li></ul><h4 id="內建函數"><a href="#內建函數" class="headerlink" title="內建函數"></a>內建函數</h4><p>在 Sass 當中有一些函數可以幫助簡化 CSS 檔案。</p><h5 id="darken-lighten"><a href="#darken-lighten" class="headerlink" title="darken lighten"></a><code>darken</code> <code>lighten</code></h5><p>這兩個函數在操作 hover 狀態時非常好用，有時候我們收到的需求是：「hover 後的顏色變暗 10%」，通常設計師會直接給你顏色，不過透過 darken, lighten 這兩個函式操作的話能夠讓我們在實際開發上更有彈性。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">  &amp;:hover &#123; <span class="attribute">background-color</span>: <span class="number">#333</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搭配 <code>darken</code>, <code>lighten</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">  &amp;:hover &#123; <span class="attribute">background-color</span>: lighten(<span class="number">#000</span>, <span class="number">30%</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="rgba-rgb"><a href="#rgba-rgb" class="headerlink" title="rgba rgb"></a><code>rgba</code> <code>rgb</code></h5><p>Sass 支援 rgba 與 hex 混合的語法，你可以直接這樣寫：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: rgba(<span class="number">#000</span>, <span class="number">0.3</span>);</span><br><span class="line">  <span class="comment">// compiled</span></span><br><span class="line">  <span class="attribute">background-color</span>: rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比起原生的語法要額外寫 RGB 這三個參數，直接用 16 進位的表示法相對簡潔許多。Sass 會自動偵測是否要幫你轉換。</p><h5 id="invert"><a href="#invert" class="headerlink" title="invert"></a><code>invert</code></h5><p>將輸入的顏色反轉。</p><h5 id="at-root"><a href="#at-root" class="headerlink" title="@at-root"></a><code>@at-root</code></h5><p>在開發時，如果想要 access 到外層的 class，又希望保持模組化所以將 class 寫在 nested 內時，<code>@at-root</code> 就相當好用。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tooltip</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  @at-root body.active .tooltip-backdrop &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compiled</span></span><br><span class="line"><span class="selector-class">.tooltip</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.active</span> <span class="selector-class">.tooltip-backdrop</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加入 <code>@at-root</code> 之後，編譯後會將 class 搬移到最外層，而不是在 tooltip 裏面。這在保持模組化時、不想將 class 寫在外層、不想導致太深層的巢狀 class 時相當有用。</p><h4 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h4><p>mixin 在 autoprefixer 還沒有發佈之前，一直都被用來當作加入前綴使用。不過除了前綴之外，我們還能夠利用 mixin 做到許多事。像是：</p><ul><li>管理字體大小</li><li>設定常見的 media query</li><li>簡化 class</li></ul><p><code>mixin</code> 的撰寫方式是以 <code>@mixin</code> 作為開頭，呼叫時用 <code>@include</code>。</p><h5 id="管理字體大小"><a href="#管理字體大小" class="headerlink" title="管理字體大小"></a>管理字體大小</h5><p>在 desktop 以及 mobile 上我們可能有不同的字體大小或字級想要管理，首先我們能夠用 map 宣告字體大小，再搭配 mixin 簡化流程。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fontSizes</span>: (</span><br><span class="line">  desktop: (</span><br><span class="line">  <span class="string">'x-large'</span>: <span class="number">32px</span>,</span><br><span class="line">    <span class="string">'large'</span>: <span class="number">30px</span>,</span><br><span class="line">    <span class="string">'medium'</span>: <span class="number">26px</span>,</span><br><span class="line">    <span class="string">'normal'</span>: <span class="number">18px</span>,</span><br><span class="line">    <span class="string">'small'</span>: <span class="number">14px</span>,</span><br><span class="line">    <span class="string">'x-small'</span>: <span class="number">12px</span></span><br><span class="line">  ), </span><br><span class="line">  mobile: (</span><br><span class="line">    <span class="string">'x-large'</span>: <span class="number">28px</span>,</span><br><span class="line">    <span class="string">'large'</span>: <span class="number">24px</span>,</span><br><span class="line">    <span class="string">'medium'</span>: <span class="number">20px</span>,</span><br><span class="line">    <span class="string">'normal'</span>: <span class="number">16px</span>,</span><br><span class="line">    <span class="string">'small'</span>: <span class="number">12px</span>,</span><br><span class="line">    <span class="string">'x-small'</span>: <span class="number">10px</span></span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> font-size(size: <span class="string">"normal"</span>) &#123;</span><br><span class="line">  @<span class="keyword">media</span> screen and (min-width: 768px) &#123;</span><br><span class="line">    <span class="variable">$desktop</span>: map-get(<span class="variable">$fontSizes</span>, desktop);</span><br><span class="line">    <span class="attribute">font-size</span>: map-get(<span class="variable">$desktop</span>, size);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @<span class="keyword">media</span> screen and (max-width: 767px) &#123;</span><br><span class="line">    <span class="variable">$mobile</span>: map-get(<span class="variable">$fontSizes</span>, mobile);</span><br><span class="line">    <span class="attribute">font-size</span>: map-get(<span class="variable">$mobile</span>, size);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.article</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> font-size(normal);</span><br><span class="line">  </span><br><span class="line">  &amp;<span class="selector-class">.large</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> font-size(large);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣一來可以很容易地在手機、桌面中切換不同的字級設定。</p><h5 id="管理-media"><a href="#管理-media" class="headerlink" title="管理 @media"></a>管理 <code>@media</code></h5><p>在 class 寫一大堆 <code>@media</code> 是一件很頭痛的事，我們可以設定好 <code>$breakpoint</code> 的變數後，再利用 mixin 封裝。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$breakpoints</span>: (</span><br><span class="line">  desktop: <span class="number">960px</span></span><br><span class="line">  mobile: <span class="number">568px</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> for-mobile &#123;</span><br><span class="line">  @<span class="keyword">media</span> screen and (max-width: map-get(<span class="variable">$breakpoints</span>, <span class="string">"mobile"</span>)) &#123;</span><br><span class="line">    @<span class="keyword">content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> for-desktop &#123;</span><br><span class="line">  @<span class="keyword">media</span> screen and (min-width: map-get(<span class="variable">$breakpoints</span>, <span class="string">"desktop"</span>)) &#123;</span><br><span class="line">    @<span class="keyword">content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以將所有的 <code>breakpoint</code> 統一封裝為一個 mixin，並且透過傳入參數的方式來決定，不過分開的寫法比較直覺一些。</p><h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><p>在 Sass 當中寫 function 非常簡單。宣告 function 時用 <code>@function</code> 表示：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@function return123 &#123;</span><br><span class="line">  @return <span class="string">"123"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者加入參數：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@function returnString(<span class="variable">$string</span>) &#123;</span><br><span class="line">  @return <span class="variable">$string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">returnString("123"); <span class="comment">// "123"</span></span><br></pre></td></tr></table></figure><p>Sass 裡頭有迴圈、for-loop、while 等等的功能，所以你可以客製化自己想要的函數，幫助開發。</p><h4 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h4><p>在 sass 當中，我們可以利用 <code>@warn</code> 、<code>@error</code>、<code>@debug</code> 這兩個函數做更好的開發體驗。</p> <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@function getMessage(<span class="variable">$message</span>, <span class="variable">$type</span>: <span class="string">"error"</span>) &#123;</span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$type</span> == <span class="string">"error"</span> &#123;</span><br><span class="line">    @error <span class="variable">$message</span>;</span><br><span class="line">  &#125; @elseif <span class="variable">$type</span> == <span class="string">"warn"</span> &#123;</span><br><span class="line">    @<span class="keyword">warn</span> <span class="variable">$message</span>;</span><br><span class="line">  &#125; @<span class="keyword">else</span> &#123;</span><br><span class="line">    @<span class="keyword">debug</span> <span class="variable">$meesage</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你是使用原生的 Sass 編譯，則 error 會直接打斷編譯流程，並且印出錯誤在 stdout，使用 warn 的話不會打斷編譯，但會印出訊息在 stdout 上，而 debug 則是單純印出在 stdout 上。</p><hr><p>搭配以上的功能，我們來實作一些在開發上常見的函數吧！</p><h4 id="BEM-utils"><a href="#BEM-utils" class="headerlink" title="BEM utils"></a>BEM utils</h4><p>為了讓 CSS 保持命名空間，我們常常使用 BEM 來組織 CSS 代碼。不過卻常常出現 <code>__</code>、<code>-</code>之類不太好看的符號，一不小心就可能打錯，我們可以使用 <code>mixin</code> 封裝這個功能。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> block(<span class="variable">$block_name</span>) &#123;</span><br><span class="line">  .#&#123;<span class="variable">$block_name</span>&#125; &#123; @<span class="keyword">content</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> element(<span class="variable">$element_name</span>) &#123;</span><br><span class="line">  @at-root &amp;__#&#123;<span class="variable">$element_name</span>&#125; &#123; @<span class="keyword">content</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> modifier(<span class="variable">$modifier_name</span>) &#123;</span><br><span class="line">  @at-root &amp;--#&#123;<span class="variable">$modifier_name</span>&#125; &#123; @<span class="keyword">content</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">include</span> block(article-entry) &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  @<span class="keyword">include</span> element(<span class="keyword">content</span>) &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @<span class="keyword">include</span> element(footer) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    @<span class="keyword">include</span> modifier(larger) &#123;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="selector-class">.article-entry</span> &#123; <span class="attribute">padding</span>: <span class="number">20px</span>; &#125;</span><br><span class="line"><span class="selector-class">.article-entry__content</span> &#123; <span class="attribute">font-size</span>: <span class="number">20px</span>; &#125;</span><br><span class="line"><span class="selector-class">.article-entry__footer</span> &#123; <span class="attribute">background-size</span>: <span class="number">#fff</span>; &#125;</span><br><span class="line"><span class="selector-class">.article-entry__footer--larger</span> &#123; <span class="attribute">height</span>: <span class="number">500px</span>; &#125;</span><br></pre></td></tr></table></figure><p>注意到我們在 mixin 當中使用了 <code>@at-root</code>，所以編譯的 CSS 會一律放到最頂層，這可以解決 BEM 層數太深的問題，也可以在開發時保持良好的模組性。你也可以在 <code>mixin</code> 加上一些參數決定是否要套用 <code>@at-root</code> 來保持開發上的彈性。</p><h4 id="z-index-管理"><a href="#z-index-管理" class="headerlink" title="z-index 管理"></a>z-index 管理</h4><p>在上面的例子當中，我們利用 <code>map-get</code> 來取值，在實際開發上我們可能會想要再簡化一些，現在搭配 <code>@function</code> 做改善。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$zIndexs</span>: (</span><br><span class="line">  <span class="string">'dropdown-backdrop'</span>,</span><br><span class="line">  <span class="string">'navbar'</span>,</span><br><span class="line">  <span class="string">'normal'</span>,</span><br><span class="line">  <span class="string">'dropdown'</span>,</span><br><span class="line">  <span class="string">'fixed'</span>,</span><br><span class="line">  <span class="string">'sticky'</span>,</span><br><span class="line">  <span class="string">'modal-backdrop'</span>,</span><br><span class="line">  <span class="string">'modal'</span>,</span><br><span class="line">  <span class="string">'popover'</span>,</span><br><span class="line">  <span class="string">'tooltip'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">@function zindex(<span class="variable">$name</span>: normal) &#123;</span><br><span class="line">  <span class="variable">$index</span>: index(<span class="variable">$zIndexs</span>, <span class="variable">$name</span>);</span><br><span class="line">  if (!<span class="variable">$index</span>) &#123;</span><br><span class="line">    @error <span class="string">"#&#123;$name&#125; doesn't exist! please checkout your `$zIndexs` variable."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @return <span class="variable">$index</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dropdown</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: zindex(<span class="string">'dropdown'</span>) // 類似 indexOf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dropdown-backdrop &#123;</span><br><span class="line">  z-index: zindex(<span class="string">'dropdown-backdrop'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="selector-class">.tooltip</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: zindex(<span class="string">'tooltip'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我們將 <code>$zIndexs</code> 包裝起來，並且如果傳入的參數並不存在於 <code>$zIndexs</code> 當中就會直接打斷編譯過程，並且顯示錯誤，也提供了相關的錯誤訊息給開發者參考。</p><h4 id="引入-css-variable"><a href="#引入-css-variable" class="headerlink" title="引入 css variable"></a>引入 css variable</h4><p>目前比較新的瀏覽器都已經支援 css variable 了。我們可以將顏色等變數使用 css variable 重新撰寫，並且使用優雅降級來確保在其他瀏覽器也能正常工作。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$colors</span>: (</span><br><span class="line">  main: <span class="number">#aaa</span>,</span><br><span class="line">  font: <span class="number">#333</span>,</span><br><span class="line">  danger: red</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">:root &#123;</span><br><span class="line">  @<span class="keyword">each</span> <span class="variable">$key</span>, <span class="variable">$color</span> in <span class="variable">$colors</span> &#123;</span><br><span class="line">    --#&#123;key&#125;: <span class="variable">$color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> css(<span class="variable">$prop</span>, <span class="variable">$key</span>) &#123;</span><br><span class="line">  #&#123;<span class="variable">$prop</span>&#125;: map-get(<span class="variable">$colors</span>, <span class="variable">$key</span>);</span><br><span class="line">  @<span class="keyword">if</span> (map-has-key(<span class="variable">$colors</span>, <span class="variable">$key</span>) == false) &#123;</span><br><span class="line">    @error <span class="string">"Unknown key `#&#123;$key&#125;`. checkout your `$colors` variable"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @supports (--foo: <span class="string">"bar"</span>) &#123;</span><br><span class="line">    #&#123;<span class="variable">$prop</span>&#125;: var(--#&#123;<span class="variable">$key</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> css(<span class="string">'background-color'</span>, <span class="string">"main"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compiled</span></span><br><span class="line">:root &#123;</span><br><span class="line">  --main: <span class="number">#aaa</span>;</span><br><span class="line">  --<span class="attribute">font</span>: <span class="number">#333</span>;</span><br><span class="line">  --danger: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#aaa</span>;</span><br><span class="line">  @supports (--foo: <span class="string">"bar"</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: var(--main);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這個 <code>@mixin</code> 寫得比較陽春一些，你可以加入更多參數或修改讓這個 <code>mixin</code> 能夠配合其他屬性。</p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>PostCSS, CSS in Javascript, styled-component，都是為了解決問題而發展出來的工具，不過 Sass 也有許多功能值得大家參考，這篇文章提出一些常見的開發問題，並使用 Sass 來解決。Sass 的函數並沒有想像中那麼複雜，而且功能強大，你甚至可以利用 Sass 的內建函數來建置 sin, cos 等三角函數幫助運算，撰寫排序演算法、使用遞迴（如果你想的話…）。</p><p>使用 Sass 並不代表你需要拋棄 PostCSS 或其他工具帶來的便利性，像是 autoprefixer 以及 cssnano 等等，都是相當好用的插件。你甚至可以搭配使用帶來更快速及穩固的開發體驗。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我發現有許多前端工程師只把 sass 當作有變數、nested class 跟 &lt;code&gt;&amp;amp;&lt;/code&gt; 的 CSS 來撰寫。&lt;/p&gt;
&lt;p&gt;在 Sass 當中有許多好用的函式跟功能，如果不知道如何使用的話，對一個強大的預處理器來說，這是件相當可惜的事情。&lt;co
      
    
    </summary>
    
      <category term="前端" scheme="http://kjj6198.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="sass" scheme="http://kjj6198.github.io/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>飛機能飛嗎 — 天氣造成的空難</title>
    <link href="http://kjj6198.github.io/2017/08/05/aircrash-extreme-weather/"/>
    <id>http://kjj6198.github.io/2017/08/05/aircrash-extreme-weather/</id>
    <published>2017-08-05T12:00:07.000Z</published>
    <updated>2017-08-05T12:17:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>我並不是機師或是受過訓練的專業人士，只是剛好家住在機場附近，喜歡看看飛機了解一下空難而已，以上言論難免有錯誤之處，盡請斧正。另外本篇文章可能會造成閱讀者的情緒不安或焦躁，在閱讀前請三思</em></p><p><img src="https://cdn-images-1.medium.com/max/2000/1*gHsRVWF0sgzs9OkDmN_7nQ.jpeg" alt="松山機場，飛機起飛"></p><p>最近這幾天長榮員工因尼莎颱風集體請天災假，除了引起廣大迴響跟在 PTT 上實況飛機降落情形外，好像也就這樣了。剛好天時地利，寫篇關於天氣造成的空難，希望能夠讓各位（以及自己）更了解天氣對飛機產生的影響。</p><p>剛搬完新家兩個月，大約在行天宮靠近飛機巷的位置，從窗外的陽台就能聽見、看見 20 幾架飛機降落，當天的颱風夜也是。</p><p>我對飛機跟機師一直以來都是抱持著景仰的心態，跟軟體開發不同，那是一個無法容忍 bug 的世界，任何一個失誤都會造成無法挽回的結果。同時，撰寫一個穩定的飛機內部程式，代碼數應該就超過 100 萬了吧？已經遠超出我目前寫過的代碼了。</p><h3 id="前言-—-你有勇氣嗎？"><a href="#前言-—-你有勇氣嗎？" class="headerlink" title="前言 — 你有勇氣嗎？"></a>前言 — 你有勇氣嗎？</h3><p><strong>在閱讀本篇文章之前，請先確認自己對空難的接受度。</strong></p><p>如果你是那種會在颱風夜的機場大呼小叫的乘客，希望你看完這篇文章後能夠學會閉嘴；如果你上飛機第一件事是睡覺而不是看一下逃生門在哪，希望你以後會記得。</p><h3 id="天氣對飛機造成的影響"><a href="#天氣對飛機造成的影響" class="headerlink" title="天氣對飛機造成的影響"></a>天氣對飛機造成的影響</h3><h4 id="風"><a href="#風" class="headerlink" title="風"></a>風</h4><p>現代的飛機設計通常都可以應付天氣惡劣的狀況。即使如此，在<strong>起飛</strong>、<strong>降落</strong>這兩個程序當中，仍然會有許多突發狀況。</p><p>起飛時，因為飛機在滿載燃油、乘客的狀況下起飛，又因為剛開始的速度不足，需要靠<a href="https://www.wikiwand.com/zh-tw/%E8%A5%9F%E7%BF%BC" target="_blank" rel="noopener">襟翼</a>、<a href="https://www.wikiwand.com/zh-tw/%E5%89%8D%E7%BC%98%E7%BC%9D%E7%BF%BC" target="_blank" rel="noopener">縫翼</a>這兩個機翼的幫忙來提昇受風面積、增加昇力，飛機才能夠順利起飛。</p><p>如果這時風向突然改變，從逆風變為順風，就有可能因為空速不足而導致升力降低。通常會提高機鼻以及增加動力來獲得升力。</p><p>但是在颱風這種極端天氣下，如果風速的變化相當劇烈，飛機很容易受到影響，如果來不及在風速改變時作出反應（飛機加速、減速都需要時間），很有可能來不及控制飛機就出事了。</p><p>下降時也是一樣，如果突然由逆風變順風，導致降落速度增加，甚至是風切變等狀況，在颱風的影響下所有的風速都會對飛機產生巨大的影響。</p><p>風切變簡單來說就是風速、風向在兩點之間的急劇變化。飛機這種龐然大物很容易受到風的影響，如果風速急劇變化，會導致飛機在短時間內有劇烈的速度、高度變化，這也是為什麼在颱風降落時會有大怒神的感覺。（相信我，你不會想要體驗的）</p><p>降落速度太快，飛機就會衝出跑道；速度太慢，飛機有可能失速而垂直落地。</p><blockquote><p><em>我搭飛機那麼多次遇到颱風也沒事啊</em></p></blockquote><p>當然，機長們受過專業的訓練，會盡量地往天氣最好的地方飛行，降落時也會無所不用其極地找出最佳的進場時機。但<a href="https://www.wikiwand.com/zh/%E4%B8%AD%E8%8F%AF%E8%88%AA%E7%A9%BA642%E8%99%9F%E7%8F%AD%E6%A9%9F%E7%A9%BA%E9%9B%A3" target="_blank" rel="noopener">中華航空642班機</a>就沒有那麼幸運了。</p><p>這台飛往香港的班機中，因為當天的天氣不佳，側風在下降時甚至超出標準，但機長仍然選擇降落，最後因為被起降架無法承受負荷而斷裂，右機翼斷裂往右翻滾，最後再跑道的草皮上停止。</p><p>看完你一定會想，WTF 都已經降落了還空難，怎麼那麼雖小？是的。</p><p>除了天氣本身會直接影響飛行之外，這場空難的最主要原因是機長與副機長並未按照標準程序操作。</p><p>蛤？不按照標準程序操作，機長跟副機長也太不專業了吧？在責怪機師不專業之前，我們先想想他們要承擔的責任有哪些。</p><ul><li>把乘客平安送到目的地</li><li>聽命公司的要求起飛（而非出自專業判斷）</li><li>若決定停飛，可能被公司檢討，可能會上明日報紙頭條，可能會被其他航空公司嘲笑</li><li>若決定不降落，可能會被公司檢討，受到乘客指責，明日上頭條</li></ul><p>有沒有發現什麼不對勁了？機師的判斷竟不全然來自專業，而是受到多方面的影響，這是多麽不合理的一件事情。</p><p>機師也是人，難免會夾雜情緒在裡頭。所以儘管天氣不允許，機師們還是得咬牙放手一搏。儘管現在現代飛機的設計已經相當進步，但我們真的能夠全身而退嗎？</p><p><img src="https://cdn-images-1.medium.com/max/1250/1*yUOg0sYd5bbnqpf-8gwrew.jpeg" alt="松山機場，飛機降落"></p><h3 id="霧、雨"><a href="#霧、雨" class="headerlink" title="霧、雨"></a>霧、雨</h3><p>霧跟雨是相當常見的天氣因素。霧最直接的影響就是能見度。飛機目前可以靠儀器降落系統（ILS）完成降落。這個精密的儀器能夠告訴飛機跑道的中線，以及下滑的軌道，至於更詳細的原理可以<a href="https://www.wikiwand.com/zh-tw/%E4%BB%AA%E8%A1%A8%E7%9D%80%E9%99%86%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">參考維基百科</a>。</p><p>但是飛行員通常還是需要目視跑道，確認飛機飛在正確的路線上。關於目視跑道有一套規定，飛行員如果找不到跑道，最低能夠下降到某個標準高度。</p><p>如果在這個標準高度內仍然沒有找到跑道就要執行迷失進場（missing approach）程序並且重飛（Go around），但有時候因為機師過於自信、受外力影響、天氣影響等等原因，可能就會不遵守此程序。</p><p>像是<a href="https://www.wikiwand.com/zh-tw/2010%E5%B9%B4%E6%B3%A2%E5%85%B0%E7%A9%BA%E5%86%9B%E5%9B%BE-154%E5%9D%A0%E6%9C%BA%E4%BA%8B%E4%BB%B6#/.E4.BA.8B.E6.95.85.E8.B0.83.E6.9F.A5" target="_blank" rel="noopener">波蘭空軍圖-154墜機事件</a>就是一個相當經典的例子。</p><p>這架載著波蘭總統<a href="https://www.wikiwand.com/zh-tw/%E8%90%8A%E8%B5%AB%C2%B7%E5%8D%A1%E6%AC%BD%E6%96%AF%E5%9F%BA" target="_blank" rel="noopener">列赫·卡辛斯基</a>以及多個高層長官的飛機，企圖在俄羅斯斯摩棱斯克降落時墜毀。當時因為機場起大霧，能見度只有 500 公尺左右，因此塔台建議飛行員直接飛往備降機場。</p><p>但此建議被機長拒絕，並且嘗試到 100 公尺高度時若不能降落在使用自動駕駛儀重飛。</p><p>結果導致機翼撞上樹梢墜落至地面解體，起火燃燒。機上乘客與機組人員 97 名全部遇難。</p><p>當時調查人員的結果認為，當時飛行員承受了間接壓力。有波蘭外交部禮賓司長、波蘭空軍司令官在後頭盯著你，硬著頭皮也要開下去。結果就釀成悲劇了。</p><p>前幾年發生的<a href="https://www.wikiwand.com/zh/%E5%BE%A9%E8%88%88%E8%88%AA%E7%A9%BA222%E8%99%9F%E7%8F%AD%E6%A9%9F%E7%A9%BA%E9%9B%A3#/.E4.BA.8B.E6.95.85.E5.8E.9F.E5.9B.A0" target="_blank" rel="noopener">復興航空222號班機空難</a>也是因為能見度影響、飛行員未遵守盲降標準而讓飛機在高度過低的情況下撞上樹林。（當然除了未遵守標準降落還有其他因素綜合在一起才導致這場悲劇）。</p><h4 id="其他因能見度導致的空難"><a href="#其他因能見度導致的空難" class="headerlink" title="其他因能見度導致的空難"></a>其他因能見度導致的空難</h4><ul><li><a href="https://www.wikiwand.com/zh/%E6%96%B0%E5%8A%A0%E5%9D%A1%E8%88%AA%E7%A9%BA006%E8%99%9F%E7%8F%AD%E6%A9%9F%E7%A9%BA%E9%9B%A3" target="_blank" rel="noopener">新加坡航空006號班機空難</a></li></ul><p><img src="https://cdn-images-1.medium.com/max/1250/1*bs5ghlNGIT6QyXHsuo6OFA.jpeg" alt="松山機場，飛機降落"></p><h3 id="冰雹"><a href="#冰雹" class="headerlink" title="冰雹"></a>冰雹</h3><p>冰雹對飛機來說是個相當可怕的夢魘，因為時速高達 800 ~ 900 公里的飛機，撞到冰雹可不是鬧著玩的。如果撞到擋風玻璃有可能會導致碎裂，被引擎吸入也可能導致引擎故障。<a href="https://www.wikiwand.com/zh-tw/%E5%8D%97%E6%96%B9%E8%88%AA%E7%A9%BA242%E8%99%9F%E7%8F%AD%E6%A9%9F%E7%A9%BA%E9%9B%A3" target="_blank" rel="noopener">南方航空242號班機空難</a>就是因為在暴風雨區被冰雹侵襲，導致兩具引擎熄火故障，最後因迫降失敗而墜毀在公路上。</p><h3 id="其他因天氣因素而觸發的空難"><a href="#其他因天氣因素而觸發的空難" class="headerlink" title="其他因天氣因素而觸發的空難"></a>其他因天氣因素而觸發的空難</h3><p>如果你對因天氣引起的空難有興趣，可以參考<a href="https://zh.wikipedia.org/wiki/Category:%E5%A4%A9%E6%B0%A3%E5%9B%A0%E7%B4%A0%E8%A7%B8%E7%99%BC%E7%9A%84%E8%88%AA%E7%A9%BA%E4%BA%8B%E6%95%85" target="_blank" rel="noopener">維基百科的連結</a>，或許可以給你更多的啟發。</p><p>事實上儘管是天氣因素影響，但仍然有 80% 的空難是因為人為錯誤而發生的。關於空難，很常見的心態是：<strong>「這次不一樣」</strong></p><p>因為科技進步，所以這次不會墜機；</p><p>因為有XXX輔助，所以這次不會墜機；</p><p>因為已經建立了標準程序，所以這次不會墜機；</p><p>因為已經…，所以這次不會…。</p><p>這次不一樣實在是個可怕的心態。</p><h3 id="如果不幸發生空難"><a href="#如果不幸發生空難" class="headerlink" title="如果不幸發生空難"></a>如果不幸發生空難</h3><p>人生總是充滿著意外，僅管搭飛機的意外次數已經遠小於車禍（兩位受過正規訓練的機師、精密儀器輔助的飛機），要讓飛機墜毀是一件不容易的事。但我們還是要以防萬一。</p><ul><li>在每趟飛行前記得保旅行平安險及旅行不便險，確保飛機在任何狀況下延誤，或是不幸發生空難時，能夠獲得最大的保障。至於如何挑選保險就看各位的需求了。</li><li>如果在飛機上發生空難，請先保護自己再去想辦法救別人。確定氧氣罩戴好能夠吸到氧氣，再來幫助別人。</li><li><strong>在起飛前靜下心來聽空服員解釋逃生設備以及使用方式，他們很有可能救你一命。</strong></li><li>採取防撞姿勢，雙手抱頭向前彎曲，頭貼在前方的座椅上，將撞擊力道降到最低。（以上描述僅為示意，詳細的防撞姿勢以空服員指導為準）</li><li>平時就當一位合格的旅客，不吵鬧、不喧嘩、不對空服員、地勤大呼小叫、多積點陰德。讓服務你的人心情舒適是確保整趟旅程品質的不二法門。</li></ul><h3 id="接下來可以怎麼做？"><a href="#接下來可以怎麼做？" class="headerlink" title="接下來可以怎麼做？"></a>接下來可以怎麼做？</h3><ul><li>僅靠政府、民航局來監督航空公司已經不太可靠。但人民團結起來的力量不容忽視，為了自己的生命著想，希望你能多關注這方面的議題，適時發聲與撻伐（記得理性溝通），讓航空公司想要說幹話的時候先三思。</li><li>嚴格遵守飛安標準。關於起飛與降落有一套標準規範（根據飛機與航空公司各有不同），必須要求航空公司嚴格遵守。</li><li>建立配套措施，讓颱風天仍然得上班的行業有個安心工作的環境。</li></ul><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><h4 id="1-尊重專業"><a href="#1-尊重專業" class="headerlink" title="1. 尊重專業"></a>1. 尊重專業</h4><p>無論何時我們都應該尊重專業，不僅是機上的機師，各行各業皆如此。不過尊重專業的前提是對方要是位專業人士。</p><h4 id="2-讓錯誤被大家看見"><a href="#2-讓錯誤被大家看見" class="headerlink" title="2. 讓錯誤被大家看見"></a>2. 讓錯誤被大家看見</h4><p>空難不應該是大家說聲 R.I.P 就了事了，如果幾十人甚至幾百人的生命只能換來 R.I.P 的話是很令人扼腕的結局。每場空難都是相當珍貴的經驗。</p><h4 id="3-創造讓機組人員能夠安心的環境"><a href="#3-創造讓機組人員能夠安心的環境" class="headerlink" title="3. 創造讓機組人員能夠安心的環境"></a>3. 創造讓機組人員能夠安心的環境</h4><p>這在現在的台灣或許還是天方夜譚。但對於不合理的工時、環境、要求的公司，我們應該要能夠抵制或是拒乘，讓雙方的談判籌碼對等，才有扭轉的空間。而機師能夠心無旁騖地，依照自己的專業而非高層壓力做判斷。做得好就鼓勵，不按照程序飛行的機師我們也要幹到爆，讓他們知道背後都是有雙眼睛在監督著的。</p><h4 id="4-不要讓天氣控制了情緒"><a href="#4-不要讓天氣控制了情緒" class="headerlink" title="4.不要讓天氣控制了情緒"></a>4.不要讓天氣控制了情緒</h4><p>大家都想搭飛機，前往目的地。但無論如何，安全仍然是最重要的事，我們能做的是緩和自己的情緒。</p><hr><p>停飛不是兒戲，不管對機長、航空公司、乘客來講都是個耗時、花費金錢的決定。</p><p>如果機師不需要再背負上層壓力；如果對於惡劣天氣的應對不是先試試看再說；如果公司講幹話、做蠢事能夠受到制裁，或許大家都可以過得輕鬆一點。</p><p>好吧講太遠了。</p><p>最後如果你對飛機、空難有興趣的話，可以搜尋看看 Discovery 的空中浩劫，你會發現空難的原因五花八門，遠超乎你的想像。有把飛機給小孩開結果墜機的；有兩台飛機在跑道上互撞直接罹難的；有在天空上沒有燃油最後滑翔到機場的；有起飛時踩著煞車硬要飛結果墜機的；有自動駕駛跟駕駛操作衝突而墜機的；有飛機不聽話結果墜機的；有因為貨艙放太多酒精結果燒起來而墜機的……，或許這些看似與我們無關的空難，能夠對你有些幫助。</p><blockquote><p>本篇文章無意對任何機師、機組人員提出批評，只是分享個人觀點以及整理因天氣因素發生的空難事件。</p></blockquote><hr><p><strong>最後，祝福每位機師跟乘客旅途愉快。</strong></p><blockquote><p>Bon Vayage!</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;我並不是機師或是受過訓練的專業人士，只是剛好家住在機場附近，喜歡看看飛機了解一下空難而已，以上言論難免有錯誤之處，盡請斧正。另外本篇文章可能會造成閱讀者的情緒不安或焦躁，在閱讀前請三思&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images
      
    
    </summary>
    
      <category term="雜談" scheme="http://kjj6198.github.io/categories/%E9%9B%9C%E8%AB%87/"/>
    
    
      <category term="飛機" scheme="http://kjj6198.github.io/tags/%E9%A3%9B%E6%A9%9F/"/>
    
      <category term="空難" scheme="http://kjj6198.github.io/tags/%E7%A9%BA%E9%9B%A3/"/>
    
      <category term="天氣" scheme="http://kjj6198.github.io/tags/%E5%A4%A9%E6%B0%A3/"/>
    
  </entry>
  
  <entry>
    <title>淺談降維方法中的 PCA 與 t-SNE</title>
    <link href="http://kjj6198.github.io/2017/07/18/PCA-and-t-SNE/"/>
    <id>http://kjj6198.github.io/2017/07/18/PCA-and-t-SNE/</id>
    <published>2017-07-17T16:00:00.000Z</published>
    <updated>2017-07-19T14:29:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>在機器學習當中，如果特徵數過多時，有可能會造成一些問題，像是：</p><ul><li>過擬合 (overfitting)</li><li>處理速度較慢</li><li>如果超過三個特徵以上不好視覺化</li></ul><p>所以這時候就需要對特徵做降維，在實務上，一個幾百幾千個的特徵當中，手動挑選特徵顯然不是一個明智的方法，所以以下來介紹兩個在機器學習中常常使用的兩種降維方法。</p><h3 id="PCA（principal-component-analysis）主成份分析"><a href="#PCA（principal-component-analysis）主成份分析" class="headerlink" title="PCA（principal component analysis）主成份分析"></a>PCA（principal component analysis）主成份分析</h3><p>在介紹 PCA 之前，我們先來定義一下我們的目標是什麼：</p><blockquote><p><em>將一個具有 n 個特徵空間的樣本，轉換為具有 k 個特徵空間的樣本，其中 k &lt; n</em></p></blockquote><p>以下是 PCA 的主要步驟：</p><ol><li>將數據標準化</li><li>建立<strong>共變異數矩陣（covariance matrix）</strong></li><li>利用<strong>奇異值分解（SVD）</strong>求得<strong>特徵向量（eigenvector）</strong>跟<strong>特徵值（eigenvalue）</strong></li><li>通常特徵值會由大到小排列，選取 k 個特徵值與特徵向量</li><li>將原本的數據投影（映射）到特徵向量上，得到新的特徵數</li></ol><p>PCA 最重要的部分就是奇異值分解，因此接下來的章節讓我們來談談<strong>奇異值分解</strong></p><h4 id="直觀理解奇異值分解"><a href="#直觀理解奇異值分解" class="headerlink" title="直觀理解奇異值分解"></a>直觀理解奇異值分解</h4><p>在矩陣分解當中，奇異值分解是個相當有名的方法。矩陣分解在高中數學當中最常見的用途就是解方程式（如 LU 分解），從奇異值分解的公式當中我們可以直觀地了解：</p><p><img src="https://cdn-images-1.medium.com/max/1000/1*EW7y-TDCOHClCKINXFtlZQ.png" alt="img"></p><p>其中 A 為一個 m x n 的矩陣，𝑈 跟 V 都為正交矩陣，<strong>𝛴 為奇異值矩陣</strong>。奇異值矩陣為矩陣 A 對應的特徵值，在 PCA 當中又叫做<strong>主成份</strong>，代表對保存訊息的重要程度，通常由大到小遞減排列在對角中，是個對稱矩陣。</p><p>那麼這邊的 A 對應什麼呢？當然就是我們的特徵，只是特別要注意的是這邊的 A 我們通常使用<strong>共變異數矩陣（covariance martix）</strong>來求算，記得資料一定要先正規化後在進行奇異值分解</p><p><img src="https://cdn-images-1.medium.com/max/1000/1*xk7Vhzw5dI77BLNl3Dsdlw.png" alt="img"></p><p>共變異數矩陣（covariance matrix）</p><p>因為共變異數矩陣<strong>常用 Sigma 表示，不要跟上面的 𝛴 搞混囉</strong>。因此如果要降維，我們可以用 U 的前 k 列乘上對應 𝛴 當中的特徵向量，就可以得出新的特徵了，而從幾何的角度來看</p><p><img src="https://cdn-images-1.medium.com/max/1000/1*3nASowA14C1z-hIshmfg7w.png" alt="img"></p><p>這樣子的運算在幾何當中，其實是將 X 投影到 U 的前 k 個向量</p><p><img src="https://cdn-images-1.medium.com/max/1000/1*GVOZv-_OBKayNVhI3t9LLA.jpeg" alt="img"></p><p>當中的黑線為特徵向量，長度為特徵值。</p><p><img src="https://cdn-images-1.medium.com/max/1000/1*spkrM0Qi2A0dQ1G-O_M1hQ.jpeg" alt="img"></p><p>當中的藍點為數據原本的位置，紅點則是投影到特徵向量的位置。以上，我們成功將 2 維的數據降至一維了。</p><p>當然也可以從 3 維降到 2 維：</p><p><img src="https://cdn-images-1.medium.com/max/1000/1*O4CvQRZqb74Wd3JlOQKwaw.jpeg" alt="img"></p><p><img src="https://cdn-images-1.medium.com/max/1000/1*V9nMHPOfLqUunNsRVQHoSA.jpeg" alt="img"></p><h4 id="PCA-的應用"><a href="#PCA-的應用" class="headerlink" title="PCA 的應用"></a>PCA 的應用</h4><p><strong>在降維的時候，我們希望留下最重要的特徵</strong>，剩下的比較不重要的特徵我們直接捨棄掉。</p><p>像是判斷一個人時，最重要的判別方式可能就是眼睛、鼻子、嘴巴等等，所以膚色、頭髮等等的特徵我們就可以捨棄，事實上在人臉辨識當中也常利用 PCA 做降維。</p><p><img src="https://cdn-images-1.medium.com/max/1250/1*yAtJRzT9un7JP9yllYs3mg.jpeg" alt="img"></p><p><em>這是對奇異值分解相當直觀的了解，篇幅關係無法深入細談，若對奇異值分解有興趣可自行到</em><a href="https://www.wikiwand.com/zh-tw/%E5%A5%87%E5%BC%82%E5%80%BC%E5%88%86%E8%A7%A3" target="_blank" rel="noopener"><em>維基百科</em></a></p><h3 id="t-SNE"><a href="#t-SNE" class="headerlink" title="t-SNE"></a>t-SNE</h3><p>PCA 是個相當直觀且有效的降維方式，不過在三維轉換為二維時我們可以看到，有些數據的集群完全被搗成一團。</p><p>PCA 是一種線性降維的方式，但如果特徵與特徵間的關聯是非線性關係的話，用 PCA 可能會導致<strong>欠擬合（underfitting）</strong></p><p><strong>t-SNE 也是一種降維方式</strong>，不過他用了更複雜的公式來表達高維與低維之間的關係。t-SNE 主要是將高維的數據用高斯分佈的機率密度函數近似，而低維數據的部分使用 t 分佈的方式來近似，在使用 KL 距離計算相似度，最後再以梯度下降（或隨機梯度下降）求最佳解 。</p><h4 id="高斯分佈的機率密度函數"><a href="#高斯分佈的機率密度函數" class="headerlink" title="高斯分佈的機率密度函數"></a>高斯分佈的機率密度函數</h4><p><img src="https://cdn-images-1.medium.com/max/1000/1*9CSkBUO3tvJAhq8Wzv9s2Q.png" alt="img"></p><p>其中，X 為隨機變量，𝝈 為變異數，𝜇 為平均。</p><p>因此原本高維的數據可以這樣表示：</p><p><img src="https://cdn-images-1.medium.com/max/1000/1*KxxzB_L8Wi1L-FgznjhkyA.png" alt="img"></p><p>而低維的數據用 t 分布的機率密度函數可以這樣表示（自由度為 1）</p><p><img src="https://cdn-images-1.medium.com/max/1000/1*OwvAZgYHAfYvKehREGH9WQ.png" alt="img"></p><p>其中，x 為高維當中的數據，y 為低維當中的數據。P, Q 分別代表機率分佈。</p><p>為什麼會使用 t 分佈來近似低維的數據呢？主要是因為轉換成低維之後一定會丟失許多訊息，所以為了不被異常值影響可以使用 t 分佈。</p><p>t 分佈在樣本數較少時，可以比較好模擬母體分布的情形，不容易被異常值所影響。</p><p><img src="https://cdn-images-1.medium.com/max/1250/1*hkZuHGVNMmS4_MHfxoIDdA.jpeg" alt="img">T 分佈與高斯分佈的機率密度函數</p><h4 id="兩個分佈之間的相似度"><a href="#兩個分佈之間的相似度" class="headerlink" title="兩個分佈之間的相似度"></a>兩個分佈之間的相似度</h4><p>求算兩個分佈之間的相似度，經常用 KL 距離（Kullback-Leibler Divergence）來表示，也叫做相對熵（Relative Entropy）。</p><p><img src="https://cdn-images-1.medium.com/max/1000/1*geKaV3PDC2idMGUCXroJzw.png" alt="img"></p><p>在 t-SNE 中使用了困惑度（Perp）來當作超參數。</p><p><img src="https://cdn-images-1.medium.com/max/1000/1*BiQ-gYxdbZsGP5KfYUF9Kg.png" alt="img"></p><p>論文中提出通常困惑度在 5 ~ 50 之間。</p><h4 id="Cost-function"><a href="#Cost-function" class="headerlink" title="Cost function"></a>Cost function</h4><p>用 KL 距離計算 Cost</p><p><img src="https://cdn-images-1.medium.com/max/1000/1*2XSnUoPaYB2_FMQ8xMzOuQ.png" alt="img"></p><p>求梯度可以寫成</p><p><img src="https://cdn-images-1.medium.com/max/1000/1*MzouyFbnSKdeBA7nLJVCPw.png" alt="img"></p><p>最後再利用梯度下降法（或隨機梯度下降法）就可以找到最小值了。</p><h4 id="實測：使用-MNIST-測試"><a href="#實測：使用-MNIST-測試" class="headerlink" title="實測：使用 MNIST 測試"></a>實測：使用 MNIST 測試</h4><p>測試集可以到<a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">這裡</a>下載，首先我們先用 PCA 降到二維看看。</p><p><strong>PCA</strong></p><p><img src="https://cdn-images-1.medium.com/max/1250/1*Be6oSLuXgG0cDi2gJEL-wA.jpeg" alt="img">PCA 降維</p><p>可以發現降到二維之後，資料幾乎被搗成一團，完全看不出集群，這是因為 PCA 的線性降維在過程中損失太多訊息。</p><p><strong>t-SNE</strong></p><p>接下來使用 t-SNE 測試</p><p><img src="https://cdn-images-1.medium.com/max/1250/1*5i8McPBKmFOMOcCDjl8w4Q.jpeg" alt="img">使用 t-SNE 降維</p><p>這是使用 t-SNE 後的降維結果，可以發現降維過後，資料仍然分群地相當明確。從這兩張圖可以非常明顯看出這兩者（PCA, t-SNE）的差別。</p><h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>後來又有人提出一連串改善 t-SNE 效能的演算法，詳情可以參考<a href="https://lvdmaaten.github.io/publications/papers/JMLR_2014.pdf" target="_blank" rel="noopener"><strong>Accelerating t-sne using tree-based algorithms</strong></a>，大部分熱門的資料分析程式語言也都有實作，像是 sklearn, R, matlab 等等。</p><p>不過畢竟<strong> t-SNE 不是線性降維，在執行時間上會比 PCA 來得久許多。</strong></p><ul><li>當特徵數量過多時，使用 PCA 可能會造成降維後的特徵欠擬合（underfitting），這時可以考慮使用 t-SNE 來降維</li><li>t-SNE 的需要比較多的時間執行</li><li>論文當中還有一些優化技巧（如何選擇困惑度等等），因為還沒有閱讀完畢，之後會再逐漸補上</li></ul><h4 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h4><ul><li><a href="http://siplab.tudelft.nl/sites/default/files/vandermaaten08a.pdf" target="_blank" rel="noopener">Van der Maaten L, Hinton G. <strong>Visualizing data using t-SNE</strong></a></li><li><a href="https://lvdmaaten.github.io/publications/papers/JMLR_2014.pdf" target="_blank" rel="noopener"><strong>Accelerating t-sne using tree-based algorithms</strong></a> 利用各種樹的演算法來加速 t-SNE 的運算</li><li><a href="https://ccjou.wordpress.com/2009/09/01/%E5%A5%87%E7%95%B0%E5%80%BC%E5%88%86%E8%A7%A3-svd/" target="_blank" rel="noopener">線代啟示錄 - 奇異值分解</a></li></ul><p><em>文章同步發表於 <a href="https://medium.com/@Shurado/%E6%B7%BA%E8%AB%87%E5%85%A9%E7%A8%AE%E9%99%8D%E7%B6%AD%E6%96%B9%E6%B3%95-pca-%E8%88%87-t-sne-d4254916925b" target="_blank" rel="noopener">medium</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在機器學習當中，如果特徵數過多時，有可能會造成一些問題，像是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;過擬合 (overfitting)&lt;/li&gt;
&lt;li&gt;處理速度較慢&lt;/li&gt;
&lt;li&gt;如果超過三個特徵以上不好視覺化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以這時候就需要對特徵做降維，在實務上
      
    
    </summary>
    
      <category term="機器學習" scheme="http://kjj6198.github.io/categories/%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92/"/>
    
    
      <category term="降維" scheme="http://kjj6198.github.io/tags/%E9%99%8D%E7%B6%AD/"/>
    
      <category term="PCA" scheme="http://kjj6198.github.io/tags/PCA/"/>
    
      <category term="t-SNE" scheme="http://kjj6198.github.io/tags/t-SNE/"/>
    
  </entry>
  
  <entry>
    <title>做了一份週刊 - 日語八百屋</title>
    <link href="http://kjj6198.github.io/2017/07/14/what-is-yaoya/"/>
    <id>http://kjj6198.github.io/2017/07/14/what-is-yaoya/</id>
    <published>2017-07-13T16:00:00.000Z</published>
    <updated>2017-07-19T14:52:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>自學日文也已經三年多了，做了一份周刊，叫做<a href="https://www.shurado.com" target="_blank" rel="noopener">日語八百屋</a>。</p><ul><li><a href="https://fb.me/nipponyaoya" target="_blank" rel="noopener">粉絲專頁</a></li><li><a href="https://medium.com/%E6%97%A5%E8%AA%9E%E5%85%AB%E7%99%BE%E5%B1%8B" target="_blank" rel="noopener">Medium</a></li></ul><h3 id="什麼是日語八百屋？"><a href="#什麼是日語八百屋？" class="headerlink" title="什麼是日語八百屋？"></a>什麼是日語八百屋？</h3><p>八百屋的由來源自於日語的八百屋（やおや），除了大家熟知的「蔬菜店」之外，也有「很多」的意思在裡頭。</p><p>我的目標很簡單：「滿足日文、日本、日劇愛好者們的求知慾以及資訊焦慮症。幫助減少學習阻礙、資訊不對稱、增加日本文化知識，內容涵蓋了日語學習、日本旅行、日本文化、動漫、語言學習技巧等等。」</p><p>學語言，多的是從微不足道的小事開始，50 音、文法、單字、敬語，最後內化成自己的事物，積跬步，成千里，最後逐漸變成「八百」。</p><p>學英文的線上資源很多，平台也相對完整，voicetube、希平方、tutorABC 都是不錯的學習管道，有大量的影片可以學習，在網路上用心搜尋，也能夠找到不錯的資源。</p><p>不過在學習日文的資源相對較少，多數都是從部落格上、FB 社團上而來的片段資訊。像是音速學習日語、王可樂的日語教室等等，仍然是以傳統的線下教學或是買書自學居多。</p><p>訂閱了週刊之後，每個禮拜一早上，我們都會寄送 5 ~ 10 篇不等的文章給讀者們閱讀。</p><h3 id="為什麼不用經營粉絲專頁的方式就好？"><a href="#為什麼不用經營粉絲專頁的方式就好？" class="headerlink" title="為什麼不用經營粉絲專頁的方式就好？"></a>為什麼不用經營粉絲專頁的方式就好？</h3><p>這答案其實蠻主觀的，因為日語相關的粉絲專頁幾乎是多到噴出來，在 facebook 順手搜尋日語、日文、日劇就會出現數不清的專頁。</p><p>然而，這些片段的資訊散佈在網路的各個角落，不僅統整困難之外，初學者在茫茫大海中也不知道該從哪裡開始。</p><p>分享特定領域的資訊不是我們的目的，而是想要不侷限在文法、單字、日文學習的範圍上，盡量由多面向的方式更深入日文這個語言。</p><p>出書跟開課，我們沒有那麼多的資源這樣做，而且坊間已經有很多人在這樣做了。</p><p>粉絲專頁，也夠多人在經營了，不缺我這一個興趣使然的日語學習者。所以對我來說目前最簡單也最純粹的方式就是寄送 email。</p><p>開設的粉絲專頁只是用來做推廣而已，基本上不會有太多貼文。</p><h3 id="跟一般的粉絲專頁有什麼不一樣？"><a href="#跟一般的粉絲專頁有什麼不一樣？" class="headerlink" title="跟一般的粉絲專頁有什麼不一樣？"></a>跟一般的粉絲專頁有什麼不一樣？</h3><p>不過，如果只搜集文法、單字相關的資訊，似乎有些枯燥乏味，而且網路上、各大書店、部落格上的內容豐富，絕對有許多優秀的教材。</p><p>要說不一樣的話，我們主要是用 email 來推送內容的。</p><p>email 雖然不像 facebook 那樣即時，但這反而是個優點，可以讓你只專注在目前的內容中。再來 email 不會被其他外在因素干擾，而且大家檢查 email 的頻率大概只比 facebook 少一點點吧！</p><p>利用 email 渾然天成的特性，我們一週會推送 5 ~ 10 篇不等的文章，絕對是在一週（甚至是一天）看得完的份量。</p><p>雖然不一定能對學習有顯著的幫助，但希望能夠藉由這樣的方式，不僅擴展自身對日文的理解之外，也順便了解日本文化。因此，涵蓋的範圍很廣，有關於日本文化的，都可以是本週刊的素材之一。</p><p>未來希望能夠讓大家都能夠輕易地分享自己的筆記或連結，讓這份週刊的廣度更活躍，所以如果有人也願意分享文章或是學習筆記的話那就太好了。</p><p>畢竟一個人對日本所知有限，有人每天追劇、有人追動漫、有人對歷史瞭若指掌、有人可能懂得分析經濟等等。但如果能夠把這些內容結合起來，這份週刊就會變得非常有料：）。</p><p>最後，不妨到網站訂閱一下 <a href="https://www.shurado.com" target="_blank" rel="noopener">https://www.shurado.com</a> 吧！</p><h3 id="技術線"><a href="#技術線" class="headerlink" title="技術線"></a>技術線</h3><p>因為想要專注在寫文章上，花了兩天左右建好網站，並且逐漸擴充功能，反正最基本的功能只要達到：</p><ul><li>寄信</li><li>製作電子報</li><li>寄送電子報</li><li>存放歷期週刊的頁面</li><li>首頁</li></ul><p>基本上就差不多了。整個 app 是用 Ruby On Rails 寫的，用 Redis 管後台任務，比較麻煩的頁面互動就用 react + redux + redux-observable 解決。</p><p>寄信的功能主要串接了 mailgun 跟 mailchimp 這兩個第三方套件。mailgun 是負責寄送單一信件，例如訂閱確認信等等；而 mailchimp 則是負責寄送電子報。兩個的 API 都還蠻好串接的，文件也寫得很不錯。</p><p>之後還會陸續加上一些功能，例如：</p><ul><li>在後台發布文章時，能夠同步發表到 medium 跟粉絲專頁</li><li>日文文章可以依照需求加入平假名讀音</li><li>可以用搜尋的方式找到想要的週刊或 issue</li></ul><h3 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h3><p>想說在畢業前好好做點事情，所以趁著熱情還沒消失前，也在 hahow 上開了一門課叫做<a href="https://hahow.in/cr/nihongogo" target="_blank" rel="noopener">從 0 到 1 - 為初學者而設計的日文課</a>，整理了基本的日文文法。</p><p>後來想想，訂價實在太便宜，$1500 裡頭涵蓋的文法幾乎是一堂 $10000 出頭的補習班課程。</p><p>不過結果還挺出乎意料的。原本想說能夠成功開課就不錯了，沒想到現在募資率竟然已經破 900% 了。現在想想，如果知道準備一門課那麼累的話，或許我就不會開課了，尤其是在雙語之間上字幕，實在有夠累人。</p><h3 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h3><p>不知不覺這份週刊已經要到 20期了，最大的體會是技術已經不是最大的瓶頸，而是如何產生這些內容。雖然之後或許可以靠著機器學習的幫忙省下一些功夫，不過內容的生產永遠是有需求的，不過光有內容，卻沒有良好的體驗來吸引讀者們的話，再怎麼努力產出也是白搭。</p><p>希望能夠繼續堅持下去。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自學日文也已經三年多了，做了一份周刊，叫做&lt;a href=&quot;https://www.shurado.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;日語八百屋&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://fb.me/nipp
      
    
    </summary>
    
      <category term="日語學習" scheme="http://kjj6198.github.io/categories/%E6%97%A5%E8%AA%9E%E5%AD%B8%E7%BF%92/"/>
    
    
      <category term="日語學習" scheme="http://kjj6198.github.io/tags/%E6%97%A5%E8%AA%9E%E5%AD%B8%E7%BF%92/"/>
    
      <category term="日語八百屋" scheme="http://kjj6198.github.io/tags/%E6%97%A5%E8%AA%9E%E5%85%AB%E7%99%BE%E5%B1%8B/"/>
    
  </entry>
  
</feed>
