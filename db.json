{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hueman/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hueman/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/opacity-10.png","path":"css/images/opacity-10.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/logo-header.png","path":"css/images/logo-header.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/s-left.png","path":"css/images/s-left.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default.png","path":"css/images/thumb-default.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/styles.css","path":"libs/titillium-web/styles.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/jquery/2.0.3/jquery.min.js","path":"libs/jquery/2.0.3/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"cfa63b34bc123192e7a9e66fd7be1c05bd41cdfd","modified":1488457507000},{"_id":"themes/hueman/.DS_Store","hash":"f532790a9ef5b42e230d03a8061af560b0586972","modified":1488301233000},{"_id":"themes/hueman/.gitignore","hash":"cd089ae45ce870c45e434019e8f1ed4f066cd425","modified":1485879562000},{"_id":"themes/hueman/LICENSE","hash":"3975b7883caeb33f61fada7c0ef4add7ab189849","modified":1485879562000},{"_id":"themes/hueman/README.md","hash":"defb1f667677e1fd13b3a4799a6c70eae621f796","modified":1485879562000},{"_id":"themes/hueman/_config.yml","hash":"b9371be31d43c3ddb3da706659f5f1787073073c","modified":1488300968000},{"_id":"themes/hueman/ko.yml","hash":"81ea44ecda87a4398bb6d88a3b02f6b73c9a1637","modified":1485879562000},{"_id":"themes/hueman/package.json","hash":"d4ff853568e592265c2c9a21ce358f15babec14a","modified":1485879562000},{"_id":"source/_posts/.DS_Store","hash":"00fc5ebe918984fa02a8a23f6428e31887be99a3","modified":1488459143000},{"_id":"source/_posts/chatops.md","hash":"df15f88304dab1111dd69e9569e4c5cc9699f92e","modified":1488459343000},{"_id":"source/_posts/code-review-101.md","hash":"da1ad413dc9adb646ded7e573a6f068e23129d29","modified":1488298756000},{"_id":"source/_posts/context-switch.md","hash":"cb49a1220944496756ff81a85acb87f4ea2951ca","modified":1488293912000},{"_id":"source/_posts/css-variable.md","hash":"224408ecdf8800f8793889c278a3a8c37ed33865","modified":1479125236000},{"_id":"source/_posts/frontend-weekly.md","hash":"e745f5c3d61d45518deb31cdbc7694a9174701f4","modified":1487503015000},{"_id":"source/_posts/gasline.md","hash":"684eb20fda393da70b263543e1b2b5984578807d","modified":1487503568000},{"_id":"source/_posts/go-to-postcss-or-not.md","hash":"e56864f9d79e2ba2857793a350861bf5b91f775e","modified":1488294248000},{"_id":"source/_posts/isaka-kupa.md","hash":"47e71a7eb0415328a7b73d97097617391d72fb41","modified":1476601193000},{"_id":"source/_posts/legacy-code.md","hash":"5ae91cdbac99e2a576e5c6c23ee982937508a7f2","modified":1476790298000},{"_id":"source/_posts/legacy-code2.md","hash":"8eaadd71ff9484f677ef2ef8334654472dc76eff","modified":1476790320000},{"_id":"source/_posts/legacy-code3.md","hash":"bdee6536ca8fc789184b9ed5804cdccec4d83c1c","modified":1476790338000},{"_id":"source/_posts/low-poly-art.md","hash":"fc1aec18895eb5ddcc283165383e2bedc0c14c63","modified":1488296513000},{"_id":"source/_posts/morden-time.md","hash":"bb821cdc4b900b9173dfe01bfa174f78503f6875","modified":1488348200000},{"_id":"source/_posts/readble-code-art.md","hash":"4f92bb0623de0e901254f099fa5882a69ac65e64","modified":1488298573000},{"_id":"source/_posts/responsive-flex.md","hash":"dad6d544fbb5a79e8027ddfaa7230b2d37ef3064","modified":1488337494000},{"_id":"source/_posts/scroll-animation-2.md","hash":"cf04f726b9361ea21ca1f13b6b63257c4410fb15","modified":1476858045000},{"_id":"source/_posts/scroll-animation.md","hash":"618e37f477bfd10aa96f86318d908575636fb9fe","modified":1476858064000},{"_id":"source/_posts/webgl-it.md","hash":"ff258cdb27958598223e561f945cd0bef5a937ec","modified":1488299331000},{"_id":"source/_posts/weekly-6-6.md","hash":"12e8d546c41271ed7a4d1ba27b583d4e001face5","modified":1479123910000},{"_id":"source/_posts/weekly-thought-5-29.md","hash":"e6fb6abfe0656424b8e8417c6b9c5d29dcd04488","modified":1487503148000},{"_id":"source/_posts/weekly-thought-5-30.md","hash":"adbfde5480313c4ca6c738dc6bdd6b12686d07c7","modified":1479124299000},{"_id":"source/_posts/weekly-thought-7-31.md","hash":"0b955314fbed8d8e8855e614fff788500469b516","modified":1479124266000},{"_id":"source/_posts/weekly-thought-7-17.md","hash":"91c64a62746b92649187d0da38aee58d457856d3","modified":1479124491000},{"_id":"themes/hueman/.github/ISSUE_TEMPLATE.md","hash":"1ce6c6330e2e37fcf4764d69ed2c43670e30eb23","modified":1485879562000},{"_id":"themes/hueman/languages/ca.yml","hash":"d082e6f9e7615556b8f6c5f1286f0db8a0db195e","modified":1485879562000},{"_id":"themes/hueman/languages/en.yml","hash":"3416fee358d869e6abf0cca695edf8386349053f","modified":1485879562000},{"_id":"themes/hueman/languages/es.yml","hash":"97191c8ab7ce5334369d96f6e53a6d365a2057b1","modified":1485879562000},{"_id":"themes/hueman/languages/fr.yml","hash":"0624f8f7532f1312caaf4f8d498aab69c80a92f2","modified":1485879562000},{"_id":"themes/hueman/languages/hu.yml","hash":"5dd987ad5f33748bcba1d9a7eb78c1800b7c8bed","modified":1485879562000},{"_id":"themes/hueman/languages/ja.yml","hash":"56f3af0bf5cc56f9f7bf24fe5cb881a6a1b34e7b","modified":1485879562000},{"_id":"themes/hueman/languages/id.yml","hash":"03e45cf88b69e657a340362e18668e443ddaae47","modified":1485879562000},{"_id":"themes/hueman/languages/pt-BR.yml","hash":"6f9539673e08d66866bb210b78863ef68023f991","modified":1485879562000},{"_id":"themes/hueman/languages/ru.yml","hash":"99f111b39f867d421ff4cb859dd1deb26caa382e","modified":1485879562000},{"_id":"themes/hueman/languages/tr.yml","hash":"003cb50200eba865d57e5c53925636f1a5ec0a70","modified":1485879562000},{"_id":"themes/hueman/languages/vi.yml","hash":"edeb4492a08af458fe958dc4d48101c96750b159","modified":1485879562000},{"_id":"themes/hueman/languages/zh-TW.yml","hash":"14f13641d360d715217f8443aa0dc8ba49f279ae","modified":1488294043000},{"_id":"themes/hueman/layout/archive.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1485879562000},{"_id":"themes/hueman/layout/category.ejs","hash":"5096d3f019098d9940429152295f6d6161d887ba","modified":1485879562000},{"_id":"themes/hueman/layout/index.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1485879562000},{"_id":"themes/hueman/layout/page.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1485879562000},{"_id":"themes/hueman/layout/layout.ejs","hash":"35fd7fe6d4e2d313246a0a31446a597714facdea","modified":1485879562000},{"_id":"themes/hueman/layout/post.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1485879562000},{"_id":"themes/hueman/layout/tag.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1485879562000},{"_id":"themes/hueman/scripts/excerpt.js","hash":"630f17f2647b2ba5b207dba36fb3c6587a3aa04f","modified":1485879562000},{"_id":"themes/hueman/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1485879562000},{"_id":"themes/hueman/scripts/thumbnail.js","hash":"e78b1b978fa1acad5409afc685d13f669e80b24f","modified":1485879562000},{"_id":"themes/hueman/source/.DS_Store","hash":"71de49345b332e02516e8cd5f553d3a97c7c0bf7","modified":1488300546000},{"_id":"source/_posts/chatops/process.png","hash":"9d4a8270be6c09208aa0943cba8e65403ef498e5","modified":1488382789000},{"_id":"source/_posts/chatops/success.png","hash":"9e9d45b959cdc054bfb53bab094b400bb4e302c6","modified":1488385204000},{"_id":"themes/hueman/layout/comment/counter.ejs","hash":"9c41bc718322ba0e4e08c301f15fae720c995b2e","modified":1485879562000},{"_id":"themes/hueman/layout/comment/disqus.ejs","hash":"83158f5b00f95acf847524fd7ffeb5aab25add78","modified":1485879562000},{"_id":"themes/hueman/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1485879562000},{"_id":"themes/hueman/layout/comment/index.ejs","hash":"1ecc5ba82ae4236da7635a58d4584fd67f6f1fc3","modified":1485879562000},{"_id":"themes/hueman/layout/comment/facebook.ejs","hash":"6407d3d6823503d043935b0bc16fa5f61aa9e4dc","modified":1485879562000},{"_id":"themes/hueman/layout/comment/isso.ejs","hash":"4f8b81ff5bb418ec11ce080d515f247bfe436014","modified":1485879562000},{"_id":"themes/hueman/layout/comment/scripts.ejs","hash":"305aa07646ab03e00d8239a811f4ec6f75751e1e","modified":1485879562000},{"_id":"themes/hueman/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1485879562000},{"_id":"themes/hueman/layout/common/archive.ejs","hash":"bf909e4d6798374daf114cf41540f2bd300408d9","modified":1488298824000},{"_id":"themes/hueman/layout/common/article.ejs","hash":"bcb1e4ccb099ce116e172f4b35cef0af0c2c129a","modified":1485879562000},{"_id":"themes/hueman/layout/common/content-title.ejs","hash":"43288ebc0ea30d80e6d7df56f2e7ed5d7935ed1a","modified":1485879562000},{"_id":"themes/hueman/layout/common/footer.ejs","hash":"f37d40bd587318e2f9946e61ecb83aa0d2637027","modified":1488301128000},{"_id":"themes/hueman/layout/common/head.ejs","hash":"dacc29256a51d4867c662b6f1805d0d7652de45d","modified":1485879562000},{"_id":"themes/hueman/layout/common/header.ejs","hash":"4a6535c4bf177f7fa572f153babb236a3d7f8036","modified":1488329822000},{"_id":"themes/hueman/layout/common/scripts.ejs","hash":"db677ab336d31292bffc071b2115e25e9c6f198d","modified":1485879562000},{"_id":"themes/hueman/layout/common/sidebar.ejs","hash":"745666ee78b714aa34d8774a005a0598261ec349","modified":1485879562000},{"_id":"themes/hueman/layout/common/thumbnail.ejs","hash":"c5fba5d5287f49e02040c530cd92312b2221a2c1","modified":1485879562000},{"_id":"themes/hueman/layout/common/summary.ejs","hash":"16c50d2a9bfc5285cbd7fa77227c279f4104e1a3","modified":1488298897000},{"_id":"themes/hueman/layout/plugin/baidu-analytics.ejs","hash":"d99089976258050666208f29000f84496fe1029c","modified":1485879562000},{"_id":"themes/hueman/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1485879562000},{"_id":"themes/hueman/layout/plugin/scripts.ejs","hash":"52552496d83d032702f9fc40da8d62894dc51dae","modified":1485879562000},{"_id":"themes/hueman/layout/search/baidu.ejs","hash":"bcffa60f2d1750ac7499e928f538176e3804393b","modified":1485879562000},{"_id":"themes/hueman/layout/search/index.ejs","hash":"1a6a742727018567f60f8815be0bff5a45294ce5","modified":1485879562000},{"_id":"themes/hueman/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1485879562000},{"_id":"themes/hueman/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1485879562000},{"_id":"themes/hueman/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1485879562000},{"_id":"themes/hueman/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1485879562000},{"_id":"themes/hueman/layout/share/default.ejs","hash":"7492f5b375a56c67a1a1a4f6b893e37f49dc86dc","modified":1485879562000},{"_id":"themes/hueman/layout/share/index.ejs","hash":"029e91aace5a4c0d8387fc7744c477ccc6865c30","modified":1485879562000},{"_id":"themes/hueman/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1485879562000},{"_id":"themes/hueman/layout/widget/archive.ejs","hash":"c4d303eaaa23768e52ead324c422a8900b1fe448","modified":1485879562000},{"_id":"themes/hueman/layout/widget/category.ejs","hash":"2d705df76f2eef7d695a971266fc104e89ca6bcd","modified":1485879562000},{"_id":"themes/hueman/layout/widget/links.ejs","hash":"97dab84d6336a4c926ddc288d5a6c264f54c50c3","modified":1485879562000},{"_id":"themes/hueman/layout/widget/recent_posts.ejs","hash":"1238725b1cebf2eaaee4515c9579df62b961504c","modified":1488293682000},{"_id":"themes/hueman/layout/widget/sticky_posts.ejs","hash":"6bad4126bed652f5f9e93027cbe3ee03b67b034a","modified":1485879562000},{"_id":"themes/hueman/layout/widget/tag.ejs","hash":"bfbc63e675439dcdc35e07dce6948e41500b649c","modified":1485879562000},{"_id":"themes/hueman/layout/widget/tagcloud.ejs","hash":"3ecb048d6098bc3953043a4c25f1f7c4b23397cf","modified":1485879562000},{"_id":"themes/hueman/source/css/_extend.styl","hash":"2860d503b68ae81ea7675c82c6e63873e0c9e761","modified":1485879562000},{"_id":"themes/hueman/source/css/.DS_Store","hash":"b8e5951c497e1060bfccf7be197be3bad8cb1885","modified":1488300554000},{"_id":"themes/hueman/source/css/_variables.styl","hash":"8c2f1e44bbb396b6d6274e4b764e35ae79f81a86","modified":1488300862000},{"_id":"themes/hueman/source/css/_responsive.styl","hash":"4addaf2f203563accf0479850eda1ab4f4a4c34b","modified":1485879562000},{"_id":"themes/hueman/source/css/style.styl","hash":"36f8517a2f7b2528308ce4b591492b1ad7b82bb5","modified":1488300850000},{"_id":"themes/hueman/source/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1485879562000},{"_id":"themes/hueman/source/js/main.js","hash":"ebe5a326605ab655155235c532b54a78a0662988","modified":1485879562000},{"_id":"themes/hueman/layout/common/post/category.ejs","hash":"f47522c059d3b4d721ce501203c05f94a285c0b5","modified":1485879562000},{"_id":"themes/hueman/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1485879562000},{"_id":"themes/hueman/layout/common/post/date.ejs","hash":"2d090d33cbd23129d63a0ba768a03d717399d9c5","modified":1485879562000},{"_id":"themes/hueman/layout/common/post/nav.ejs","hash":"c5f41ebf451cff39eaf116096604ce706a175767","modified":1485879562000},{"_id":"themes/hueman/layout/common/post/tag.ejs","hash":"a364204d7152adf6c7522b6568990437e8308d1f","modified":1485879562000},{"_id":"themes/hueman/layout/common/post/title.ejs","hash":"6d19c61afb1f5f71c483be2ce37c6820ac2cd8b5","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/index.styl","hash":"d421ed06c84f7a561b293f662a670bf132d41c63","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1485879562000},{"_id":"themes/hueman/source/css/_partial/archive.styl","hash":"5e5fb791ab54f0acf33850f586f7aa8cb2782f3a","modified":1485879562000},{"_id":"themes/hueman/source/css/_partial/assets.styl","hash":"3d95417663c5a737f064a31ab4ef52bac7fda8df","modified":1485879562000},{"_id":"themes/hueman/source/css/_partial/comment.styl","hash":"d2de8f2c1cf6236ead0800c2a1566e01e7ae0b44","modified":1485879562000},{"_id":"themes/hueman/source/css/_partial/article.styl","hash":"efc8bab70e2512514730267eb11e03076ecc4556","modified":1488458988000},{"_id":"themes/hueman/source/css/_partial/footer.styl","hash":"8dffae4ac6a57e506e378a9ce44b85a15a912cad","modified":1485879562000},{"_id":"themes/hueman/source/css/_partial/header.styl","hash":"ddd308894caed290fd3dc62e1cf0532ed28f1a83","modified":1488329952000},{"_id":"themes/hueman/source/css/_partial/nav.styl","hash":"587a9c9d304ed83eb0331a1d16693461805311c3","modified":1485879562000},{"_id":"themes/hueman/source/css/_partial/insight.styl","hash":"3d66323e7b75ad197e80d7189a8d9216e1e1ef2f","modified":1485879562000},{"_id":"themes/hueman/source/css/_partial/sidebar.styl","hash":"172d793cc5ba3386066c418d63c0cc40be2292b8","modified":1488294978000},{"_id":"themes/hueman/source/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1485879562000},{"_id":"themes/hueman/source/css/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1488300570000},{"_id":"themes/hueman/source/css/images/logo-header.png","hash":"7e665de60c53992fd817ddb6d9a2bc5513a23c71","modified":1488300673000},{"_id":"themes/hueman/source/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1485879562000},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1485879562000},{"_id":"themes/hueman/source/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1485879562000},{"_id":"themes/hueman/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1485879562000},{"_id":"themes/hueman/source/libs/titillium-web/styles.css","hash":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1485879562000},{"_id":"source/_posts/responsive-flex/example1.png","hash":"46415e1e6b976f38c0bfb2a55fd43a297eb6106a","modified":1479124117000},{"_id":"source/_posts/chatops/payload.png","hash":"31ca3ca8a007dc5b8ce80b39ab02254f7c443849","modified":1488456919000},{"_id":"source/_posts/responsive-flex/example3.png","hash":"010f246ab21f1db5ee419167087188f4090dc1f0","modified":1479124117000},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1485879562000},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1485879562000},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1485879562000},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1485879562000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1485879562000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1485879562000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1485879562000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1485879562000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1485879562000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1485879562000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1485879562000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1485879562000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1485879562000},{"_id":"themes/hueman/source/libs/jquery/2.0.3/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1485879562000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1485879562000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1485879562000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1485879562000},{"_id":"source/_posts/responsive-flex/example2.png","hash":"0dfd4db0f1a75a820371232cbf645066d412ed2c","modified":1479124117000},{"_id":"public/archives/2016/03/index.html","hash":"4faff5eccb1910dbd98ba14251fb4f0ce9a80fbe","modified":1488459358523},{"_id":"public/archives/2016/05/index.html","hash":"eed12f28366ed800acecd504d1a86270fa7d03f5","modified":1488459358523},{"_id":"public/archives/2016/07/index.html","hash":"a9070c40d7f758b974d59486613ccf2e9b533a0d","modified":1488459358524},{"_id":"public/archives/2016/09/index.html","hash":"42e63d69e2bb0036f45ba560e4cd7d4b64d7249e","modified":1488459358524},{"_id":"public/archives/2017/01/index.html","hash":"af9ab0dbc218b7da1e78e298e3b6f1b803eacace","modified":1488459358524},{"_id":"public/archives/2017/03/index.html","hash":"bcf4f47c1095f1c045fe5bfd46f9d2341a7fa545","modified":1488459358524},{"_id":"public/categories/rails/index.html","hash":"52fce620134a87e1d539bbb5a514700ce1c6833c","modified":1488459358524},{"_id":"public/categories/前端/page/2/index.html","hash":"168ad3015c623565a22f666ececfd45c545b5cd6","modified":1488459358524},{"_id":"public/categories/程式筆記/index.html","hash":"8319e8c06f18c6590d9f36bb059775417aae9cfe","modified":1488459358524},{"_id":"public/tags/devops/index.html","hash":"ca74ac2622214e0230bb4863eae74121a00d9cb5","modified":1488459358524},{"_id":"public/tags/chatops/index.html","hash":"4eec59d6908c5ea548301ae4139ef799fa1b4737","modified":1488459358524},{"_id":"public/tags/capistrano/index.html","hash":"db79a55ac900759879934854366ab3cbc5fef70b","modified":1488459358524},{"_id":"public/tags/css/index.html","hash":"55434189efa876a983e0b31259eabcd70b500137","modified":1488459358524},{"_id":"public/tags/react/index.html","hash":"13c8ff20730b5e0de55657cf94d3656b79819cfc","modified":1488459358524},{"_id":"public/tags/webpack/index.html","hash":"f346a08b2773fe27f253d360ce152e5a4434d066","modified":1488459358524},{"_id":"public/tags/postcss/index.html","hash":"ace2e7f0c133c8621588079239f5a0d8124b3fcb","modified":1488459358524},{"_id":"public/tags/sass/index.html","hash":"627cb63c8b0603d1c23b03d3570228dc7ebafc33","modified":1488459358524},{"_id":"public/tags/推理/index.html","hash":"3f32f49e3d2839a4160aef043ec9d893f498eb78","modified":1488459358524},{"_id":"public/tags/HTML/index.html","hash":"7656fcd4a0cdc65333ff7e5e2b1d84b3b4f2954b","modified":1488459358525},{"_id":"public/tags/aria/index.html","hash":"cb4312e0b68334797d5284021236ba95037e0ace","modified":1488459358525},{"_id":"public/tags/canvas/index.html","hash":"17a466343301610539116859b03826042d9ace8e","modified":1488459358525},{"_id":"public/tags/卓别林/index.html","hash":"5a1ef94e5b3b73579538c988e456ef333c00605b","modified":1488459358525},{"_id":"public/tags/low-poly/index.html","hash":"a132813e67d2436e4d69f0d852b7e60a33369c11","modified":1488459358525},{"_id":"public/tags/摩登時代/index.html","hash":"f9e086fb0176d1ff44333b30b2042487b059d78b","modified":1488459358525},{"_id":"public/tags/flex/index.html","hash":"9292460397cf8157da3acd18232ae3f377ece708","modified":1488459358525},{"_id":"public/tags/smooth-scoll/index.html","hash":"4c23757fc273c9bf14f6da8db0db7ae6549d400e","modified":1488459358525},{"_id":"public/tags/animation/index.html","hash":"230fc1d4806449480c1a353f17aa68ac0c3e1e9f","modified":1488459358525},{"_id":"public/tags/easing/index.html","hash":"7e37fb77886b66e9491f6983aaf2e1413d08edf9","modified":1488459358525},{"_id":"public/tags/scroll/index.html","hash":"ddc375b56360a73d9b2c86a09e3177588ae73bff","modified":1488459358525},{"_id":"public/tags/webGL/index.html","hash":"6a724509e3f032f6b27f1a5631dd0ab5b79c5d19","modified":1488459358525},{"_id":"public/tags/IT-鐵人幫/index.html","hash":"f136220ca61acfac7456cbdc51c35e6c6a35ae62","modified":1488459358525},{"_id":"public/tags/js/index.html","hash":"c3de53f13ae64f5bc330abda50e2c343b5e6ad90","modified":1488459358525},{"_id":"public/tags/draft-js/index.html","hash":"c411bdbd57194f3a231124a1eadd505752111438","modified":1488459358525},{"_id":"public/tags/flow/index.html","hash":"91b5799a15574b3fc92354f7545a79b63cf29cd1","modified":1488459358525},{"_id":"public/tags/javascript/index.html","hash":"758a0a14cce79bd2b923685be31f903211a99770","modified":1488459358525},{"_id":"public/tags/html/index.html","hash":"9b643d13f94e4ed79b71814123a8a1f4a8626ed1","modified":1488459358525},{"_id":"public/tags/sudo週刊/index.html","hash":"464443aa03ab5b578a12db9e6262fa4fe545713a","modified":1488459358525},{"_id":"public/2017/03/01/chatops/index.html","hash":"bbe730267f8e0d18db1543a6f41f8523a15af6f9","modified":1488459358525},{"_id":"public/2017/02/28/webgl-it/index.html","hash":"c37904b32d4a2f5c09b2a5b53643f026dbd70c1e","modified":1488459358525},{"_id":"public/2017/02/22/morden-time/index.html","hash":"ecd26888dc55fc96e9d5b7cb2c39bf82ac48a055","modified":1488459358525},{"_id":"public/2017/02/01/responsive-flex/index.html","hash":"a3bb24f6f3839c2760c621bc95d3ae62a3651989","modified":1488459358525},{"_id":"public/2017/01/01/code-review-101/index.html","hash":"84298508e75a6a996c5ecb4d1e741319937efa4c","modified":1488459358525},{"_id":"public/2016/11/14/weekly-thought-5-30/index.html","hash":"efc85dd1c6cfd08ac71cf421d6cff8ae12e54051","modified":1488459358526},{"_id":"public/2016/11/14/frontend-weekly/index.html","hash":"25c0a5166f887b722d866a66e2e2e31ea61072f6","modified":1488459358526},{"_id":"public/2016/11/14/css-variable/index.html","hash":"cb9238189d0bdd52d50c8a892858b6b1e5010df2","modified":1488459358526},{"_id":"public/2016/11/01/low-poly-art/index.html","hash":"75fec73a4330d6f4e87022c68d5142d654997acb","modified":1488459358526},{"_id":"public/2016/10/27/context-switch/index.html","hash":"82ff1f53b5742a51904fc87be45cf64e5967940f","modified":1488459358526},{"_id":"public/2016/10/16/gasline/index.html","hash":"c540e9d14a27392cb6795ac1d8ce38b1b2c5f0f2","modified":1488459358526},{"_id":"public/2016/10/16/isaka-kupa/index.html","hash":"59d0fc4cb98811997205cd2e2c0e1288b609aa28","modified":1488459358526},{"_id":"public/2016/10/13/scroll-animation-2/index.html","hash":"307a02b2854ebc31be6a6b6d40e5e76d7b1cd990","modified":1488459358526},{"_id":"public/2016/10/12/scroll-animation/index.html","hash":"987dfc55ac6078377473999dc9a075713b328c4d","modified":1488459358526},{"_id":"public/2016/09/17/legacy-code3/index.html","hash":"fd72fa88a96ca6144cf2bb60db38359fb639a280","modified":1488459358526},{"_id":"public/2016/09/16/go-to-postcss-or-not/index.html","hash":"14ac50ea37b0284bd8d96658c3620fb9247500e1","modified":1488459358526},{"_id":"public/2016/07/31/weekly-thought-7-31/index.html","hash":"9df6be10d8728f7c4ecfdad3f319d52b6a05194c","modified":1488459358526},{"_id":"public/2016/07/17/weekly-thought-7-17/index.html","hash":"da287485c2e53ccd2ecd2010f19cc720eb0672e2","modified":1488459358526},{"_id":"public/2016/06/14/legacy-code2/index.html","hash":"fc5bab851514ae04b05279f5d4ff45ce3972e37a","modified":1488459358526},{"_id":"public/2016/06/11/legacy-code/index.html","hash":"2b73405fa7a63bbcae608dd010d1c37ea76d7c30","modified":1488459358526},{"_id":"public/2016/06/06/weekly-6-6/index.html","hash":"5d75b2923ec196b67746fb4b16cbe419e29660b3","modified":1488459358526},{"_id":"public/2016/05/29/weekly-thought-5-29/index.html","hash":"b8de762e6a83219f230449541a323217d18cf03c","modified":1488459358526},{"_id":"public/2016/03/20/readble-code-art/index.html","hash":"128a35411bfc8ec8afd9abc1458bb9e2e6da1d1e","modified":1488459358526},{"_id":"public/archives/index.html","hash":"71b023ebc0c4910c0e5b827f90a83755a840df51","modified":1488459358526},{"_id":"public/archives/page/2/index.html","hash":"ddda3cbdd11551d947413abbfffe432ec9fddb5b","modified":1488459358526},{"_id":"public/archives/page/3/index.html","hash":"b575ee14e8872cb388fbe465b158525f359677df","modified":1488459358526},{"_id":"public/archives/2016/index.html","hash":"630e3c90c578a3bdc83b057e9e4648cb6cca2320","modified":1488459358526},{"_id":"public/archives/2016/page/2/index.html","hash":"3b856681bc03af1fed4888f67dde061b598eed1b","modified":1488459358527},{"_id":"public/archives/2016/06/index.html","hash":"fcc6b584a29e90feb7fb7a99329c02ba912c7cce","modified":1488459358527},{"_id":"public/archives/2016/10/index.html","hash":"e29d841d4d06e21dd9c177aa8a60ca45c7a4a1fa","modified":1488459358527},{"_id":"public/archives/2016/11/index.html","hash":"24ae4a23a4d82a7fa5a8dfbed2ab4d3d3cd17851","modified":1488459358527},{"_id":"public/archives/2017/index.html","hash":"a8c55fb1e670a19702123750c227a9d181c9cd07","modified":1488459358527},{"_id":"public/archives/2017/02/index.html","hash":"1c268d9f029f528778c878a31febc041f55a7420","modified":1488459358527},{"_id":"public/categories/前端/index.html","hash":"8f15212a499a3a9887aafb133b3732d9617a1f7a","modified":1488459358527},{"_id":"public/categories/前端週刊/index.html","hash":"741ae9be9a0a97f9fc0a679b6afcacc4d13954d7","modified":1488459358527},{"_id":"public/categories/讀書心得/index.html","hash":"51b3fc800beed9bfbe0510afae8530a4f081c555","modified":1488459358527},{"_id":"public/index.html","hash":"6a65674dace2d2be88e93619917d1da13f5cea1a","modified":1488459358527},{"_id":"public/page/2/index.html","hash":"2f30b0147010f8db2362a797a3f29573277a3f1f","modified":1488459358527},{"_id":"public/page/3/index.html","hash":"4cc9b12d9ef86242d5b412d1b4d6b93c0039bd45","modified":1488459358527},{"_id":"public/tags/伊坂幸太郎/index.html","hash":"adacc9b9779f23cb6e3efa7970c76f5a74cf8410","modified":1488459358527},{"_id":"public/tags/重構/index.html","hash":"fc2e88e68fc92dab369d55f971bf7608f7ec2136","modified":1488459358527},{"_id":"public/tags/前端/index.html","hash":"42266e3c69735f2de0ca527d43ebf974e34f1023","modified":1488459358527},{"_id":"public/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1488459358536},{"_id":"public/css/images/logo-header.png","hash":"7e665de60c53992fd817ddb6d9a2bc5513a23c71","modified":1488459358536},{"_id":"public/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1488459358536},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1488459358536},{"_id":"public/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1488459358537},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1488459358537},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1488459358537},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1488459358537},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1488459358537},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1488459358537},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1488459358537},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1488459358537},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1488459358537},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1488459358537},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1488459358537},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1488459358537},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1488459358537},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1488459358537},{"_id":"public/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1488459358537},{"_id":"public/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1488459358538},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1488459358538},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1488459358538},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1488459358538},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1488459358538},{"_id":"public/2017/03/01/chatops/process.png","hash":"9d4a8270be6c09208aa0943cba8e65403ef498e5","modified":1488459358538},{"_id":"public/2017/03/01/chatops/success.png","hash":"9e9d45b959cdc054bfb53bab094b400bb4e302c6","modified":1488459358538},{"_id":"public/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1488459359478},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1488459359493},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1488459359494},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1488459359494},{"_id":"public/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1488459359521},{"_id":"public/js/main.js","hash":"ebe5a326605ab655155235c532b54a78a0662988","modified":1488459359521},{"_id":"public/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1488459359524},{"_id":"public/libs/titillium-web/styles.css","hash":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1488459359525},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1488459359525},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1488459359526},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1488459359527},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1488459359527},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1488459359527},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1488459359527},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1488459359527},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1488459359527},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1488459359527},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1488459359528},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1488459359528},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1488459359528},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1488459359528},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1488459359528},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1488459359528},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1488459359528},{"_id":"public/css/style.css","hash":"ce00b8d89fac69fbfec248327861f563f704d3de","modified":1488459359528},{"_id":"public/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1488459359529},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1488459359531},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1488459359532},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1488459359539},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1488459359539},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1488459359540},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1488459359540},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1488459359540},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1488459359540},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1488459359540},{"_id":"public/libs/jquery/2.0.3/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1488459359540},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1488459359541},{"_id":"public/2017/02/01/responsive-flex/example1.png","hash":"46415e1e6b976f38c0bfb2a55fd43a297eb6106a","modified":1488459359593},{"_id":"public/2017/03/01/chatops/payload.png","hash":"31ca3ca8a007dc5b8ce80b39ab02254f7c443849","modified":1488459359620},{"_id":"public/2017/02/01/responsive-flex/example3.png","hash":"010f246ab21f1db5ee419167087188f4090dc1f0","modified":1488459359627},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1488459359679},{"_id":"public/2017/02/01/responsive-flex/example2.png","hash":"0dfd4db0f1a75a820371232cbf645066d412ed2c","modified":1488459359844}],"Category":[{"name":"rails","_id":"cizse9p430002b75tl7j28po3"},{"name":"前端","_id":"cizse9p4b0004b75t6uzjvgw5"},{"name":"前端週刊","_id":"cizse9p6w000hb75tyjpr6adw"},{"name":"讀書心得","_id":"cizse9p7n000ob75tts78kpkq"},{"name":"程式筆記","_id":"cizse9p8g0018b75th1yyngcu"}],"Data":[],"Page":[],"Post":[{"title":"Rails app 自動化部屬 - hubot 與 heaven","_content":"\n\n\n### 前言\n\n目前所在的公司裡頭是直接在本地端的 terminal 跑 `cap staging deploy` 指令。 [capistrano](https://github.com/capistrano/capistrano) 作為自動部署化的工具非常方便，但難免會遇到幾個問題：\n\n- 不是團隊中的每個人都有相同的環境\n- 大家都在部署，結果 staging 上現在到底是哪個 branch，完全一頭霧水。\n- deploy 這件事情卡在本地端。\n\n對一家新創來說，越穩定的開發效率和流程，就越能夠專注在產品當中。所以我們希望做到幾件事：\n\n- 開發團隊都可以輕鬆的部署\n- 不用在本地端下指令部署，還要多設定 ssh。\n- 就算沒有開著電腦，也可以輕鬆地部署\n- 能夠記錄部署的狀況\n- 如果出問題了，可以快速 rollback 回上一個版本\n\n逐漸厭倦了在 terminal 打指令，ssh key 手動加的日子。於是打算自己研究有沒有更流暢的部署流程。\n\n之前在 Sudo 裡頭，幸好有 [@ocowchun](https://twitter.com/ocowchun) 跟 [@henry](https://twitter.com/henry40408) 兩位懶工，devops 做得非常完整，才能夠專注在開發功能，而不是一堆繁複的設定當中。（雖然才剛開發完就關閉服務了...）\n\n目前覺得最合適的解決方案是搭配 `hubot-deploy` 以及 `heaven` 來幫助部署。\n\n但 heaven 的文件實在寫的有夠爛。\n\n看了老半天，甚至看了一下 source code 才知道到底該怎麼設定。於是決定將整個設定流程分享給大家，希望能夠減少其他 devops 們走歪路的時間。\n\n## 主要流程\n\n{% asset_img \"process.png\" \"Github deployment process\" %}\n\nhubot 接收到部署指令後，會發送 [github deployment](https://developer.github.com/v3/repos/deployments)，同時會觸發 `deployment` 這個事件，這時 github 就會發送 POST 給在 webhook 設置的 url（這邊接收者為 `heaven`），heaven 接收到請求之後，就會開始部署，再一一回傳我們想要知道的部數狀況。\n\n### hubot-deploy\n\nhubot-deploy 能夠用 slack 對 slack-bot 下指令的方式建立 github 的 [deployment](https://developer.github.com/v3/repos/deployments) event。\n\n### heaven\n\n是一個 Rails 的 application。主要有一個 `/events` 負責接收從 github deployment 傳來的 deployment 與 payload。\n\n## 設定步驟\n\n`heaven` 的文件寫得不明所以`hubot-deploy` 也是草草帶過。幾乎只能靠著他們提供的流程圖，不斷的試錯與通靈。\n\n### 設定 hubot-deploy\n\n- [getting started with hubot](https://hubot.github.com/docs/)\n\n1. 利用 yeoman 產生 hubot，並且選擇 `adapter` 為 `slack`。\n\n2. 在 `package.json` 中加入 `hubot-deploy`，或者 run `npm install hubot-deploy --save-dev`\n\n3. 在 `external-scripts.json` 裡頭加入 `hubot-deploy`。\n\n4. 到  `apps.json` 中設定想要部署的 repos 有哪些：\n\n   ```\n   {\n     \"repo_name\": {\n       \"provider\": \"capistrano\",\n       \"auto_merge\": false,\n       \"repository\": \"kjj6198/deploy101\",\n       \"environments\": [\"production\", \"staging\"]\n     }\n   }\n\n   ```\n\n   這些資料在 hubot 送出 deployment 時會一併塞入 payload 當中。像是這樣：\n   ```\n       payload: {\n         \"name\": \"repo_name\",\n         \"robotName\": \"yourrobot\",\n         \"hosts\": \"\",\n         \"notify\": {\n           \"adapter\": \"slack\",\n           \"room\": \"123456789\",\n           \"user\": \"123456789\",\n           \"user_name\": \"kjj6198\"\n         },\n         \"config\": {\n           \"provider\": \"capistrano\",\n           \"auto_merge\": false,\n           \"repository\": \"kjj6198/deploy101\",\n           \"environments\": [\n             \"production\",\n             \"staging\"\n           ]\n         }\n       }\n    ```\n\n特別要注意的是，provider 的欄位之後會送給 heaven，所以 provider 的值必須是 heaven 有的（之後會提到），或是自己實作 Provider。\n\n這樣子我們的 hubot 就算設定完成了。先部署到 heroku 上測試看看，部署到 heroku 很簡單：\n\n```\nheroku login\ngit init\ngit add .\ngit commit \"init\"\nheroku create\ngit push heroku master\n```\n\n部署成功後，比較重要的變數有幾個：\n\n| 變數名稱                        | 用途                                       |\n| --------------------------- | ---------------------------------------- |\n| HUBOT_GITHUB_TOKEN          | GITHUB_TOKEN，到**個人帳號** > settings > personal access tokens 設定。設定好權限，因為 hubot 只是用來建立 repo 的 deployment，勾選 repo 即可。 |\n| HUBOT_SLACK_TOKEN           | 你的 slack-bot token。可以到[這裡](https://slack.com/apps/A0F7XDU93-hubot)設定 |\n\n全域變數可以到 heroku 的 dashboard 或是直接用 command line 設定：\n\n```\nheroku config:set HUBOT_GITHUB_TOKEN=abcccc\nheroku config:set HUBOT_SLACK_TOKEN=abcccc\n```\n\n測試一下是否成功。在你設定的頻道中輸入 `hubot deploy:version`\n\n{% asset_img \"success.png\" \"success\" %}\n\n其中的 `hubot` 要跟你的機器人名稱相同，例如機器人的名稱為 tripmomo，那麼我就要輸入 `tripmomo deploy:version`。\n\n成功的話 hubot 會回應你目前的版本訊息。\n\n5. 確認 hubot 有送出 deployment 事件。輸入 `hubot deploy app to statging`\n\n6. 輸入  `curl -H \"Authorization: token YOUR_GITHUB_TOKEN\" https://api.github.com/repos/my-github/my-repo/deployments` 看看 deployment 是否建立成功。如果成功會回傳：\n\n   ```javascript\n   {\n       \"url\": \"https://api.github.com/repos/my-github/my-repo/deployments/28301325\",\n       \"id\": 123456,\n       \"sha\": \"2e3xxxxxxxaaaaaaabbbbbbb\",\n       \"ref\": \"develop\",\n       \"task\": \"deploy\",\n       \"payload\": { // from apps.json\n         \"name\": \"my-app\",\n         \"robotName\": \"tripmomo\",\n         \"hosts\": \"\",\n         \"notify\": {\n           \"adapter\": \"slack\",\n           \"room\": \"aabbccdd\",\n           \"user\": \"aabbccdd\",\n           \"user_name\": \"kalan.chen\"\n         },\n         \"config\": { \n           \"provider\": \"capistrano\",\n           \"auto_merge\": false,\n           \"repository\": \"my-github/my-repo\",\n           \"environments\": [\n             \"production\",\n             \"staging\"\n           ]\n         }\n       },\n       \"environment\": \"staging\",\n       \"description\": \"deploy on staging from hubot-deploy-v0.13.27\",\n       \"creator\": {\n         \"login\": \"kjj6198\",\n         \"id\": 123456,\n         \"avatar_url\": \"https://avatars2.githubusercontent.com/u/123456?v=3\",\n         \"gravatar_id\": \"\",\n         \"url\": \"https://api.github.com/users/kjj6198\",\n         \"html_url\": \"https://github.com/kjj6198\",\n         \"followers_url\": \"https://api.github.com/users/kjj6198/followers\",\n         \"following_url\": \"https://api.github.com/users/kjj6198/following{/other_user}\",\n         \"gists_url\": \"https://api.github.com/users/kjj6198/gists{/gist_id}\",\n         \"starred_url\": \"https://api.github.com/users/kjj6198/starred{/owner}{/repo}\",\n         \"subscriptions_url\": \"https://api.github.com/users/kjj6198/subscriptions\",\n         \"organizations_url\": \"https://api.github.com/users/kjj6198/orgs\",\n         \"repos_url\": \"https://api.github.com/users/kalanchen/repos\",\n         \"events_url\": \"https://api.github.com/users/kjj6198/events{/privacy}\",\n         \"received_events_url\":\"https://api.github.com/users/kjj6198/received_events\",\n         \"type\": \"User\",\n         \"site_admin\": false\n       },\n       \"created_at\": \"2017-03-01T12:24:20Z\",\n       \"updated_at\": \"2017-03-01T12:24:20Z\",\n       \"statuses_url\": \"https://api.github.com/repos/my-github/my-repo/deployments/12345667/statuses\",\n       \"repository_url\": \"https://api.github.com/repos/my-github/my-repo\"\n     }\n   ```\n\n   更多 deployment API 可以到 [github deployment API](https://developer.github.com/v3/repos/deployments/) 看看。\n\n### 設定 heaven\n\n- 到 [heaven](https://github.com/atmos/heaven) 將 repo clone 下來。\n- 設定全域變數\n\n| 變數名稱                   | 用途                                       |\n| ---------------------- | ---------------------------------------- |\n| DEPLOYMENT_PRIVATE_KEY | 因為 heaven 是用 ssh 登入，需要 private key。如果 server 在 ec2 上，也可以用 pem 的方式來設定。 |\n| GITHUB_CLIENT_ID       | 到個人設定頁面 > OAuth application 產生 |\n| GITHUB_CLIENT_SECRET   | 到個人設定頁面 > OAuth application 產生 |\n| DATABASE_URL           | heaven 會建立資料庫紀錄 deployment               |\n| GITHUB_TOKEN           | heaven 會使用 gist 來當作 stdout stderr。所以在設定 token 時記得把 `gist` 打勾勾。 |\n\n其他的變數可以到 [這裡](https://github.com/atmos/heaven/blob/master/doc/installation.md) 查看。\n\n補充說明 `DEPLOYMENT_PRIVATE_KEY`：原始檔案長這樣\n\n```\n-----BEGIN RSA PRIVATE KEY-----\nMJVGa/WNT9aFs63ykxLCdGzav8CfQ5vKXrLrllHXUYFaB2yaN72L+fSsXAy9zMs2\nvy6wV2fB6j3YrVNCnBwUUNGTX9Ka6eeK98dCvHVyyE9Iz3CJAWZxaI03Px/xX9ps\nM4kDWe7IA6+mnuCVSzwQVWMdOoAXbQbhGdfeixbqljNhJrKW/jA9w4BNarwGYv4E\n0MwdU9x7zpk826ytza87yXHSdNuTKcsGQk4XHMYxJECj4EM8vTlVlEyEXZtCeh2z\nP4bjYkTcBom4nC/q7Ea7Pmy1iDJqs0qc1L/xtNMypMhx4iIaeDVawkvBaL6t9IPT\nKVuC9Y1uw5nJP1gwxXa5qoazhcikzqRYmaeWIzsZrcVShZBrJO9/a/APxXY7qJpJ\n0r1YYTykw7THYj2QYiv8cfF64/vh9cB0NELEp5hIuS82Mf6CjqRR7QYR+By3uIdD\nhQ77NMpQlmIC+TCJsLoADqwmEEZCiQSejtkXXtN/mNl581jP8+ViNkWZfPYWe7g6\nyUeXVN1cBPo6AIu+lStE+SlR8lbu7sdpn6lid1pJf50zeythabze81y/nrAdx+Jn\nscACBJBrERkhm2wdULkqwMV2g0U53YpYVAs2fFU1hGzRcE5zF1sdy9RLLX45Mzrm\nlRErTbSUcnoQJhhCso5uNY6MMnr/rQF920KA0Ufr40IBcQ8bOSX7lJucST5bZLDg\nH7g16rimHgK4I9rrvKy4plvbolfpuKGMYJDS3Q7IW5cL5lWLU3HaVSn+VyZe8p3A\nprVx0XmSCwpmUzbDI6FoqniVPVdgis2tV1uKdnJPVn0DoK0ersosGXmALytbYLeE\narH/cIlGGCoGbIX+Iv3u8aICBEG2eR8eXmQSlGI5rp9hGK/JrlkL3PywVmPw4Efi\natiS6Y12Tuu8bdpPxBTzXK3PoZ23Pc+1l7NXXIzBeGnj56bALOIbAY5kg+lIRdtP\nNSTAW8IVgFJUl4uzy/NXn/ewiE093ZVs59I2x4OoS14S20mkM/ldWbvlVm4Z3JxC\nxIWsIV8aLznttic5MJUGjGoqH1Brg0o1HyWdkoEcC1N0G57oO4pN4UTD5co5xY9j\nAi2NIcFCYzqrdTfSlPWJBZLhjZ5hOXIwuTeJfRxDAVphaUqfpXb3o3URGRWiGENA\nkIYKiq4XeNguwrFBzg5CB7NEKvjbjJ31GI26yAPa7yrKpuNFAjPpO6JKdL8slvx8\nGXCOSbhGPFxzmtYzEeMxmnHqOa0Z953XeheKfJoipqRAyENxPBvclDonqVfxuTvw\ncZzqFD+XjDJCJ5INwuwk2WupVzQjzV6TagcIX63Kq1Z9HSoFIBiCrdLzTMDG4Ro3\n2wpN1tFQFz6alvwKtifGwhvG3qqmsfcQqw56gGY0DWIqG5x/thdG7UzZT7iMVDJV\nLAO5wNnBK6L+feov9LqP7ONAonBVawmTv0ArjVhhkYZEi6d+ymvPpL1ORFAymLne\ndpk4VmmmQvkUu0KudRqulavTIrnXFkuv2va+5X9mHGoNNMo1TXk2XX1eM4Rc7nAY\n6IwPyAuFEtT5ocWBklB/qUZtdu4fG876o0X87GklR9ZfPG+tWpH2F+1j1mMHKuiP\n-----END RSA PRIVATE KEY-----\n```\n\n要修改成：\n\n```\n-----BEGIN RSA PRIVATE KEY-----\\nMJVGa/WNT9aFs63ykxLCdGzav8CfQ5vKXrLrllHXUYFaB2yaN72L+fSsXAy9zMs2\\nvy6wV2fB6j3YrVNCnBwUUNGTX9Ka6eeK98dCvHVyyE9Iz3CJAWZxaI03Px/xX9ps\\nM4kDWe7IA6+mnuCVSzwQVWMdOoAXbQbhGdfeixbqljNhJrKW/jA9w4BNarwGYv4E\\n0MwdU9x7zpk826ytza87yXHSdNuTKcsGQk4XHMYxJECj4EM8vTlVlEyEXZtCeh2z\\nP4bjYkTcBom4nC/q7Ea7Pmy1iDJqs0qc1L/xtNMypMhx4iIaeDVawkvBaL6t9IPT\\nKVuC9Y1uw5nJP1gwxXa5qoazhcikzqRYmaeWIzsZrcVShZBrJO9/a/APxXY7qJpJ\\n0r1YYTykw7THYj2QYiv8cfF64/vh9cB0NELEp5hIuS82Mf6CjqRR7QYR+By3uIdD\\nhQ77NMpQlmIC+TCJsLohtJEmEEZCiQSejtkXXtN/mNl581jP8+ViNkWZfPYWe7g6\\nyUeXVN1cBPo6AIu+lStE+SlR8lbu7sdpn6lid1pJf50zeythabze81y/nrAdx+Jn\\nscACBJBrERkhm2wdULkqwMV2g0U53YpYVAs2fFU1hGzRcE5zF1sdy9RLLX45Mzrm\\nlRErTbSUcnoQJhhCso5uNY6MMnr/rQF920KA0Ufr40IBcQ8bOSX7lJucST5bZLDg\\nH7g16rimHgK4I9rrvKy4plvbolfpuKGMYJDS3Q7IW5cL5lWLU3HaVSn+VyZe8p3A\\nprVx0XmSCwpmUzbDI6FoqniVPVdgis2tV1uKdnJPVn0DoK0ersosGXmALytbYLeE\\narH/cIlGGCoGbIX+Iv3u8aICBEG2eR8eXmQSlGI5rp9hGK/JrlkL3PywVmPw4Efi\\natiS6Y12Tuu8bdpPxBTzXK3PoZ23Pc+1l7NXXIzBeGnj56bALOIbAY5kg+lIRdtP\\nNSTAW8IVgFJUl4uzy/NXn/ewiE093ZVs59I2x4OoS14S20mkM/ldWbvlVm4Z3JxC\\nxIWsIV8aLznttic5MJUGjGoqH1Brg0o1HyWdkoEcC1N0G57oO4pN4UTD5co5xY9j\\nAi2NIcFCYzqrdTfSlPWJBZLhjZ5hOXIwuTeJfRxDAVphaUqfpXb3o3URGRWiGENA\\nkIYKiq4XeNguwrFBzg5CB7NEKvjbjJ31GI26yAPa7yrKpuNFAjPpO6JKdL8slvx8\\nGXCOSbhGPFxzmtYzEeMxmnHqOa0Z953XeheKfJoipqRAyENxPBvclDonqVfxuTvw\\ncZzqFD+XjDJCJ5INwuwk2WupVzQjzV6TagcIX63Kq1Z9HSoFIBiCrdLzTMDG4Ro3\\n2wpN1tFQFz6alvwKtifGwhvG3qqmsfcQqw56gGY0DWIqG5x/thdG7UzZT7iMVDJV\\nLAO5wNnBK6L+feov9LqP7ONAonBVawmTv0ArjVhhkYZEi6d+ymvPpL1ORFAymLne\\ndpk4VmmmQvkUu0KudRqulavTIrnXFkuv2va+5X9mHGoNNMo1TXk2XX1eM4Rc7nAY\\n6IwPyAuFEtT5ocWBklB/qUZtdu4fG876o0X87GklR9ZfPG+tWpH2F+1j1mMHKuiP\\n-----END RSA PRIVATE KEY-----\n```\n\n*既然公開，這組 private key 當然報廢了*\n\n#### 設定 Gemfile\n\n因為 heaven 的動作會是拉下最新的 repo 後，執行 `cap ... deploy` 的指令，所以capistrano 的版本必須跟要部署的那個版本相同。同時，也要注意任何 asset 相關的 gem 也要一併放入 heaven。舉例來說，如果我的 Capfile 有用到\n\n```ruby\ngem 'capistrano', '3.4.0'\ngem 'capistrano3-unicorn'\ngem 'capistrano-rails'\ngem 'sitemap_generator'\ngem 'capistrano-rvm'\n```\n\n那麼**就要將這些 gem 加入 heaven 的 Gemfile 當中**。因為 heaven 會將要部署的 repo 抓下來之後，進去資料夾輸入 `cap staging ... deploy` 的指令，所以如果沒有安裝相對應的 gem，heaven 就沒辦法部署了。\n\n### 串接 github deployment\n\n- 先到 repo 的 settings > deploy key 加入 ssh-key。\n- 到 repo 的 settings > webhooks > add webhook\n- Payload URL 填入你的 heaven 部署 host 的網址，例如：https://yourapp.com.tw/events。如果想要修改，可以到 heaven repo 的 `routes.rb` 中修改\n- Content Type 選擇 `application/json`\n- Secret 依需求選填\n- 下面問你這個 webhook 要監聽哪些事件，我們是用 deployment 來做部署的，所以選擇 deployment 以及 deployment status。\n\n#### 部署\n\n如果是部署到 heroku 的話，因為 heaven 要開 redis 跟 resque。記得加入相對應的 add-on 以及 `REDIS_URL` 。\n\n同時別忘記了要建立資料庫 `heroku run rake db:migrate`。\n\n## hubot-deploy 常用指令\n\n- `hubot deploy:version` 目前版本\n- `hubot deploy repo`： 根據 `apps.json` deploy 指定的 repo name。\n- `hubot deploy repo/branch`：將指定 repo 的某一個 branch 部署到預設的 environment 中。可設定 `HUBOT_DEPLOY_DEFAULT_ENVIRONMENT` 來決定\n- `hubot deploy repo/branch to staging`：將指定 repo 中的 branch 部署到 `staging`\n\n## 筆記\n\n- heaven 的文件雖然不明所以，但是程式碼跟測試寫得蠻完整的，熟悉 ruby 的開發者甚至可以將整個 heaven 架設好，修改一下程式碼，加上 routes，直接建立 UI 一鍵部署。\n\n- `OptionParser::AmbiguousOption: ambiguous option: -s`：不確定是不是 Capistrano 更新之後指令有變動。解決方法是到 `lib/heaven/provider/capistrano.rb` 修改 `deploy_command`\n\n  ```ruby\n  module Heaven\n    # Top-level module for providers.\n    module Provider\n      # The capistrano provider.\n      class Capistrano < DefaultProvider\n   \t.....\n        def execute\n          return execute_and_log([\"/usr/bin/true\"]) if Rails.env.test?\n\n          unless File.exist?(checkout_directory)\n            log \"Cloning #{repository_url} into #{checkout_directory}\"\n            execute_and_log([\"git\", \"clone\", clone_url, checkout_directory])\n          end\n\n          Dir.chdir(checkout_directory) do\n            log \"Fetching the latest code\"\n            execute_and_log(%w{git fetch})\n            execute_and_log([\"git\", \"reset\", \"--hard\", sha])\n            deploy_command = [cap_path, environment, \"部署的 cap 指令\"]\n            log \"Executing capistrano: #{deploy_command.join(\" \")}\"\n            execute_and_log(deploy_command)\n          end\n        end\n      end\n    end\n  end\n  ```\n\n- 因為 heaven 在部署時會使用 gist 當作 stdout 跟 stderr，在設定 GITHUB_TOKEN 的時候一定要記得把 gist 的 scope 打勾\n\n- `Net::SSH::AuthenticationFailed: Authentication failed for user apps@staging.tripmoment.com` ：SSH private_key 設定有誤。先確定這組 ssh key 是否已經加入 github，再來確定將 `passphrase` 拿掉，並且將 ssh private key 變成一行加上 \\n。\n\n- `ArgumentError: Could not parse PKey: no start line` 沒有將 SSH private key 的 passphrase 移除\n\n## 後記\n\n通常在公司裡頭，開發團隊人數不多的話，devops 都是由後端兼任的，前端比較少接觸。不過用「我是前端，我不需要管 devops」這種藉口搪塞自己不去學習好像也說不太過去，畢竟開發一個健全的系統絕對不可能只有前端而已。\n\n這篇文章試著將文件中沒有提到或是省略的步驟整合起來，heaven 跟 hubot-deploy 的文件中有太多沒有提到的細節，導致整合起來時需要花不少時間試錯。希望能夠節省大家踩雷跟翻原始碼的時間。\n\n這篇文章還有許多 devops 的細節沒有詳述，畢竟建立一套完整的 devops pipeline 需要時間，自己對於 CI/CD 的設定也還不夠熟悉。\n\n### 參考資源：\n\n- [顆顆 devops 筆記](https://github.com/ocowchun/many101/blob/master/devops/chatops.md)\n- [chatops](http://lazier.cwchang.me/2015/01/24/ChatOps-Hubot-Capistrano-Heaven/)\n\n\n\n","source":"_posts/chatops.md","raw":"---\ntitle: Rails app 自動化部屬 - hubot 與 heaven\ncategories: rails\ntags:\n  - devops\n  - chatops\n  - capistrano\n---\n\n\n\n### 前言\n\n目前所在的公司裡頭是直接在本地端的 terminal 跑 `cap staging deploy` 指令。 [capistrano](https://github.com/capistrano/capistrano) 作為自動部署化的工具非常方便，但難免會遇到幾個問題：\n\n- 不是團隊中的每個人都有相同的環境\n- 大家都在部署，結果 staging 上現在到底是哪個 branch，完全一頭霧水。\n- deploy 這件事情卡在本地端。\n\n對一家新創來說，越穩定的開發效率和流程，就越能夠專注在產品當中。所以我們希望做到幾件事：\n\n- 開發團隊都可以輕鬆的部署\n- 不用在本地端下指令部署，還要多設定 ssh。\n- 就算沒有開著電腦，也可以輕鬆地部署\n- 能夠記錄部署的狀況\n- 如果出問題了，可以快速 rollback 回上一個版本\n\n逐漸厭倦了在 terminal 打指令，ssh key 手動加的日子。於是打算自己研究有沒有更流暢的部署流程。\n\n之前在 Sudo 裡頭，幸好有 [@ocowchun](https://twitter.com/ocowchun) 跟 [@henry](https://twitter.com/henry40408) 兩位懶工，devops 做得非常完整，才能夠專注在開發功能，而不是一堆繁複的設定當中。（雖然才剛開發完就關閉服務了...）\n\n目前覺得最合適的解決方案是搭配 `hubot-deploy` 以及 `heaven` 來幫助部署。\n\n但 heaven 的文件實在寫的有夠爛。\n\n看了老半天，甚至看了一下 source code 才知道到底該怎麼設定。於是決定將整個設定流程分享給大家，希望能夠減少其他 devops 們走歪路的時間。\n\n## 主要流程\n\n{% asset_img \"process.png\" \"Github deployment process\" %}\n\nhubot 接收到部署指令後，會發送 [github deployment](https://developer.github.com/v3/repos/deployments)，同時會觸發 `deployment` 這個事件，這時 github 就會發送 POST 給在 webhook 設置的 url（這邊接收者為 `heaven`），heaven 接收到請求之後，就會開始部署，再一一回傳我們想要知道的部數狀況。\n\n### hubot-deploy\n\nhubot-deploy 能夠用 slack 對 slack-bot 下指令的方式建立 github 的 [deployment](https://developer.github.com/v3/repos/deployments) event。\n\n### heaven\n\n是一個 Rails 的 application。主要有一個 `/events` 負責接收從 github deployment 傳來的 deployment 與 payload。\n\n## 設定步驟\n\n`heaven` 的文件寫得不明所以`hubot-deploy` 也是草草帶過。幾乎只能靠著他們提供的流程圖，不斷的試錯與通靈。\n\n### 設定 hubot-deploy\n\n- [getting started with hubot](https://hubot.github.com/docs/)\n\n1. 利用 yeoman 產生 hubot，並且選擇 `adapter` 為 `slack`。\n\n2. 在 `package.json` 中加入 `hubot-deploy`，或者 run `npm install hubot-deploy --save-dev`\n\n3. 在 `external-scripts.json` 裡頭加入 `hubot-deploy`。\n\n4. 到  `apps.json` 中設定想要部署的 repos 有哪些：\n\n   ```\n   {\n     \"repo_name\": {\n       \"provider\": \"capistrano\",\n       \"auto_merge\": false,\n       \"repository\": \"kjj6198/deploy101\",\n       \"environments\": [\"production\", \"staging\"]\n     }\n   }\n\n   ```\n\n   這些資料在 hubot 送出 deployment 時會一併塞入 payload 當中。像是這樣：\n   ```\n       payload: {\n         \"name\": \"repo_name\",\n         \"robotName\": \"yourrobot\",\n         \"hosts\": \"\",\n         \"notify\": {\n           \"adapter\": \"slack\",\n           \"room\": \"123456789\",\n           \"user\": \"123456789\",\n           \"user_name\": \"kjj6198\"\n         },\n         \"config\": {\n           \"provider\": \"capistrano\",\n           \"auto_merge\": false,\n           \"repository\": \"kjj6198/deploy101\",\n           \"environments\": [\n             \"production\",\n             \"staging\"\n           ]\n         }\n       }\n    ```\n\n特別要注意的是，provider 的欄位之後會送給 heaven，所以 provider 的值必須是 heaven 有的（之後會提到），或是自己實作 Provider。\n\n這樣子我們的 hubot 就算設定完成了。先部署到 heroku 上測試看看，部署到 heroku 很簡單：\n\n```\nheroku login\ngit init\ngit add .\ngit commit \"init\"\nheroku create\ngit push heroku master\n```\n\n部署成功後，比較重要的變數有幾個：\n\n| 變數名稱                        | 用途                                       |\n| --------------------------- | ---------------------------------------- |\n| HUBOT_GITHUB_TOKEN          | GITHUB_TOKEN，到**個人帳號** > settings > personal access tokens 設定。設定好權限，因為 hubot 只是用來建立 repo 的 deployment，勾選 repo 即可。 |\n| HUBOT_SLACK_TOKEN           | 你的 slack-bot token。可以到[這裡](https://slack.com/apps/A0F7XDU93-hubot)設定 |\n\n全域變數可以到 heroku 的 dashboard 或是直接用 command line 設定：\n\n```\nheroku config:set HUBOT_GITHUB_TOKEN=abcccc\nheroku config:set HUBOT_SLACK_TOKEN=abcccc\n```\n\n測試一下是否成功。在你設定的頻道中輸入 `hubot deploy:version`\n\n{% asset_img \"success.png\" \"success\" %}\n\n其中的 `hubot` 要跟你的機器人名稱相同，例如機器人的名稱為 tripmomo，那麼我就要輸入 `tripmomo deploy:version`。\n\n成功的話 hubot 會回應你目前的版本訊息。\n\n5. 確認 hubot 有送出 deployment 事件。輸入 `hubot deploy app to statging`\n\n6. 輸入  `curl -H \"Authorization: token YOUR_GITHUB_TOKEN\" https://api.github.com/repos/my-github/my-repo/deployments` 看看 deployment 是否建立成功。如果成功會回傳：\n\n   ```javascript\n   {\n       \"url\": \"https://api.github.com/repos/my-github/my-repo/deployments/28301325\",\n       \"id\": 123456,\n       \"sha\": \"2e3xxxxxxxaaaaaaabbbbbbb\",\n       \"ref\": \"develop\",\n       \"task\": \"deploy\",\n       \"payload\": { // from apps.json\n         \"name\": \"my-app\",\n         \"robotName\": \"tripmomo\",\n         \"hosts\": \"\",\n         \"notify\": {\n           \"adapter\": \"slack\",\n           \"room\": \"aabbccdd\",\n           \"user\": \"aabbccdd\",\n           \"user_name\": \"kalan.chen\"\n         },\n         \"config\": { \n           \"provider\": \"capistrano\",\n           \"auto_merge\": false,\n           \"repository\": \"my-github/my-repo\",\n           \"environments\": [\n             \"production\",\n             \"staging\"\n           ]\n         }\n       },\n       \"environment\": \"staging\",\n       \"description\": \"deploy on staging from hubot-deploy-v0.13.27\",\n       \"creator\": {\n         \"login\": \"kjj6198\",\n         \"id\": 123456,\n         \"avatar_url\": \"https://avatars2.githubusercontent.com/u/123456?v=3\",\n         \"gravatar_id\": \"\",\n         \"url\": \"https://api.github.com/users/kjj6198\",\n         \"html_url\": \"https://github.com/kjj6198\",\n         \"followers_url\": \"https://api.github.com/users/kjj6198/followers\",\n         \"following_url\": \"https://api.github.com/users/kjj6198/following{/other_user}\",\n         \"gists_url\": \"https://api.github.com/users/kjj6198/gists{/gist_id}\",\n         \"starred_url\": \"https://api.github.com/users/kjj6198/starred{/owner}{/repo}\",\n         \"subscriptions_url\": \"https://api.github.com/users/kjj6198/subscriptions\",\n         \"organizations_url\": \"https://api.github.com/users/kjj6198/orgs\",\n         \"repos_url\": \"https://api.github.com/users/kalanchen/repos\",\n         \"events_url\": \"https://api.github.com/users/kjj6198/events{/privacy}\",\n         \"received_events_url\":\"https://api.github.com/users/kjj6198/received_events\",\n         \"type\": \"User\",\n         \"site_admin\": false\n       },\n       \"created_at\": \"2017-03-01T12:24:20Z\",\n       \"updated_at\": \"2017-03-01T12:24:20Z\",\n       \"statuses_url\": \"https://api.github.com/repos/my-github/my-repo/deployments/12345667/statuses\",\n       \"repository_url\": \"https://api.github.com/repos/my-github/my-repo\"\n     }\n   ```\n\n   更多 deployment API 可以到 [github deployment API](https://developer.github.com/v3/repos/deployments/) 看看。\n\n### 設定 heaven\n\n- 到 [heaven](https://github.com/atmos/heaven) 將 repo clone 下來。\n- 設定全域變數\n\n| 變數名稱                   | 用途                                       |\n| ---------------------- | ---------------------------------------- |\n| DEPLOYMENT_PRIVATE_KEY | 因為 heaven 是用 ssh 登入，需要 private key。如果 server 在 ec2 上，也可以用 pem 的方式來設定。 |\n| GITHUB_CLIENT_ID       | 到個人設定頁面 > OAuth application 產生 |\n| GITHUB_CLIENT_SECRET   | 到個人設定頁面 > OAuth application 產生 |\n| DATABASE_URL           | heaven 會建立資料庫紀錄 deployment               |\n| GITHUB_TOKEN           | heaven 會使用 gist 來當作 stdout stderr。所以在設定 token 時記得把 `gist` 打勾勾。 |\n\n其他的變數可以到 [這裡](https://github.com/atmos/heaven/blob/master/doc/installation.md) 查看。\n\n補充說明 `DEPLOYMENT_PRIVATE_KEY`：原始檔案長這樣\n\n```\n-----BEGIN RSA PRIVATE KEY-----\nMJVGa/WNT9aFs63ykxLCdGzav8CfQ5vKXrLrllHXUYFaB2yaN72L+fSsXAy9zMs2\nvy6wV2fB6j3YrVNCnBwUUNGTX9Ka6eeK98dCvHVyyE9Iz3CJAWZxaI03Px/xX9ps\nM4kDWe7IA6+mnuCVSzwQVWMdOoAXbQbhGdfeixbqljNhJrKW/jA9w4BNarwGYv4E\n0MwdU9x7zpk826ytza87yXHSdNuTKcsGQk4XHMYxJECj4EM8vTlVlEyEXZtCeh2z\nP4bjYkTcBom4nC/q7Ea7Pmy1iDJqs0qc1L/xtNMypMhx4iIaeDVawkvBaL6t9IPT\nKVuC9Y1uw5nJP1gwxXa5qoazhcikzqRYmaeWIzsZrcVShZBrJO9/a/APxXY7qJpJ\n0r1YYTykw7THYj2QYiv8cfF64/vh9cB0NELEp5hIuS82Mf6CjqRR7QYR+By3uIdD\nhQ77NMpQlmIC+TCJsLoADqwmEEZCiQSejtkXXtN/mNl581jP8+ViNkWZfPYWe7g6\nyUeXVN1cBPo6AIu+lStE+SlR8lbu7sdpn6lid1pJf50zeythabze81y/nrAdx+Jn\nscACBJBrERkhm2wdULkqwMV2g0U53YpYVAs2fFU1hGzRcE5zF1sdy9RLLX45Mzrm\nlRErTbSUcnoQJhhCso5uNY6MMnr/rQF920KA0Ufr40IBcQ8bOSX7lJucST5bZLDg\nH7g16rimHgK4I9rrvKy4plvbolfpuKGMYJDS3Q7IW5cL5lWLU3HaVSn+VyZe8p3A\nprVx0XmSCwpmUzbDI6FoqniVPVdgis2tV1uKdnJPVn0DoK0ersosGXmALytbYLeE\narH/cIlGGCoGbIX+Iv3u8aICBEG2eR8eXmQSlGI5rp9hGK/JrlkL3PywVmPw4Efi\natiS6Y12Tuu8bdpPxBTzXK3PoZ23Pc+1l7NXXIzBeGnj56bALOIbAY5kg+lIRdtP\nNSTAW8IVgFJUl4uzy/NXn/ewiE093ZVs59I2x4OoS14S20mkM/ldWbvlVm4Z3JxC\nxIWsIV8aLznttic5MJUGjGoqH1Brg0o1HyWdkoEcC1N0G57oO4pN4UTD5co5xY9j\nAi2NIcFCYzqrdTfSlPWJBZLhjZ5hOXIwuTeJfRxDAVphaUqfpXb3o3URGRWiGENA\nkIYKiq4XeNguwrFBzg5CB7NEKvjbjJ31GI26yAPa7yrKpuNFAjPpO6JKdL8slvx8\nGXCOSbhGPFxzmtYzEeMxmnHqOa0Z953XeheKfJoipqRAyENxPBvclDonqVfxuTvw\ncZzqFD+XjDJCJ5INwuwk2WupVzQjzV6TagcIX63Kq1Z9HSoFIBiCrdLzTMDG4Ro3\n2wpN1tFQFz6alvwKtifGwhvG3qqmsfcQqw56gGY0DWIqG5x/thdG7UzZT7iMVDJV\nLAO5wNnBK6L+feov9LqP7ONAonBVawmTv0ArjVhhkYZEi6d+ymvPpL1ORFAymLne\ndpk4VmmmQvkUu0KudRqulavTIrnXFkuv2va+5X9mHGoNNMo1TXk2XX1eM4Rc7nAY\n6IwPyAuFEtT5ocWBklB/qUZtdu4fG876o0X87GklR9ZfPG+tWpH2F+1j1mMHKuiP\n-----END RSA PRIVATE KEY-----\n```\n\n要修改成：\n\n```\n-----BEGIN RSA PRIVATE KEY-----\\nMJVGa/WNT9aFs63ykxLCdGzav8CfQ5vKXrLrllHXUYFaB2yaN72L+fSsXAy9zMs2\\nvy6wV2fB6j3YrVNCnBwUUNGTX9Ka6eeK98dCvHVyyE9Iz3CJAWZxaI03Px/xX9ps\\nM4kDWe7IA6+mnuCVSzwQVWMdOoAXbQbhGdfeixbqljNhJrKW/jA9w4BNarwGYv4E\\n0MwdU9x7zpk826ytza87yXHSdNuTKcsGQk4XHMYxJECj4EM8vTlVlEyEXZtCeh2z\\nP4bjYkTcBom4nC/q7Ea7Pmy1iDJqs0qc1L/xtNMypMhx4iIaeDVawkvBaL6t9IPT\\nKVuC9Y1uw5nJP1gwxXa5qoazhcikzqRYmaeWIzsZrcVShZBrJO9/a/APxXY7qJpJ\\n0r1YYTykw7THYj2QYiv8cfF64/vh9cB0NELEp5hIuS82Mf6CjqRR7QYR+By3uIdD\\nhQ77NMpQlmIC+TCJsLohtJEmEEZCiQSejtkXXtN/mNl581jP8+ViNkWZfPYWe7g6\\nyUeXVN1cBPo6AIu+lStE+SlR8lbu7sdpn6lid1pJf50zeythabze81y/nrAdx+Jn\\nscACBJBrERkhm2wdULkqwMV2g0U53YpYVAs2fFU1hGzRcE5zF1sdy9RLLX45Mzrm\\nlRErTbSUcnoQJhhCso5uNY6MMnr/rQF920KA0Ufr40IBcQ8bOSX7lJucST5bZLDg\\nH7g16rimHgK4I9rrvKy4plvbolfpuKGMYJDS3Q7IW5cL5lWLU3HaVSn+VyZe8p3A\\nprVx0XmSCwpmUzbDI6FoqniVPVdgis2tV1uKdnJPVn0DoK0ersosGXmALytbYLeE\\narH/cIlGGCoGbIX+Iv3u8aICBEG2eR8eXmQSlGI5rp9hGK/JrlkL3PywVmPw4Efi\\natiS6Y12Tuu8bdpPxBTzXK3PoZ23Pc+1l7NXXIzBeGnj56bALOIbAY5kg+lIRdtP\\nNSTAW8IVgFJUl4uzy/NXn/ewiE093ZVs59I2x4OoS14S20mkM/ldWbvlVm4Z3JxC\\nxIWsIV8aLznttic5MJUGjGoqH1Brg0o1HyWdkoEcC1N0G57oO4pN4UTD5co5xY9j\\nAi2NIcFCYzqrdTfSlPWJBZLhjZ5hOXIwuTeJfRxDAVphaUqfpXb3o3URGRWiGENA\\nkIYKiq4XeNguwrFBzg5CB7NEKvjbjJ31GI26yAPa7yrKpuNFAjPpO6JKdL8slvx8\\nGXCOSbhGPFxzmtYzEeMxmnHqOa0Z953XeheKfJoipqRAyENxPBvclDonqVfxuTvw\\ncZzqFD+XjDJCJ5INwuwk2WupVzQjzV6TagcIX63Kq1Z9HSoFIBiCrdLzTMDG4Ro3\\n2wpN1tFQFz6alvwKtifGwhvG3qqmsfcQqw56gGY0DWIqG5x/thdG7UzZT7iMVDJV\\nLAO5wNnBK6L+feov9LqP7ONAonBVawmTv0ArjVhhkYZEi6d+ymvPpL1ORFAymLne\\ndpk4VmmmQvkUu0KudRqulavTIrnXFkuv2va+5X9mHGoNNMo1TXk2XX1eM4Rc7nAY\\n6IwPyAuFEtT5ocWBklB/qUZtdu4fG876o0X87GklR9ZfPG+tWpH2F+1j1mMHKuiP\\n-----END RSA PRIVATE KEY-----\n```\n\n*既然公開，這組 private key 當然報廢了*\n\n#### 設定 Gemfile\n\n因為 heaven 的動作會是拉下最新的 repo 後，執行 `cap ... deploy` 的指令，所以capistrano 的版本必須跟要部署的那個版本相同。同時，也要注意任何 asset 相關的 gem 也要一併放入 heaven。舉例來說，如果我的 Capfile 有用到\n\n```ruby\ngem 'capistrano', '3.4.0'\ngem 'capistrano3-unicorn'\ngem 'capistrano-rails'\ngem 'sitemap_generator'\ngem 'capistrano-rvm'\n```\n\n那麼**就要將這些 gem 加入 heaven 的 Gemfile 當中**。因為 heaven 會將要部署的 repo 抓下來之後，進去資料夾輸入 `cap staging ... deploy` 的指令，所以如果沒有安裝相對應的 gem，heaven 就沒辦法部署了。\n\n### 串接 github deployment\n\n- 先到 repo 的 settings > deploy key 加入 ssh-key。\n- 到 repo 的 settings > webhooks > add webhook\n- Payload URL 填入你的 heaven 部署 host 的網址，例如：https://yourapp.com.tw/events。如果想要修改，可以到 heaven repo 的 `routes.rb` 中修改\n- Content Type 選擇 `application/json`\n- Secret 依需求選填\n- 下面問你這個 webhook 要監聽哪些事件，我們是用 deployment 來做部署的，所以選擇 deployment 以及 deployment status。\n\n#### 部署\n\n如果是部署到 heroku 的話，因為 heaven 要開 redis 跟 resque。記得加入相對應的 add-on 以及 `REDIS_URL` 。\n\n同時別忘記了要建立資料庫 `heroku run rake db:migrate`。\n\n## hubot-deploy 常用指令\n\n- `hubot deploy:version` 目前版本\n- `hubot deploy repo`： 根據 `apps.json` deploy 指定的 repo name。\n- `hubot deploy repo/branch`：將指定 repo 的某一個 branch 部署到預設的 environment 中。可設定 `HUBOT_DEPLOY_DEFAULT_ENVIRONMENT` 來決定\n- `hubot deploy repo/branch to staging`：將指定 repo 中的 branch 部署到 `staging`\n\n## 筆記\n\n- heaven 的文件雖然不明所以，但是程式碼跟測試寫得蠻完整的，熟悉 ruby 的開發者甚至可以將整個 heaven 架設好，修改一下程式碼，加上 routes，直接建立 UI 一鍵部署。\n\n- `OptionParser::AmbiguousOption: ambiguous option: -s`：不確定是不是 Capistrano 更新之後指令有變動。解決方法是到 `lib/heaven/provider/capistrano.rb` 修改 `deploy_command`\n\n  ```ruby\n  module Heaven\n    # Top-level module for providers.\n    module Provider\n      # The capistrano provider.\n      class Capistrano < DefaultProvider\n   \t.....\n        def execute\n          return execute_and_log([\"/usr/bin/true\"]) if Rails.env.test?\n\n          unless File.exist?(checkout_directory)\n            log \"Cloning #{repository_url} into #{checkout_directory}\"\n            execute_and_log([\"git\", \"clone\", clone_url, checkout_directory])\n          end\n\n          Dir.chdir(checkout_directory) do\n            log \"Fetching the latest code\"\n            execute_and_log(%w{git fetch})\n            execute_and_log([\"git\", \"reset\", \"--hard\", sha])\n            deploy_command = [cap_path, environment, \"部署的 cap 指令\"]\n            log \"Executing capistrano: #{deploy_command.join(\" \")}\"\n            execute_and_log(deploy_command)\n          end\n        end\n      end\n    end\n  end\n  ```\n\n- 因為 heaven 在部署時會使用 gist 當作 stdout 跟 stderr，在設定 GITHUB_TOKEN 的時候一定要記得把 gist 的 scope 打勾\n\n- `Net::SSH::AuthenticationFailed: Authentication failed for user apps@staging.tripmoment.com` ：SSH private_key 設定有誤。先確定這組 ssh key 是否已經加入 github，再來確定將 `passphrase` 拿掉，並且將 ssh private key 變成一行加上 \\n。\n\n- `ArgumentError: Could not parse PKey: no start line` 沒有將 SSH private key 的 passphrase 移除\n\n## 後記\n\n通常在公司裡頭，開發團隊人數不多的話，devops 都是由後端兼任的，前端比較少接觸。不過用「我是前端，我不需要管 devops」這種藉口搪塞自己不去學習好像也說不太過去，畢竟開發一個健全的系統絕對不可能只有前端而已。\n\n這篇文章試著將文件中沒有提到或是省略的步驟整合起來，heaven 跟 hubot-deploy 的文件中有太多沒有提到的細節，導致整合起來時需要花不少時間試錯。希望能夠節省大家踩雷跟翻原始碼的時間。\n\n這篇文章還有許多 devops 的細節沒有詳述，畢竟建立一套完整的 devops pipeline 需要時間，自己對於 CI/CD 的設定也還不夠熟悉。\n\n### 參考資源：\n\n- [顆顆 devops 筆記](https://github.com/ocowchun/many101/blob/master/devops/chatops.md)\n- [chatops](http://lazier.cwchang.me/2015/01/24/ChatOps-Hubot-Capistrano-Heaven/)\n\n\n\n","slug":"chatops","published":1,"date":"2017-03-01T15:12:42.000Z","updated":"2017-03-02T12:55:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p3s0000b75toicfnouu","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>目前所在的公司裡頭是直接在本地端的 terminal 跑 <code>cap staging deploy</code> 指令。 <a href=\"https://github.com/capistrano/capistrano\" target=\"_blank\" rel=\"external\">capistrano</a> 作為自動部署化的工具非常方便，但難免會遇到幾個問題：</p>\n<ul>\n<li>不是團隊中的每個人都有相同的環境</li>\n<li>大家都在部署，結果 staging 上現在到底是哪個 branch，完全一頭霧水。</li>\n<li>deploy 這件事情卡在本地端。</li>\n</ul>\n<p>對一家新創來說，越穩定的開發效率和流程，就越能夠專注在產品當中。所以我們希望做到幾件事：</p>\n<ul>\n<li>開發團隊都可以輕鬆的部署</li>\n<li>不用在本地端下指令部署，還要多設定 ssh。</li>\n<li>就算沒有開著電腦，也可以輕鬆地部署</li>\n<li>能夠記錄部署的狀況</li>\n<li>如果出問題了，可以快速 rollback 回上一個版本</li>\n</ul>\n<p>逐漸厭倦了在 terminal 打指令，ssh key 手動加的日子。於是打算自己研究有沒有更流暢的部署流程。</p>\n<p>之前在 Sudo 裡頭，幸好有 <a href=\"https://twitter.com/ocowchun\" target=\"_blank\" rel=\"external\">@ocowchun</a> 跟 <a href=\"https://twitter.com/henry40408\" target=\"_blank\" rel=\"external\">@henry</a> 兩位懶工，devops 做得非常完整，才能夠專注在開發功能，而不是一堆繁複的設定當中。（雖然才剛開發完就關閉服務了…）</p>\n<p>目前覺得最合適的解決方案是搭配 <code>hubot-deploy</code> 以及 <code>heaven</code> 來幫助部署。</p>\n<p>但 heaven 的文件實在寫的有夠爛。</p>\n<p>看了老半天，甚至看了一下 source code 才知道到底該怎麼設定。於是決定將整個設定流程分享給大家，希望能夠減少其他 devops 們走歪路的時間。</p>\n<h2 id=\"主要流程\"><a href=\"#主要流程\" class=\"headerlink\" title=\"主要流程\"></a>主要流程</h2><img src=\"/2017/03/01/chatops/process.png\" alt=\"Github deployment process\" title=\"Github deployment process\">\n<p>hubot 接收到部署指令後，會發送 <a href=\"https://developer.github.com/v3/repos/deployments\" target=\"_blank\" rel=\"external\">github deployment</a>，同時會觸發 <code>deployment</code> 這個事件，這時 github 就會發送 POST 給在 webhook 設置的 url（這邊接收者為 <code>heaven</code>），heaven 接收到請求之後，就會開始部署，再一一回傳我們想要知道的部數狀況。</p>\n<h3 id=\"hubot-deploy\"><a href=\"#hubot-deploy\" class=\"headerlink\" title=\"hubot-deploy\"></a>hubot-deploy</h3><p>hubot-deploy 能夠用 slack 對 slack-bot 下指令的方式建立 github 的 <a href=\"https://developer.github.com/v3/repos/deployments\" target=\"_blank\" rel=\"external\">deployment</a> event。</p>\n<h3 id=\"heaven\"><a href=\"#heaven\" class=\"headerlink\" title=\"heaven\"></a>heaven</h3><p>是一個 Rails 的 application。主要有一個 <code>/events</code> 負責接收從 github deployment 傳來的 deployment 與 payload。</p>\n<h2 id=\"設定步驟\"><a href=\"#設定步驟\" class=\"headerlink\" title=\"設定步驟\"></a>設定步驟</h2><p><code>heaven</code> 的文件寫得不明所以<code>hubot-deploy</code> 也是草草帶過。幾乎只能靠著他們提供的流程圖，不斷的試錯與通靈。</p>\n<h3 id=\"設定-hubot-deploy\"><a href=\"#設定-hubot-deploy\" class=\"headerlink\" title=\"設定 hubot-deploy\"></a>設定 hubot-deploy</h3><ul>\n<li><a href=\"https://hubot.github.com/docs/\" target=\"_blank\" rel=\"external\">getting started with hubot</a></li>\n</ul>\n<ol>\n<li><p>利用 yeoman 產生 hubot，並且選擇 <code>adapter</code> 為 <code>slack</code>。</p>\n</li>\n<li><p>在 <code>package.json</code> 中加入 <code>hubot-deploy</code>，或者 run <code>npm install hubot-deploy --save-dev</code></p>\n</li>\n<li><p>在 <code>external-scripts.json</code> 裡頭加入 <code>hubot-deploy</code>。</p>\n</li>\n<li><p>到  <code>apps.json</code> 中設定想要部署的 repos 有哪些：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;repo_name&quot;: &#123;</div><div class=\"line\">    &quot;provider&quot;: &quot;capistrano&quot;,</div><div class=\"line\">    &quot;auto_merge&quot;: false,</div><div class=\"line\">    &quot;repository&quot;: &quot;kjj6198/deploy101&quot;,</div><div class=\"line\">    &quot;environments&quot;: [&quot;production&quot;, &quot;staging&quot;]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這些資料在 hubot 送出 deployment 時會一併塞入 payload 當中。像是這樣：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">payload: &#123;</div><div class=\"line\">  &quot;name&quot;: &quot;repo_name&quot;,</div><div class=\"line\">  &quot;robotName&quot;: &quot;yourrobot&quot;,</div><div class=\"line\">  &quot;hosts&quot;: &quot;&quot;,</div><div class=\"line\">  &quot;notify&quot;: &#123;</div><div class=\"line\">    &quot;adapter&quot;: &quot;slack&quot;,</div><div class=\"line\">    &quot;room&quot;: &quot;123456789&quot;,</div><div class=\"line\">    &quot;user&quot;: &quot;123456789&quot;,</div><div class=\"line\">    &quot;user_name&quot;: &quot;kjj6198&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;config&quot;: &#123;</div><div class=\"line\">    &quot;provider&quot;: &quot;capistrano&quot;,</div><div class=\"line\">    &quot;auto_merge&quot;: false,</div><div class=\"line\">    &quot;repository&quot;: &quot;kjj6198/deploy101&quot;,</div><div class=\"line\">    &quot;environments&quot;: [</div><div class=\"line\">      &quot;production&quot;,</div><div class=\"line\">      &quot;staging&quot;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>特別要注意的是，provider 的欄位之後會送給 heaven，所以 provider 的值必須是 heaven 有的（之後會提到），或是自己實作 Provider。</p>\n<p>這樣子我們的 hubot 就算設定完成了。先部署到 heroku 上測試看看，部署到 heroku 很簡單：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">heroku login</div><div class=\"line\">git init</div><div class=\"line\">git add .</div><div class=\"line\">git commit &quot;init&quot;</div><div class=\"line\">heroku create</div><div class=\"line\">git push heroku master</div></pre></td></tr></table></figure>\n<p>部署成功後，比較重要的變數有幾個：</p>\n<table>\n<thead>\n<tr>\n<th>變數名稱</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HUBOT_GITHUB_TOKEN</td>\n<td>GITHUB_TOKEN，到<strong>個人帳號</strong> &gt; settings &gt; personal access tokens 設定。設定好權限，因為 hubot 只是用來建立 repo 的 deployment，勾選 repo 即可。</td>\n</tr>\n<tr>\n<td>HUBOT_SLACK_TOKEN</td>\n<td>你的 slack-bot token。可以到<a href=\"https://slack.com/apps/A0F7XDU93-hubot\" target=\"_blank\" rel=\"external\">這裡</a>設定</td>\n</tr>\n</tbody>\n</table>\n<p>全域變數可以到 heroku 的 dashboard 或是直接用 command line 設定：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">heroku config:set HUBOT_GITHUB_TOKEN=abcccc</div><div class=\"line\">heroku config:set HUBOT_SLACK_TOKEN=abcccc</div></pre></td></tr></table></figure>\n<p>測試一下是否成功。在你設定的頻道中輸入 <code>hubot deploy:version</code></p>\n<img src=\"/2017/03/01/chatops/success.png\" alt=\"success\" title=\"success\">\n<p>其中的 <code>hubot</code> 要跟你的機器人名稱相同，例如機器人的名稱為 tripmomo，那麼我就要輸入 <code>tripmomo deploy:version</code>。</p>\n<p>成功的話 hubot 會回應你目前的版本訊息。</p>\n<ol>\n<li><p>確認 hubot 有送出 deployment 事件。輸入 <code>hubot deploy app to statging</code></p>\n</li>\n<li><p>輸入  <code>curl -H &quot;Authorization: token YOUR_GITHUB_TOKEN&quot; https://api.github.com/repos/my-github/my-repo/deployments</code> 看看 deployment 是否建立成功。如果成功會回傳：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://api.github.com/repos/my-github/my-repo/deployments/28301325\"</span>,</div><div class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">123456</span>,</div><div class=\"line\">    <span class=\"string\">\"sha\"</span>: <span class=\"string\">\"2e3xxxxxxxaaaaaaabbbbbbb\"</span>,</div><div class=\"line\">    <span class=\"string\">\"ref\"</span>: <span class=\"string\">\"develop\"</span>,</div><div class=\"line\">    <span class=\"string\">\"task\"</span>: <span class=\"string\">\"deploy\"</span>,</div><div class=\"line\">    <span class=\"string\">\"payload\"</span>: &#123; <span class=\"comment\">// from apps.json</span></div><div class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"my-app\"</span>,</div><div class=\"line\">      <span class=\"string\">\"robotName\"</span>: <span class=\"string\">\"tripmomo\"</span>,</div><div class=\"line\">      <span class=\"string\">\"hosts\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">      <span class=\"string\">\"notify\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"adapter\"</span>: <span class=\"string\">\"slack\"</span>,</div><div class=\"line\">        <span class=\"string\">\"room\"</span>: <span class=\"string\">\"aabbccdd\"</span>,</div><div class=\"line\">        <span class=\"string\">\"user\"</span>: <span class=\"string\">\"aabbccdd\"</span>,</div><div class=\"line\">        <span class=\"string\">\"user_name\"</span>: <span class=\"string\">\"kalan.chen\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"string\">\"config\"</span>: &#123; </div><div class=\"line\">        <span class=\"string\">\"provider\"</span>: <span class=\"string\">\"capistrano\"</span>,</div><div class=\"line\">        <span class=\"string\">\"auto_merge\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"string\">\"repository\"</span>: <span class=\"string\">\"my-github/my-repo\"</span>,</div><div class=\"line\">        <span class=\"string\">\"environments\"</span>: [</div><div class=\"line\">          <span class=\"string\">\"production\"</span>,</div><div class=\"line\">          <span class=\"string\">\"staging\"</span></div><div class=\"line\">        ]</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"environment\"</span>: <span class=\"string\">\"staging\"</span>,</div><div class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"deploy on staging from hubot-deploy-v0.13.27\"</span>,</div><div class=\"line\">    <span class=\"string\">\"creator\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"login\"</span>: <span class=\"string\">\"kjj6198\"</span>,</div><div class=\"line\">      <span class=\"string\">\"id\"</span>: <span class=\"number\">123456</span>,</div><div class=\"line\">      <span class=\"string\">\"avatar_url\"</span>: <span class=\"string\">\"https://avatars2.githubusercontent.com/u/123456?v=3\"</span>,</div><div class=\"line\">      <span class=\"string\">\"gravatar_id\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">      <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://api.github.com/users/kjj6198\"</span>,</div><div class=\"line\">      <span class=\"string\">\"html_url\"</span>: <span class=\"string\">\"https://github.com/kjj6198\"</span>,</div><div class=\"line\">      <span class=\"string\">\"followers_url\"</span>: <span class=\"string\">\"https://api.github.com/users/kjj6198/followers\"</span>,</div><div class=\"line\">      <span class=\"string\">\"following_url\"</span>: <span class=\"string\">\"https://api.github.com/users/kjj6198/following&#123;/other_user&#125;\"</span>,</div><div class=\"line\">      <span class=\"string\">\"gists_url\"</span>: <span class=\"string\">\"https://api.github.com/users/kjj6198/gists&#123;/gist_id&#125;\"</span>,</div><div class=\"line\">      <span class=\"string\">\"starred_url\"</span>: <span class=\"string\">\"https://api.github.com/users/kjj6198/starred&#123;/owner&#125;&#123;/repo&#125;\"</span>,</div><div class=\"line\">      <span class=\"string\">\"subscriptions_url\"</span>: <span class=\"string\">\"https://api.github.com/users/kjj6198/subscriptions\"</span>,</div><div class=\"line\">      <span class=\"string\">\"organizations_url\"</span>: <span class=\"string\">\"https://api.github.com/users/kjj6198/orgs\"</span>,</div><div class=\"line\">      <span class=\"string\">\"repos_url\"</span>: <span class=\"string\">\"https://api.github.com/users/kalanchen/repos\"</span>,</div><div class=\"line\">      <span class=\"string\">\"events_url\"</span>: <span class=\"string\">\"https://api.github.com/users/kjj6198/events&#123;/privacy&#125;\"</span>,</div><div class=\"line\">      <span class=\"string\">\"received_events_url\"</span>:<span class=\"string\">\"https://api.github.com/users/kjj6198/received_events\"</span>,</div><div class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\"User\"</span>,</div><div class=\"line\">      <span class=\"string\">\"site_admin\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"created_at\"</span>: <span class=\"string\">\"2017-03-01T12:24:20Z\"</span>,</div><div class=\"line\">    <span class=\"string\">\"updated_at\"</span>: <span class=\"string\">\"2017-03-01T12:24:20Z\"</span>,</div><div class=\"line\">    <span class=\"string\">\"statuses_url\"</span>: <span class=\"string\">\"https://api.github.com/repos/my-github/my-repo/deployments/12345667/statuses\"</span>,</div><div class=\"line\">    <span class=\"string\">\"repository_url\"</span>: <span class=\"string\">\"https://api.github.com/repos/my-github/my-repo\"</span></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>更多 deployment API 可以到 <a href=\"https://developer.github.com/v3/repos/deployments/\" target=\"_blank\" rel=\"external\">github deployment API</a> 看看。</p>\n</li>\n</ol>\n<h3 id=\"設定-heaven\"><a href=\"#設定-heaven\" class=\"headerlink\" title=\"設定 heaven\"></a>設定 heaven</h3><ul>\n<li>到 <a href=\"https://github.com/atmos/heaven\" target=\"_blank\" rel=\"external\">heaven</a> 將 repo clone 下來。</li>\n<li>設定全域變數</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>變數名稱</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DEPLOYMENT_PRIVATE_KEY</td>\n<td>因為 heaven 是用 ssh 登入，需要 private key。如果 server 在 ec2 上，也可以用 pem 的方式來設定。</td>\n</tr>\n<tr>\n<td>GITHUB_CLIENT_ID</td>\n<td>到個人設定頁面 &gt; OAuth application 產生</td>\n</tr>\n<tr>\n<td>GITHUB_CLIENT_SECRET</td>\n<td>到個人設定頁面 &gt; OAuth application 產生</td>\n</tr>\n<tr>\n<td>DATABASE_URL</td>\n<td>heaven 會建立資料庫紀錄 deployment</td>\n</tr>\n<tr>\n<td>GITHUB_TOKEN</td>\n<td>heaven 會使用 gist 來當作 stdout stderr。所以在設定 token 時記得把 <code>gist</code> 打勾勾。</td>\n</tr>\n</tbody>\n</table>\n<p>其他的變數可以到 <a href=\"https://github.com/atmos/heaven/blob/master/doc/installation.md\" target=\"_blank\" rel=\"external\">這裡</a> 查看。</p>\n<p>補充說明 <code>DEPLOYMENT_PRIVATE_KEY</code>：原始檔案長這樣</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">-----BEGIN RSA PRIVATE KEY-----</div><div class=\"line\">MJVGa/WNT9aFs63ykxLCdGzav8CfQ5vKXrLrllHXUYFaB2yaN72L+fSsXAy9zMs2</div><div class=\"line\">vy6wV2fB6j3YrVNCnBwUUNGTX9Ka6eeK98dCvHVyyE9Iz3CJAWZxaI03Px/xX9ps</div><div class=\"line\">M4kDWe7IA6+mnuCVSzwQVWMdOoAXbQbhGdfeixbqljNhJrKW/jA9w4BNarwGYv4E</div><div class=\"line\">0MwdU9x7zpk826ytza87yXHSdNuTKcsGQk4XHMYxJECj4EM8vTlVlEyEXZtCeh2z</div><div class=\"line\">P4bjYkTcBom4nC/q7Ea7Pmy1iDJqs0qc1L/xtNMypMhx4iIaeDVawkvBaL6t9IPT</div><div class=\"line\">KVuC9Y1uw5nJP1gwxXa5qoazhcikzqRYmaeWIzsZrcVShZBrJO9/a/APxXY7qJpJ</div><div class=\"line\">0r1YYTykw7THYj2QYiv8cfF64/vh9cB0NELEp5hIuS82Mf6CjqRR7QYR+By3uIdD</div><div class=\"line\">hQ77NMpQlmIC+TCJsLoADqwmEEZCiQSejtkXXtN/mNl581jP8+ViNkWZfPYWe7g6</div><div class=\"line\">yUeXVN1cBPo6AIu+lStE+SlR8lbu7sdpn6lid1pJf50zeythabze81y/nrAdx+Jn</div><div class=\"line\">scACBJBrERkhm2wdULkqwMV2g0U53YpYVAs2fFU1hGzRcE5zF1sdy9RLLX45Mzrm</div><div class=\"line\">lRErTbSUcnoQJhhCso5uNY6MMnr/rQF920KA0Ufr40IBcQ8bOSX7lJucST5bZLDg</div><div class=\"line\">H7g16rimHgK4I9rrvKy4plvbolfpuKGMYJDS3Q7IW5cL5lWLU3HaVSn+VyZe8p3A</div><div class=\"line\">prVx0XmSCwpmUzbDI6FoqniVPVdgis2tV1uKdnJPVn0DoK0ersosGXmALytbYLeE</div><div class=\"line\">arH/cIlGGCoGbIX+Iv3u8aICBEG2eR8eXmQSlGI5rp9hGK/JrlkL3PywVmPw4Efi</div><div class=\"line\">atiS6Y12Tuu8bdpPxBTzXK3PoZ23Pc+1l7NXXIzBeGnj56bALOIbAY5kg+lIRdtP</div><div class=\"line\">NSTAW8IVgFJUl4uzy/NXn/ewiE093ZVs59I2x4OoS14S20mkM/ldWbvlVm4Z3JxC</div><div class=\"line\">xIWsIV8aLznttic5MJUGjGoqH1Brg0o1HyWdkoEcC1N0G57oO4pN4UTD5co5xY9j</div><div class=\"line\">Ai2NIcFCYzqrdTfSlPWJBZLhjZ5hOXIwuTeJfRxDAVphaUqfpXb3o3URGRWiGENA</div><div class=\"line\">kIYKiq4XeNguwrFBzg5CB7NEKvjbjJ31GI26yAPa7yrKpuNFAjPpO6JKdL8slvx8</div><div class=\"line\">GXCOSbhGPFxzmtYzEeMxmnHqOa0Z953XeheKfJoipqRAyENxPBvclDonqVfxuTvw</div><div class=\"line\">cZzqFD+XjDJCJ5INwuwk2WupVzQjzV6TagcIX63Kq1Z9HSoFIBiCrdLzTMDG4Ro3</div><div class=\"line\">2wpN1tFQFz6alvwKtifGwhvG3qqmsfcQqw56gGY0DWIqG5x/thdG7UzZT7iMVDJV</div><div class=\"line\">LAO5wNnBK6L+feov9LqP7ONAonBVawmTv0ArjVhhkYZEi6d+ymvPpL1ORFAymLne</div><div class=\"line\">dpk4VmmmQvkUu0KudRqulavTIrnXFkuv2va+5X9mHGoNNMo1TXk2XX1eM4Rc7nAY</div><div class=\"line\">6IwPyAuFEtT5ocWBklB/qUZtdu4fG876o0X87GklR9ZfPG+tWpH2F+1j1mMHKuiP</div><div class=\"line\">-----END RSA PRIVATE KEY-----</div></pre></td></tr></table></figure>\n<p>要修改成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-----BEGIN RSA PRIVATE KEY-----\\nMJVGa/WNT9aFs63ykxLCdGzav8CfQ5vKXrLrllHXUYFaB2yaN72L+fSsXAy9zMs2\\nvy6wV2fB6j3YrVNCnBwUUNGTX9Ka6eeK98dCvHVyyE9Iz3CJAWZxaI03Px/xX9ps\\nM4kDWe7IA6+mnuCVSzwQVWMdOoAXbQbhGdfeixbqljNhJrKW/jA9w4BNarwGYv4E\\n0MwdU9x7zpk826ytza87yXHSdNuTKcsGQk4XHMYxJECj4EM8vTlVlEyEXZtCeh2z\\nP4bjYkTcBom4nC/q7Ea7Pmy1iDJqs0qc1L/xtNMypMhx4iIaeDVawkvBaL6t9IPT\\nKVuC9Y1uw5nJP1gwxXa5qoazhcikzqRYmaeWIzsZrcVShZBrJO9/a/APxXY7qJpJ\\n0r1YYTykw7THYj2QYiv8cfF64/vh9cB0NELEp5hIuS82Mf6CjqRR7QYR+By3uIdD\\nhQ77NMpQlmIC+TCJsLohtJEmEEZCiQSejtkXXtN/mNl581jP8+ViNkWZfPYWe7g6\\nyUeXVN1cBPo6AIu+lStE+SlR8lbu7sdpn6lid1pJf50zeythabze81y/nrAdx+Jn\\nscACBJBrERkhm2wdULkqwMV2g0U53YpYVAs2fFU1hGzRcE5zF1sdy9RLLX45Mzrm\\nlRErTbSUcnoQJhhCso5uNY6MMnr/rQF920KA0Ufr40IBcQ8bOSX7lJucST5bZLDg\\nH7g16rimHgK4I9rrvKy4plvbolfpuKGMYJDS3Q7IW5cL5lWLU3HaVSn+VyZe8p3A\\nprVx0XmSCwpmUzbDI6FoqniVPVdgis2tV1uKdnJPVn0DoK0ersosGXmALytbYLeE\\narH/cIlGGCoGbIX+Iv3u8aICBEG2eR8eXmQSlGI5rp9hGK/JrlkL3PywVmPw4Efi\\natiS6Y12Tuu8bdpPxBTzXK3PoZ23Pc+1l7NXXIzBeGnj56bALOIbAY5kg+lIRdtP\\nNSTAW8IVgFJUl4uzy/NXn/ewiE093ZVs59I2x4OoS14S20mkM/ldWbvlVm4Z3JxC\\nxIWsIV8aLznttic5MJUGjGoqH1Brg0o1HyWdkoEcC1N0G57oO4pN4UTD5co5xY9j\\nAi2NIcFCYzqrdTfSlPWJBZLhjZ5hOXIwuTeJfRxDAVphaUqfpXb3o3URGRWiGENA\\nkIYKiq4XeNguwrFBzg5CB7NEKvjbjJ31GI26yAPa7yrKpuNFAjPpO6JKdL8slvx8\\nGXCOSbhGPFxzmtYzEeMxmnHqOa0Z953XeheKfJoipqRAyENxPBvclDonqVfxuTvw\\ncZzqFD+XjDJCJ5INwuwk2WupVzQjzV6TagcIX63Kq1Z9HSoFIBiCrdLzTMDG4Ro3\\n2wpN1tFQFz6alvwKtifGwhvG3qqmsfcQqw56gGY0DWIqG5x/thdG7UzZT7iMVDJV\\nLAO5wNnBK6L+feov9LqP7ONAonBVawmTv0ArjVhhkYZEi6d+ymvPpL1ORFAymLne\\ndpk4VmmmQvkUu0KudRqulavTIrnXFkuv2va+5X9mHGoNNMo1TXk2XX1eM4Rc7nAY\\n6IwPyAuFEtT5ocWBklB/qUZtdu4fG876o0X87GklR9ZfPG+tWpH2F+1j1mMHKuiP\\n-----END RSA PRIVATE KEY-----</div></pre></td></tr></table></figure>\n<p><em>既然公開，這組 private key 當然報廢了</em></p>\n<h4 id=\"設定-Gemfile\"><a href=\"#設定-Gemfile\" class=\"headerlink\" title=\"設定 Gemfile\"></a>設定 Gemfile</h4><p>因為 heaven 的動作會是拉下最新的 repo 後，執行 <code>cap ... deploy</code> 的指令，所以capistrano 的版本必須跟要部署的那個版本相同。同時，也要注意任何 asset 相關的 gem 也要一併放入 heaven。舉例來說，如果我的 Capfile 有用到</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem <span class=\"string\">'capistrano'</span>, <span class=\"string\">'3.4.0'</span></div><div class=\"line\">gem <span class=\"string\">'capistrano3-unicorn'</span></div><div class=\"line\">gem <span class=\"string\">'capistrano-rails'</span></div><div class=\"line\">gem <span class=\"string\">'sitemap_generator'</span></div><div class=\"line\">gem <span class=\"string\">'capistrano-rvm'</span></div></pre></td></tr></table></figure>\n<p>那麼<strong>就要將這些 gem 加入 heaven 的 Gemfile 當中</strong>。因為 heaven 會將要部署的 repo 抓下來之後，進去資料夾輸入 <code>cap staging ... deploy</code> 的指令，所以如果沒有安裝相對應的 gem，heaven 就沒辦法部署了。</p>\n<h3 id=\"串接-github-deployment\"><a href=\"#串接-github-deployment\" class=\"headerlink\" title=\"串接 github deployment\"></a>串接 github deployment</h3><ul>\n<li>先到 repo 的 settings &gt; deploy key 加入 ssh-key。</li>\n<li>到 repo 的 settings &gt; webhooks &gt; add webhook</li>\n<li>Payload URL 填入你的 heaven 部署 host 的網址，例如：<a href=\"https://yourapp.com.tw/events。如果想要修改，可以到\" target=\"_blank\" rel=\"external\">https://yourapp.com.tw/events。如果想要修改，可以到</a> heaven repo 的 <code>routes.rb</code> 中修改</li>\n<li>Content Type 選擇 <code>application/json</code></li>\n<li>Secret 依需求選填</li>\n<li>下面問你這個 webhook 要監聽哪些事件，我們是用 deployment 來做部署的，所以選擇 deployment 以及 deployment status。</li>\n</ul>\n<h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p>如果是部署到 heroku 的話，因為 heaven 要開 redis 跟 resque。記得加入相對應的 add-on 以及 <code>REDIS_URL</code> 。</p>\n<p>同時別忘記了要建立資料庫 <code>heroku run rake db:migrate</code>。</p>\n<h2 id=\"hubot-deploy-常用指令\"><a href=\"#hubot-deploy-常用指令\" class=\"headerlink\" title=\"hubot-deploy 常用指令\"></a>hubot-deploy 常用指令</h2><ul>\n<li><code>hubot deploy:version</code> 目前版本</li>\n<li><code>hubot deploy repo</code>： 根據 <code>apps.json</code> deploy 指定的 repo name。</li>\n<li><code>hubot deploy repo/branch</code>：將指定 repo 的某一個 branch 部署到預設的 environment 中。可設定 <code>HUBOT_DEPLOY_DEFAULT_ENVIRONMENT</code> 來決定</li>\n<li><code>hubot deploy repo/branch to staging</code>：將指定 repo 中的 branch 部署到 <code>staging</code></li>\n</ul>\n<h2 id=\"筆記\"><a href=\"#筆記\" class=\"headerlink\" title=\"筆記\"></a>筆記</h2><ul>\n<li><p>heaven 的文件雖然不明所以，但是程式碼跟測試寫得蠻完整的，熟悉 ruby 的開發者甚至可以將整個 heaven 架設好，修改一下程式碼，加上 routes，直接建立 UI 一鍵部署。</p>\n</li>\n<li><p><code>OptionParser::AmbiguousOption: ambiguous option: -s</code>：不確定是不是 Capistrano 更新之後指令有變動。解決方法是到 <code>lib/heaven/provider/capistrano.rb</code> 修改 <code>deploy_command</code></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Heaven</span></span></div><div class=\"line\">  <span class=\"comment\"># Top-level module for providers.</span></div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Provider</span></span></div><div class=\"line\">    <span class=\"comment\"># The capistrano provider.</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Capistrano</span> &lt; DefaultProvider</span></div><div class=\"line\"> \t.....</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execute</span></span></div><div class=\"line\">        <span class=\"keyword\">return</span> execute_and_log([<span class=\"string\">\"/usr/bin/true\"</span>]) <span class=\"keyword\">if</span> Rails.env.test?</div><div class=\"line\"></div><div class=\"line\">        unless File.exist?(checkout_directory)</div><div class=\"line\">          log <span class=\"string\">\"Cloning <span class=\"subst\">#&#123;repository_url&#125;</span> into <span class=\"subst\">#&#123;checkout_directory&#125;</span>\"</span></div><div class=\"line\">          execute_and_log([<span class=\"string\">\"git\"</span>, <span class=\"string\">\"clone\"</span>, clone_url, checkout_directory])</div><div class=\"line\">        <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">        Dir.chdir(checkout_directory) <span class=\"keyword\">do</span></div><div class=\"line\">          log <span class=\"string\">\"Fetching the latest code\"</span></div><div class=\"line\">          execute_and_log(<span class=\"string\">%w&#123;git fetch&#125;</span>)</div><div class=\"line\">          execute_and_log([<span class=\"string\">\"git\"</span>, <span class=\"string\">\"reset\"</span>, <span class=\"string\">\"--hard\"</span>, sha])</div><div class=\"line\">          deploy_command = [cap_path, environment, <span class=\"string\">\"部署的 cap 指令\"</span>]</div><div class=\"line\">          log <span class=\"string\">\"Executing capistrano: <span class=\"subst\">#&#123;deploy_command.join(<span class=\"string\">\" \"</span>)&#125;</span>\"</span></div><div class=\"line\">          execute_and_log(deploy_command)</div><div class=\"line\">        <span class=\"keyword\">end</span></div><div class=\"line\">      <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>因為 heaven 在部署時會使用 gist 當作 stdout 跟 stderr，在設定 GITHUB_TOKEN 的時候一定要記得把 gist 的 scope 打勾</p>\n</li>\n<li><p><code>Net::SSH::AuthenticationFailed: Authentication failed for user apps@staging.tripmoment.com</code> ：SSH private_key 設定有誤。先確定這組 ssh key 是否已經加入 github，再來確定將 <code>passphrase</code> 拿掉，並且將 ssh private key 變成一行加上 \\n。</p>\n</li>\n<li><p><code>ArgumentError: Could not parse PKey: no start line</code> 沒有將 SSH private key 的 passphrase 移除</p>\n</li>\n</ul>\n<h2 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h2><p>通常在公司裡頭，開發團隊人數不多的話，devops 都是由後端兼任的，前端比較少接觸。不過用「我是前端，我不需要管 devops」這種藉口搪塞自己不去學習好像也說不太過去，畢竟開發一個健全的系統絕對不可能只有前端而已。</p>\n<p>這篇文章試著將文件中沒有提到或是省略的步驟整合起來，heaven 跟 hubot-deploy 的文件中有太多沒有提到的細節，導致整合起來時需要花不少時間試錯。希望能夠節省大家踩雷跟翻原始碼的時間。</p>\n<p>這篇文章還有許多 devops 的細節沒有詳述，畢竟建立一套完整的 devops pipeline 需要時間，自己對於 CI/CD 的設定也還不夠熟悉。</p>\n<h3 id=\"參考資源：\"><a href=\"#參考資源：\" class=\"headerlink\" title=\"參考資源：\"></a>參考資源：</h3><ul>\n<li><a href=\"https://github.com/ocowchun/many101/blob/master/devops/chatops.md\" target=\"_blank\" rel=\"external\">顆顆 devops 筆記</a></li>\n<li><a href=\"http://lazier.cwchang.me/2015/01/24/ChatOps-Hubot-Capistrano-Heaven/\" target=\"_blank\" rel=\"external\">chatops</a></li>\n</ul>\n","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>目前所在的公司裡頭是直接在本地端的 terminal 跑 <code>cap staging deploy</code> 指令。 <a href=\"https://github.com/capistrano/capistrano\">capistrano</a> 作為自動部署化的工具非常方便，但難免會遇到幾個問題：</p>\n<ul>\n<li>不是團隊中的每個人都有相同的環境</li>\n<li>大家都在部署，結果 staging 上現在到底是哪個 branch，完全一頭霧水。</li>\n<li>deploy 這件事情卡在本地端。</li>\n</ul>\n<p>對一家新創來說，越穩定的開發效率和流程，就越能夠專注在產品當中。所以我們希望做到幾件事：</p>\n<ul>\n<li>開發團隊都可以輕鬆的部署</li>\n<li>不用在本地端下指令部署，還要多設定 ssh。</li>\n<li>就算沒有開著電腦，也可以輕鬆地部署</li>\n<li>能夠記錄部署的狀況</li>\n<li>如果出問題了，可以快速 rollback 回上一個版本</li>\n</ul>\n<p>逐漸厭倦了在 terminal 打指令，ssh key 手動加的日子。於是打算自己研究有沒有更流暢的部署流程。</p>\n<p>之前在 Sudo 裡頭，幸好有 <a href=\"https://twitter.com/ocowchun\">@ocowchun</a> 跟 <a href=\"https://twitter.com/henry40408\">@henry</a> 兩位懶工，devops 做得非常完整，才能夠專注在開發功能，而不是一堆繁複的設定當中。（雖然才剛開發完就關閉服務了…）</p>\n<p>目前覺得最合適的解決方案是搭配 <code>hubot-deploy</code> 以及 <code>heaven</code> 來幫助部署。</p>\n<p>但 heaven 的文件實在寫的有夠爛。</p>\n<p>看了老半天，甚至看了一下 source code 才知道到底該怎麼設定。於是決定將整個設定流程分享給大家，希望能夠減少其他 devops 們走歪路的時間。</p>\n<h2 id=\"主要流程\"><a href=\"#主要流程\" class=\"headerlink\" title=\"主要流程\"></a>主要流程</h2><img src=\"/2017/03/01/chatops/process.png\" alt=\"Github deployment process\" title=\"Github deployment process\">\n<p>hubot 接收到部署指令後，會發送 <a href=\"https://developer.github.com/v3/repos/deployments\">github deployment</a>，同時會觸發 <code>deployment</code> 這個事件，這時 github 就會發送 POST 給在 webhook 設置的 url（這邊接收者為 <code>heaven</code>），heaven 接收到請求之後，就會開始部署，再一一回傳我們想要知道的部數狀況。</p>\n<h3 id=\"hubot-deploy\"><a href=\"#hubot-deploy\" class=\"headerlink\" title=\"hubot-deploy\"></a>hubot-deploy</h3><p>hubot-deploy 能夠用 slack 對 slack-bot 下指令的方式建立 github 的 <a href=\"https://developer.github.com/v3/repos/deployments\">deployment</a> event。</p>\n<h3 id=\"heaven\"><a href=\"#heaven\" class=\"headerlink\" title=\"heaven\"></a>heaven</h3><p>是一個 Rails 的 application。主要有一個 <code>/events</code> 負責接收從 github deployment 傳來的 deployment 與 payload。</p>\n<h2 id=\"設定步驟\"><a href=\"#設定步驟\" class=\"headerlink\" title=\"設定步驟\"></a>設定步驟</h2><p><code>heaven</code> 的文件寫得不明所以<code>hubot-deploy</code> 也是草草帶過。幾乎只能靠著他們提供的流程圖，不斷的試錯與通靈。</p>\n<h3 id=\"設定-hubot-deploy\"><a href=\"#設定-hubot-deploy\" class=\"headerlink\" title=\"設定 hubot-deploy\"></a>設定 hubot-deploy</h3><ul>\n<li><a href=\"https://hubot.github.com/docs/\">getting started with hubot</a></li>\n</ul>\n<ol>\n<li><p>利用 yeoman 產生 hubot，並且選擇 <code>adapter</code> 為 <code>slack</code>。</p>\n</li>\n<li><p>在 <code>package.json</code> 中加入 <code>hubot-deploy</code>，或者 run <code>npm install hubot-deploy --save-dev</code></p>\n</li>\n<li><p>在 <code>external-scripts.json</code> 裡頭加入 <code>hubot-deploy</code>。</p>\n</li>\n<li><p>到  <code>apps.json</code> 中設定想要部署的 repos 有哪些：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;repo_name&quot;: &#123;</div><div class=\"line\">    &quot;provider&quot;: &quot;capistrano&quot;,</div><div class=\"line\">    &quot;auto_merge&quot;: false,</div><div class=\"line\">    &quot;repository&quot;: &quot;kjj6198/deploy101&quot;,</div><div class=\"line\">    &quot;environments&quot;: [&quot;production&quot;, &quot;staging&quot;]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這些資料在 hubot 送出 deployment 時會一併塞入 payload 當中。像是這樣：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">payload: &#123;</div><div class=\"line\">  &quot;name&quot;: &quot;repo_name&quot;,</div><div class=\"line\">  &quot;robotName&quot;: &quot;yourrobot&quot;,</div><div class=\"line\">  &quot;hosts&quot;: &quot;&quot;,</div><div class=\"line\">  &quot;notify&quot;: &#123;</div><div class=\"line\">    &quot;adapter&quot;: &quot;slack&quot;,</div><div class=\"line\">    &quot;room&quot;: &quot;123456789&quot;,</div><div class=\"line\">    &quot;user&quot;: &quot;123456789&quot;,</div><div class=\"line\">    &quot;user_name&quot;: &quot;kjj6198&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;config&quot;: &#123;</div><div class=\"line\">    &quot;provider&quot;: &quot;capistrano&quot;,</div><div class=\"line\">    &quot;auto_merge&quot;: false,</div><div class=\"line\">    &quot;repository&quot;: &quot;kjj6198/deploy101&quot;,</div><div class=\"line\">    &quot;environments&quot;: [</div><div class=\"line\">      &quot;production&quot;,</div><div class=\"line\">      &quot;staging&quot;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>特別要注意的是，provider 的欄位之後會送給 heaven，所以 provider 的值必須是 heaven 有的（之後會提到），或是自己實作 Provider。</p>\n<p>這樣子我們的 hubot 就算設定完成了。先部署到 heroku 上測試看看，部署到 heroku 很簡單：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">heroku login</div><div class=\"line\">git init</div><div class=\"line\">git add .</div><div class=\"line\">git commit &quot;init&quot;</div><div class=\"line\">heroku create</div><div class=\"line\">git push heroku master</div></pre></td></tr></table></figure>\n<p>部署成功後，比較重要的變數有幾個：</p>\n<table>\n<thead>\n<tr>\n<th>變數名稱</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HUBOT_GITHUB_TOKEN</td>\n<td>GITHUB_TOKEN，到<strong>個人帳號</strong> &gt; settings &gt; personal access tokens 設定。設定好權限，因為 hubot 只是用來建立 repo 的 deployment，勾選 repo 即可。</td>\n</tr>\n<tr>\n<td>HUBOT_SLACK_TOKEN</td>\n<td>你的 slack-bot token。可以到<a href=\"https://slack.com/apps/A0F7XDU93-hubot\">這裡</a>設定</td>\n</tr>\n</tbody>\n</table>\n<p>全域變數可以到 heroku 的 dashboard 或是直接用 command line 設定：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">heroku config:set HUBOT_GITHUB_TOKEN=abcccc</div><div class=\"line\">heroku config:set HUBOT_SLACK_TOKEN=abcccc</div></pre></td></tr></table></figure>\n<p>測試一下是否成功。在你設定的頻道中輸入 <code>hubot deploy:version</code></p>\n<img src=\"/2017/03/01/chatops/success.png\" alt=\"success\" title=\"success\">\n<p>其中的 <code>hubot</code> 要跟你的機器人名稱相同，例如機器人的名稱為 tripmomo，那麼我就要輸入 <code>tripmomo deploy:version</code>。</p>\n<p>成功的話 hubot 會回應你目前的版本訊息。</p>\n<ol>\n<li><p>確認 hubot 有送出 deployment 事件。輸入 <code>hubot deploy app to statging</code></p>\n</li>\n<li><p>輸入  <code>curl -H &quot;Authorization: token YOUR_GITHUB_TOKEN&quot; https://api.github.com/repos/my-github/my-repo/deployments</code> 看看 deployment 是否建立成功。如果成功會回傳：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://api.github.com/repos/my-github/my-repo/deployments/28301325\"</span>,</div><div class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">123456</span>,</div><div class=\"line\">    <span class=\"string\">\"sha\"</span>: <span class=\"string\">\"2e3xxxxxxxaaaaaaabbbbbbb\"</span>,</div><div class=\"line\">    <span class=\"string\">\"ref\"</span>: <span class=\"string\">\"develop\"</span>,</div><div class=\"line\">    <span class=\"string\">\"task\"</span>: <span class=\"string\">\"deploy\"</span>,</div><div class=\"line\">    <span class=\"string\">\"payload\"</span>: &#123; <span class=\"comment\">// from apps.json</span></div><div class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"my-app\"</span>,</div><div class=\"line\">      <span class=\"string\">\"robotName\"</span>: <span class=\"string\">\"tripmomo\"</span>,</div><div class=\"line\">      <span class=\"string\">\"hosts\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">      <span class=\"string\">\"notify\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"adapter\"</span>: <span class=\"string\">\"slack\"</span>,</div><div class=\"line\">        <span class=\"string\">\"room\"</span>: <span class=\"string\">\"aabbccdd\"</span>,</div><div class=\"line\">        <span class=\"string\">\"user\"</span>: <span class=\"string\">\"aabbccdd\"</span>,</div><div class=\"line\">        <span class=\"string\">\"user_name\"</span>: <span class=\"string\">\"kalan.chen\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"string\">\"config\"</span>: &#123; </div><div class=\"line\">        <span class=\"string\">\"provider\"</span>: <span class=\"string\">\"capistrano\"</span>,</div><div class=\"line\">        <span class=\"string\">\"auto_merge\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"string\">\"repository\"</span>: <span class=\"string\">\"my-github/my-repo\"</span>,</div><div class=\"line\">        <span class=\"string\">\"environments\"</span>: [</div><div class=\"line\">          <span class=\"string\">\"production\"</span>,</div><div class=\"line\">          <span class=\"string\">\"staging\"</span></div><div class=\"line\">        ]</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"environment\"</span>: <span class=\"string\">\"staging\"</span>,</div><div class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"deploy on staging from hubot-deploy-v0.13.27\"</span>,</div><div class=\"line\">    <span class=\"string\">\"creator\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"login\"</span>: <span class=\"string\">\"kjj6198\"</span>,</div><div class=\"line\">      <span class=\"string\">\"id\"</span>: <span class=\"number\">123456</span>,</div><div class=\"line\">      <span class=\"string\">\"avatar_url\"</span>: <span class=\"string\">\"https://avatars2.githubusercontent.com/u/123456?v=3\"</span>,</div><div class=\"line\">      <span class=\"string\">\"gravatar_id\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">      <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://api.github.com/users/kjj6198\"</span>,</div><div class=\"line\">      <span class=\"string\">\"html_url\"</span>: <span class=\"string\">\"https://github.com/kjj6198\"</span>,</div><div class=\"line\">      <span class=\"string\">\"followers_url\"</span>: <span class=\"string\">\"https://api.github.com/users/kjj6198/followers\"</span>,</div><div class=\"line\">      <span class=\"string\">\"following_url\"</span>: <span class=\"string\">\"https://api.github.com/users/kjj6198/following&#123;/other_user&#125;\"</span>,</div><div class=\"line\">      <span class=\"string\">\"gists_url\"</span>: <span class=\"string\">\"https://api.github.com/users/kjj6198/gists&#123;/gist_id&#125;\"</span>,</div><div class=\"line\">      <span class=\"string\">\"starred_url\"</span>: <span class=\"string\">\"https://api.github.com/users/kjj6198/starred&#123;/owner&#125;&#123;/repo&#125;\"</span>,</div><div class=\"line\">      <span class=\"string\">\"subscriptions_url\"</span>: <span class=\"string\">\"https://api.github.com/users/kjj6198/subscriptions\"</span>,</div><div class=\"line\">      <span class=\"string\">\"organizations_url\"</span>: <span class=\"string\">\"https://api.github.com/users/kjj6198/orgs\"</span>,</div><div class=\"line\">      <span class=\"string\">\"repos_url\"</span>: <span class=\"string\">\"https://api.github.com/users/kalanchen/repos\"</span>,</div><div class=\"line\">      <span class=\"string\">\"events_url\"</span>: <span class=\"string\">\"https://api.github.com/users/kjj6198/events&#123;/privacy&#125;\"</span>,</div><div class=\"line\">      <span class=\"string\">\"received_events_url\"</span>:<span class=\"string\">\"https://api.github.com/users/kjj6198/received_events\"</span>,</div><div class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\"User\"</span>,</div><div class=\"line\">      <span class=\"string\">\"site_admin\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"created_at\"</span>: <span class=\"string\">\"2017-03-01T12:24:20Z\"</span>,</div><div class=\"line\">    <span class=\"string\">\"updated_at\"</span>: <span class=\"string\">\"2017-03-01T12:24:20Z\"</span>,</div><div class=\"line\">    <span class=\"string\">\"statuses_url\"</span>: <span class=\"string\">\"https://api.github.com/repos/my-github/my-repo/deployments/12345667/statuses\"</span>,</div><div class=\"line\">    <span class=\"string\">\"repository_url\"</span>: <span class=\"string\">\"https://api.github.com/repos/my-github/my-repo\"</span></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>更多 deployment API 可以到 <a href=\"https://developer.github.com/v3/repos/deployments/\">github deployment API</a> 看看。</p>\n</li>\n</ol>\n<h3 id=\"設定-heaven\"><a href=\"#設定-heaven\" class=\"headerlink\" title=\"設定 heaven\"></a>設定 heaven</h3><ul>\n<li>到 <a href=\"https://github.com/atmos/heaven\">heaven</a> 將 repo clone 下來。</li>\n<li>設定全域變數</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>變數名稱</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DEPLOYMENT_PRIVATE_KEY</td>\n<td>因為 heaven 是用 ssh 登入，需要 private key。如果 server 在 ec2 上，也可以用 pem 的方式來設定。</td>\n</tr>\n<tr>\n<td>GITHUB_CLIENT_ID</td>\n<td>到個人設定頁面 &gt; OAuth application 產生</td>\n</tr>\n<tr>\n<td>GITHUB_CLIENT_SECRET</td>\n<td>到個人設定頁面 &gt; OAuth application 產生</td>\n</tr>\n<tr>\n<td>DATABASE_URL</td>\n<td>heaven 會建立資料庫紀錄 deployment</td>\n</tr>\n<tr>\n<td>GITHUB_TOKEN</td>\n<td>heaven 會使用 gist 來當作 stdout stderr。所以在設定 token 時記得把 <code>gist</code> 打勾勾。</td>\n</tr>\n</tbody>\n</table>\n<p>其他的變數可以到 <a href=\"https://github.com/atmos/heaven/blob/master/doc/installation.md\">這裡</a> 查看。</p>\n<p>補充說明 <code>DEPLOYMENT_PRIVATE_KEY</code>：原始檔案長這樣</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">-----BEGIN RSA PRIVATE KEY-----</div><div class=\"line\">MJVGa/WNT9aFs63ykxLCdGzav8CfQ5vKXrLrllHXUYFaB2yaN72L+fSsXAy9zMs2</div><div class=\"line\">vy6wV2fB6j3YrVNCnBwUUNGTX9Ka6eeK98dCvHVyyE9Iz3CJAWZxaI03Px/xX9ps</div><div class=\"line\">M4kDWe7IA6+mnuCVSzwQVWMdOoAXbQbhGdfeixbqljNhJrKW/jA9w4BNarwGYv4E</div><div class=\"line\">0MwdU9x7zpk826ytza87yXHSdNuTKcsGQk4XHMYxJECj4EM8vTlVlEyEXZtCeh2z</div><div class=\"line\">P4bjYkTcBom4nC/q7Ea7Pmy1iDJqs0qc1L/xtNMypMhx4iIaeDVawkvBaL6t9IPT</div><div class=\"line\">KVuC9Y1uw5nJP1gwxXa5qoazhcikzqRYmaeWIzsZrcVShZBrJO9/a/APxXY7qJpJ</div><div class=\"line\">0r1YYTykw7THYj2QYiv8cfF64/vh9cB0NELEp5hIuS82Mf6CjqRR7QYR+By3uIdD</div><div class=\"line\">hQ77NMpQlmIC+TCJsLoADqwmEEZCiQSejtkXXtN/mNl581jP8+ViNkWZfPYWe7g6</div><div class=\"line\">yUeXVN1cBPo6AIu+lStE+SlR8lbu7sdpn6lid1pJf50zeythabze81y/nrAdx+Jn</div><div class=\"line\">scACBJBrERkhm2wdULkqwMV2g0U53YpYVAs2fFU1hGzRcE5zF1sdy9RLLX45Mzrm</div><div class=\"line\">lRErTbSUcnoQJhhCso5uNY6MMnr/rQF920KA0Ufr40IBcQ8bOSX7lJucST5bZLDg</div><div class=\"line\">H7g16rimHgK4I9rrvKy4plvbolfpuKGMYJDS3Q7IW5cL5lWLU3HaVSn+VyZe8p3A</div><div class=\"line\">prVx0XmSCwpmUzbDI6FoqniVPVdgis2tV1uKdnJPVn0DoK0ersosGXmALytbYLeE</div><div class=\"line\">arH/cIlGGCoGbIX+Iv3u8aICBEG2eR8eXmQSlGI5rp9hGK/JrlkL3PywVmPw4Efi</div><div class=\"line\">atiS6Y12Tuu8bdpPxBTzXK3PoZ23Pc+1l7NXXIzBeGnj56bALOIbAY5kg+lIRdtP</div><div class=\"line\">NSTAW8IVgFJUl4uzy/NXn/ewiE093ZVs59I2x4OoS14S20mkM/ldWbvlVm4Z3JxC</div><div class=\"line\">xIWsIV8aLznttic5MJUGjGoqH1Brg0o1HyWdkoEcC1N0G57oO4pN4UTD5co5xY9j</div><div class=\"line\">Ai2NIcFCYzqrdTfSlPWJBZLhjZ5hOXIwuTeJfRxDAVphaUqfpXb3o3URGRWiGENA</div><div class=\"line\">kIYKiq4XeNguwrFBzg5CB7NEKvjbjJ31GI26yAPa7yrKpuNFAjPpO6JKdL8slvx8</div><div class=\"line\">GXCOSbhGPFxzmtYzEeMxmnHqOa0Z953XeheKfJoipqRAyENxPBvclDonqVfxuTvw</div><div class=\"line\">cZzqFD+XjDJCJ5INwuwk2WupVzQjzV6TagcIX63Kq1Z9HSoFIBiCrdLzTMDG4Ro3</div><div class=\"line\">2wpN1tFQFz6alvwKtifGwhvG3qqmsfcQqw56gGY0DWIqG5x/thdG7UzZT7iMVDJV</div><div class=\"line\">LAO5wNnBK6L+feov9LqP7ONAonBVawmTv0ArjVhhkYZEi6d+ymvPpL1ORFAymLne</div><div class=\"line\">dpk4VmmmQvkUu0KudRqulavTIrnXFkuv2va+5X9mHGoNNMo1TXk2XX1eM4Rc7nAY</div><div class=\"line\">6IwPyAuFEtT5ocWBklB/qUZtdu4fG876o0X87GklR9ZfPG+tWpH2F+1j1mMHKuiP</div><div class=\"line\">-----END RSA PRIVATE KEY-----</div></pre></td></tr></table></figure>\n<p>要修改成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-----BEGIN RSA PRIVATE KEY-----\\nMJVGa/WNT9aFs63ykxLCdGzav8CfQ5vKXrLrllHXUYFaB2yaN72L+fSsXAy9zMs2\\nvy6wV2fB6j3YrVNCnBwUUNGTX9Ka6eeK98dCvHVyyE9Iz3CJAWZxaI03Px/xX9ps\\nM4kDWe7IA6+mnuCVSzwQVWMdOoAXbQbhGdfeixbqljNhJrKW/jA9w4BNarwGYv4E\\n0MwdU9x7zpk826ytza87yXHSdNuTKcsGQk4XHMYxJECj4EM8vTlVlEyEXZtCeh2z\\nP4bjYkTcBom4nC/q7Ea7Pmy1iDJqs0qc1L/xtNMypMhx4iIaeDVawkvBaL6t9IPT\\nKVuC9Y1uw5nJP1gwxXa5qoazhcikzqRYmaeWIzsZrcVShZBrJO9/a/APxXY7qJpJ\\n0r1YYTykw7THYj2QYiv8cfF64/vh9cB0NELEp5hIuS82Mf6CjqRR7QYR+By3uIdD\\nhQ77NMpQlmIC+TCJsLohtJEmEEZCiQSejtkXXtN/mNl581jP8+ViNkWZfPYWe7g6\\nyUeXVN1cBPo6AIu+lStE+SlR8lbu7sdpn6lid1pJf50zeythabze81y/nrAdx+Jn\\nscACBJBrERkhm2wdULkqwMV2g0U53YpYVAs2fFU1hGzRcE5zF1sdy9RLLX45Mzrm\\nlRErTbSUcnoQJhhCso5uNY6MMnr/rQF920KA0Ufr40IBcQ8bOSX7lJucST5bZLDg\\nH7g16rimHgK4I9rrvKy4plvbolfpuKGMYJDS3Q7IW5cL5lWLU3HaVSn+VyZe8p3A\\nprVx0XmSCwpmUzbDI6FoqniVPVdgis2tV1uKdnJPVn0DoK0ersosGXmALytbYLeE\\narH/cIlGGCoGbIX+Iv3u8aICBEG2eR8eXmQSlGI5rp9hGK/JrlkL3PywVmPw4Efi\\natiS6Y12Tuu8bdpPxBTzXK3PoZ23Pc+1l7NXXIzBeGnj56bALOIbAY5kg+lIRdtP\\nNSTAW8IVgFJUl4uzy/NXn/ewiE093ZVs59I2x4OoS14S20mkM/ldWbvlVm4Z3JxC\\nxIWsIV8aLznttic5MJUGjGoqH1Brg0o1HyWdkoEcC1N0G57oO4pN4UTD5co5xY9j\\nAi2NIcFCYzqrdTfSlPWJBZLhjZ5hOXIwuTeJfRxDAVphaUqfpXb3o3URGRWiGENA\\nkIYKiq4XeNguwrFBzg5CB7NEKvjbjJ31GI26yAPa7yrKpuNFAjPpO6JKdL8slvx8\\nGXCOSbhGPFxzmtYzEeMxmnHqOa0Z953XeheKfJoipqRAyENxPBvclDonqVfxuTvw\\ncZzqFD+XjDJCJ5INwuwk2WupVzQjzV6TagcIX63Kq1Z9HSoFIBiCrdLzTMDG4Ro3\\n2wpN1tFQFz6alvwKtifGwhvG3qqmsfcQqw56gGY0DWIqG5x/thdG7UzZT7iMVDJV\\nLAO5wNnBK6L+feov9LqP7ONAonBVawmTv0ArjVhhkYZEi6d+ymvPpL1ORFAymLne\\ndpk4VmmmQvkUu0KudRqulavTIrnXFkuv2va+5X9mHGoNNMo1TXk2XX1eM4Rc7nAY\\n6IwPyAuFEtT5ocWBklB/qUZtdu4fG876o0X87GklR9ZfPG+tWpH2F+1j1mMHKuiP\\n-----END RSA PRIVATE KEY-----</div></pre></td></tr></table></figure>\n<p><em>既然公開，這組 private key 當然報廢了</em></p>\n<h4 id=\"設定-Gemfile\"><a href=\"#設定-Gemfile\" class=\"headerlink\" title=\"設定 Gemfile\"></a>設定 Gemfile</h4><p>因為 heaven 的動作會是拉下最新的 repo 後，執行 <code>cap ... deploy</code> 的指令，所以capistrano 的版本必須跟要部署的那個版本相同。同時，也要注意任何 asset 相關的 gem 也要一併放入 heaven。舉例來說，如果我的 Capfile 有用到</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem <span class=\"string\">'capistrano'</span>, <span class=\"string\">'3.4.0'</span></div><div class=\"line\">gem <span class=\"string\">'capistrano3-unicorn'</span></div><div class=\"line\">gem <span class=\"string\">'capistrano-rails'</span></div><div class=\"line\">gem <span class=\"string\">'sitemap_generator'</span></div><div class=\"line\">gem <span class=\"string\">'capistrano-rvm'</span></div></pre></td></tr></table></figure>\n<p>那麼<strong>就要將這些 gem 加入 heaven 的 Gemfile 當中</strong>。因為 heaven 會將要部署的 repo 抓下來之後，進去資料夾輸入 <code>cap staging ... deploy</code> 的指令，所以如果沒有安裝相對應的 gem，heaven 就沒辦法部署了。</p>\n<h3 id=\"串接-github-deployment\"><a href=\"#串接-github-deployment\" class=\"headerlink\" title=\"串接 github deployment\"></a>串接 github deployment</h3><ul>\n<li>先到 repo 的 settings &gt; deploy key 加入 ssh-key。</li>\n<li>到 repo 的 settings &gt; webhooks &gt; add webhook</li>\n<li>Payload URL 填入你的 heaven 部署 host 的網址，例如：<a href=\"https://yourapp.com.tw/events。如果想要修改，可以到\">https://yourapp.com.tw/events。如果想要修改，可以到</a> heaven repo 的 <code>routes.rb</code> 中修改</li>\n<li>Content Type 選擇 <code>application/json</code></li>\n<li>Secret 依需求選填</li>\n<li>下面問你這個 webhook 要監聽哪些事件，我們是用 deployment 來做部署的，所以選擇 deployment 以及 deployment status。</li>\n</ul>\n<h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p>如果是部署到 heroku 的話，因為 heaven 要開 redis 跟 resque。記得加入相對應的 add-on 以及 <code>REDIS_URL</code> 。</p>\n<p>同時別忘記了要建立資料庫 <code>heroku run rake db:migrate</code>。</p>\n<h2 id=\"hubot-deploy-常用指令\"><a href=\"#hubot-deploy-常用指令\" class=\"headerlink\" title=\"hubot-deploy 常用指令\"></a>hubot-deploy 常用指令</h2><ul>\n<li><code>hubot deploy:version</code> 目前版本</li>\n<li><code>hubot deploy repo</code>： 根據 <code>apps.json</code> deploy 指定的 repo name。</li>\n<li><code>hubot deploy repo/branch</code>：將指定 repo 的某一個 branch 部署到預設的 environment 中。可設定 <code>HUBOT_DEPLOY_DEFAULT_ENVIRONMENT</code> 來決定</li>\n<li><code>hubot deploy repo/branch to staging</code>：將指定 repo 中的 branch 部署到 <code>staging</code></li>\n</ul>\n<h2 id=\"筆記\"><a href=\"#筆記\" class=\"headerlink\" title=\"筆記\"></a>筆記</h2><ul>\n<li><p>heaven 的文件雖然不明所以，但是程式碼跟測試寫得蠻完整的，熟悉 ruby 的開發者甚至可以將整個 heaven 架設好，修改一下程式碼，加上 routes，直接建立 UI 一鍵部署。</p>\n</li>\n<li><p><code>OptionParser::AmbiguousOption: ambiguous option: -s</code>：不確定是不是 Capistrano 更新之後指令有變動。解決方法是到 <code>lib/heaven/provider/capistrano.rb</code> 修改 <code>deploy_command</code></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Heaven</span></span></div><div class=\"line\">  <span class=\"comment\"># Top-level module for providers.</span></div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Provider</span></span></div><div class=\"line\">    <span class=\"comment\"># The capistrano provider.</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Capistrano</span> &lt; DefaultProvider</span></div><div class=\"line\"> \t.....</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execute</span></span></div><div class=\"line\">        <span class=\"keyword\">return</span> execute_and_log([<span class=\"string\">\"/usr/bin/true\"</span>]) <span class=\"keyword\">if</span> Rails.env.test?</div><div class=\"line\"></div><div class=\"line\">        unless File.exist?(checkout_directory)</div><div class=\"line\">          log <span class=\"string\">\"Cloning <span class=\"subst\">#&#123;repository_url&#125;</span> into <span class=\"subst\">#&#123;checkout_directory&#125;</span>\"</span></div><div class=\"line\">          execute_and_log([<span class=\"string\">\"git\"</span>, <span class=\"string\">\"clone\"</span>, clone_url, checkout_directory])</div><div class=\"line\">        <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">        Dir.chdir(checkout_directory) <span class=\"keyword\">do</span></div><div class=\"line\">          log <span class=\"string\">\"Fetching the latest code\"</span></div><div class=\"line\">          execute_and_log(<span class=\"string\">%w&#123;git fetch&#125;</span>)</div><div class=\"line\">          execute_and_log([<span class=\"string\">\"git\"</span>, <span class=\"string\">\"reset\"</span>, <span class=\"string\">\"--hard\"</span>, sha])</div><div class=\"line\">          deploy_command = [cap_path, environment, <span class=\"string\">\"部署的 cap 指令\"</span>]</div><div class=\"line\">          log <span class=\"string\">\"Executing capistrano: <span class=\"subst\">#&#123;deploy_command.join(<span class=\"string\">\" \"</span>)&#125;</span>\"</span></div><div class=\"line\">          execute_and_log(deploy_command)</div><div class=\"line\">        <span class=\"keyword\">end</span></div><div class=\"line\">      <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>因為 heaven 在部署時會使用 gist 當作 stdout 跟 stderr，在設定 GITHUB_TOKEN 的時候一定要記得把 gist 的 scope 打勾</p>\n</li>\n<li><p><code>Net::SSH::AuthenticationFailed: Authentication failed for user apps@staging.tripmoment.com</code> ：SSH private_key 設定有誤。先確定這組 ssh key 是否已經加入 github，再來確定將 <code>passphrase</code> 拿掉，並且將 ssh private key 變成一行加上 \\n。</p>\n</li>\n<li><p><code>ArgumentError: Could not parse PKey: no start line</code> 沒有將 SSH private key 的 passphrase 移除</p>\n</li>\n</ul>\n<h2 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h2><p>通常在公司裡頭，開發團隊人數不多的話，devops 都是由後端兼任的，前端比較少接觸。不過用「我是前端，我不需要管 devops」這種藉口搪塞自己不去學習好像也說不太過去，畢竟開發一個健全的系統絕對不可能只有前端而已。</p>\n<p>這篇文章試著將文件中沒有提到或是省略的步驟整合起來，heaven 跟 hubot-deploy 的文件中有太多沒有提到的細節，導致整合起來時需要花不少時間試錯。希望能夠節省大家踩雷跟翻原始碼的時間。</p>\n<p>這篇文章還有許多 devops 的細節沒有詳述，畢竟建立一套完整的 devops pipeline 需要時間，自己對於 CI/CD 的設定也還不夠熟悉。</p>\n<h3 id=\"參考資源：\"><a href=\"#參考資源：\" class=\"headerlink\" title=\"參考資源：\"></a>參考資源：</h3><ul>\n<li><a href=\"https://github.com/ocowchun/many101/blob/master/devops/chatops.md\">顆顆 devops 筆記</a></li>\n<li><a href=\"http://lazier.cwchang.me/2015/01/24/ChatOps-Hubot-Capistrano-Heaven/\">chatops</a></li>\n</ul>\n"},{"title":"code-review-101","date":"2016-12-31T16:00:00.000Z","_content":"\n## 前言\n\n身為前端工程師，通常在整個團隊裡面會是最常發送 pull request 的人。為了讓自己的 PR 更容易被測試，以及讓 reviewer 更容易的 review，總結了一些注意事項。\n\n### pull request 的描述\n\n- 這個 pull request 的目的。例如：修正 layout、新增 feature、某個畫面的 style 等等\n- 記住每個公司的成員都可以看見 pull request ，所以確保 pull request 的敘述提供夠完整的資訊。\n- 明確地說明你想要怎樣的 feedback。\n- 使用 prefix 來說明你的 pull request 狀態\n- 將需要看這個 code 的成員加入進來（可以使用 github 的 assign 功能）\n\n### 提供 feedback\n\n- 如果你不同意 pull request 內的寫法，先停下來思考一下，為什麼你不同意。想清楚了再留下 comment\n- 用詢問代替命令。「為什麼你不採用這樣的寫法呢？」優於「不要這樣寫！」，先問問看對方的想法或是意見，說不定他們不那樣寫是有理由的，這時候就可以做適當的溝通與交流。\n- 解釋為什麼你覺得這些 code 需要被修改（不符合 style guide？不符合公司命名規範？沒有寫 test case？）\n- 提供更好的方法來改善目前的 code\n- 盡量避免具有攻擊性的評論。（ex:這樣寫很白痴。）\n- 保持謙虛。\n- 盡量避免斷定。（別這樣子寫 code！）\n- 在線上溝通的時候，難免會有某些誤解產生。這個時候可以考慮面對面溝通。\n- 用個 emoji 來加強你的語氣，例如：good job 👋 👍。 需要修正哦👻（這好像有點嘲諷？\n\n### 回應 feedback\n\n- 感謝那些願意幫你 code review 的人。\n- 對於任何不清楚的地方，發問就對了。\n- 如果這個 feedback 有被實作或是在某個 commit 裡面，提供連結給他。\n- 如果討論越來越複雜而且一直得不到結論，試著當面跟他溝通。\n\n### 每個人\n\n- 必須理解大家都有不同的 coding 風格，而且寫程式總會有許多解法跟選擇，所以在討論的時候應該適當做權衡，並且充分解釋為什麼你覺得這樣比較好。\n- 用問的，不要用命令的。\n- 不要劃分責任（這是你寫的不關我的事、這部分是你要處理的）\n- 試著去理解一下作者的觀點和想法。\n- 如果有一個 pull request 被 merge 了，記得留言並且感謝發送 pull request 的人。（optional）\n\n### 結論\n\n雖然以上總結了那麼多點，不過我覺得圍繞的點還是在於**是否為對方著想吧！**身為一位 deployer，或是 code reviewer，你會希望看到怎樣的 pull request，從這個角度切入，或許會更有感觸也說不定。畢竟如果出錯了，甚至是因為自己的疏忽，把 code 部署到 production 上了，還要再浪費整個團隊的時間重新找 bug，再重新部署一次。\n\n","source":"_posts/code-review-101.md","raw":"---\ntitle: code-review-101\ncategories: 前端\ndate: 2017-1-1\n---\n\n## 前言\n\n身為前端工程師，通常在整個團隊裡面會是最常發送 pull request 的人。為了讓自己的 PR 更容易被測試，以及讓 reviewer 更容易的 review，總結了一些注意事項。\n\n### pull request 的描述\n\n- 這個 pull request 的目的。例如：修正 layout、新增 feature、某個畫面的 style 等等\n- 記住每個公司的成員都可以看見 pull request ，所以確保 pull request 的敘述提供夠完整的資訊。\n- 明確地說明你想要怎樣的 feedback。\n- 使用 prefix 來說明你的 pull request 狀態\n- 將需要看這個 code 的成員加入進來（可以使用 github 的 assign 功能）\n\n### 提供 feedback\n\n- 如果你不同意 pull request 內的寫法，先停下來思考一下，為什麼你不同意。想清楚了再留下 comment\n- 用詢問代替命令。「為什麼你不採用這樣的寫法呢？」優於「不要這樣寫！」，先問問看對方的想法或是意見，說不定他們不那樣寫是有理由的，這時候就可以做適當的溝通與交流。\n- 解釋為什麼你覺得這些 code 需要被修改（不符合 style guide？不符合公司命名規範？沒有寫 test case？）\n- 提供更好的方法來改善目前的 code\n- 盡量避免具有攻擊性的評論。（ex:這樣寫很白痴。）\n- 保持謙虛。\n- 盡量避免斷定。（別這樣子寫 code！）\n- 在線上溝通的時候，難免會有某些誤解產生。這個時候可以考慮面對面溝通。\n- 用個 emoji 來加強你的語氣，例如：good job 👋 👍。 需要修正哦👻（這好像有點嘲諷？\n\n### 回應 feedback\n\n- 感謝那些願意幫你 code review 的人。\n- 對於任何不清楚的地方，發問就對了。\n- 如果這個 feedback 有被實作或是在某個 commit 裡面，提供連結給他。\n- 如果討論越來越複雜而且一直得不到結論，試著當面跟他溝通。\n\n### 每個人\n\n- 必須理解大家都有不同的 coding 風格，而且寫程式總會有許多解法跟選擇，所以在討論的時候應該適當做權衡，並且充分解釋為什麼你覺得這樣比較好。\n- 用問的，不要用命令的。\n- 不要劃分責任（這是你寫的不關我的事、這部分是你要處理的）\n- 試著去理解一下作者的觀點和想法。\n- 如果有一個 pull request 被 merge 了，記得留言並且感謝發送 pull request 的人。（optional）\n\n### 結論\n\n雖然以上總結了那麼多點，不過我覺得圍繞的點還是在於**是否為對方著想吧！**身為一位 deployer，或是 code reviewer，你會希望看到怎樣的 pull request，從這個角度切入，或許會更有感觸也說不定。畢竟如果出錯了，甚至是因為自己的疏忽，把 code 部署到 production 上了，還要再浪費整個團隊的時間重新找 bug，再重新部署一次。\n\n","slug":"code-review-101","published":1,"updated":"2017-02-28T16:19:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p3z0001b75ts6j9s5xe","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>身為前端工程師，通常在整個團隊裡面會是最常發送 pull request 的人。為了讓自己的 PR 更容易被測試，以及讓 reviewer 更容易的 review，總結了一些注意事項。</p>\n<h3 id=\"pull-request-的描述\"><a href=\"#pull-request-的描述\" class=\"headerlink\" title=\"pull request 的描述\"></a>pull request 的描述</h3><ul>\n<li>這個 pull request 的目的。例如：修正 layout、新增 feature、某個畫面的 style 等等</li>\n<li>記住每個公司的成員都可以看見 pull request ，所以確保 pull request 的敘述提供夠完整的資訊。</li>\n<li>明確地說明你想要怎樣的 feedback。</li>\n<li>使用 prefix 來說明你的 pull request 狀態</li>\n<li>將需要看這個 code 的成員加入進來（可以使用 github 的 assign 功能）</li>\n</ul>\n<h3 id=\"提供-feedback\"><a href=\"#提供-feedback\" class=\"headerlink\" title=\"提供 feedback\"></a>提供 feedback</h3><ul>\n<li>如果你不同意 pull request 內的寫法，先停下來思考一下，為什麼你不同意。想清楚了再留下 comment</li>\n<li>用詢問代替命令。「為什麼你不採用這樣的寫法呢？」優於「不要這樣寫！」，先問問看對方的想法或是意見，說不定他們不那樣寫是有理由的，這時候就可以做適當的溝通與交流。</li>\n<li>解釋為什麼你覺得這些 code 需要被修改（不符合 style guide？不符合公司命名規範？沒有寫 test case？）</li>\n<li>提供更好的方法來改善目前的 code</li>\n<li>盡量避免具有攻擊性的評論。（ex:這樣寫很白痴。）</li>\n<li>保持謙虛。</li>\n<li>盡量避免斷定。（別這樣子寫 code！）</li>\n<li>在線上溝通的時候，難免會有某些誤解產生。這個時候可以考慮面對面溝通。</li>\n<li>用個 emoji 來加強你的語氣，例如：good job 👋 👍。 需要修正哦👻（這好像有點嘲諷？</li>\n</ul>\n<h3 id=\"回應-feedback\"><a href=\"#回應-feedback\" class=\"headerlink\" title=\"回應 feedback\"></a>回應 feedback</h3><ul>\n<li>感謝那些願意幫你 code review 的人。</li>\n<li>對於任何不清楚的地方，發問就對了。</li>\n<li>如果這個 feedback 有被實作或是在某個 commit 裡面，提供連結給他。</li>\n<li>如果討論越來越複雜而且一直得不到結論，試著當面跟他溝通。</li>\n</ul>\n<h3 id=\"每個人\"><a href=\"#每個人\" class=\"headerlink\" title=\"每個人\"></a>每個人</h3><ul>\n<li>必須理解大家都有不同的 coding 風格，而且寫程式總會有許多解法跟選擇，所以在討論的時候應該適當做權衡，並且充分解釋為什麼你覺得這樣比較好。</li>\n<li>用問的，不要用命令的。</li>\n<li>不要劃分責任（這是你寫的不關我的事、這部分是你要處理的）</li>\n<li>試著去理解一下作者的觀點和想法。</li>\n<li>如果有一個 pull request 被 merge 了，記得留言並且感謝發送 pull request 的人。（optional）</li>\n</ul>\n<h3 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h3><p>雖然以上總結了那麼多點，不過我覺得圍繞的點還是在於<strong>是否為對方著想吧！</strong>身為一位 deployer，或是 code reviewer，你會希望看到怎樣的 pull request，從這個角度切入，或許會更有感觸也說不定。畢竟如果出錯了，甚至是因為自己的疏忽，把 code 部署到 production 上了，還要再浪費整個團隊的時間重新找 bug，再重新部署一次。</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>身為前端工程師，通常在整個團隊裡面會是最常發送 pull request 的人。為了讓自己的 PR 更容易被測試，以及讓 reviewer 更容易的 review，總結了一些注意事項。</p>\n<h3 id=\"pull-request-的描述\"><a href=\"#pull-request-的描述\" class=\"headerlink\" title=\"pull request 的描述\"></a>pull request 的描述</h3><ul>\n<li>這個 pull request 的目的。例如：修正 layout、新增 feature、某個畫面的 style 等等</li>\n<li>記住每個公司的成員都可以看見 pull request ，所以確保 pull request 的敘述提供夠完整的資訊。</li>\n<li>明確地說明你想要怎樣的 feedback。</li>\n<li>使用 prefix 來說明你的 pull request 狀態</li>\n<li>將需要看這個 code 的成員加入進來（可以使用 github 的 assign 功能）</li>\n</ul>\n<h3 id=\"提供-feedback\"><a href=\"#提供-feedback\" class=\"headerlink\" title=\"提供 feedback\"></a>提供 feedback</h3><ul>\n<li>如果你不同意 pull request 內的寫法，先停下來思考一下，為什麼你不同意。想清楚了再留下 comment</li>\n<li>用詢問代替命令。「為什麼你不採用這樣的寫法呢？」優於「不要這樣寫！」，先問問看對方的想法或是意見，說不定他們不那樣寫是有理由的，這時候就可以做適當的溝通與交流。</li>\n<li>解釋為什麼你覺得這些 code 需要被修改（不符合 style guide？不符合公司命名規範？沒有寫 test case？）</li>\n<li>提供更好的方法來改善目前的 code</li>\n<li>盡量避免具有攻擊性的評論。（ex:這樣寫很白痴。）</li>\n<li>保持謙虛。</li>\n<li>盡量避免斷定。（別這樣子寫 code！）</li>\n<li>在線上溝通的時候，難免會有某些誤解產生。這個時候可以考慮面對面溝通。</li>\n<li>用個 emoji 來加強你的語氣，例如：good job 👋 👍。 需要修正哦👻（這好像有點嘲諷？</li>\n</ul>\n<h3 id=\"回應-feedback\"><a href=\"#回應-feedback\" class=\"headerlink\" title=\"回應 feedback\"></a>回應 feedback</h3><ul>\n<li>感謝那些願意幫你 code review 的人。</li>\n<li>對於任何不清楚的地方，發問就對了。</li>\n<li>如果這個 feedback 有被實作或是在某個 commit 裡面，提供連結給他。</li>\n<li>如果討論越來越複雜而且一直得不到結論，試著當面跟他溝通。</li>\n</ul>\n<h3 id=\"每個人\"><a href=\"#每個人\" class=\"headerlink\" title=\"每個人\"></a>每個人</h3><ul>\n<li>必須理解大家都有不同的 coding 風格，而且寫程式總會有許多解法跟選擇，所以在討論的時候應該適當做權衡，並且充分解釋為什麼你覺得這樣比較好。</li>\n<li>用問的，不要用命令的。</li>\n<li>不要劃分責任（這是你寫的不關我的事、這部分是你要處理的）</li>\n<li>試著去理解一下作者的觀點和想法。</li>\n<li>如果有一個 pull request 被 merge 了，記得留言並且感謝發送 pull request 的人。（optional）</li>\n</ul>\n<h3 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h3><p>雖然以上總結了那麼多點，不過我覺得圍繞的點還是在於<strong>是否為對方著想吧！</strong>身為一位 deployer，或是 code reviewer，你會希望看到怎樣的 pull request，從這個角度切入，或許會更有感觸也說不定。畢竟如果出錯了，甚至是因為自己的疏忽，把 code 部署到 production 上了，還要再浪費整個團隊的時間重新找 bug，再重新部署一次。</p>\n"},{"title":"人類也是 context switch 的動物 - 違反直覺的做事方式","date":"2016-10-27T09:52:51.000Z","_content":"\n\n{% youtube Dr67i5SdXiM %}\n\n今天看了這個影片，主要是想要指出其實在多工切換中，可以得到比較好的效率。\n\n聽起來很 trick，對吧？其實剛看完影片我也不太相信，不過這似乎可以用作業系統的角度來解釋。\n\n### Context Switch\n\n如果學過作業系統，對這個名詞不陌生。當時的疑問是，**既然轉換要成本，為什麼不直接一個 process 到底就好？**\n\n這個乍聽起來很蠢，但其實 context switch 並不會讓 process 的完成時間變短，只是將**平均等待時間縮短**了而已。\n\n不過，這是建立在轉換成本為零的情況下。\n\n儘管如此，這部影片給我的震撼也還蠻大的，如果今天這個數量提升到了某種量級，那麼彼此的差距將會非常驚人。如果我沒看過這部影片，之後遇到類似的作業大概也是也會這樣做吧...？\n\n### 結論\n\n- 如果 context switch 的成本不高，甚至幾乎不需要切換成本，那麼 context swtich 將會提高效率，他減少了每項作業的平均等待時間。但如果今天 switch 的成本高於 mass production 多出來步驟的成本，那麼結果就會反過來了。\n- 之所以 mass production 會比較慢的原因，是因為他多出了拿起跟放下的動作，而這個動作是在 one piece 當中沒有多出來的。如果今天 mass production **不會多出多餘的步驟（目前是還想不到例子啦...）**，那麼彼此的差距就不會那麼大，或者幾乎相同也說不定。（如果 context switch 成本不高的話）\n\n這兩點都很違反直覺，直覺來想，重複做某件事，大腦會習慣並且逐漸擅長；但是在影片當中，卻要逼你違反大腦的直覺，不斷的在四個步驟之間切換。\n\n\n\n","source":"_posts/context-switch.md","raw":"---\ntitle: 人類也是 context switch 的動物 - 違反直覺的做事方式\ndate: 2016-10-27 17:52:51\ncategories:\ntags:\n---\n\n\n{% youtube Dr67i5SdXiM %}\n\n今天看了這個影片，主要是想要指出其實在多工切換中，可以得到比較好的效率。\n\n聽起來很 trick，對吧？其實剛看完影片我也不太相信，不過這似乎可以用作業系統的角度來解釋。\n\n### Context Switch\n\n如果學過作業系統，對這個名詞不陌生。當時的疑問是，**既然轉換要成本，為什麼不直接一個 process 到底就好？**\n\n這個乍聽起來很蠢，但其實 context switch 並不會讓 process 的完成時間變短，只是將**平均等待時間縮短**了而已。\n\n不過，這是建立在轉換成本為零的情況下。\n\n儘管如此，這部影片給我的震撼也還蠻大的，如果今天這個數量提升到了某種量級，那麼彼此的差距將會非常驚人。如果我沒看過這部影片，之後遇到類似的作業大概也是也會這樣做吧...？\n\n### 結論\n\n- 如果 context switch 的成本不高，甚至幾乎不需要切換成本，那麼 context swtich 將會提高效率，他減少了每項作業的平均等待時間。但如果今天 switch 的成本高於 mass production 多出來步驟的成本，那麼結果就會反過來了。\n- 之所以 mass production 會比較慢的原因，是因為他多出了拿起跟放下的動作，而這個動作是在 one piece 當中沒有多出來的。如果今天 mass production **不會多出多餘的步驟（目前是還想不到例子啦...）**，那麼彼此的差距就不會那麼大，或者幾乎相同也說不定。（如果 context switch 成本不高的話）\n\n這兩點都很違反直覺，直覺來想，重複做某件事，大腦會習慣並且逐漸擅長；但是在影片當中，卻要逼你違反大腦的直覺，不斷的在四個步驟之間切換。\n\n\n\n","slug":"context-switch","published":1,"updated":"2017-02-28T14:58:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p6j000cb75tnk5bpz7n","content":"<div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/Dr67i5SdXiM\" frameborder=\"0\" allowfullscreen></iframe></div>\n<p>今天看了這個影片，主要是想要指出其實在多工切換中，可以得到比較好的效率。</p>\n<p>聽起來很 trick，對吧？其實剛看完影片我也不太相信，不過這似乎可以用作業系統的角度來解釋。</p>\n<h3 id=\"Context-Switch\"><a href=\"#Context-Switch\" class=\"headerlink\" title=\"Context Switch\"></a>Context Switch</h3><p>如果學過作業系統，對這個名詞不陌生。當時的疑問是，<strong>既然轉換要成本，為什麼不直接一個 process 到底就好？</strong></p>\n<p>這個乍聽起來很蠢，但其實 context switch 並不會讓 process 的完成時間變短，只是將<strong>平均等待時間縮短</strong>了而已。</p>\n<p>不過，這是建立在轉換成本為零的情況下。</p>\n<p>儘管如此，這部影片給我的震撼也還蠻大的，如果今天這個數量提升到了某種量級，那麼彼此的差距將會非常驚人。如果我沒看過這部影片，之後遇到類似的作業大概也是也會這樣做吧…？</p>\n<h3 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h3><ul>\n<li>如果 context switch 的成本不高，甚至幾乎不需要切換成本，那麼 context swtich 將會提高效率，他減少了每項作業的平均等待時間。但如果今天 switch 的成本高於 mass production 多出來步驟的成本，那麼結果就會反過來了。</li>\n<li>之所以 mass production 會比較慢的原因，是因為他多出了拿起跟放下的動作，而這個動作是在 one piece 當中沒有多出來的。如果今天 mass production <strong>不會多出多餘的步驟（目前是還想不到例子啦…）</strong>，那麼彼此的差距就不會那麼大，或者幾乎相同也說不定。（如果 context switch 成本不高的話）</li>\n</ul>\n<p>這兩點都很違反直覺，直覺來想，重複做某件事，大腦會習慣並且逐漸擅長；但是在影片當中，卻要逼你違反大腦的直覺，不斷的在四個步驟之間切換。</p>\n","excerpt":"","more":"<div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/Dr67i5SdXiM\" frameborder=\"0\" allowfullscreen></iframe></div>\n<p>今天看了這個影片，主要是想要指出其實在多工切換中，可以得到比較好的效率。</p>\n<p>聽起來很 trick，對吧？其實剛看完影片我也不太相信，不過這似乎可以用作業系統的角度來解釋。</p>\n<h3 id=\"Context-Switch\"><a href=\"#Context-Switch\" class=\"headerlink\" title=\"Context Switch\"></a>Context Switch</h3><p>如果學過作業系統，對這個名詞不陌生。當時的疑問是，<strong>既然轉換要成本，為什麼不直接一個 process 到底就好？</strong></p>\n<p>這個乍聽起來很蠢，但其實 context switch 並不會讓 process 的完成時間變短，只是將<strong>平均等待時間縮短</strong>了而已。</p>\n<p>不過，這是建立在轉換成本為零的情況下。</p>\n<p>儘管如此，這部影片給我的震撼也還蠻大的，如果今天這個數量提升到了某種量級，那麼彼此的差距將會非常驚人。如果我沒看過這部影片，之後遇到類似的作業大概也是也會這樣做吧…？</p>\n<h3 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h3><ul>\n<li>如果 context switch 的成本不高，甚至幾乎不需要切換成本，那麼 context swtich 將會提高效率，他減少了每項作業的平均等待時間。但如果今天 switch 的成本高於 mass production 多出來步驟的成本，那麼結果就會反過來了。</li>\n<li>之所以 mass production 會比較慢的原因，是因為他多出了拿起跟放下的動作，而這個動作是在 one piece 當中沒有多出來的。如果今天 mass production <strong>不會多出多餘的步驟（目前是還想不到例子啦…）</strong>，那麼彼此的差距就不會那麼大，或者幾乎相同也說不定。（如果 context switch 成本不高的話）</li>\n</ul>\n<p>這兩點都很違反直覺，直覺來想，重複做某件事，大腦會習慣並且逐漸擅長；但是在影片當中，卻要逼你違反大腦的直覺，不斷的在四個步驟之間切換。</p>\n"},{"title":"css variable + sass variable = 😍","date":"2016-11-14T11:44:20.000Z","_content":"\n之前寫過了一篇關於自己對 css variable 的想法，原本對這個屬性沒有抱持著太大的期待，自己用習慣了 SASS 變數也覺得這個 css variable 反而像個彆腳的 system，不過如果你也是這樣想的人，可以參考這篇文章 [Why should you care Css variables](https://developers.google.com/web/updates/2016/02/css-variables-why-should-you-care)\n\ncss 的變數已經出來有一段期間了，瀏覽器的支援程度還不算太糟。或許各位都曾經想過，這些變數的功能在 SASS 上幾乎都做得到，而且搭配 SASS 的 function 以及 SASS 的型別（list map）變數的使用彈性更為強大。\n\n不過這邊想要跟大家分享的是，css variable 真正亮眼的地方在哪裡。\n\n這篇文章會假設大家已經有一些 css variable 的基礎。\n\n附帶一提，這篇文章沒有很全面性的寫出如何使用 CSS variable，所以有任何建議都歡迎提出來，之後也會找時間來重新寫一篇比較全面性的文章。\n\n### 支援度\n\n\n| Browser | Version |\n| -----   | -----   |\n| Chrome  |   49    |\n| Firefox |   42    |\n| Safari  |   9.1   |\n\n### custom property\n\n> **只有在你讓他表現得像個 property 的時候**，他才會比一般的預處理器強大\n\n首先要澄清的一點是，在 [CSS 的 spec](https://drafts.csswg.org/css-variables/) 當中，variable 其實叫做 `custom property`。這是什麼意思？變數跟 property 搞得我好混亂！\n\n不要著急，意思就是在使用 css variable 的時候，我們應該把他們想成一般的 css 屬性使用，而非一般的變數而已。以下就會來介紹一些有關 css variable 的使用。\n\n### 為什麼你要用 CSS Variable\n\n- 你用這些屬性**不需要一個預處理器**。\n- 可以用 initial inherit 的方式建立階層\n- **瀏覽器會在需要的時候重新 render**\n- 你可以訪問並且**用JavaScript操縱它們（等等會講到）**\n\n#### property 特性\n\n既然是 css property 就一定會有以下幾個特性：\n\n- 有所謂的 `initial` `inherit` 的值可以使用\n- 呼叫的方式是 `var(--variable-name)`\n- **能夠放在 `inline-style` 裡面**\n- **可以用 js 取值、設值**\n\n其中，最大的亮點在於 inline-style 跟能夠與 js 搭配取值與設值。這是跟原本 SASS, LESS 等 CSS 預處理器最大的不同之處，也讓 CSS 具備了新的可能性，就讓我們來看一些範例吧！\n\n```scss\n:root {\n  --mainColor: #abc;\n  --subColor: #ccc;\n}\n\nh1 {\n  color: var(--mainColor);\n}\n```\n\n在這邊 `:root` 所宣告的元素會繼承到所有的元素當中，這就是 `custom property` 的特性。\n\n#### inline-style\n\n因為是 property，所以當然可以像這樣寫。\n\n```html\n<h1 style=\"color: var(--mainColor);\">\n  Hello, world\n</h1>\n```\n\n這看起來的確不怎麼稀奇，因為同樣的事情也可以用 class 跟 SCSS 變數的方式來達成，不過這讓我們在寫 inline style 的時候又多了一份可能性。\n\n##### react inline style\n\n例如在 react 當中，我們可能會需要寫一些 inline style，但是顏色的制定因為跳脫了 SCSS 的控制，常常顯得很彆扭，要嘛就是直接打上顏色碼，之後要修改的時候再捲起袖子慢慢改；或者用 js 另外保存一份顏色的變數表；最好的方法可能是幫每一個顏色變數賦予一個 class。\n\n現在有了 css variable 我們可以很方便的使用。\n\n```jsx\nconst styles = {\n  heading: {\n    fontSize: '14px',\n    color: 'var(--mainColor)',\n  },\n  warn: {\n    color: 'var(--warnColor)'\n  }\n};\n\nconst heading = ({title}) => <h1 style={styles.heading}>{title}</h1>\n```\n\n**本篇文章只聚焦在介紹 css variable，事實上也有其他優秀的 react style 管理方式**\n\n#### grid\n\n設定 gutter，我們現在可以用 css variable 的方式來做到，也就是說，我們可以用 `@media query` 的方式來幫變數設值，這是一般預處理器做不到的事情，\n\n#### js 的控制\n\n透過 javascript 的操作，我們可以很輕鬆的幫 css 變數設值或取值，來達到 view 跟 js 分離的效果。例如我們有一些效果想要透過 js 來取值，並傳給 css。一般來說，我們可能會透過 javascript 做計算之後，再把計算後的值，用 inline style 呈現。\n\n但這樣子有可能發生一些情形：\n\n- 這個值可能不是我想要的，或是我也想要自己對值做一些操作。這樣一來就要重新修改 javascript 的程式碼，非常麻煩。\n- 因為是用 inline style 設值，所以 CSS 無能為力。\n\n有了 css variable 之後，設值、取值非常的方便。\n\n##### 取值\n\n```javascript\nHTMLElement.style.getPropertyValue('--mainColor');\n```\n\n##### 設值\n\n```javascript\nHTMLElement.style.setProperty('--mainColor', '#abc');\n```\n\n所以，我們當然也可以套用事件註冊器，讓有興趣的數值注入到我們的變數之中。\n\n```javascript\nconst element = // some HTMLElement;\ndocument.addEventListener('mousedown', e => {\n  element.style.setProperty('--pageX', e.pageX);\n  element.style.setProperty('--pageY', e.pageY);\n});\n```\n\n##### 支援度\n\n如果要看看當前的瀏覽器是否有支援 CSS variable 的話，可以用 `CSS.supports` 的語法來檢測。\n\n`CSS.supports('(--css: variables)')` `CSS.supports('not (--css: variables)')`\n\n### 之後的挑戰\n\n因為管理變數的方式越來越多了，也有可能在 javascript 對變數進行設值的動作，所以在控制這些變數時我們應該要更小心一點。\n\n- 變數的宣告統一處理：全域變數統一放在一個檔案或資料夾當中，之後會比較方便處理，如果是宣告 css variable 也一樣。\n- 如果變數是為了讓 js 設值，可以試著加上前綴當作標記，例如：`--js-pageX` 等等。\n\n## 結論\n\n這篇文章介紹了 CSS variable 使用方式與場景，之前我也覺得 css variable 很彆扭，不但寫起來醜不拉機，而且也沒有相對應的函數操作。\n\n不過一旦理解 CSS variable 就是 custom property 的概念的時候，就會發現一些 CSS 以往無法突破的可能性。我們沒有必要一定要對 SASS 或是 CSS variable 做取捨，我們甚至可以將兩者搭配使用，做出一些以往無法達到的強大效果。\n","source":"_posts/css-variable.md","raw":"---\ntitle: \"css variable + sass variable = \\uD83D\\uDE0D\"\ntags:\n  - css\ncategory: 前端\ndate: 2016-11-14 19:44:20\ncategories:\n---\n\n之前寫過了一篇關於自己對 css variable 的想法，原本對這個屬性沒有抱持著太大的期待，自己用習慣了 SASS 變數也覺得這個 css variable 反而像個彆腳的 system，不過如果你也是這樣想的人，可以參考這篇文章 [Why should you care Css variables](https://developers.google.com/web/updates/2016/02/css-variables-why-should-you-care)\n\ncss 的變數已經出來有一段期間了，瀏覽器的支援程度還不算太糟。或許各位都曾經想過，這些變數的功能在 SASS 上幾乎都做得到，而且搭配 SASS 的 function 以及 SASS 的型別（list map）變數的使用彈性更為強大。\n\n不過這邊想要跟大家分享的是，css variable 真正亮眼的地方在哪裡。\n\n這篇文章會假設大家已經有一些 css variable 的基礎。\n\n附帶一提，這篇文章沒有很全面性的寫出如何使用 CSS variable，所以有任何建議都歡迎提出來，之後也會找時間來重新寫一篇比較全面性的文章。\n\n### 支援度\n\n\n| Browser | Version |\n| -----   | -----   |\n| Chrome  |   49    |\n| Firefox |   42    |\n| Safari  |   9.1   |\n\n### custom property\n\n> **只有在你讓他表現得像個 property 的時候**，他才會比一般的預處理器強大\n\n首先要澄清的一點是，在 [CSS 的 spec](https://drafts.csswg.org/css-variables/) 當中，variable 其實叫做 `custom property`。這是什麼意思？變數跟 property 搞得我好混亂！\n\n不要著急，意思就是在使用 css variable 的時候，我們應該把他們想成一般的 css 屬性使用，而非一般的變數而已。以下就會來介紹一些有關 css variable 的使用。\n\n### 為什麼你要用 CSS Variable\n\n- 你用這些屬性**不需要一個預處理器**。\n- 可以用 initial inherit 的方式建立階層\n- **瀏覽器會在需要的時候重新 render**\n- 你可以訪問並且**用JavaScript操縱它們（等等會講到）**\n\n#### property 特性\n\n既然是 css property 就一定會有以下幾個特性：\n\n- 有所謂的 `initial` `inherit` 的值可以使用\n- 呼叫的方式是 `var(--variable-name)`\n- **能夠放在 `inline-style` 裡面**\n- **可以用 js 取值、設值**\n\n其中，最大的亮點在於 inline-style 跟能夠與 js 搭配取值與設值。這是跟原本 SASS, LESS 等 CSS 預處理器最大的不同之處，也讓 CSS 具備了新的可能性，就讓我們來看一些範例吧！\n\n```scss\n:root {\n  --mainColor: #abc;\n  --subColor: #ccc;\n}\n\nh1 {\n  color: var(--mainColor);\n}\n```\n\n在這邊 `:root` 所宣告的元素會繼承到所有的元素當中，這就是 `custom property` 的特性。\n\n#### inline-style\n\n因為是 property，所以當然可以像這樣寫。\n\n```html\n<h1 style=\"color: var(--mainColor);\">\n  Hello, world\n</h1>\n```\n\n這看起來的確不怎麼稀奇，因為同樣的事情也可以用 class 跟 SCSS 變數的方式來達成，不過這讓我們在寫 inline style 的時候又多了一份可能性。\n\n##### react inline style\n\n例如在 react 當中，我們可能會需要寫一些 inline style，但是顏色的制定因為跳脫了 SCSS 的控制，常常顯得很彆扭，要嘛就是直接打上顏色碼，之後要修改的時候再捲起袖子慢慢改；或者用 js 另外保存一份顏色的變數表；最好的方法可能是幫每一個顏色變數賦予一個 class。\n\n現在有了 css variable 我們可以很方便的使用。\n\n```jsx\nconst styles = {\n  heading: {\n    fontSize: '14px',\n    color: 'var(--mainColor)',\n  },\n  warn: {\n    color: 'var(--warnColor)'\n  }\n};\n\nconst heading = ({title}) => <h1 style={styles.heading}>{title}</h1>\n```\n\n**本篇文章只聚焦在介紹 css variable，事實上也有其他優秀的 react style 管理方式**\n\n#### grid\n\n設定 gutter，我們現在可以用 css variable 的方式來做到，也就是說，我們可以用 `@media query` 的方式來幫變數設值，這是一般預處理器做不到的事情，\n\n#### js 的控制\n\n透過 javascript 的操作，我們可以很輕鬆的幫 css 變數設值或取值，來達到 view 跟 js 分離的效果。例如我們有一些效果想要透過 js 來取值，並傳給 css。一般來說，我們可能會透過 javascript 做計算之後，再把計算後的值，用 inline style 呈現。\n\n但這樣子有可能發生一些情形：\n\n- 這個值可能不是我想要的，或是我也想要自己對值做一些操作。這樣一來就要重新修改 javascript 的程式碼，非常麻煩。\n- 因為是用 inline style 設值，所以 CSS 無能為力。\n\n有了 css variable 之後，設值、取值非常的方便。\n\n##### 取值\n\n```javascript\nHTMLElement.style.getPropertyValue('--mainColor');\n```\n\n##### 設值\n\n```javascript\nHTMLElement.style.setProperty('--mainColor', '#abc');\n```\n\n所以，我們當然也可以套用事件註冊器，讓有興趣的數值注入到我們的變數之中。\n\n```javascript\nconst element = // some HTMLElement;\ndocument.addEventListener('mousedown', e => {\n  element.style.setProperty('--pageX', e.pageX);\n  element.style.setProperty('--pageY', e.pageY);\n});\n```\n\n##### 支援度\n\n如果要看看當前的瀏覽器是否有支援 CSS variable 的話，可以用 `CSS.supports` 的語法來檢測。\n\n`CSS.supports('(--css: variables)')` `CSS.supports('not (--css: variables)')`\n\n### 之後的挑戰\n\n因為管理變數的方式越來越多了，也有可能在 javascript 對變數進行設值的動作，所以在控制這些變數時我們應該要更小心一點。\n\n- 變數的宣告統一處理：全域變數統一放在一個檔案或資料夾當中，之後會比較方便處理，如果是宣告 css variable 也一樣。\n- 如果變數是為了讓 js 設值，可以試著加上前綴當作標記，例如：`--js-pageX` 等等。\n\n## 結論\n\n這篇文章介紹了 CSS variable 使用方式與場景，之前我也覺得 css variable 很彆扭，不但寫起來醜不拉機，而且也沒有相對應的函數操作。\n\n不過一旦理解 CSS variable 就是 custom property 的概念的時候，就會發現一些 CSS 以往無法突破的可能性。我們沒有必要一定要對 SASS 或是 CSS variable 做取捨，我們甚至可以將兩者搭配使用，做出一些以往無法達到的強大效果。\n","slug":"css-variable","published":1,"updated":"2016-11-14T12:07:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p6l000db75t203fts95","content":"<p>之前寫過了一篇關於自己對 css variable 的想法，原本對這個屬性沒有抱持著太大的期待，自己用習慣了 SASS 變數也覺得這個 css variable 反而像個彆腳的 system，不過如果你也是這樣想的人，可以參考這篇文章 <a href=\"https://developers.google.com/web/updates/2016/02/css-variables-why-should-you-care\" target=\"_blank\" rel=\"external\">Why should you care Css variables</a></p>\n<p>css 的變數已經出來有一段期間了，瀏覽器的支援程度還不算太糟。或許各位都曾經想過，這些變數的功能在 SASS 上幾乎都做得到，而且搭配 SASS 的 function 以及 SASS 的型別（list map）變數的使用彈性更為強大。</p>\n<p>不過這邊想要跟大家分享的是，css variable 真正亮眼的地方在哪裡。</p>\n<p>這篇文章會假設大家已經有一些 css variable 的基礎。</p>\n<p>附帶一提，這篇文章沒有很全面性的寫出如何使用 CSS variable，所以有任何建議都歡迎提出來，之後也會找時間來重新寫一篇比較全面性的文章。</p>\n<h3 id=\"支援度\"><a href=\"#支援度\" class=\"headerlink\" title=\"支援度\"></a>支援度</h3><table>\n<thead>\n<tr>\n<th>Browser</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Chrome</td>\n<td>49</td>\n</tr>\n<tr>\n<td>Firefox</td>\n<td>42</td>\n</tr>\n<tr>\n<td>Safari</td>\n<td>9.1</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"custom-property\"><a href=\"#custom-property\" class=\"headerlink\" title=\"custom property\"></a>custom property</h3><blockquote>\n<p><strong>只有在你讓他表現得像個 property 的時候</strong>，他才會比一般的預處理器強大</p>\n</blockquote>\n<p>首先要澄清的一點是，在 <a href=\"https://drafts.csswg.org/css-variables/\" target=\"_blank\" rel=\"external\">CSS 的 spec</a> 當中，variable 其實叫做 <code>custom property</code>。這是什麼意思？變數跟 property 搞得我好混亂！</p>\n<p>不要著急，意思就是在使用 css variable 的時候，我們應該把他們想成一般的 css 屬性使用，而非一般的變數而已。以下就會來介紹一些有關 css variable 的使用。</p>\n<h3 id=\"為什麼你要用-CSS-Variable\"><a href=\"#為什麼你要用-CSS-Variable\" class=\"headerlink\" title=\"為什麼你要用 CSS Variable\"></a>為什麼你要用 CSS Variable</h3><ul>\n<li>你用這些屬性<strong>不需要一個預處理器</strong>。</li>\n<li>可以用 initial inherit 的方式建立階層</li>\n<li><strong>瀏覽器會在需要的時候重新 render</strong></li>\n<li>你可以訪問並且<strong>用JavaScript操縱它們（等等會講到）</strong></li>\n</ul>\n<h4 id=\"property-特性\"><a href=\"#property-特性\" class=\"headerlink\" title=\"property 特性\"></a>property 特性</h4><p>既然是 css property 就一定會有以下幾個特性：</p>\n<ul>\n<li>有所謂的 <code>initial</code> <code>inherit</code> 的值可以使用</li>\n<li>呼叫的方式是 <code>var(--variable-name)</code></li>\n<li><strong>能夠放在 <code>inline-style</code> 裡面</strong></li>\n<li><strong>可以用 js 取值、設值</strong></li>\n</ul>\n<p>其中，最大的亮點在於 inline-style 跟能夠與 js 搭配取值與設值。這是跟原本 SASS, LESS 等 CSS 預處理器最大的不同之處，也讓 CSS 具備了新的可能性，就讓我們來看一些範例吧！</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">:root &#123;</div><div class=\"line\">  --mainColor: <span class=\"number\">#abc</span>;</div><div class=\"line\">  --subColor: <span class=\"number\">#ccc</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: var(--mainColor);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在這邊 <code>:root</code> 所宣告的元素會繼承到所有的元素當中，這就是 <code>custom property</code> 的特性。</p>\n<h4 id=\"inline-style\"><a href=\"#inline-style\" class=\"headerlink\" title=\"inline-style\"></a>inline-style</h4><p>因為是 property，所以當然可以像這樣寫。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: var(--mainColor);\"</span>&gt;</span></div><div class=\"line\">  Hello, world</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>這看起來的確不怎麼稀奇，因為同樣的事情也可以用 class 跟 SCSS 變數的方式來達成，不過這讓我們在寫 inline style 的時候又多了一份可能性。</p>\n<h5 id=\"react-inline-style\"><a href=\"#react-inline-style\" class=\"headerlink\" title=\"react inline style\"></a>react inline style</h5><p>例如在 react 當中，我們可能會需要寫一些 inline style，但是顏色的制定因為跳脫了 SCSS 的控制，常常顯得很彆扭，要嘛就是直接打上顏色碼，之後要修改的時候再捲起袖子慢慢改；或者用 js 另外保存一份顏色的變數表；最好的方法可能是幫每一個顏色變數賦予一個 class。</p>\n<p>現在有了 css variable 我們可以很方便的使用。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> styles = &#123;</div><div class=\"line\">  <span class=\"attr\">heading</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">fontSize</span>: <span class=\"string\">'14px'</span>,</div><div class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">'var(--mainColor)'</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">warn</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">'var(--warnColor)'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> heading = <span class=\"function\">(<span class=\"params\">&#123;title&#125;</span>) =&gt;</span> &lt;h1 style=&#123;styles.heading&#125;&gt;&#123;title&#125;&lt;<span class=\"regexp\">/h1&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>本篇文章只聚焦在介紹 css variable，事實上也有其他優秀的 react style 管理方式</strong></p>\n<h4 id=\"grid\"><a href=\"#grid\" class=\"headerlink\" title=\"grid\"></a>grid</h4><p>設定 gutter，我們現在可以用 css variable 的方式來做到，也就是說，我們可以用 <code>@media query</code> 的方式來幫變數設值，這是一般預處理器做不到的事情，</p>\n<h4 id=\"js-的控制\"><a href=\"#js-的控制\" class=\"headerlink\" title=\"js 的控制\"></a>js 的控制</h4><p>透過 javascript 的操作，我們可以很輕鬆的幫 css 變數設值或取值，來達到 view 跟 js 分離的效果。例如我們有一些效果想要透過 js 來取值，並傳給 css。一般來說，我們可能會透過 javascript 做計算之後，再把計算後的值，用 inline style 呈現。</p>\n<p>但這樣子有可能發生一些情形：</p>\n<ul>\n<li>這個值可能不是我想要的，或是我也想要自己對值做一些操作。這樣一來就要重新修改 javascript 的程式碼，非常麻煩。</li>\n<li>因為是用 inline style 設值，所以 CSS 無能為力。</li>\n</ul>\n<p>有了 css variable 之後，設值、取值非常的方便。</p>\n<h5 id=\"取值\"><a href=\"#取值\" class=\"headerlink\" title=\"取值\"></a>取值</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTMLElement.style.getPropertyValue(<span class=\"string\">'--mainColor'</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"設值\"><a href=\"#設值\" class=\"headerlink\" title=\"設值\"></a>設值</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTMLElement.style.setProperty(<span class=\"string\">'--mainColor'</span>, <span class=\"string\">'#abc'</span>);</div></pre></td></tr></table></figure>\n<p>所以，我們當然也可以套用事件註冊器，讓有興趣的數值注入到我們的變數之中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"comment\">// some HTMLElement;</span></div><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'mousedown'</span>, e =&gt; &#123;</div><div class=\"line\">  element.style.setProperty(<span class=\"string\">'--pageX'</span>, e.pageX);</div><div class=\"line\">  element.style.setProperty(<span class=\"string\">'--pageY'</span>, e.pageY);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h5 id=\"支援度-1\"><a href=\"#支援度-1\" class=\"headerlink\" title=\"支援度\"></a>支援度</h5><p>如果要看看當前的瀏覽器是否有支援 CSS variable 的話，可以用 <code>CSS.supports</code> 的語法來檢測。</p>\n<p><code>CSS.supports(&#39;(--css: variables)&#39;)</code> <code>CSS.supports(&#39;not (--css: variables)&#39;)</code></p>\n<h3 id=\"之後的挑戰\"><a href=\"#之後的挑戰\" class=\"headerlink\" title=\"之後的挑戰\"></a>之後的挑戰</h3><p>因為管理變數的方式越來越多了，也有可能在 javascript 對變數進行設值的動作，所以在控制這些變數時我們應該要更小心一點。</p>\n<ul>\n<li>變數的宣告統一處理：全域變數統一放在一個檔案或資料夾當中，之後會比較方便處理，如果是宣告 css variable 也一樣。</li>\n<li>如果變數是為了讓 js 設值，可以試著加上前綴當作標記，例如：<code>--js-pageX</code> 等等。</li>\n</ul>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>這篇文章介紹了 CSS variable 使用方式與場景，之前我也覺得 css variable 很彆扭，不但寫起來醜不拉機，而且也沒有相對應的函數操作。</p>\n<p>不過一旦理解 CSS variable 就是 custom property 的概念的時候，就會發現一些 CSS 以往無法突破的可能性。我們沒有必要一定要對 SASS 或是 CSS variable 做取捨，我們甚至可以將兩者搭配使用，做出一些以往無法達到的強大效果。</p>\n","excerpt":"","more":"<p>之前寫過了一篇關於自己對 css variable 的想法，原本對這個屬性沒有抱持著太大的期待，自己用習慣了 SASS 變數也覺得這個 css variable 反而像個彆腳的 system，不過如果你也是這樣想的人，可以參考這篇文章 <a href=\"https://developers.google.com/web/updates/2016/02/css-variables-why-should-you-care\">Why should you care Css variables</a></p>\n<p>css 的變數已經出來有一段期間了，瀏覽器的支援程度還不算太糟。或許各位都曾經想過，這些變數的功能在 SASS 上幾乎都做得到，而且搭配 SASS 的 function 以及 SASS 的型別（list map）變數的使用彈性更為強大。</p>\n<p>不過這邊想要跟大家分享的是，css variable 真正亮眼的地方在哪裡。</p>\n<p>這篇文章會假設大家已經有一些 css variable 的基礎。</p>\n<p>附帶一提，這篇文章沒有很全面性的寫出如何使用 CSS variable，所以有任何建議都歡迎提出來，之後也會找時間來重新寫一篇比較全面性的文章。</p>\n<h3 id=\"支援度\"><a href=\"#支援度\" class=\"headerlink\" title=\"支援度\"></a>支援度</h3><table>\n<thead>\n<tr>\n<th>Browser</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Chrome</td>\n<td>49</td>\n</tr>\n<tr>\n<td>Firefox</td>\n<td>42</td>\n</tr>\n<tr>\n<td>Safari</td>\n<td>9.1</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"custom-property\"><a href=\"#custom-property\" class=\"headerlink\" title=\"custom property\"></a>custom property</h3><blockquote>\n<p><strong>只有在你讓他表現得像個 property 的時候</strong>，他才會比一般的預處理器強大</p>\n</blockquote>\n<p>首先要澄清的一點是，在 <a href=\"https://drafts.csswg.org/css-variables/\">CSS 的 spec</a> 當中，variable 其實叫做 <code>custom property</code>。這是什麼意思？變數跟 property 搞得我好混亂！</p>\n<p>不要著急，意思就是在使用 css variable 的時候，我們應該把他們想成一般的 css 屬性使用，而非一般的變數而已。以下就會來介紹一些有關 css variable 的使用。</p>\n<h3 id=\"為什麼你要用-CSS-Variable\"><a href=\"#為什麼你要用-CSS-Variable\" class=\"headerlink\" title=\"為什麼你要用 CSS Variable\"></a>為什麼你要用 CSS Variable</h3><ul>\n<li>你用這些屬性<strong>不需要一個預處理器</strong>。</li>\n<li>可以用 initial inherit 的方式建立階層</li>\n<li><strong>瀏覽器會在需要的時候重新 render</strong></li>\n<li>你可以訪問並且<strong>用JavaScript操縱它們（等等會講到）</strong></li>\n</ul>\n<h4 id=\"property-特性\"><a href=\"#property-特性\" class=\"headerlink\" title=\"property 特性\"></a>property 特性</h4><p>既然是 css property 就一定會有以下幾個特性：</p>\n<ul>\n<li>有所謂的 <code>initial</code> <code>inherit</code> 的值可以使用</li>\n<li>呼叫的方式是 <code>var(--variable-name)</code></li>\n<li><strong>能夠放在 <code>inline-style</code> 裡面</strong></li>\n<li><strong>可以用 js 取值、設值</strong></li>\n</ul>\n<p>其中，最大的亮點在於 inline-style 跟能夠與 js 搭配取值與設值。這是跟原本 SASS, LESS 等 CSS 預處理器最大的不同之處，也讓 CSS 具備了新的可能性，就讓我們來看一些範例吧！</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">:root &#123;</div><div class=\"line\">  --mainColor: <span class=\"number\">#abc</span>;</div><div class=\"line\">  --subColor: <span class=\"number\">#ccc</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: var(--mainColor);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在這邊 <code>:root</code> 所宣告的元素會繼承到所有的元素當中，這就是 <code>custom property</code> 的特性。</p>\n<h4 id=\"inline-style\"><a href=\"#inline-style\" class=\"headerlink\" title=\"inline-style\"></a>inline-style</h4><p>因為是 property，所以當然可以像這樣寫。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: var(--mainColor);\"</span>&gt;</span></div><div class=\"line\">  Hello, world</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>這看起來的確不怎麼稀奇，因為同樣的事情也可以用 class 跟 SCSS 變數的方式來達成，不過這讓我們在寫 inline style 的時候又多了一份可能性。</p>\n<h5 id=\"react-inline-style\"><a href=\"#react-inline-style\" class=\"headerlink\" title=\"react inline style\"></a>react inline style</h5><p>例如在 react 當中，我們可能會需要寫一些 inline style，但是顏色的制定因為跳脫了 SCSS 的控制，常常顯得很彆扭，要嘛就是直接打上顏色碼，之後要修改的時候再捲起袖子慢慢改；或者用 js 另外保存一份顏色的變數表；最好的方法可能是幫每一個顏色變數賦予一個 class。</p>\n<p>現在有了 css variable 我們可以很方便的使用。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> styles = &#123;</div><div class=\"line\">  <span class=\"attr\">heading</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">fontSize</span>: <span class=\"string\">'14px'</span>,</div><div class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">'var(--mainColor)'</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">warn</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">'var(--warnColor)'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> heading = <span class=\"function\">(<span class=\"params\">&#123;title&#125;</span>) =&gt;</span> &lt;h1 style=&#123;styles.heading&#125;&gt;&#123;title&#125;&lt;<span class=\"regexp\">/h1&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>本篇文章只聚焦在介紹 css variable，事實上也有其他優秀的 react style 管理方式</strong></p>\n<h4 id=\"grid\"><a href=\"#grid\" class=\"headerlink\" title=\"grid\"></a>grid</h4><p>設定 gutter，我們現在可以用 css variable 的方式來做到，也就是說，我們可以用 <code>@media query</code> 的方式來幫變數設值，這是一般預處理器做不到的事情，</p>\n<h4 id=\"js-的控制\"><a href=\"#js-的控制\" class=\"headerlink\" title=\"js 的控制\"></a>js 的控制</h4><p>透過 javascript 的操作，我們可以很輕鬆的幫 css 變數設值或取值，來達到 view 跟 js 分離的效果。例如我們有一些效果想要透過 js 來取值，並傳給 css。一般來說，我們可能會透過 javascript 做計算之後，再把計算後的值，用 inline style 呈現。</p>\n<p>但這樣子有可能發生一些情形：</p>\n<ul>\n<li>這個值可能不是我想要的，或是我也想要自己對值做一些操作。這樣一來就要重新修改 javascript 的程式碼，非常麻煩。</li>\n<li>因為是用 inline style 設值，所以 CSS 無能為力。</li>\n</ul>\n<p>有了 css variable 之後，設值、取值非常的方便。</p>\n<h5 id=\"取值\"><a href=\"#取值\" class=\"headerlink\" title=\"取值\"></a>取值</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTMLElement.style.getPropertyValue(<span class=\"string\">'--mainColor'</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"設值\"><a href=\"#設值\" class=\"headerlink\" title=\"設值\"></a>設值</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTMLElement.style.setProperty(<span class=\"string\">'--mainColor'</span>, <span class=\"string\">'#abc'</span>);</div></pre></td></tr></table></figure>\n<p>所以，我們當然也可以套用事件註冊器，讓有興趣的數值注入到我們的變數之中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"comment\">// some HTMLElement;</span></div><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'mousedown'</span>, e =&gt; &#123;</div><div class=\"line\">  element.style.setProperty(<span class=\"string\">'--pageX'</span>, e.pageX);</div><div class=\"line\">  element.style.setProperty(<span class=\"string\">'--pageY'</span>, e.pageY);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h5 id=\"支援度-1\"><a href=\"#支援度-1\" class=\"headerlink\" title=\"支援度\"></a>支援度</h5><p>如果要看看當前的瀏覽器是否有支援 CSS variable 的話，可以用 <code>CSS.supports</code> 的語法來檢測。</p>\n<p><code>CSS.supports(&#39;(--css: variables)&#39;)</code> <code>CSS.supports(&#39;not (--css: variables)&#39;)</code></p>\n<h3 id=\"之後的挑戰\"><a href=\"#之後的挑戰\" class=\"headerlink\" title=\"之後的挑戰\"></a>之後的挑戰</h3><p>因為管理變數的方式越來越多了，也有可能在 javascript 對變數進行設值的動作，所以在控制這些變數時我們應該要更小心一點。</p>\n<ul>\n<li>變數的宣告統一處理：全域變數統一放在一個檔案或資料夾當中，之後會比較方便處理，如果是宣告 css variable 也一樣。</li>\n<li>如果變數是為了讓 js 設值，可以試著加上前綴當作標記，例如：<code>--js-pageX</code> 等等。</li>\n</ul>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>這篇文章介紹了 CSS variable 使用方式與場景，之前我也覺得 css variable 很彆扭，不但寫起來醜不拉機，而且也沒有相對應的函數操作。</p>\n<p>不過一旦理解 CSS variable 就是 custom property 的概念的時候，就會發現一些 CSS 以往無法突破的可能性。我們沒有必要一定要對 SASS 或是 CSS variable 做取捨，我們甚至可以將兩者搭配使用，做出一些以往無法達到的強大效果。</p>\n"},{"title":"frontend collection - 5/23","date":"2016-11-14T11:45:21.000Z","_content":"\n## 這禮拜發現的新東西\n\n這個禮拜在思考關於重構的東西，在前端還可以怎麼實踐。css 的部分已經有大致的雛形出來了，把相關的註解跟文件寫完之後再和大家分享心得。\n\n### Get your `../../` out\n\n[reference](http://davidboyne.co.uk/2016/04/29/react-webpack-gem.html)\n\ncss 部分重構完之後，再來就是要對 js 下手了。目前比較困擾的幾個點有：\n\n1. component 初期的部分比較亂\n2. 有些 flux、有些 redux\n\n再來是我認為最麻煩的，就是路徑管理的問題了，因為檔案裡面有太多類似的 `../..` 出現，導致之後要對檔案做搬遷的時候還要全部重改一次，感覺非常的費工費時，也是讓人不敢輕易重構一大原因。\n\n那時候第一個想法是，「不然我把全部的檔案存成一張路由表好了。」，不是 import 檔案本身，而是每次要 import 時，都到這個路由表去拿路徑，不但方便，而且每次對檔案做搬遷時，我只要維護好這張路由表就了。不過這個想法還沒有實作過，所以可能不是好方法也說不定...。\n\n\n再來發現的第二個工具是`modulesDirectories`，主要是幫你把 root 定義好，每次呼叫 component 時都是以 root 當作起點而非檔案本身。\n\n以 sudo 的檔案為例\n\n```js\nrequire('../ui/comment_reply.js');\nimport h from '../utils/sudo_helper/dom.js';\nconst actionList = {\n\treply: 'reply',\n\tedit: 'edit'\n};\n\nimport jobsIndex from '../reducers/pages/JobsIndex.js';\nimport App from '../containers/jobs_index.js';\nimport configureStore from '../stores/JobSearchStore.js';\n\nvar Checkbox = require('../components/checkbox');\nvar Slider = require('../components/slider.js');\nvar TextInput = require('../components/text_input.js');\n```\n 加入 `modulesDirectories` 之後，我們可以這樣寫：\n\n```js\nrequire('ui/comment_reply.js');\nimport h from 'utils/sudo_helper/dom.js'\n\nimport jobIndex from 'reducers/pages/JobIndex';\nimport App from 'containers/jobs_index';\nimport configureStore from 'stores/JobSearchStore';\n```\n\n這樣 component 搬遷的時候，不會因為相對路徑改變的關係，而還要全部重寫一次，重構的意願也相對提高了。\n\n### [idiomatic-css](https://github.com/necolas/idiomatic-css/tree/master/translations/zh-TW)\n\n最近一直在研究如何讓 css 的易讀性更高，並且更好做維護，目前如果搭配 webpack 的話，常見的方法有：\n\n1. css-module\n2. postCss\n3. radium\n\n這些工具搭配 react 一起使用，其實可以很有效地解決 namespace 的問題。\n\n不過主站目前想要先解決的是變數的統一命名，及 css 的規範。這部分規範好了之後，css 的管理相對也會變得簡單許多。\n\n### [code smell in css](http://csswizardry.com/2012/11/code-smells-in-css/)\n\n這篇文章介紹了很多關於 css 的 `smell code`。幾個比較重要的大概念：\n\n1. 避免 magic number\n2. 盡量讓 class 是 immutable\n3. 利用權重的技巧，而不是過度使用 important\n4. selector 盡量簡單\n\n順便來複習一下 [selector](http://www.w3schools.com/cssref/css_selectors.asp) 的語法吧！除了用 class 來當做 selector 之外還有很多其他實用的 selector 可以使用！\n像是 input 就是一個非常好使用 attribute selector 的例子：\n\n```scss\n.sudo-input {\n  input[type=\"text\"] {\n    // text style\n  }\n\n  input[type=\"submit\"] {\n    // submit style\n  }\n\n  input[type=\"number\"] {\n   // ...\n  }\n}\n\n```\n這樣不僅語意清楚，也可以省下不必要的 class。\n","source":"_posts/frontend-weekly.md","raw":"---\ntitle: frontend collection - 5/23\ncategories: 前端週刊\ntags:\n  - react\n  - webpack\ndate: 2016-11-14 19:45:21\n---\n\n## 這禮拜發現的新東西\n\n這個禮拜在思考關於重構的東西，在前端還可以怎麼實踐。css 的部分已經有大致的雛形出來了，把相關的註解跟文件寫完之後再和大家分享心得。\n\n### Get your `../../` out\n\n[reference](http://davidboyne.co.uk/2016/04/29/react-webpack-gem.html)\n\ncss 部分重構完之後，再來就是要對 js 下手了。目前比較困擾的幾個點有：\n\n1. component 初期的部分比較亂\n2. 有些 flux、有些 redux\n\n再來是我認為最麻煩的，就是路徑管理的問題了，因為檔案裡面有太多類似的 `../..` 出現，導致之後要對檔案做搬遷的時候還要全部重改一次，感覺非常的費工費時，也是讓人不敢輕易重構一大原因。\n\n那時候第一個想法是，「不然我把全部的檔案存成一張路由表好了。」，不是 import 檔案本身，而是每次要 import 時，都到這個路由表去拿路徑，不但方便，而且每次對檔案做搬遷時，我只要維護好這張路由表就了。不過這個想法還沒有實作過，所以可能不是好方法也說不定...。\n\n\n再來發現的第二個工具是`modulesDirectories`，主要是幫你把 root 定義好，每次呼叫 component 時都是以 root 當作起點而非檔案本身。\n\n以 sudo 的檔案為例\n\n```js\nrequire('../ui/comment_reply.js');\nimport h from '../utils/sudo_helper/dom.js';\nconst actionList = {\n\treply: 'reply',\n\tedit: 'edit'\n};\n\nimport jobsIndex from '../reducers/pages/JobsIndex.js';\nimport App from '../containers/jobs_index.js';\nimport configureStore from '../stores/JobSearchStore.js';\n\nvar Checkbox = require('../components/checkbox');\nvar Slider = require('../components/slider.js');\nvar TextInput = require('../components/text_input.js');\n```\n 加入 `modulesDirectories` 之後，我們可以這樣寫：\n\n```js\nrequire('ui/comment_reply.js');\nimport h from 'utils/sudo_helper/dom.js'\n\nimport jobIndex from 'reducers/pages/JobIndex';\nimport App from 'containers/jobs_index';\nimport configureStore from 'stores/JobSearchStore';\n```\n\n這樣 component 搬遷的時候，不會因為相對路徑改變的關係，而還要全部重寫一次，重構的意願也相對提高了。\n\n### [idiomatic-css](https://github.com/necolas/idiomatic-css/tree/master/translations/zh-TW)\n\n最近一直在研究如何讓 css 的易讀性更高，並且更好做維護，目前如果搭配 webpack 的話，常見的方法有：\n\n1. css-module\n2. postCss\n3. radium\n\n這些工具搭配 react 一起使用，其實可以很有效地解決 namespace 的問題。\n\n不過主站目前想要先解決的是變數的統一命名，及 css 的規範。這部分規範好了之後，css 的管理相對也會變得簡單許多。\n\n### [code smell in css](http://csswizardry.com/2012/11/code-smells-in-css/)\n\n這篇文章介紹了很多關於 css 的 `smell code`。幾個比較重要的大概念：\n\n1. 避免 magic number\n2. 盡量讓 class 是 immutable\n3. 利用權重的技巧，而不是過度使用 important\n4. selector 盡量簡單\n\n順便來複習一下 [selector](http://www.w3schools.com/cssref/css_selectors.asp) 的語法吧！除了用 class 來當做 selector 之外還有很多其他實用的 selector 可以使用！\n像是 input 就是一個非常好使用 attribute selector 的例子：\n\n```scss\n.sudo-input {\n  input[type=\"text\"] {\n    // text style\n  }\n\n  input[type=\"submit\"] {\n    // submit style\n  }\n\n  input[type=\"number\"] {\n   // ...\n  }\n}\n\n```\n這樣不僅語意清楚，也可以省下不必要的 class。\n","slug":"frontend-weekly","published":1,"updated":"2017-02-19T11:16:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p6q000eb75tsgx722k1","content":"<h2 id=\"這禮拜發現的新東西\"><a href=\"#這禮拜發現的新東西\" class=\"headerlink\" title=\"這禮拜發現的新東西\"></a>這禮拜發現的新東西</h2><p>這個禮拜在思考關於重構的東西，在前端還可以怎麼實踐。css 的部分已經有大致的雛形出來了，把相關的註解跟文件寫完之後再和大家分享心得。</p>\n<h3 id=\"Get-your-out\"><a href=\"#Get-your-out\" class=\"headerlink\" title=\"Get your ../../ out\"></a>Get your <code>../../</code> out</h3><p><a href=\"http://davidboyne.co.uk/2016/04/29/react-webpack-gem.html\" target=\"_blank\" rel=\"external\">reference</a></p>\n<p>css 部分重構完之後，再來就是要對 js 下手了。目前比較困擾的幾個點有：</p>\n<ol>\n<li>component 初期的部分比較亂</li>\n<li>有些 flux、有些 redux</li>\n</ol>\n<p>再來是我認為最麻煩的，就是路徑管理的問題了，因為檔案裡面有太多類似的 <code>../..</code> 出現，導致之後要對檔案做搬遷的時候還要全部重改一次，感覺非常的費工費時，也是讓人不敢輕易重構一大原因。</p>\n<p>那時候第一個想法是，「不然我把全部的檔案存成一張路由表好了。」，不是 import 檔案本身，而是每次要 import 時，都到這個路由表去拿路徑，不但方便，而且每次對檔案做搬遷時，我只要維護好這張路由表就了。不過這個想法還沒有實作過，所以可能不是好方法也說不定…。</p>\n<p>再來發現的第二個工具是<code>modulesDirectories</code>，主要是幫你把 root 定義好，每次呼叫 component 時都是以 root 當作起點而非檔案本身。</p>\n<p>以 sudo 的檔案為例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'../ui/comment_reply.js'</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> h <span class=\"keyword\">from</span> <span class=\"string\">'../utils/sudo_helper/dom.js'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> actionList = &#123;</div><div class=\"line\">\t<span class=\"attr\">reply</span>: <span class=\"string\">'reply'</span>,</div><div class=\"line\">\t<span class=\"attr\">edit</span>: <span class=\"string\">'edit'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> jobsIndex <span class=\"keyword\">from</span> <span class=\"string\">'../reducers/pages/JobsIndex.js'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'../containers/jobs_index.js'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> configureStore <span class=\"keyword\">from</span> <span class=\"string\">'../stores/JobSearchStore.js'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Checkbox = <span class=\"built_in\">require</span>(<span class=\"string\">'../components/checkbox'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> Slider = <span class=\"built_in\">require</span>(<span class=\"string\">'../components/slider.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> TextInput = <span class=\"built_in\">require</span>(<span class=\"string\">'../components/text_input.js'</span>);</div></pre></td></tr></table></figure>\n<p> 加入 <code>modulesDirectories</code> 之後，我們可以這樣寫：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'ui/comment_reply.js'</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> h <span class=\"keyword\">from</span> <span class=\"string\">'utils/sudo_helper/dom.js'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> jobIndex <span class=\"keyword\">from</span> <span class=\"string\">'reducers/pages/JobIndex'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'containers/jobs_index'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> configureStore <span class=\"keyword\">from</span> <span class=\"string\">'stores/JobSearchStore'</span>;</div></pre></td></tr></table></figure>\n<p>這樣 component 搬遷的時候，不會因為相對路徑改變的關係，而還要全部重寫一次，重構的意願也相對提高了。</p>\n<h3 id=\"idiomatic-css\"><a href=\"#idiomatic-css\" class=\"headerlink\" title=\"idiomatic-css\"></a><a href=\"https://github.com/necolas/idiomatic-css/tree/master/translations/zh-TW\" target=\"_blank\" rel=\"external\">idiomatic-css</a></h3><p>最近一直在研究如何讓 css 的易讀性更高，並且更好做維護，目前如果搭配 webpack 的話，常見的方法有：</p>\n<ol>\n<li>css-module</li>\n<li>postCss</li>\n<li>radium</li>\n</ol>\n<p>這些工具搭配 react 一起使用，其實可以很有效地解決 namespace 的問題。</p>\n<p>不過主站目前想要先解決的是變數的統一命名，及 css 的規範。這部分規範好了之後，css 的管理相對也會變得簡單許多。</p>\n<h3 id=\"code-smell-in-css\"><a href=\"#code-smell-in-css\" class=\"headerlink\" title=\"code smell in css\"></a><a href=\"http://csswizardry.com/2012/11/code-smells-in-css/\" target=\"_blank\" rel=\"external\">code smell in css</a></h3><p>這篇文章介紹了很多關於 css 的 <code>smell code</code>。幾個比較重要的大概念：</p>\n<ol>\n<li>避免 magic number</li>\n<li>盡量讓 class 是 immutable</li>\n<li>利用權重的技巧，而不是過度使用 important</li>\n<li>selector 盡量簡單</li>\n</ol>\n<p>順便來複習一下 <a href=\"http://www.w3schools.com/cssref/css_selectors.asp\" target=\"_blank\" rel=\"external\">selector</a> 的語法吧！除了用 class 來當做 selector 之外還有很多其他實用的 selector 可以使用！<br>像是 input 就是一個非常好使用 attribute selector 的例子：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.sudo-input</span> &#123;</div><div class=\"line\">  <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"text\"]</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// text style</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"submit\"]</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// submit style</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"number\"]</span> &#123;</div><div class=\"line\">   <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這樣不僅語意清楚，也可以省下不必要的 class。</p>\n","excerpt":"","more":"<h2 id=\"這禮拜發現的新東西\"><a href=\"#這禮拜發現的新東西\" class=\"headerlink\" title=\"這禮拜發現的新東西\"></a>這禮拜發現的新東西</h2><p>這個禮拜在思考關於重構的東西，在前端還可以怎麼實踐。css 的部分已經有大致的雛形出來了，把相關的註解跟文件寫完之後再和大家分享心得。</p>\n<h3 id=\"Get-your-out\"><a href=\"#Get-your-out\" class=\"headerlink\" title=\"Get your ../../ out\"></a>Get your <code>../../</code> out</h3><p><a href=\"http://davidboyne.co.uk/2016/04/29/react-webpack-gem.html\">reference</a></p>\n<p>css 部分重構完之後，再來就是要對 js 下手了。目前比較困擾的幾個點有：</p>\n<ol>\n<li>component 初期的部分比較亂</li>\n<li>有些 flux、有些 redux</li>\n</ol>\n<p>再來是我認為最麻煩的，就是路徑管理的問題了，因為檔案裡面有太多類似的 <code>../..</code> 出現，導致之後要對檔案做搬遷的時候還要全部重改一次，感覺非常的費工費時，也是讓人不敢輕易重構一大原因。</p>\n<p>那時候第一個想法是，「不然我把全部的檔案存成一張路由表好了。」，不是 import 檔案本身，而是每次要 import 時，都到這個路由表去拿路徑，不但方便，而且每次對檔案做搬遷時，我只要維護好這張路由表就了。不過這個想法還沒有實作過，所以可能不是好方法也說不定…。</p>\n<p>再來發現的第二個工具是<code>modulesDirectories</code>，主要是幫你把 root 定義好，每次呼叫 component 時都是以 root 當作起點而非檔案本身。</p>\n<p>以 sudo 的檔案為例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'../ui/comment_reply.js'</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> h <span class=\"keyword\">from</span> <span class=\"string\">'../utils/sudo_helper/dom.js'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> actionList = &#123;</div><div class=\"line\">\t<span class=\"attr\">reply</span>: <span class=\"string\">'reply'</span>,</div><div class=\"line\">\t<span class=\"attr\">edit</span>: <span class=\"string\">'edit'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> jobsIndex <span class=\"keyword\">from</span> <span class=\"string\">'../reducers/pages/JobsIndex.js'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'../containers/jobs_index.js'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> configureStore <span class=\"keyword\">from</span> <span class=\"string\">'../stores/JobSearchStore.js'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Checkbox = <span class=\"built_in\">require</span>(<span class=\"string\">'../components/checkbox'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> Slider = <span class=\"built_in\">require</span>(<span class=\"string\">'../components/slider.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> TextInput = <span class=\"built_in\">require</span>(<span class=\"string\">'../components/text_input.js'</span>);</div></pre></td></tr></table></figure>\n<p> 加入 <code>modulesDirectories</code> 之後，我們可以這樣寫：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'ui/comment_reply.js'</span>);</div><div class=\"line\"><span class=\"keyword\">import</span> h <span class=\"keyword\">from</span> <span class=\"string\">'utils/sudo_helper/dom.js'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> jobIndex <span class=\"keyword\">from</span> <span class=\"string\">'reducers/pages/JobIndex'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'containers/jobs_index'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> configureStore <span class=\"keyword\">from</span> <span class=\"string\">'stores/JobSearchStore'</span>;</div></pre></td></tr></table></figure>\n<p>這樣 component 搬遷的時候，不會因為相對路徑改變的關係，而還要全部重寫一次，重構的意願也相對提高了。</p>\n<h3 id=\"idiomatic-css\"><a href=\"#idiomatic-css\" class=\"headerlink\" title=\"idiomatic-css\"></a><a href=\"https://github.com/necolas/idiomatic-css/tree/master/translations/zh-TW\">idiomatic-css</a></h3><p>最近一直在研究如何讓 css 的易讀性更高，並且更好做維護，目前如果搭配 webpack 的話，常見的方法有：</p>\n<ol>\n<li>css-module</li>\n<li>postCss</li>\n<li>radium</li>\n</ol>\n<p>這些工具搭配 react 一起使用，其實可以很有效地解決 namespace 的問題。</p>\n<p>不過主站目前想要先解決的是變數的統一命名，及 css 的規範。這部分規範好了之後，css 的管理相對也會變得簡單許多。</p>\n<h3 id=\"code-smell-in-css\"><a href=\"#code-smell-in-css\" class=\"headerlink\" title=\"code smell in css\"></a><a href=\"http://csswizardry.com/2012/11/code-smells-in-css/\">code smell in css</a></h3><p>這篇文章介紹了很多關於 css 的 <code>smell code</code>。幾個比較重要的大概念：</p>\n<ol>\n<li>避免 magic number</li>\n<li>盡量讓 class 是 immutable</li>\n<li>利用權重的技巧，而不是過度使用 important</li>\n<li>selector 盡量簡單</li>\n</ol>\n<p>順便來複習一下 <a href=\"http://www.w3schools.com/cssref/css_selectors.asp\">selector</a> 的語法吧！除了用 class 來當做 selector 之外還有很多其他實用的 selector 可以使用！<br>像是 input 就是一個非常好使用 attribute selector 的例子：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.sudo-input</span> &#123;</div><div class=\"line\">  <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"text\"]</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// text style</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"submit\"]</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// submit style</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"number\"]</span> &#123;</div><div class=\"line\">   <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這樣不僅語意清楚，也可以省下不必要的 class。</p>\n"},{"title":"【讀書心得】伊坂幸太郎 - 汽油生活","date":"2016-10-16T07:17:01.000Z","image":"gaslife.jpg","_content":"\n\n## 前言\n\n自從實習生活開始之後已經很久沒有看小說了，不過仔細想想，如果把滑 FB 的時間拿來看書，應該可以偷到不少時間，於是假日心一狠，把之前很想看的小說全部搜刮起來...。但事實告訴我，這種衝動還是得小心啊！噴了 2200 多…，我得好好省吃儉用了。\n\n## 汽油生活 🚗🚕🚙\n\n這次的作品是從一輛汽車的角度出發，這已經不是伊坂第一次嘗試了，《死神系列作》、《夜之國的庫帕》，都是以非人類的角度來作描寫，觀察人類。\n\n這一次的主角是望月一家，有一次的旅程中望月一家載到一位大名鼎鼎的女藝人荒木翠，之後開啟一連串奇怪的事件中。汽車這次的作品中，由於故事中的敘事者都是以第一人稱出發，所以裡頭也有許多關於汽車的品牌跟故事，裡頭中出現的有關於汽車的心聲，也是讓人莞爾一笑的插曲之一。\n\n**新手駕駛反而是安全的，因為一旦開始鬆懈，就是危險的開始。**這是我很喜歡伊坂幸太郎風格的原因之一，他很擅長把這些東西拿進作品裡當作比喻，不管是讓我們思考也好；或是劇情的走向也好，我看得挺過癮的。**\n\n### 喇叭的存在目的 🎺\n\n喇叭似乎只是為了發洩憤怒而存在的。\n\n那為什麼喇叭發出的聲音那麼低俗且刺耳呢？如果汽車出廠時可以對喇叭多用點心，想必也可以增加賣點吧！\n\n而且喇叭聲通常是爭端的來源之一，人類會對這種如突其來的噪音感到煩躁。試著想想喇叭製造的目的，應該是為了提醒行人、前方車輛：「唷，我在這裡哦！唷，前方已經綠燈了哦！」而存在的吧？\n\n雖然喇叭的音量可以由按下的力道調整，但是那種音量還是會嚇到別人，也有可能引起別人不滿。更不用說有時會在路上看見橫行的汽車，喇叭按著不放，似乎只是想用這種方式宣洩自己的不滿而已，根本沒有任何提醒的作用。\n\n為什麼人類那麼喜歡這種原始而粗暴的方式呢？只因為這樣子很爽，發洩情緒的感覺讓自己產生優越感。備而不用是人類最愚蠢的地方。他們覺得也許會用到，所以就把什麼都保留下來。如果這樣一想，喇叭的聲音就應該被調整才對。\n\n如果想要達到「提醒」的作用，應該不需要那麼尖銳的音量才對。\n\n既然車子可以搭配喇叭，那麼行人也應該配戴喇叭，**看到三寶開車或是貪污的政治人物，就應該到他面前吧吧兩下，表達自己微不足道的憤怒**。\n\n### 霸凌二人組\n\n關於霸凌這個觀點巧妙地和伊坂筆下出現的霸凌『野菜組』結合。亨因為跟一般的小孩不同，所以在學校時常常被『野菜組』霸凌。但他並不以為意，因為他知道這是人性下的醜陋，這群人只是因為無聊所以只好用這種方式來欺負別人。亨也習慣這樣的事情，「因為我不討人喜歡，所以大家都霸凌我」。當然伊坂幸太郎是不會讓這種人好過的，故事結尾也巧妙地讓亨返回一擊。（讓我感動的是，當圭一說他下定決心要站出來時，亨說的那句：「加油」）\n\n只要有人跟一般人不同，就會有霸凌的存在，因為暴力讓人感覺很爽。\n\n而且在學校時不用負太多責任不是嗎？有哪個學校會希望自己的學生霸凌？有哪個老師希望自己的班級霸凌？有哪個家長希望自己的小孩霸凌？\n\n所以當霸凌這件事發生，大家採取的動作不是遏止、而是隱瞞，所以他們更加為所欲為，因為不用負責任，而且還有那麼多人在幫你。\n\n### 關於媒體\n\n媒體也常常出現在伊坂的筆下。之前才看過《64》、《虛線的惡意》，都是在說媒體、新聞業下的黑暗面。\n\n但是，這次角度從另外一邊來看。因為這件事更有趣不是嗎？大家都想看，所以就會有人去寫這種報導。然後民眾又可以把罪過全部推給記者，好像自己完全沒有責任似的。那為什麼壹週刊一樣那麼暢銷、為什麼八卦點擊率還是那麼高，民眾對這種報導還不是一樣樂見其成。\n\n所以到底是把媒體搞成這個樣子的？\n\n但是正如人類中有好人跟壞人，記者也有分好記者跟壞記者，這次是介紹好的記者。裡頭的阿玉因為對自己的報導害死了一位棒球選手感到愧疚，所以決定在這次車禍事件讓翠和丹羽遠走高飛，隱居他處。\n\n故事的橋段還有一句，「咦？你怎麼變得那麼乖，這樣怎麼當記者？」當亨純真地問著這句話時不禁笑了出來。\n\n「鏡頭具有抑制對方行為的力量」，所以在拍攝的時候都有種優越感，彷彿自己可以掌握全世界一樣。隱含在生活中的小道理我喜歡伊坂在敘事的過程中，將生活的小道理信手拈來，巧妙無痕地放入小說中的那種氣氛。就好像有人可以自私地害得整條高速公路都塞車一樣、就好像有人會把全世界的號誌燈都當作綠燈一樣。不管怎麼樣，還是有那些對道德無動於衷的人對吧？\n\n伊坂不會把這些道理赤裸裸地說清楚講明白，而是用巧妙的比喻帶過，卻又在故事結束後令人深思。\n\n「就好像媽媽說吃青椒才可以吃甜點那樣嗎？」明明只是一個等價交換的道理，伊坂卻可以依照角色上面的不同，描述出不同的說法。想像這樣的話語從一般的小孩口中說出來，真的在適切不過了！\n\n### 尾聲（お終い）\n\n在小說進入尾聲階段時，亨曾經鼓勵圭一，希望他可以走出被霸凌的陰影，勇敢起身對抗。「那種影片不好玩，所以大家都不會在意的」，然後拿出法蘭克‧札帕的名言出來，說：「人類所嘗試的事情中，有百分之九十九都是失敗，所以失敗是正常的事情」。這句話可以說是老生常談，但是搭配劇情之後，竟然亂熱血一把的。伊坂小說的尾聲，總會讓人意想不到，包括安田太太的帽子、開頭良夫買的青蛙擺飾、殺人埋藏的屍體、牙醫事件、車子最後的下落，都做了一個完美的交代。這次的結局讓人看得十分過癮，還特別將那四台車的第一個字連接變成『お。し。ま。い』\n\n伊坂的小說通常會用一個人物當作代表，引用他說過的名言來貫穿整個故事。\n\n這次的主角是「法蘭克．札帕」是一位歌手，他的生涯我不是很清楚，上了維基百科查了一下，也沒有很明確的資料，所以我就不多做介紹，直接把連結貼給大家看看好了。\n","source":"_posts/gasline.md","raw":"---\ntitle: 【讀書心得】伊坂幸太郎 - 汽油生活\ntags:\n  - 伊坂幸太郎\ncategory: 讀書心得\ndate: 2016-10-16 15:17:01\nimage: gaslife.jpg\n---\n\n\n## 前言\n\n自從實習生活開始之後已經很久沒有看小說了，不過仔細想想，如果把滑 FB 的時間拿來看書，應該可以偷到不少時間，於是假日心一狠，把之前很想看的小說全部搜刮起來...。但事實告訴我，這種衝動還是得小心啊！噴了 2200 多…，我得好好省吃儉用了。\n\n## 汽油生活 🚗🚕🚙\n\n這次的作品是從一輛汽車的角度出發，這已經不是伊坂第一次嘗試了，《死神系列作》、《夜之國的庫帕》，都是以非人類的角度來作描寫，觀察人類。\n\n這一次的主角是望月一家，有一次的旅程中望月一家載到一位大名鼎鼎的女藝人荒木翠，之後開啟一連串奇怪的事件中。汽車這次的作品中，由於故事中的敘事者都是以第一人稱出發，所以裡頭也有許多關於汽車的品牌跟故事，裡頭中出現的有關於汽車的心聲，也是讓人莞爾一笑的插曲之一。\n\n**新手駕駛反而是安全的，因為一旦開始鬆懈，就是危險的開始。**這是我很喜歡伊坂幸太郎風格的原因之一，他很擅長把這些東西拿進作品裡當作比喻，不管是讓我們思考也好；或是劇情的走向也好，我看得挺過癮的。**\n\n### 喇叭的存在目的 🎺\n\n喇叭似乎只是為了發洩憤怒而存在的。\n\n那為什麼喇叭發出的聲音那麼低俗且刺耳呢？如果汽車出廠時可以對喇叭多用點心，想必也可以增加賣點吧！\n\n而且喇叭聲通常是爭端的來源之一，人類會對這種如突其來的噪音感到煩躁。試著想想喇叭製造的目的，應該是為了提醒行人、前方車輛：「唷，我在這裡哦！唷，前方已經綠燈了哦！」而存在的吧？\n\n雖然喇叭的音量可以由按下的力道調整，但是那種音量還是會嚇到別人，也有可能引起別人不滿。更不用說有時會在路上看見橫行的汽車，喇叭按著不放，似乎只是想用這種方式宣洩自己的不滿而已，根本沒有任何提醒的作用。\n\n為什麼人類那麼喜歡這種原始而粗暴的方式呢？只因為這樣子很爽，發洩情緒的感覺讓自己產生優越感。備而不用是人類最愚蠢的地方。他們覺得也許會用到，所以就把什麼都保留下來。如果這樣一想，喇叭的聲音就應該被調整才對。\n\n如果想要達到「提醒」的作用，應該不需要那麼尖銳的音量才對。\n\n既然車子可以搭配喇叭，那麼行人也應該配戴喇叭，**看到三寶開車或是貪污的政治人物，就應該到他面前吧吧兩下，表達自己微不足道的憤怒**。\n\n### 霸凌二人組\n\n關於霸凌這個觀點巧妙地和伊坂筆下出現的霸凌『野菜組』結合。亨因為跟一般的小孩不同，所以在學校時常常被『野菜組』霸凌。但他並不以為意，因為他知道這是人性下的醜陋，這群人只是因為無聊所以只好用這種方式來欺負別人。亨也習慣這樣的事情，「因為我不討人喜歡，所以大家都霸凌我」。當然伊坂幸太郎是不會讓這種人好過的，故事結尾也巧妙地讓亨返回一擊。（讓我感動的是，當圭一說他下定決心要站出來時，亨說的那句：「加油」）\n\n只要有人跟一般人不同，就會有霸凌的存在，因為暴力讓人感覺很爽。\n\n而且在學校時不用負太多責任不是嗎？有哪個學校會希望自己的學生霸凌？有哪個老師希望自己的班級霸凌？有哪個家長希望自己的小孩霸凌？\n\n所以當霸凌這件事發生，大家採取的動作不是遏止、而是隱瞞，所以他們更加為所欲為，因為不用負責任，而且還有那麼多人在幫你。\n\n### 關於媒體\n\n媒體也常常出現在伊坂的筆下。之前才看過《64》、《虛線的惡意》，都是在說媒體、新聞業下的黑暗面。\n\n但是，這次角度從另外一邊來看。因為這件事更有趣不是嗎？大家都想看，所以就會有人去寫這種報導。然後民眾又可以把罪過全部推給記者，好像自己完全沒有責任似的。那為什麼壹週刊一樣那麼暢銷、為什麼八卦點擊率還是那麼高，民眾對這種報導還不是一樣樂見其成。\n\n所以到底是把媒體搞成這個樣子的？\n\n但是正如人類中有好人跟壞人，記者也有分好記者跟壞記者，這次是介紹好的記者。裡頭的阿玉因為對自己的報導害死了一位棒球選手感到愧疚，所以決定在這次車禍事件讓翠和丹羽遠走高飛，隱居他處。\n\n故事的橋段還有一句，「咦？你怎麼變得那麼乖，這樣怎麼當記者？」當亨純真地問著這句話時不禁笑了出來。\n\n「鏡頭具有抑制對方行為的力量」，所以在拍攝的時候都有種優越感，彷彿自己可以掌握全世界一樣。隱含在生活中的小道理我喜歡伊坂在敘事的過程中，將生活的小道理信手拈來，巧妙無痕地放入小說中的那種氣氛。就好像有人可以自私地害得整條高速公路都塞車一樣、就好像有人會把全世界的號誌燈都當作綠燈一樣。不管怎麼樣，還是有那些對道德無動於衷的人對吧？\n\n伊坂不會把這些道理赤裸裸地說清楚講明白，而是用巧妙的比喻帶過，卻又在故事結束後令人深思。\n\n「就好像媽媽說吃青椒才可以吃甜點那樣嗎？」明明只是一個等價交換的道理，伊坂卻可以依照角色上面的不同，描述出不同的說法。想像這樣的話語從一般的小孩口中說出來，真的在適切不過了！\n\n### 尾聲（お終い）\n\n在小說進入尾聲階段時，亨曾經鼓勵圭一，希望他可以走出被霸凌的陰影，勇敢起身對抗。「那種影片不好玩，所以大家都不會在意的」，然後拿出法蘭克‧札帕的名言出來，說：「人類所嘗試的事情中，有百分之九十九都是失敗，所以失敗是正常的事情」。這句話可以說是老生常談，但是搭配劇情之後，竟然亂熱血一把的。伊坂小說的尾聲，總會讓人意想不到，包括安田太太的帽子、開頭良夫買的青蛙擺飾、殺人埋藏的屍體、牙醫事件、車子最後的下落，都做了一個完美的交代。這次的結局讓人看得十分過癮，還特別將那四台車的第一個字連接變成『お。し。ま。い』\n\n伊坂的小說通常會用一個人物當作代表，引用他說過的名言來貫穿整個故事。\n\n這次的主角是「法蘭克．札帕」是一位歌手，他的生涯我不是很清楚，上了維基百科查了一下，也沒有很明確的資料，所以我就不多做介紹，直接把連結貼給大家看看好了。\n","slug":"gasline","published":1,"updated":"2017-02-19T11:26:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p6t000gb75tw5196ll0","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>自從實習生活開始之後已經很久沒有看小說了，不過仔細想想，如果把滑 FB 的時間拿來看書，應該可以偷到不少時間，於是假日心一狠，把之前很想看的小說全部搜刮起來…。但事實告訴我，這種衝動還是得小心啊！噴了 2200 多…，我得好好省吃儉用了。</p>\n<h2 id=\"汽油生活-🚗🚕🚙\"><a href=\"#汽油生活-🚗🚕🚙\" class=\"headerlink\" title=\"汽油生活 🚗🚕🚙\"></a>汽油生活 🚗🚕🚙</h2><p>這次的作品是從一輛汽車的角度出發，這已經不是伊坂第一次嘗試了，《死神系列作》、《夜之國的庫帕》，都是以非人類的角度來作描寫，觀察人類。</p>\n<p>這一次的主角是望月一家，有一次的旅程中望月一家載到一位大名鼎鼎的女藝人荒木翠，之後開啟一連串奇怪的事件中。汽車這次的作品中，由於故事中的敘事者都是以第一人稱出發，所以裡頭也有許多關於汽車的品牌跟故事，裡頭中出現的有關於汽車的心聲，也是讓人莞爾一笑的插曲之一。</p>\n<p><strong>新手駕駛反而是安全的，因為一旦開始鬆懈，就是危險的開始。</strong>這是我很喜歡伊坂幸太郎風格的原因之一，他很擅長把這些東西拿進作品裡當作比喻，不管是讓我們思考也好；或是劇情的走向也好，我看得挺過癮的。**</p>\n<h3 id=\"喇叭的存在目的-🎺\"><a href=\"#喇叭的存在目的-🎺\" class=\"headerlink\" title=\"喇叭的存在目的 🎺\"></a>喇叭的存在目的 🎺</h3><p>喇叭似乎只是為了發洩憤怒而存在的。</p>\n<p>那為什麼喇叭發出的聲音那麼低俗且刺耳呢？如果汽車出廠時可以對喇叭多用點心，想必也可以增加賣點吧！</p>\n<p>而且喇叭聲通常是爭端的來源之一，人類會對這種如突其來的噪音感到煩躁。試著想想喇叭製造的目的，應該是為了提醒行人、前方車輛：「唷，我在這裡哦！唷，前方已經綠燈了哦！」而存在的吧？</p>\n<p>雖然喇叭的音量可以由按下的力道調整，但是那種音量還是會嚇到別人，也有可能引起別人不滿。更不用說有時會在路上看見橫行的汽車，喇叭按著不放，似乎只是想用這種方式宣洩自己的不滿而已，根本沒有任何提醒的作用。</p>\n<p>為什麼人類那麼喜歡這種原始而粗暴的方式呢？只因為這樣子很爽，發洩情緒的感覺讓自己產生優越感。備而不用是人類最愚蠢的地方。他們覺得也許會用到，所以就把什麼都保留下來。如果這樣一想，喇叭的聲音就應該被調整才對。</p>\n<p>如果想要達到「提醒」的作用，應該不需要那麼尖銳的音量才對。</p>\n<p>既然車子可以搭配喇叭，那麼行人也應該配戴喇叭，<strong>看到三寶開車或是貪污的政治人物，就應該到他面前吧吧兩下，表達自己微不足道的憤怒</strong>。</p>\n<h3 id=\"霸凌二人組\"><a href=\"#霸凌二人組\" class=\"headerlink\" title=\"霸凌二人組\"></a>霸凌二人組</h3><p>關於霸凌這個觀點巧妙地和伊坂筆下出現的霸凌『野菜組』結合。亨因為跟一般的小孩不同，所以在學校時常常被『野菜組』霸凌。但他並不以為意，因為他知道這是人性下的醜陋，這群人只是因為無聊所以只好用這種方式來欺負別人。亨也習慣這樣的事情，「因為我不討人喜歡，所以大家都霸凌我」。當然伊坂幸太郎是不會讓這種人好過的，故事結尾也巧妙地讓亨返回一擊。（讓我感動的是，當圭一說他下定決心要站出來時，亨說的那句：「加油」）</p>\n<p>只要有人跟一般人不同，就會有霸凌的存在，因為暴力讓人感覺很爽。</p>\n<p>而且在學校時不用負太多責任不是嗎？有哪個學校會希望自己的學生霸凌？有哪個老師希望自己的班級霸凌？有哪個家長希望自己的小孩霸凌？</p>\n<p>所以當霸凌這件事發生，大家採取的動作不是遏止、而是隱瞞，所以他們更加為所欲為，因為不用負責任，而且還有那麼多人在幫你。</p>\n<h3 id=\"關於媒體\"><a href=\"#關於媒體\" class=\"headerlink\" title=\"關於媒體\"></a>關於媒體</h3><p>媒體也常常出現在伊坂的筆下。之前才看過《64》、《虛線的惡意》，都是在說媒體、新聞業下的黑暗面。</p>\n<p>但是，這次角度從另外一邊來看。因為這件事更有趣不是嗎？大家都想看，所以就會有人去寫這種報導。然後民眾又可以把罪過全部推給記者，好像自己完全沒有責任似的。那為什麼壹週刊一樣那麼暢銷、為什麼八卦點擊率還是那麼高，民眾對這種報導還不是一樣樂見其成。</p>\n<p>所以到底是把媒體搞成這個樣子的？</p>\n<p>但是正如人類中有好人跟壞人，記者也有分好記者跟壞記者，這次是介紹好的記者。裡頭的阿玉因為對自己的報導害死了一位棒球選手感到愧疚，所以決定在這次車禍事件讓翠和丹羽遠走高飛，隱居他處。</p>\n<p>故事的橋段還有一句，「咦？你怎麼變得那麼乖，這樣怎麼當記者？」當亨純真地問著這句話時不禁笑了出來。</p>\n<p>「鏡頭具有抑制對方行為的力量」，所以在拍攝的時候都有種優越感，彷彿自己可以掌握全世界一樣。隱含在生活中的小道理我喜歡伊坂在敘事的過程中，將生活的小道理信手拈來，巧妙無痕地放入小說中的那種氣氛。就好像有人可以自私地害得整條高速公路都塞車一樣、就好像有人會把全世界的號誌燈都當作綠燈一樣。不管怎麼樣，還是有那些對道德無動於衷的人對吧？</p>\n<p>伊坂不會把這些道理赤裸裸地說清楚講明白，而是用巧妙的比喻帶過，卻又在故事結束後令人深思。</p>\n<p>「就好像媽媽說吃青椒才可以吃甜點那樣嗎？」明明只是一個等價交換的道理，伊坂卻可以依照角色上面的不同，描述出不同的說法。想像這樣的話語從一般的小孩口中說出來，真的在適切不過了！</p>\n<h3 id=\"尾聲（お終い）\"><a href=\"#尾聲（お終い）\" class=\"headerlink\" title=\"尾聲（お終い）\"></a>尾聲（お終い）</h3><p>在小說進入尾聲階段時，亨曾經鼓勵圭一，希望他可以走出被霸凌的陰影，勇敢起身對抗。「那種影片不好玩，所以大家都不會在意的」，然後拿出法蘭克‧札帕的名言出來，說：「人類所嘗試的事情中，有百分之九十九都是失敗，所以失敗是正常的事情」。這句話可以說是老生常談，但是搭配劇情之後，竟然亂熱血一把的。伊坂小說的尾聲，總會讓人意想不到，包括安田太太的帽子、開頭良夫買的青蛙擺飾、殺人埋藏的屍體、牙醫事件、車子最後的下落，都做了一個完美的交代。這次的結局讓人看得十分過癮，還特別將那四台車的第一個字連接變成『お。し。ま。い』</p>\n<p>伊坂的小說通常會用一個人物當作代表，引用他說過的名言來貫穿整個故事。</p>\n<p>這次的主角是「法蘭克．札帕」是一位歌手，他的生涯我不是很清楚，上了維基百科查了一下，也沒有很明確的資料，所以我就不多做介紹，直接把連結貼給大家看看好了。</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>自從實習生活開始之後已經很久沒有看小說了，不過仔細想想，如果把滑 FB 的時間拿來看書，應該可以偷到不少時間，於是假日心一狠，把之前很想看的小說全部搜刮起來…。但事實告訴我，這種衝動還是得小心啊！噴了 2200 多…，我得好好省吃儉用了。</p>\n<h2 id=\"汽油生活-🚗🚕🚙\"><a href=\"#汽油生活-🚗🚕🚙\" class=\"headerlink\" title=\"汽油生活 🚗🚕🚙\"></a>汽油生活 🚗🚕🚙</h2><p>這次的作品是從一輛汽車的角度出發，這已經不是伊坂第一次嘗試了，《死神系列作》、《夜之國的庫帕》，都是以非人類的角度來作描寫，觀察人類。</p>\n<p>這一次的主角是望月一家，有一次的旅程中望月一家載到一位大名鼎鼎的女藝人荒木翠，之後開啟一連串奇怪的事件中。汽車這次的作品中，由於故事中的敘事者都是以第一人稱出發，所以裡頭也有許多關於汽車的品牌跟故事，裡頭中出現的有關於汽車的心聲，也是讓人莞爾一笑的插曲之一。</p>\n<p><strong>新手駕駛反而是安全的，因為一旦開始鬆懈，就是危險的開始。</strong>這是我很喜歡伊坂幸太郎風格的原因之一，他很擅長把這些東西拿進作品裡當作比喻，不管是讓我們思考也好；或是劇情的走向也好，我看得挺過癮的。**</p>\n<h3 id=\"喇叭的存在目的-🎺\"><a href=\"#喇叭的存在目的-🎺\" class=\"headerlink\" title=\"喇叭的存在目的 🎺\"></a>喇叭的存在目的 🎺</h3><p>喇叭似乎只是為了發洩憤怒而存在的。</p>\n<p>那為什麼喇叭發出的聲音那麼低俗且刺耳呢？如果汽車出廠時可以對喇叭多用點心，想必也可以增加賣點吧！</p>\n<p>而且喇叭聲通常是爭端的來源之一，人類會對這種如突其來的噪音感到煩躁。試著想想喇叭製造的目的，應該是為了提醒行人、前方車輛：「唷，我在這裡哦！唷，前方已經綠燈了哦！」而存在的吧？</p>\n<p>雖然喇叭的音量可以由按下的力道調整，但是那種音量還是會嚇到別人，也有可能引起別人不滿。更不用說有時會在路上看見橫行的汽車，喇叭按著不放，似乎只是想用這種方式宣洩自己的不滿而已，根本沒有任何提醒的作用。</p>\n<p>為什麼人類那麼喜歡這種原始而粗暴的方式呢？只因為這樣子很爽，發洩情緒的感覺讓自己產生優越感。備而不用是人類最愚蠢的地方。他們覺得也許會用到，所以就把什麼都保留下來。如果這樣一想，喇叭的聲音就應該被調整才對。</p>\n<p>如果想要達到「提醒」的作用，應該不需要那麼尖銳的音量才對。</p>\n<p>既然車子可以搭配喇叭，那麼行人也應該配戴喇叭，<strong>看到三寶開車或是貪污的政治人物，就應該到他面前吧吧兩下，表達自己微不足道的憤怒</strong>。</p>\n<h3 id=\"霸凌二人組\"><a href=\"#霸凌二人組\" class=\"headerlink\" title=\"霸凌二人組\"></a>霸凌二人組</h3><p>關於霸凌這個觀點巧妙地和伊坂筆下出現的霸凌『野菜組』結合。亨因為跟一般的小孩不同，所以在學校時常常被『野菜組』霸凌。但他並不以為意，因為他知道這是人性下的醜陋，這群人只是因為無聊所以只好用這種方式來欺負別人。亨也習慣這樣的事情，「因為我不討人喜歡，所以大家都霸凌我」。當然伊坂幸太郎是不會讓這種人好過的，故事結尾也巧妙地讓亨返回一擊。（讓我感動的是，當圭一說他下定決心要站出來時，亨說的那句：「加油」）</p>\n<p>只要有人跟一般人不同，就會有霸凌的存在，因為暴力讓人感覺很爽。</p>\n<p>而且在學校時不用負太多責任不是嗎？有哪個學校會希望自己的學生霸凌？有哪個老師希望自己的班級霸凌？有哪個家長希望自己的小孩霸凌？</p>\n<p>所以當霸凌這件事發生，大家採取的動作不是遏止、而是隱瞞，所以他們更加為所欲為，因為不用負責任，而且還有那麼多人在幫你。</p>\n<h3 id=\"關於媒體\"><a href=\"#關於媒體\" class=\"headerlink\" title=\"關於媒體\"></a>關於媒體</h3><p>媒體也常常出現在伊坂的筆下。之前才看過《64》、《虛線的惡意》，都是在說媒體、新聞業下的黑暗面。</p>\n<p>但是，這次角度從另外一邊來看。因為這件事更有趣不是嗎？大家都想看，所以就會有人去寫這種報導。然後民眾又可以把罪過全部推給記者，好像自己完全沒有責任似的。那為什麼壹週刊一樣那麼暢銷、為什麼八卦點擊率還是那麼高，民眾對這種報導還不是一樣樂見其成。</p>\n<p>所以到底是把媒體搞成這個樣子的？</p>\n<p>但是正如人類中有好人跟壞人，記者也有分好記者跟壞記者，這次是介紹好的記者。裡頭的阿玉因為對自己的報導害死了一位棒球選手感到愧疚，所以決定在這次車禍事件讓翠和丹羽遠走高飛，隱居他處。</p>\n<p>故事的橋段還有一句，「咦？你怎麼變得那麼乖，這樣怎麼當記者？」當亨純真地問著這句話時不禁笑了出來。</p>\n<p>「鏡頭具有抑制對方行為的力量」，所以在拍攝的時候都有種優越感，彷彿自己可以掌握全世界一樣。隱含在生活中的小道理我喜歡伊坂在敘事的過程中，將生活的小道理信手拈來，巧妙無痕地放入小說中的那種氣氛。就好像有人可以自私地害得整條高速公路都塞車一樣、就好像有人會把全世界的號誌燈都當作綠燈一樣。不管怎麼樣，還是有那些對道德無動於衷的人對吧？</p>\n<p>伊坂不會把這些道理赤裸裸地說清楚講明白，而是用巧妙的比喻帶過，卻又在故事結束後令人深思。</p>\n<p>「就好像媽媽說吃青椒才可以吃甜點那樣嗎？」明明只是一個等價交換的道理，伊坂卻可以依照角色上面的不同，描述出不同的說法。想像這樣的話語從一般的小孩口中說出來，真的在適切不過了！</p>\n<h3 id=\"尾聲（お終い）\"><a href=\"#尾聲（お終い）\" class=\"headerlink\" title=\"尾聲（お終い）\"></a>尾聲（お終い）</h3><p>在小說進入尾聲階段時，亨曾經鼓勵圭一，希望他可以走出被霸凌的陰影，勇敢起身對抗。「那種影片不好玩，所以大家都不會在意的」，然後拿出法蘭克‧札帕的名言出來，說：「人類所嘗試的事情中，有百分之九十九都是失敗，所以失敗是正常的事情」。這句話可以說是老生常談，但是搭配劇情之後，竟然亂熱血一把的。伊坂小說的尾聲，總會讓人意想不到，包括安田太太的帽子、開頭良夫買的青蛙擺飾、殺人埋藏的屍體、牙醫事件、車子最後的下落，都做了一個完美的交代。這次的結局讓人看得十分過癮，還特別將那四台車的第一個字連接變成『お。し。ま。い』</p>\n<p>伊坂的小說通常會用一個人物當作代表，引用他說過的名言來貫穿整個故事。</p>\n<p>這次的主角是「法蘭克．札帕」是一位歌手，他的生涯我不是很清楚，上了維基百科查了一下，也沒有很明確的資料，所以我就不多做介紹，直接把連結貼給大家看看好了。</p>\n"},{"title":"令人期待的 PostCSS","date":"2016-09-16T15:58:02.000Z","_content":"\n\n## 從 SASS 到 PostCSS\n\n大約在一年前，PostCSS 開始竄紅在前端生態圈裡，不外乎就是所謂的 preprocessor 的特性、高度客製化自己的 plugin、搶先使用 cssnext 的功能，還能夠搭配各種建構工具（gulp, webpack），用起來非常輕鬆寫意。\n\n### 變數\n\n雖然剛開始看到 PostCSS 的時候還挺興奮的，但隨即思考了一下：「真的有必要馬上把 SASS 取代掉嗎？」。\n\nPostCSS 的優點在於你能夠選擇你想要的 plugin，需要時再使用就好。舉變數的功能為例好了，[postcss-simple-vars](https://github.com/postcss/postcss-simple-vars) 能夠模擬 SASS 的變數宣告及使用行為。對我來說怎麼看都彆扭，因為 SASS 除了變數本身宣告之外，還有 map, list 的型別，而且具備了相當完整的 API 操作。例如：取值、判斷式、迴圈功能等。\n\n```scss\n\n$colors: (\n  main: #abc,\n  sub: #bac,\n  word: #333\n);\n\n.container {\n  background-color: map-get($colors, $main);\n  color: map-get($colors, word);\n}\n\n```\n\n就算使用 css spec 的 var 也是一樣，沒有 map 或 list 取值的功能。\n\n```scss\n\n:root {\n  --wordColor: #333;\n  --bgColor: #fafafa;\n}\n\nbody {\n  background-color: var(--wordColor);\n  color: var(--bgColor);\n}\n\n```\n\n（o.s：而且這樣子寫其實有點醜~~很醜~~）\n\n或者，SASS 的 @function 也能夠進一步將 `map-get`做包裝\n\n```scss\n\n$colors: (\n\n main: #abc,\n\n sub: #bac,\n\n word: #333\n\n);\n\n/* alias method for getting color from $colors map\n\n/// @param {$key} the key you want to choose\n\n///\n\n/// eg:\n\n color: c($word); \n\n*/\n\n@function c($key) {\n\n  @if map-has-key($colors, $key) {\n\n    @return map-get($colors, $key);\n\n  }\n\n  @else {\n\n    @error \"Unknown key #{$key}\";\n\n  }\n\n}\n\n.container {\n\n background-color: map-get($colors, $main);\n\n color: map-get($colors, word);\n\n}\n\n```\n\n因為 PostCSS 生態圈廣泛的原因，不少獨立開發者的插件很可能因為沒有在維護，或是因為疏忽而導致編譯錯誤有小 bug 等等的問題，相對之下 SASS 本身具有的功能相對完整的多。\n\n### mixins 跟 function\n\n相對應的 plugin 有  [postcss-mixins](https://github.com/postcss/postcss-mixins) 跟 [postcss-functions](https://github.com/andyjansson/postcss-functions)\n\n雖然模擬的 mixin 的行為，但如果要搭配判斷式使用的話，又要花一番功夫。\n\n```scss\n\n@mixin state($state,$namespace: '') {\n\n  @if ($namespace != ''){\n\n   .#{$namespace}-#{$state} {\n\n     text-transform: uppercase;\n\n   } \n\n  }\n\n  @else {\n\n    .${state} {\n\n      text-transform: uppercase;\n\n    }\n\n  }\n\n}\n\n```\n\n而 `function` 的部分也一樣，如果使用純 CSS 搭配 PostCSS 撰寫，沒有辦法使用 SASS 原生的 function。雖然能夠用 js 自定義 function，這一點其實還蠻吸引人的，但如果要模擬 SASS 相對應 function 的話，又要在重造一次輪子，不免顯得有些麻煩。\n\n### 相較於 SASS 還不成熟\n\n相對於 SASS 來說，PostCSS 其實還算蠻新的工具，雖然生態圈很廣泛，插件也多，但目前版本仍在快速變動中，也還有很多 issue 沒有解完，SASS 因為本身是使用 Ruby 撰寫，雖然速度會比 PostCSS 慢一些（好吧，應該是很多），但其穩定跟完善的 API 跟型別、語法，都是 PostCSS 還無法達到的程度。\n\n## PostCSS 的優勢\n\n來說說 PostCSS 的優勢吧！目前我最喜歡搭配使用的功能有 autoprefixer cssnano。\n\nautoprefixer 能夠幫你處理 CSS 麻煩的前綴，以往是使用 mixins 來解決，現在完全交給 PostCSS 處理就可以了，相對起來乾淨簡潔多了；cssnano 則是幫你處理 CSS minify，搭配 gulp 使用你可以只要安裝 gulp-postcss gulp-cssnano gulp-postcss gulp-sass 就可以進行 css 編譯跟最小化的動作了。\n\n除了上述的插件之外，我認為很棒的插件還有\n\n* `postcss-sorting`：根據定義的規則排序你的 css properties\n* `precss`：包含許多 sass-like 的功能\n* `stylelint`：lint 你的 CSS\n* `stylefmt`：根據 stylelint 的規則幫你 format css code\n* `doiuse`：幫你偵測目前 CSS 的瀏覽器支援度\n* livereload：搭配 webpack 的淫威之下，css-loader 本身就幫你設定好了 hot reload 的配置，只要一改動 style 檔案，就可以在不用重新載入的情況下將新的 style 套入。\n\n### 為什麼我不敢離開 SASS\n\n搭配 PostCSS 的確非常方便，但我不認為兩者同時套用能夠減少日常開發，畢竟一旦出錯，就得花時間去研究底下的運行機制。有可能 PostCSS 編譯完之後再給 SASS 編譯會報錯；又或者某個套件的 bug 導致檔案沒有完整編譯，某段的 CSS 代碼沒有生效等等，都是潛在的問題，目前的開發我也只有使用 `autoprefixer` `cssnano` `stylelint` 來幫助簡化、檢查 CSS 而已。\n\n## 結論\n\n或許最後 SASS 會完全被 PostCSS 打敗也說不定，但 SASS 本身完整、成熟的架構跟語法，還是讓我不想要輕易完全使用 PostCSS 的最大主因，哪天等 PostCSS 成熟到能夠完全獨立於 SASS 的時候，我可能就會轉移過去了吧！就像當初在學 CSS 的時候，也是猶豫了很久才開始學習 SASS 那樣。不過，這兩者（sass, postCSS）是可以共存、互補的。\n\n既然享受了 PostCSS 高度彈性化的優點，我們接下來也不得不關心抽象化滲透，因為插件有可能因為時代的變遷，或是開發者不在維護的關係而出現錯誤。這些插件分別看來功能微小，但是全部加起來之後能夠省下的時間也是很巨大的。；而 SASS 完整的語法、變數系統雖然需要花一段時間學習，卻能夠用統一的語法大幅提升 CSS 維護度。\n\n在這個組件化盛行的年代，前端工程的開發逐漸傾向於維護模組化的檔案（react, css-modules 等），最後可能不需要那麼多繁雜的操作（此指 sass 的 function、變數等），而是回歸到最原始的純 css 也說不定。\n\n### reference\n\n- [PostCSS](https://github.com/postcss/postcss)\n- [I'm excited about Postcss, but I'm scared to leaving SASS](http://davidtheclark.com/excited-about-postcss/)\n- [Breaking up with scss](https://benfrain.com/breaking-up-with-sass-postcss/)\n- [cssnext](http://cssnext.io/)\n\n","source":"_posts/go-to-postcss-or-not.md","raw":"---\ntitle: 令人期待的 PostCSS\ncategories: 前端\ntags:\n  - postcss\n  - sass\ndate: 2016-09-16 23:58:02\n---\n\n\n## 從 SASS 到 PostCSS\n\n大約在一年前，PostCSS 開始竄紅在前端生態圈裡，不外乎就是所謂的 preprocessor 的特性、高度客製化自己的 plugin、搶先使用 cssnext 的功能，還能夠搭配各種建構工具（gulp, webpack），用起來非常輕鬆寫意。\n\n### 變數\n\n雖然剛開始看到 PostCSS 的時候還挺興奮的，但隨即思考了一下：「真的有必要馬上把 SASS 取代掉嗎？」。\n\nPostCSS 的優點在於你能夠選擇你想要的 plugin，需要時再使用就好。舉變數的功能為例好了，[postcss-simple-vars](https://github.com/postcss/postcss-simple-vars) 能夠模擬 SASS 的變數宣告及使用行為。對我來說怎麼看都彆扭，因為 SASS 除了變數本身宣告之外，還有 map, list 的型別，而且具備了相當完整的 API 操作。例如：取值、判斷式、迴圈功能等。\n\n```scss\n\n$colors: (\n  main: #abc,\n  sub: #bac,\n  word: #333\n);\n\n.container {\n  background-color: map-get($colors, $main);\n  color: map-get($colors, word);\n}\n\n```\n\n就算使用 css spec 的 var 也是一樣，沒有 map 或 list 取值的功能。\n\n```scss\n\n:root {\n  --wordColor: #333;\n  --bgColor: #fafafa;\n}\n\nbody {\n  background-color: var(--wordColor);\n  color: var(--bgColor);\n}\n\n```\n\n（o.s：而且這樣子寫其實有點醜~~很醜~~）\n\n或者，SASS 的 @function 也能夠進一步將 `map-get`做包裝\n\n```scss\n\n$colors: (\n\n main: #abc,\n\n sub: #bac,\n\n word: #333\n\n);\n\n/* alias method for getting color from $colors map\n\n/// @param {$key} the key you want to choose\n\n///\n\n/// eg:\n\n color: c($word); \n\n*/\n\n@function c($key) {\n\n  @if map-has-key($colors, $key) {\n\n    @return map-get($colors, $key);\n\n  }\n\n  @else {\n\n    @error \"Unknown key #{$key}\";\n\n  }\n\n}\n\n.container {\n\n background-color: map-get($colors, $main);\n\n color: map-get($colors, word);\n\n}\n\n```\n\n因為 PostCSS 生態圈廣泛的原因，不少獨立開發者的插件很可能因為沒有在維護，或是因為疏忽而導致編譯錯誤有小 bug 等等的問題，相對之下 SASS 本身具有的功能相對完整的多。\n\n### mixins 跟 function\n\n相對應的 plugin 有  [postcss-mixins](https://github.com/postcss/postcss-mixins) 跟 [postcss-functions](https://github.com/andyjansson/postcss-functions)\n\n雖然模擬的 mixin 的行為，但如果要搭配判斷式使用的話，又要花一番功夫。\n\n```scss\n\n@mixin state($state,$namespace: '') {\n\n  @if ($namespace != ''){\n\n   .#{$namespace}-#{$state} {\n\n     text-transform: uppercase;\n\n   } \n\n  }\n\n  @else {\n\n    .${state} {\n\n      text-transform: uppercase;\n\n    }\n\n  }\n\n}\n\n```\n\n而 `function` 的部分也一樣，如果使用純 CSS 搭配 PostCSS 撰寫，沒有辦法使用 SASS 原生的 function。雖然能夠用 js 自定義 function，這一點其實還蠻吸引人的，但如果要模擬 SASS 相對應 function 的話，又要在重造一次輪子，不免顯得有些麻煩。\n\n### 相較於 SASS 還不成熟\n\n相對於 SASS 來說，PostCSS 其實還算蠻新的工具，雖然生態圈很廣泛，插件也多，但目前版本仍在快速變動中，也還有很多 issue 沒有解完，SASS 因為本身是使用 Ruby 撰寫，雖然速度會比 PostCSS 慢一些（好吧，應該是很多），但其穩定跟完善的 API 跟型別、語法，都是 PostCSS 還無法達到的程度。\n\n## PostCSS 的優勢\n\n來說說 PostCSS 的優勢吧！目前我最喜歡搭配使用的功能有 autoprefixer cssnano。\n\nautoprefixer 能夠幫你處理 CSS 麻煩的前綴，以往是使用 mixins 來解決，現在完全交給 PostCSS 處理就可以了，相對起來乾淨簡潔多了；cssnano 則是幫你處理 CSS minify，搭配 gulp 使用你可以只要安裝 gulp-postcss gulp-cssnano gulp-postcss gulp-sass 就可以進行 css 編譯跟最小化的動作了。\n\n除了上述的插件之外，我認為很棒的插件還有\n\n* `postcss-sorting`：根據定義的規則排序你的 css properties\n* `precss`：包含許多 sass-like 的功能\n* `stylelint`：lint 你的 CSS\n* `stylefmt`：根據 stylelint 的規則幫你 format css code\n* `doiuse`：幫你偵測目前 CSS 的瀏覽器支援度\n* livereload：搭配 webpack 的淫威之下，css-loader 本身就幫你設定好了 hot reload 的配置，只要一改動 style 檔案，就可以在不用重新載入的情況下將新的 style 套入。\n\n### 為什麼我不敢離開 SASS\n\n搭配 PostCSS 的確非常方便，但我不認為兩者同時套用能夠減少日常開發，畢竟一旦出錯，就得花時間去研究底下的運行機制。有可能 PostCSS 編譯完之後再給 SASS 編譯會報錯；又或者某個套件的 bug 導致檔案沒有完整編譯，某段的 CSS 代碼沒有生效等等，都是潛在的問題，目前的開發我也只有使用 `autoprefixer` `cssnano` `stylelint` 來幫助簡化、檢查 CSS 而已。\n\n## 結論\n\n或許最後 SASS 會完全被 PostCSS 打敗也說不定，但 SASS 本身完整、成熟的架構跟語法，還是讓我不想要輕易完全使用 PostCSS 的最大主因，哪天等 PostCSS 成熟到能夠完全獨立於 SASS 的時候，我可能就會轉移過去了吧！就像當初在學 CSS 的時候，也是猶豫了很久才開始學習 SASS 那樣。不過，這兩者（sass, postCSS）是可以共存、互補的。\n\n既然享受了 PostCSS 高度彈性化的優點，我們接下來也不得不關心抽象化滲透，因為插件有可能因為時代的變遷，或是開發者不在維護的關係而出現錯誤。這些插件分別看來功能微小，但是全部加起來之後能夠省下的時間也是很巨大的。；而 SASS 完整的語法、變數系統雖然需要花一段時間學習，卻能夠用統一的語法大幅提升 CSS 維護度。\n\n在這個組件化盛行的年代，前端工程的開發逐漸傾向於維護模組化的檔案（react, css-modules 等），最後可能不需要那麼多繁雜的操作（此指 sass 的 function、變數等），而是回歸到最原始的純 css 也說不定。\n\n### reference\n\n- [PostCSS](https://github.com/postcss/postcss)\n- [I'm excited about Postcss, but I'm scared to leaving SASS](http://davidtheclark.com/excited-about-postcss/)\n- [Breaking up with scss](https://benfrain.com/breaking-up-with-sass-postcss/)\n- [cssnext](http://cssnext.io/)\n\n","slug":"go-to-postcss-or-not","published":1,"updated":"2017-02-28T15:04:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p6x000jb75tksktlz6a","content":"<h2 id=\"從-SASS-到-PostCSS\"><a href=\"#從-SASS-到-PostCSS\" class=\"headerlink\" title=\"從 SASS 到 PostCSS\"></a>從 SASS 到 PostCSS</h2><p>大約在一年前，PostCSS 開始竄紅在前端生態圈裡，不外乎就是所謂的 preprocessor 的特性、高度客製化自己的 plugin、搶先使用 cssnext 的功能，還能夠搭配各種建構工具（gulp, webpack），用起來非常輕鬆寫意。</p>\n<h3 id=\"變數\"><a href=\"#變數\" class=\"headerlink\" title=\"變數\"></a>變數</h3><p>雖然剛開始看到 PostCSS 的時候還挺興奮的，但隨即思考了一下：「真的有必要馬上把 SASS 取代掉嗎？」。</p>\n<p>PostCSS 的優點在於你能夠選擇你想要的 plugin，需要時再使用就好。舉變數的功能為例好了，<a href=\"https://github.com/postcss/postcss-simple-vars\" target=\"_blank\" rel=\"external\">postcss-simple-vars</a> 能夠模擬 SASS 的變數宣告及使用行為。對我來說怎麼看都彆扭，因為 SASS 除了變數本身宣告之外，還有 map, list 的型別，而且具備了相當完整的 API 操作。例如：取值、判斷式、迴圈功能等。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$colors</span>: (</div><div class=\"line\">  main: <span class=\"number\">#abc</span>,</div><div class=\"line\">  sub: <span class=\"number\">#bac</span>,</div><div class=\"line\">  word: <span class=\"number\">#333</span></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: map-get(<span class=\"variable\">$colors</span>, <span class=\"variable\">$main</span>);</div><div class=\"line\">  <span class=\"attribute\">color</span>: map-get(<span class=\"variable\">$colors</span>, word);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>就算使用 css spec 的 var 也是一樣，沒有 map 或 list 取值的功能。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">:root &#123;</div><div class=\"line\">  --wordColor: <span class=\"number\">#333</span>;</div><div class=\"line\">  --bgColor: <span class=\"number\">#fafafa</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: var(--wordColor);</div><div class=\"line\">  <span class=\"attribute\">color</span>: var(--bgColor);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>（o.s：而且這樣子寫其實有點醜<del>很醜</del>）</p>\n<p>或者，SASS 的 @function 也能夠進一步將 <code>map-get</code>做包裝</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$colors</span>: (</div><div class=\"line\"></div><div class=\"line\"> main: <span class=\"number\">#abc</span>,</div><div class=\"line\"></div><div class=\"line\"> sub: <span class=\"number\">#bac</span>,</div><div class=\"line\"></div><div class=\"line\"> word: <span class=\"number\">#333</span></div><div class=\"line\"></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* alias method for getting color from $colors map</span></div><div class=\"line\"></div><div class=\"line\">/// @param &#123;$key&#125; the key you want to choose</div><div class=\"line\"></div><div class=\"line\">///</div><div class=\"line\"></div><div class=\"line\">/// eg:</div><div class=\"line\"></div><div class=\"line\"> color: c($word); </div><div class=\"line\"></div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\">@function c(<span class=\"variable\">$key</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">  @<span class=\"keyword\">if</span> map-has-key(<span class=\"variable\">$colors</span>, <span class=\"variable\">$key</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">    @return map-get(<span class=\"variable\">$colors</span>, <span class=\"variable\">$key</span>);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">    @error <span class=\"string\">\"Unknown key #&#123;$key&#125;\"</span>;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"attribute\">background-color</span>: map-get(<span class=\"variable\">$colors</span>, <span class=\"variable\">$main</span>);</div><div class=\"line\"></div><div class=\"line\"> <span class=\"attribute\">color</span>: map-get(<span class=\"variable\">$colors</span>, word);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因為 PostCSS 生態圈廣泛的原因，不少獨立開發者的插件很可能因為沒有在維護，或是因為疏忽而導致編譯錯誤有小 bug 等等的問題，相對之下 SASS 本身具有的功能相對完整的多。</p>\n<h3 id=\"mixins-跟-function\"><a href=\"#mixins-跟-function\" class=\"headerlink\" title=\"mixins 跟 function\"></a>mixins 跟 function</h3><p>相對應的 plugin 有  <a href=\"https://github.com/postcss/postcss-mixins\" target=\"_blank\" rel=\"external\">postcss-mixins</a> 跟 <a href=\"https://github.com/andyjansson/postcss-functions\" target=\"_blank\" rel=\"external\">postcss-functions</a></p>\n<p>雖然模擬的 mixin 的行為，但如果要搭配判斷式使用的話，又要花一番功夫。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@<span class=\"keyword\">mixin</span> state(<span class=\"variable\">$state</span>,<span class=\"variable\">$namespace</span>: <span class=\"string\">''</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">  @<span class=\"keyword\">if</span> (<span class=\"variable\">$namespace</span> != <span class=\"string\">''</span>)&#123;</div><div class=\"line\"></div><div class=\"line\">   .#&#123;<span class=\"variable\">$namespace</span>&#125;-#&#123;<span class=\"variable\">$state</span>&#125; &#123;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"attribute\">text-transform</span>: uppercase;</div><div class=\"line\"></div><div class=\"line\">   &#125; </div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">    .$&#123;state&#125; &#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"attribute\">text-transform</span>: uppercase;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>而 <code>function</code> 的部分也一樣，如果使用純 CSS 搭配 PostCSS 撰寫，沒有辦法使用 SASS 原生的 function。雖然能夠用 js 自定義 function，這一點其實還蠻吸引人的，但如果要模擬 SASS 相對應 function 的話，又要在重造一次輪子，不免顯得有些麻煩。</p>\n<h3 id=\"相較於-SASS-還不成熟\"><a href=\"#相較於-SASS-還不成熟\" class=\"headerlink\" title=\"相較於 SASS 還不成熟\"></a>相較於 SASS 還不成熟</h3><p>相對於 SASS 來說，PostCSS 其實還算蠻新的工具，雖然生態圈很廣泛，插件也多，但目前版本仍在快速變動中，也還有很多 issue 沒有解完，SASS 因為本身是使用 Ruby 撰寫，雖然速度會比 PostCSS 慢一些（好吧，應該是很多），但其穩定跟完善的 API 跟型別、語法，都是 PostCSS 還無法達到的程度。</p>\n<h2 id=\"PostCSS-的優勢\"><a href=\"#PostCSS-的優勢\" class=\"headerlink\" title=\"PostCSS 的優勢\"></a>PostCSS 的優勢</h2><p>來說說 PostCSS 的優勢吧！目前我最喜歡搭配使用的功能有 autoprefixer cssnano。</p>\n<p>autoprefixer 能夠幫你處理 CSS 麻煩的前綴，以往是使用 mixins 來解決，現在完全交給 PostCSS 處理就可以了，相對起來乾淨簡潔多了；cssnano 則是幫你處理 CSS minify，搭配 gulp 使用你可以只要安裝 gulp-postcss gulp-cssnano gulp-postcss gulp-sass 就可以進行 css 編譯跟最小化的動作了。</p>\n<p>除了上述的插件之外，我認為很棒的插件還有</p>\n<ul>\n<li><code>postcss-sorting</code>：根據定義的規則排序你的 css properties</li>\n<li><code>precss</code>：包含許多 sass-like 的功能</li>\n<li><code>stylelint</code>：lint 你的 CSS</li>\n<li><code>stylefmt</code>：根據 stylelint 的規則幫你 format css code</li>\n<li><code>doiuse</code>：幫你偵測目前 CSS 的瀏覽器支援度</li>\n<li>livereload：搭配 webpack 的淫威之下，css-loader 本身就幫你設定好了 hot reload 的配置，只要一改動 style 檔案，就可以在不用重新載入的情況下將新的 style 套入。</li>\n</ul>\n<h3 id=\"為什麼我不敢離開-SASS\"><a href=\"#為什麼我不敢離開-SASS\" class=\"headerlink\" title=\"為什麼我不敢離開 SASS\"></a>為什麼我不敢離開 SASS</h3><p>搭配 PostCSS 的確非常方便，但我不認為兩者同時套用能夠減少日常開發，畢竟一旦出錯，就得花時間去研究底下的運行機制。有可能 PostCSS 編譯完之後再給 SASS 編譯會報錯；又或者某個套件的 bug 導致檔案沒有完整編譯，某段的 CSS 代碼沒有生效等等，都是潛在的問題，目前的開發我也只有使用 <code>autoprefixer</code> <code>cssnano</code> <code>stylelint</code> 來幫助簡化、檢查 CSS 而已。</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>或許最後 SASS 會完全被 PostCSS 打敗也說不定，但 SASS 本身完整、成熟的架構跟語法，還是讓我不想要輕易完全使用 PostCSS 的最大主因，哪天等 PostCSS 成熟到能夠完全獨立於 SASS 的時候，我可能就會轉移過去了吧！就像當初在學 CSS 的時候，也是猶豫了很久才開始學習 SASS 那樣。不過，這兩者（sass, postCSS）是可以共存、互補的。</p>\n<p>既然享受了 PostCSS 高度彈性化的優點，我們接下來也不得不關心抽象化滲透，因為插件有可能因為時代的變遷，或是開發者不在維護的關係而出現錯誤。這些插件分別看來功能微小，但是全部加起來之後能夠省下的時間也是很巨大的。；而 SASS 完整的語法、變數系統雖然需要花一段時間學習，卻能夠用統一的語法大幅提升 CSS 維護度。</p>\n<p>在這個組件化盛行的年代，前端工程的開發逐漸傾向於維護模組化的檔案（react, css-modules 等），最後可能不需要那麼多繁雜的操作（此指 sass 的 function、變數等），而是回歸到最原始的純 css 也說不定。</p>\n<h3 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h3><ul>\n<li><a href=\"https://github.com/postcss/postcss\" target=\"_blank\" rel=\"external\">PostCSS</a></li>\n<li><a href=\"http://davidtheclark.com/excited-about-postcss/\" target=\"_blank\" rel=\"external\">I’m excited about Postcss, but I’m scared to leaving SASS</a></li>\n<li><a href=\"https://benfrain.com/breaking-up-with-sass-postcss/\" target=\"_blank\" rel=\"external\">Breaking up with scss</a></li>\n<li><a href=\"http://cssnext.io/\" target=\"_blank\" rel=\"external\">cssnext</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"從-SASS-到-PostCSS\"><a href=\"#從-SASS-到-PostCSS\" class=\"headerlink\" title=\"從 SASS 到 PostCSS\"></a>從 SASS 到 PostCSS</h2><p>大約在一年前，PostCSS 開始竄紅在前端生態圈裡，不外乎就是所謂的 preprocessor 的特性、高度客製化自己的 plugin、搶先使用 cssnext 的功能，還能夠搭配各種建構工具（gulp, webpack），用起來非常輕鬆寫意。</p>\n<h3 id=\"變數\"><a href=\"#變數\" class=\"headerlink\" title=\"變數\"></a>變數</h3><p>雖然剛開始看到 PostCSS 的時候還挺興奮的，但隨即思考了一下：「真的有必要馬上把 SASS 取代掉嗎？」。</p>\n<p>PostCSS 的優點在於你能夠選擇你想要的 plugin，需要時再使用就好。舉變數的功能為例好了，<a href=\"https://github.com/postcss/postcss-simple-vars\">postcss-simple-vars</a> 能夠模擬 SASS 的變數宣告及使用行為。對我來說怎麼看都彆扭，因為 SASS 除了變數本身宣告之外，還有 map, list 的型別，而且具備了相當完整的 API 操作。例如：取值、判斷式、迴圈功能等。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$colors</span>: (</div><div class=\"line\">  main: <span class=\"number\">#abc</span>,</div><div class=\"line\">  sub: <span class=\"number\">#bac</span>,</div><div class=\"line\">  word: <span class=\"number\">#333</span></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: map-get(<span class=\"variable\">$colors</span>, <span class=\"variable\">$main</span>);</div><div class=\"line\">  <span class=\"attribute\">color</span>: map-get(<span class=\"variable\">$colors</span>, word);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>就算使用 css spec 的 var 也是一樣，沒有 map 或 list 取值的功能。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">:root &#123;</div><div class=\"line\">  --wordColor: <span class=\"number\">#333</span>;</div><div class=\"line\">  --bgColor: <span class=\"number\">#fafafa</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: var(--wordColor);</div><div class=\"line\">  <span class=\"attribute\">color</span>: var(--bgColor);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>（o.s：而且這樣子寫其實有點醜<del>很醜</del>）</p>\n<p>或者，SASS 的 @function 也能夠進一步將 <code>map-get</code>做包裝</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$colors</span>: (</div><div class=\"line\"></div><div class=\"line\"> main: <span class=\"number\">#abc</span>,</div><div class=\"line\"></div><div class=\"line\"> sub: <span class=\"number\">#bac</span>,</div><div class=\"line\"></div><div class=\"line\"> word: <span class=\"number\">#333</span></div><div class=\"line\"></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* alias method for getting color from $colors map</div><div class=\"line\"></div><div class=\"line\">/// @param &#123;$key&#125; the key you want to choose</div><div class=\"line\"></div><div class=\"line\">///</div><div class=\"line\"></div><div class=\"line\">/// eg:</div><div class=\"line\"></div><div class=\"line\"> color: c($word); </div><div class=\"line\"></div><div class=\"line\">*/</span></div><div class=\"line\"></div><div class=\"line\">@function c(<span class=\"variable\">$key</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">  @<span class=\"keyword\">if</span> map-has-key(<span class=\"variable\">$colors</span>, <span class=\"variable\">$key</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">    @return map-get(<span class=\"variable\">$colors</span>, <span class=\"variable\">$key</span>);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">    @error <span class=\"string\">\"Unknown key #&#123;$key&#125;\"</span>;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"attribute\">background-color</span>: map-get(<span class=\"variable\">$colors</span>, <span class=\"variable\">$main</span>);</div><div class=\"line\"></div><div class=\"line\"> <span class=\"attribute\">color</span>: map-get(<span class=\"variable\">$colors</span>, word);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因為 PostCSS 生態圈廣泛的原因，不少獨立開發者的插件很可能因為沒有在維護，或是因為疏忽而導致編譯錯誤有小 bug 等等的問題，相對之下 SASS 本身具有的功能相對完整的多。</p>\n<h3 id=\"mixins-跟-function\"><a href=\"#mixins-跟-function\" class=\"headerlink\" title=\"mixins 跟 function\"></a>mixins 跟 function</h3><p>相對應的 plugin 有  <a href=\"https://github.com/postcss/postcss-mixins\">postcss-mixins</a> 跟 <a href=\"https://github.com/andyjansson/postcss-functions\">postcss-functions</a></p>\n<p>雖然模擬的 mixin 的行為，但如果要搭配判斷式使用的話，又要花一番功夫。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@<span class=\"keyword\">mixin</span> state(<span class=\"variable\">$state</span>,<span class=\"variable\">$namespace</span>: <span class=\"string\">''</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">  @<span class=\"keyword\">if</span> (<span class=\"variable\">$namespace</span> != <span class=\"string\">''</span>)&#123;</div><div class=\"line\"></div><div class=\"line\">   .#&#123;<span class=\"variable\">$namespace</span>&#125;-#&#123;<span class=\"variable\">$state</span>&#125; &#123;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"attribute\">text-transform</span>: uppercase;</div><div class=\"line\"></div><div class=\"line\">   &#125; </div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">    .$&#123;state&#125; &#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"attribute\">text-transform</span>: uppercase;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>而 <code>function</code> 的部分也一樣，如果使用純 CSS 搭配 PostCSS 撰寫，沒有辦法使用 SASS 原生的 function。雖然能夠用 js 自定義 function，這一點其實還蠻吸引人的，但如果要模擬 SASS 相對應 function 的話，又要在重造一次輪子，不免顯得有些麻煩。</p>\n<h3 id=\"相較於-SASS-還不成熟\"><a href=\"#相較於-SASS-還不成熟\" class=\"headerlink\" title=\"相較於 SASS 還不成熟\"></a>相較於 SASS 還不成熟</h3><p>相對於 SASS 來說，PostCSS 其實還算蠻新的工具，雖然生態圈很廣泛，插件也多，但目前版本仍在快速變動中，也還有很多 issue 沒有解完，SASS 因為本身是使用 Ruby 撰寫，雖然速度會比 PostCSS 慢一些（好吧，應該是很多），但其穩定跟完善的 API 跟型別、語法，都是 PostCSS 還無法達到的程度。</p>\n<h2 id=\"PostCSS-的優勢\"><a href=\"#PostCSS-的優勢\" class=\"headerlink\" title=\"PostCSS 的優勢\"></a>PostCSS 的優勢</h2><p>來說說 PostCSS 的優勢吧！目前我最喜歡搭配使用的功能有 autoprefixer cssnano。</p>\n<p>autoprefixer 能夠幫你處理 CSS 麻煩的前綴，以往是使用 mixins 來解決，現在完全交給 PostCSS 處理就可以了，相對起來乾淨簡潔多了；cssnano 則是幫你處理 CSS minify，搭配 gulp 使用你可以只要安裝 gulp-postcss gulp-cssnano gulp-postcss gulp-sass 就可以進行 css 編譯跟最小化的動作了。</p>\n<p>除了上述的插件之外，我認為很棒的插件還有</p>\n<ul>\n<li><code>postcss-sorting</code>：根據定義的規則排序你的 css properties</li>\n<li><code>precss</code>：包含許多 sass-like 的功能</li>\n<li><code>stylelint</code>：lint 你的 CSS</li>\n<li><code>stylefmt</code>：根據 stylelint 的規則幫你 format css code</li>\n<li><code>doiuse</code>：幫你偵測目前 CSS 的瀏覽器支援度</li>\n<li>livereload：搭配 webpack 的淫威之下，css-loader 本身就幫你設定好了 hot reload 的配置，只要一改動 style 檔案，就可以在不用重新載入的情況下將新的 style 套入。</li>\n</ul>\n<h3 id=\"為什麼我不敢離開-SASS\"><a href=\"#為什麼我不敢離開-SASS\" class=\"headerlink\" title=\"為什麼我不敢離開 SASS\"></a>為什麼我不敢離開 SASS</h3><p>搭配 PostCSS 的確非常方便，但我不認為兩者同時套用能夠減少日常開發，畢竟一旦出錯，就得花時間去研究底下的運行機制。有可能 PostCSS 編譯完之後再給 SASS 編譯會報錯；又或者某個套件的 bug 導致檔案沒有完整編譯，某段的 CSS 代碼沒有生效等等，都是潛在的問題，目前的開發我也只有使用 <code>autoprefixer</code> <code>cssnano</code> <code>stylelint</code> 來幫助簡化、檢查 CSS 而已。</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>或許最後 SASS 會完全被 PostCSS 打敗也說不定，但 SASS 本身完整、成熟的架構跟語法，還是讓我不想要輕易完全使用 PostCSS 的最大主因，哪天等 PostCSS 成熟到能夠完全獨立於 SASS 的時候，我可能就會轉移過去了吧！就像當初在學 CSS 的時候，也是猶豫了很久才開始學習 SASS 那樣。不過，這兩者（sass, postCSS）是可以共存、互補的。</p>\n<p>既然享受了 PostCSS 高度彈性化的優點，我們接下來也不得不關心抽象化滲透，因為插件有可能因為時代的變遷，或是開發者不在維護的關係而出現錯誤。這些插件分別看來功能微小，但是全部加起來之後能夠省下的時間也是很巨大的。；而 SASS 完整的語法、變數系統雖然需要花一段時間學習，卻能夠用統一的語法大幅提升 CSS 維護度。</p>\n<p>在這個組件化盛行的年代，前端工程的開發逐漸傾向於維護模組化的檔案（react, css-modules 等），最後可能不需要那麼多繁雜的操作（此指 sass 的 function、變數等），而是回歸到最原始的純 css 也說不定。</p>\n<h3 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h3><ul>\n<li><a href=\"https://github.com/postcss/postcss\">PostCSS</a></li>\n<li><a href=\"http://davidtheclark.com/excited-about-postcss/\">I’m excited about Postcss, but I’m scared to leaving SASS</a></li>\n<li><a href=\"https://benfrain.com/breaking-up-with-sass-postcss/\">Breaking up with scss</a></li>\n<li><a href=\"http://cssnext.io/\">cssnext</a></li>\n</ul>\n"},{"title":"【讀書心得】夜之國的庫帕","date":"2016-10-16T06:59:53.000Z","_content":"\n\n為了不要讓這裡的技術成分太濃厚，我打算直接將之前整理的閱讀筆記也一併 PO 在這裡統一管理比較方便。\n\n從 2013 年以來陸陸續續看了很多本書，也做了厚厚的筆記。趁著部落格還空空的，動力還在，決定把那些擱置已久的筆記一併搬出來曬曬太陽見見世面。\n\n## 夜之國的庫帕\n\n### 前言\n\n「來個慵懶而即興的小革命吧！」這本小說很適合在午後咖啡店，一邊啜飲著咖啡，一邊聽著輕音樂，一邊享受著小說中可愛而有趣的視角和劇情。\n\n有一種慵懶卻又身在其中的感覺，跟著貓的想法一起思考、行動，雖然好像事不關己，但是到後面竟然連自己都開始緊張了起來，「拜託！劇情一定要這樣才對！」，還好，愛好和平的伊坂少年讓結局看起來如此的溫馨。不過，我還是好捨不得就這樣把小說給看完了嗚嗚嗚。\n\n這本小說的筆調是很輕鬆的，但是在這種輕鬆的氛圍中，卻把人類社會中的現實和殘酷丟出來，拋出一個完美的質問。你會在故事的結尾中思考，對呀！我們不也是這樣？\n\n故事裡，獨眼兵長給了讀者答案：「懷疑。」\n\n故事的內容是在描寫夜之國的人民被鐵國擊敗後，剛開始先假裝和平停戰，卻在一夕之間發生國王被殺（冠人）的事件，搞得整個夜之國人心惶惶、不知所措。\n\n每個登場的角色都有一個小小故事，而這些小小故事結合起來，卻又和主軸互相連結，不會顯得太過凸出，伊坂揉合了不同支線的故事發展，最後將事實完整交代出來。這必須有非常深厚的寫作功力還有架構才有辦法做到。\n\n### 安穩＝和平？\n\n夜之國的人民們深深相信著自己是處於一種和鐵國對立、領土相當的狀態下。他們並沒有產生懷疑，也沒有人想要求證。反正，只要日子過得安穩，就沒有這個必要管那麼多的事情吧！\n\n人民們依賴城牆內的安穩，卻沒有人願意思考、懷疑現狀的可能性。甚至他們放棄了探究真相，因為只要冠人說出包裝後的故事，他們就會無條件地全盤相信。不需要動腦筋、不需要奔波勞碌就有安穩的生活，何必大費周章確認事實呢？\n\n### 庫帕的傳說\n\n我好喜歡這個傳說。\n\n「比起公佈真相，維持威嚴更加重要」那麼，要如何維持自己的威嚴呢？冠人的方法是，在外部安排一個又恐怖又強大的敵人（就算是假的也沒關係），然後再對人民說：「別怕，我會保護你們。」並且拿出實際作為（每年派出庫帕士兵）。這樣包裝下來，人民就自然而然地會將領導人視為英雄。冠人確保地位的方式是：欺騙、隱瞞、扭曲這個世界的價值觀\n\n「什麼是對的，什麼事錯的，自己去判斷吧！」獨眼兵長丟出了結論。\n\n「對任何意見都要有同等的懷疑，不然一定會吃虧。」\n\n### 無知\n\n「無知」是一種恐懼，人們會因為不知道而害怕。所以如果領導者將事情處理好了，人民就無所憂慮，無所憂慮後，人民就會感到幸福，感到幸福之後，人民就會依賴領導者了。冠人成功創造了這樣的優勢，所以儘管獨眼兵長將事實說出，他們仍然是半信半疑。\n\n「會不會我們所深信不疑的，都有改變的可能呢？」\n\n### 貓吃老鼠\n\n貓吃老鼠就是天經地義嗎？誰規定的？來自上古的命令告訴多姆，「貓就是要吃老鼠」。但，為什麼呢？\n\n有人思考過這個問題嗎？故事中有蠻多篇幅是在描寫貓與老鼠間的對立關係及談判。\n\n比自己弱小的東西，誰也不會放在心上。「只要心血來潮，我們就捉弄老鼠」，但弱者就一定要被欺負嗎？貓似乎都沒有想過，直到老鼠長老冒出來要求談判後，多姆才開始思考這個問題。\n\n「我們獵捕老鼠，所以老鼠是低等的」，這是正確的看法嗎？同樣的觀點挪用到人類身上，弱者就應該順應天命的安排嗎？\n\n「出了門就該好好回家，不都是這樣嗎？」「既然你都能跟貓交談，跟老婆交談也是輕而易舉吧！」如果不改變彼此的關係，就永遠是兩條平行線。光是這樣，就可以有很大的改變了。\n\n## 後記\n\n大約是在兩年多前寫的文章，現在看起來格外稚嫩。不過很慶幸自己當時真的記錄下來了，寫一篇文章真的很累，大概要花一小時構思、兩小時寫文章。\n\n看完心得之後，又能馬上回味當時看小說時的情景，劇情也馬上映入眼簾，感覺真棒。\n\n","source":"_posts/isaka-kupa.md","raw":"---\ntitle: 【讀書心得】夜之國的庫帕\ncategories: 讀書心得\ntags:\n  - 伊坂幸太郎\n  - 推理\ndate: 2016-10-16 14:59:53\n---\n\n\n為了不要讓這裡的技術成分太濃厚，我打算直接將之前整理的閱讀筆記也一併 PO 在這裡統一管理比較方便。\n\n從 2013 年以來陸陸續續看了很多本書，也做了厚厚的筆記。趁著部落格還空空的，動力還在，決定把那些擱置已久的筆記一併搬出來曬曬太陽見見世面。\n\n## 夜之國的庫帕\n\n### 前言\n\n「來個慵懶而即興的小革命吧！」這本小說很適合在午後咖啡店，一邊啜飲著咖啡，一邊聽著輕音樂，一邊享受著小說中可愛而有趣的視角和劇情。\n\n有一種慵懶卻又身在其中的感覺，跟著貓的想法一起思考、行動，雖然好像事不關己，但是到後面竟然連自己都開始緊張了起來，「拜託！劇情一定要這樣才對！」，還好，愛好和平的伊坂少年讓結局看起來如此的溫馨。不過，我還是好捨不得就這樣把小說給看完了嗚嗚嗚。\n\n這本小說的筆調是很輕鬆的，但是在這種輕鬆的氛圍中，卻把人類社會中的現實和殘酷丟出來，拋出一個完美的質問。你會在故事的結尾中思考，對呀！我們不也是這樣？\n\n故事裡，獨眼兵長給了讀者答案：「懷疑。」\n\n故事的內容是在描寫夜之國的人民被鐵國擊敗後，剛開始先假裝和平停戰，卻在一夕之間發生國王被殺（冠人）的事件，搞得整個夜之國人心惶惶、不知所措。\n\n每個登場的角色都有一個小小故事，而這些小小故事結合起來，卻又和主軸互相連結，不會顯得太過凸出，伊坂揉合了不同支線的故事發展，最後將事實完整交代出來。這必須有非常深厚的寫作功力還有架構才有辦法做到。\n\n### 安穩＝和平？\n\n夜之國的人民們深深相信著自己是處於一種和鐵國對立、領土相當的狀態下。他們並沒有產生懷疑，也沒有人想要求證。反正，只要日子過得安穩，就沒有這個必要管那麼多的事情吧！\n\n人民們依賴城牆內的安穩，卻沒有人願意思考、懷疑現狀的可能性。甚至他們放棄了探究真相，因為只要冠人說出包裝後的故事，他們就會無條件地全盤相信。不需要動腦筋、不需要奔波勞碌就有安穩的生活，何必大費周章確認事實呢？\n\n### 庫帕的傳說\n\n我好喜歡這個傳說。\n\n「比起公佈真相，維持威嚴更加重要」那麼，要如何維持自己的威嚴呢？冠人的方法是，在外部安排一個又恐怖又強大的敵人（就算是假的也沒關係），然後再對人民說：「別怕，我會保護你們。」並且拿出實際作為（每年派出庫帕士兵）。這樣包裝下來，人民就自然而然地會將領導人視為英雄。冠人確保地位的方式是：欺騙、隱瞞、扭曲這個世界的價值觀\n\n「什麼是對的，什麼事錯的，自己去判斷吧！」獨眼兵長丟出了結論。\n\n「對任何意見都要有同等的懷疑，不然一定會吃虧。」\n\n### 無知\n\n「無知」是一種恐懼，人們會因為不知道而害怕。所以如果領導者將事情處理好了，人民就無所憂慮，無所憂慮後，人民就會感到幸福，感到幸福之後，人民就會依賴領導者了。冠人成功創造了這樣的優勢，所以儘管獨眼兵長將事實說出，他們仍然是半信半疑。\n\n「會不會我們所深信不疑的，都有改變的可能呢？」\n\n### 貓吃老鼠\n\n貓吃老鼠就是天經地義嗎？誰規定的？來自上古的命令告訴多姆，「貓就是要吃老鼠」。但，為什麼呢？\n\n有人思考過這個問題嗎？故事中有蠻多篇幅是在描寫貓與老鼠間的對立關係及談判。\n\n比自己弱小的東西，誰也不會放在心上。「只要心血來潮，我們就捉弄老鼠」，但弱者就一定要被欺負嗎？貓似乎都沒有想過，直到老鼠長老冒出來要求談判後，多姆才開始思考這個問題。\n\n「我們獵捕老鼠，所以老鼠是低等的」，這是正確的看法嗎？同樣的觀點挪用到人類身上，弱者就應該順應天命的安排嗎？\n\n「出了門就該好好回家，不都是這樣嗎？」「既然你都能跟貓交談，跟老婆交談也是輕而易舉吧！」如果不改變彼此的關係，就永遠是兩條平行線。光是這樣，就可以有很大的改變了。\n\n## 後記\n\n大約是在兩年多前寫的文章，現在看起來格外稚嫩。不過很慶幸自己當時真的記錄下來了，寫一篇文章真的很累，大概要花一小時構思、兩小時寫文章。\n\n看完心得之後，又能馬上回味當時看小說時的情景，劇情也馬上映入眼簾，感覺真棒。\n\n","slug":"isaka-kupa","published":1,"updated":"2016-10-16T06:59:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p7b000kb75tq94xn7zc","content":"<p>為了不要讓這裡的技術成分太濃厚，我打算直接將之前整理的閱讀筆記也一併 PO 在這裡統一管理比較方便。</p>\n<p>從 2013 年以來陸陸續續看了很多本書，也做了厚厚的筆記。趁著部落格還空空的，動力還在，決定把那些擱置已久的筆記一併搬出來曬曬太陽見見世面。</p>\n<h2 id=\"夜之國的庫帕\"><a href=\"#夜之國的庫帕\" class=\"headerlink\" title=\"夜之國的庫帕\"></a>夜之國的庫帕</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>「來個慵懶而即興的小革命吧！」這本小說很適合在午後咖啡店，一邊啜飲著咖啡，一邊聽著輕音樂，一邊享受著小說中可愛而有趣的視角和劇情。</p>\n<p>有一種慵懶卻又身在其中的感覺，跟著貓的想法一起思考、行動，雖然好像事不關己，但是到後面竟然連自己都開始緊張了起來，「拜託！劇情一定要這樣才對！」，還好，愛好和平的伊坂少年讓結局看起來如此的溫馨。不過，我還是好捨不得就這樣把小說給看完了嗚嗚嗚。</p>\n<p>這本小說的筆調是很輕鬆的，但是在這種輕鬆的氛圍中，卻把人類社會中的現實和殘酷丟出來，拋出一個完美的質問。你會在故事的結尾中思考，對呀！我們不也是這樣？</p>\n<p>故事裡，獨眼兵長給了讀者答案：「懷疑。」</p>\n<p>故事的內容是在描寫夜之國的人民被鐵國擊敗後，剛開始先假裝和平停戰，卻在一夕之間發生國王被殺（冠人）的事件，搞得整個夜之國人心惶惶、不知所措。</p>\n<p>每個登場的角色都有一個小小故事，而這些小小故事結合起來，卻又和主軸互相連結，不會顯得太過凸出，伊坂揉合了不同支線的故事發展，最後將事實完整交代出來。這必須有非常深厚的寫作功力還有架構才有辦法做到。</p>\n<h3 id=\"安穩＝和平？\"><a href=\"#安穩＝和平？\" class=\"headerlink\" title=\"安穩＝和平？\"></a>安穩＝和平？</h3><p>夜之國的人民們深深相信著自己是處於一種和鐵國對立、領土相當的狀態下。他們並沒有產生懷疑，也沒有人想要求證。反正，只要日子過得安穩，就沒有這個必要管那麼多的事情吧！</p>\n<p>人民們依賴城牆內的安穩，卻沒有人願意思考、懷疑現狀的可能性。甚至他們放棄了探究真相，因為只要冠人說出包裝後的故事，他們就會無條件地全盤相信。不需要動腦筋、不需要奔波勞碌就有安穩的生活，何必大費周章確認事實呢？</p>\n<h3 id=\"庫帕的傳說\"><a href=\"#庫帕的傳說\" class=\"headerlink\" title=\"庫帕的傳說\"></a>庫帕的傳說</h3><p>我好喜歡這個傳說。</p>\n<p>「比起公佈真相，維持威嚴更加重要」那麼，要如何維持自己的威嚴呢？冠人的方法是，在外部安排一個又恐怖又強大的敵人（就算是假的也沒關係），然後再對人民說：「別怕，我會保護你們。」並且拿出實際作為（每年派出庫帕士兵）。這樣包裝下來，人民就自然而然地會將領導人視為英雄。冠人確保地位的方式是：欺騙、隱瞞、扭曲這個世界的價值觀</p>\n<p>「什麼是對的，什麼事錯的，自己去判斷吧！」獨眼兵長丟出了結論。</p>\n<p>「對任何意見都要有同等的懷疑，不然一定會吃虧。」</p>\n<h3 id=\"無知\"><a href=\"#無知\" class=\"headerlink\" title=\"無知\"></a>無知</h3><p>「無知」是一種恐懼，人們會因為不知道而害怕。所以如果領導者將事情處理好了，人民就無所憂慮，無所憂慮後，人民就會感到幸福，感到幸福之後，人民就會依賴領導者了。冠人成功創造了這樣的優勢，所以儘管獨眼兵長將事實說出，他們仍然是半信半疑。</p>\n<p>「會不會我們所深信不疑的，都有改變的可能呢？」</p>\n<h3 id=\"貓吃老鼠\"><a href=\"#貓吃老鼠\" class=\"headerlink\" title=\"貓吃老鼠\"></a>貓吃老鼠</h3><p>貓吃老鼠就是天經地義嗎？誰規定的？來自上古的命令告訴多姆，「貓就是要吃老鼠」。但，為什麼呢？</p>\n<p>有人思考過這個問題嗎？故事中有蠻多篇幅是在描寫貓與老鼠間的對立關係及談判。</p>\n<p>比自己弱小的東西，誰也不會放在心上。「只要心血來潮，我們就捉弄老鼠」，但弱者就一定要被欺負嗎？貓似乎都沒有想過，直到老鼠長老冒出來要求談判後，多姆才開始思考這個問題。</p>\n<p>「我們獵捕老鼠，所以老鼠是低等的」，這是正確的看法嗎？同樣的觀點挪用到人類身上，弱者就應該順應天命的安排嗎？</p>\n<p>「出了門就該好好回家，不都是這樣嗎？」「既然你都能跟貓交談，跟老婆交談也是輕而易舉吧！」如果不改變彼此的關係，就永遠是兩條平行線。光是這樣，就可以有很大的改變了。</p>\n<h2 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h2><p>大約是在兩年多前寫的文章，現在看起來格外稚嫩。不過很慶幸自己當時真的記錄下來了，寫一篇文章真的很累，大概要花一小時構思、兩小時寫文章。</p>\n<p>看完心得之後，又能馬上回味當時看小說時的情景，劇情也馬上映入眼簾，感覺真棒。</p>\n","excerpt":"","more":"<p>為了不要讓這裡的技術成分太濃厚，我打算直接將之前整理的閱讀筆記也一併 PO 在這裡統一管理比較方便。</p>\n<p>從 2013 年以來陸陸續續看了很多本書，也做了厚厚的筆記。趁著部落格還空空的，動力還在，決定把那些擱置已久的筆記一併搬出來曬曬太陽見見世面。</p>\n<h2 id=\"夜之國的庫帕\"><a href=\"#夜之國的庫帕\" class=\"headerlink\" title=\"夜之國的庫帕\"></a>夜之國的庫帕</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>「來個慵懶而即興的小革命吧！」這本小說很適合在午後咖啡店，一邊啜飲著咖啡，一邊聽著輕音樂，一邊享受著小說中可愛而有趣的視角和劇情。</p>\n<p>有一種慵懶卻又身在其中的感覺，跟著貓的想法一起思考、行動，雖然好像事不關己，但是到後面竟然連自己都開始緊張了起來，「拜託！劇情一定要這樣才對！」，還好，愛好和平的伊坂少年讓結局看起來如此的溫馨。不過，我還是好捨不得就這樣把小說給看完了嗚嗚嗚。</p>\n<p>這本小說的筆調是很輕鬆的，但是在這種輕鬆的氛圍中，卻把人類社會中的現實和殘酷丟出來，拋出一個完美的質問。你會在故事的結尾中思考，對呀！我們不也是這樣？</p>\n<p>故事裡，獨眼兵長給了讀者答案：「懷疑。」</p>\n<p>故事的內容是在描寫夜之國的人民被鐵國擊敗後，剛開始先假裝和平停戰，卻在一夕之間發生國王被殺（冠人）的事件，搞得整個夜之國人心惶惶、不知所措。</p>\n<p>每個登場的角色都有一個小小故事，而這些小小故事結合起來，卻又和主軸互相連結，不會顯得太過凸出，伊坂揉合了不同支線的故事發展，最後將事實完整交代出來。這必須有非常深厚的寫作功力還有架構才有辦法做到。</p>\n<h3 id=\"安穩＝和平？\"><a href=\"#安穩＝和平？\" class=\"headerlink\" title=\"安穩＝和平？\"></a>安穩＝和平？</h3><p>夜之國的人民們深深相信著自己是處於一種和鐵國對立、領土相當的狀態下。他們並沒有產生懷疑，也沒有人想要求證。反正，只要日子過得安穩，就沒有這個必要管那麼多的事情吧！</p>\n<p>人民們依賴城牆內的安穩，卻沒有人願意思考、懷疑現狀的可能性。甚至他們放棄了探究真相，因為只要冠人說出包裝後的故事，他們就會無條件地全盤相信。不需要動腦筋、不需要奔波勞碌就有安穩的生活，何必大費周章確認事實呢？</p>\n<h3 id=\"庫帕的傳說\"><a href=\"#庫帕的傳說\" class=\"headerlink\" title=\"庫帕的傳說\"></a>庫帕的傳說</h3><p>我好喜歡這個傳說。</p>\n<p>「比起公佈真相，維持威嚴更加重要」那麼，要如何維持自己的威嚴呢？冠人的方法是，在外部安排一個又恐怖又強大的敵人（就算是假的也沒關係），然後再對人民說：「別怕，我會保護你們。」並且拿出實際作為（每年派出庫帕士兵）。這樣包裝下來，人民就自然而然地會將領導人視為英雄。冠人確保地位的方式是：欺騙、隱瞞、扭曲這個世界的價值觀</p>\n<p>「什麼是對的，什麼事錯的，自己去判斷吧！」獨眼兵長丟出了結論。</p>\n<p>「對任何意見都要有同等的懷疑，不然一定會吃虧。」</p>\n<h3 id=\"無知\"><a href=\"#無知\" class=\"headerlink\" title=\"無知\"></a>無知</h3><p>「無知」是一種恐懼，人們會因為不知道而害怕。所以如果領導者將事情處理好了，人民就無所憂慮，無所憂慮後，人民就會感到幸福，感到幸福之後，人民就會依賴領導者了。冠人成功創造了這樣的優勢，所以儘管獨眼兵長將事實說出，他們仍然是半信半疑。</p>\n<p>「會不會我們所深信不疑的，都有改變的可能呢？」</p>\n<h3 id=\"貓吃老鼠\"><a href=\"#貓吃老鼠\" class=\"headerlink\" title=\"貓吃老鼠\"></a>貓吃老鼠</h3><p>貓吃老鼠就是天經地義嗎？誰規定的？來自上古的命令告訴多姆，「貓就是要吃老鼠」。但，為什麼呢？</p>\n<p>有人思考過這個問題嗎？故事中有蠻多篇幅是在描寫貓與老鼠間的對立關係及談判。</p>\n<p>比自己弱小的東西，誰也不會放在心上。「只要心血來潮，我們就捉弄老鼠」，但弱者就一定要被欺負嗎？貓似乎都沒有想過，直到老鼠長老冒出來要求談判後，多姆才開始思考這個問題。</p>\n<p>「我們獵捕老鼠，所以老鼠是低等的」，這是正確的看法嗎？同樣的觀點挪用到人類身上，弱者就應該順應天命的安排嗎？</p>\n<p>「出了門就該好好回家，不都是這樣嗎？」「既然你都能跟貓交談，跟老婆交談也是輕而易舉吧！」如果不改變彼此的關係，就永遠是兩條平行線。光是這樣，就可以有很大的改變了。</p>\n<h2 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h2><p>大約是在兩年多前寫的文章，現在看起來格外稚嫩。不過很慶幸自己當時真的記錄下來了，寫一篇文章真的很累，大概要花一小時構思、兩小時寫文章。</p>\n<p>看完心得之後，又能馬上回味當時看小說時的情景，劇情也馬上映入眼簾，感覺真棒。</p>\n"},{"title":"從 legacy code 中尋找出口（上）","date":"2016-06-11T00:56:15.000Z","_content":"\n\n在我第一次進入主產品開發後，把代碼從 Github 上面 pull 下來。\n\n「這是什麼鬼東西？」\n\n結構混亂，大量覆寫的 class 各處都是，以及很可怕的巢狀 ID。\nview 的部分也有些地方非常雜亂......。看來 legacy code 跟 refactor 永遠都在進行式。\n\n對於日新月異的前端來說，要接觸一個新技術、框架並不是太困難的事。但困難點在於如何在現有的大型專案中做取捨，我們常常會有其他考量。例如團隊的接受度、team leader、其他政治因素等等而無法輕易地將新框架套用在目前的專案上。\n\n這個系列的文章主要會分享如何在既有的專案中小心地進行重構。希望對各位有些幫助。\n\n## 目前遇到的問題\n\nHTML 的架構混亂肥大，許多 `util class` 四散各處，在 CSS 中更可以看到大量的覆寫 class。雖然聽說之前已經有整理過了，但顯然這個房間還充滿許多灰塵。\n\n我認為前端常常遇到的 smell 問題有：\n\n- 復用性不足：儘管已經採用 React，但仍有許多高耦合的 component。而且其中還夾雜著 flux 與 redux 兩種不同的 library\n- 大量混雜業務邏輯的代碼（如 API ability 的判斷等），不僅要實際去了解業務流程外，還要知道檔案放在哪，必要時可能還要去看後端的程式碼\n- HTML 的撰寫不夠語義化，充斥太多 `util class` 及 `atomic class`，後面接手的人比較難搞懂這行 view 裡頭所要表達的東西。\n- CSS 檔案的撰寫不夠模組化。有太多混雜的模組都放在同一隻檔案中，查找非常不方便。\n- 大量的覆寫 class 造成上版時有很多意外的狀況發生。\n\n沒有統一的規範跟撰寫方式，很快代碼就會往指數性的肥大邁進。\n\n身為一個前端工程師，經驗還稍嫌不足的我來說，雖然目前正在孤軍奮戰中，但其實還能做一些事。有問題對我來說是一件非常值得興奮的事，至少對我來說，那是一個可以捲起袖子來做事的大好機會。\n\n## 解法\n\n那麼，到底該怎麼做呢？我認為可以從以下幾點開始下手\n\n- 著手撰寫 `styleguide`，讓自己與之後的前端團隊快速上手，並且有一定的準則可以遵守\n- 技術選型：自動化工具、code quality 工具、選擇與淘汰\n- test 框架：前端代碼大部分都還沒寫 test，未來等架構穩定的時候希望可以趕快補上。\n- 讓重構變得簡單\n- 讓 comment 及 doc 變成習慣： comment 的 doc 永遠是工程師的好朋友！\n- 提交代碼的規範\n\n本系列的文章主要會著重在重構的部分，最後一篇會再跟大家分享文件應該寫些什麼，以及前端如何提交代碼及發送 pull request 給 code reviewer。\n\n目前已經大致撰寫了 styguide 的架構，下一步是逐漸重整 CSS 的架構以及拆分 HTML 組件。\n\n這不是一朝一夕就能完成的東西，甚至就某種角度來看會拖延到專案的進度。有點像是默默付出的工作吧...！畢竟在原有的專案中做改變本來就有較大的阻力。\n\n## 何時應該重構\n\n隨時重構，不要為了重構而重構。再來可以參考[三次法則](http://www.wikiwand.com/zh-tw/%E4%B8%89%E6%AC%A1%E6%B3%95%E5%88%99_(%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1))\n\n- 上版的時候對現有的 HTML 及 CSS 重構，或者對應的 component\n- 寫新的 js 模組時重構，順便撰寫 Comment 及文件\n- 送 pull request 的時候：不過要確定自己有寫上詳細的 comment 及 doc，才能提高 code reviewer 的 review 意願，而 senior 總是能更快看出代碼裡面的問題。\n\n我們常常對一些既有代碼的架構感到心癢，或者很想要趕快重構。但在 workaround 的情況下，有時重構的成本是非常大的。\n\n## 何時不應該重構\n\n其實比起重構來說，更重要的應該是拿捏不應該重構的程度。身為工程師或多或少都會對別人的代碼嗤之以鼻，恨不得趕快把 code 清掉。\n但，既然 code 有某種程度的肥大，代表他或多或少解決了問題。而且重構是需要**成本**的。就算是以目前的開發來說，通常也是先著重於將功能實作後，在有限度地作小幅度的調整以及逐漸補齊文件及註解。對於重構來說，最重要的是 `consistency`。s\n\n- 目前的解法雖然不漂亮，但確實解決問題的時候。\n- 目前的代碼重複率還不高的時候\n- 重構的成本太大，甚至影響到系統本身的時候。\n\n## 保持心平氣和\n\n重構的時候記得控制自己的情緒。我們很可能一不小心就在咒罵代碼或前任，然後在情緒上頭反而過度重構，造成更多的問題也說不定。\n\n> 代碼的存在是有歷史的\n\n有可能是進度太趕、有可能是政治因素、又或者當時的技術還沒到位。但可以確定的是，情緒化完全無法解決問題。\n\n[don't let anger contol you](http://www.apa.org/topics/anger/control.aspx)\n\n\n> Talk is cheap. Show me the code.\n\n下一篇，我會開始分享一些重構的技巧。\n\n## Final Word\n\n最後還是要聲明一下，這篇文章雖然會著重在一些重構的技巧上，但其實從 legacy code 中尋找出口的方法不只是重構而已。希望大家不要過往矯正，一看到髒 code 就急著捲起袖子重構。退一步評估一下成本跟重構的價值再做決定。\n\n#### Legacy Code 專欄\n\n- {% post_link 'legacy-code2' %}\n- {% post_link 'legacy-code3' %}\n","source":"_posts/legacy-code.md","raw":"---\ntitle: 從 legacy code 中尋找出口（上）\ncategories: 前端\ntags:\n  - 重構\n  - 前端\ndate: 2016-06-11 08:56:15\n---\n\n\n在我第一次進入主產品開發後，把代碼從 Github 上面 pull 下來。\n\n「這是什麼鬼東西？」\n\n結構混亂，大量覆寫的 class 各處都是，以及很可怕的巢狀 ID。\nview 的部分也有些地方非常雜亂......。看來 legacy code 跟 refactor 永遠都在進行式。\n\n對於日新月異的前端來說，要接觸一個新技術、框架並不是太困難的事。但困難點在於如何在現有的大型專案中做取捨，我們常常會有其他考量。例如團隊的接受度、team leader、其他政治因素等等而無法輕易地將新框架套用在目前的專案上。\n\n這個系列的文章主要會分享如何在既有的專案中小心地進行重構。希望對各位有些幫助。\n\n## 目前遇到的問題\n\nHTML 的架構混亂肥大，許多 `util class` 四散各處，在 CSS 中更可以看到大量的覆寫 class。雖然聽說之前已經有整理過了，但顯然這個房間還充滿許多灰塵。\n\n我認為前端常常遇到的 smell 問題有：\n\n- 復用性不足：儘管已經採用 React，但仍有許多高耦合的 component。而且其中還夾雜著 flux 與 redux 兩種不同的 library\n- 大量混雜業務邏輯的代碼（如 API ability 的判斷等），不僅要實際去了解業務流程外，還要知道檔案放在哪，必要時可能還要去看後端的程式碼\n- HTML 的撰寫不夠語義化，充斥太多 `util class` 及 `atomic class`，後面接手的人比較難搞懂這行 view 裡頭所要表達的東西。\n- CSS 檔案的撰寫不夠模組化。有太多混雜的模組都放在同一隻檔案中，查找非常不方便。\n- 大量的覆寫 class 造成上版時有很多意外的狀況發生。\n\n沒有統一的規範跟撰寫方式，很快代碼就會往指數性的肥大邁進。\n\n身為一個前端工程師，經驗還稍嫌不足的我來說，雖然目前正在孤軍奮戰中，但其實還能做一些事。有問題對我來說是一件非常值得興奮的事，至少對我來說，那是一個可以捲起袖子來做事的大好機會。\n\n## 解法\n\n那麼，到底該怎麼做呢？我認為可以從以下幾點開始下手\n\n- 著手撰寫 `styleguide`，讓自己與之後的前端團隊快速上手，並且有一定的準則可以遵守\n- 技術選型：自動化工具、code quality 工具、選擇與淘汰\n- test 框架：前端代碼大部分都還沒寫 test，未來等架構穩定的時候希望可以趕快補上。\n- 讓重構變得簡單\n- 讓 comment 及 doc 變成習慣： comment 的 doc 永遠是工程師的好朋友！\n- 提交代碼的規範\n\n本系列的文章主要會著重在重構的部分，最後一篇會再跟大家分享文件應該寫些什麼，以及前端如何提交代碼及發送 pull request 給 code reviewer。\n\n目前已經大致撰寫了 styguide 的架構，下一步是逐漸重整 CSS 的架構以及拆分 HTML 組件。\n\n這不是一朝一夕就能完成的東西，甚至就某種角度來看會拖延到專案的進度。有點像是默默付出的工作吧...！畢竟在原有的專案中做改變本來就有較大的阻力。\n\n## 何時應該重構\n\n隨時重構，不要為了重構而重構。再來可以參考[三次法則](http://www.wikiwand.com/zh-tw/%E4%B8%89%E6%AC%A1%E6%B3%95%E5%88%99_(%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1))\n\n- 上版的時候對現有的 HTML 及 CSS 重構，或者對應的 component\n- 寫新的 js 模組時重構，順便撰寫 Comment 及文件\n- 送 pull request 的時候：不過要確定自己有寫上詳細的 comment 及 doc，才能提高 code reviewer 的 review 意願，而 senior 總是能更快看出代碼裡面的問題。\n\n我們常常對一些既有代碼的架構感到心癢，或者很想要趕快重構。但在 workaround 的情況下，有時重構的成本是非常大的。\n\n## 何時不應該重構\n\n其實比起重構來說，更重要的應該是拿捏不應該重構的程度。身為工程師或多或少都會對別人的代碼嗤之以鼻，恨不得趕快把 code 清掉。\n但，既然 code 有某種程度的肥大，代表他或多或少解決了問題。而且重構是需要**成本**的。就算是以目前的開發來說，通常也是先著重於將功能實作後，在有限度地作小幅度的調整以及逐漸補齊文件及註解。對於重構來說，最重要的是 `consistency`。s\n\n- 目前的解法雖然不漂亮，但確實解決問題的時候。\n- 目前的代碼重複率還不高的時候\n- 重構的成本太大，甚至影響到系統本身的時候。\n\n## 保持心平氣和\n\n重構的時候記得控制自己的情緒。我們很可能一不小心就在咒罵代碼或前任，然後在情緒上頭反而過度重構，造成更多的問題也說不定。\n\n> 代碼的存在是有歷史的\n\n有可能是進度太趕、有可能是政治因素、又或者當時的技術還沒到位。但可以確定的是，情緒化完全無法解決問題。\n\n[don't let anger contol you](http://www.apa.org/topics/anger/control.aspx)\n\n\n> Talk is cheap. Show me the code.\n\n下一篇，我會開始分享一些重構的技巧。\n\n## Final Word\n\n最後還是要聲明一下，這篇文章雖然會著重在一些重構的技巧上，但其實從 legacy code 中尋找出口的方法不只是重構而已。希望大家不要過往矯正，一看到髒 code 就急著捲起袖子重構。退一步評估一下成本跟重構的價值再做決定。\n\n#### Legacy Code 專欄\n\n- {% post_link 'legacy-code2' %}\n- {% post_link 'legacy-code3' %}\n","slug":"legacy-code","published":1,"updated":"2016-10-18T11:31:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p7h000nb75t1jb7jbqv","content":"<p>在我第一次進入主產品開發後，把代碼從 Github 上面 pull 下來。</p>\n<p>「這是什麼鬼東西？」</p>\n<p>結構混亂，大量覆寫的 class 各處都是，以及很可怕的巢狀 ID。<br>view 的部分也有些地方非常雜亂……。看來 legacy code 跟 refactor 永遠都在進行式。</p>\n<p>對於日新月異的前端來說，要接觸一個新技術、框架並不是太困難的事。但困難點在於如何在現有的大型專案中做取捨，我們常常會有其他考量。例如團隊的接受度、team leader、其他政治因素等等而無法輕易地將新框架套用在目前的專案上。</p>\n<p>這個系列的文章主要會分享如何在既有的專案中小心地進行重構。希望對各位有些幫助。</p>\n<h2 id=\"目前遇到的問題\"><a href=\"#目前遇到的問題\" class=\"headerlink\" title=\"目前遇到的問題\"></a>目前遇到的問題</h2><p>HTML 的架構混亂肥大，許多 <code>util class</code> 四散各處，在 CSS 中更可以看到大量的覆寫 class。雖然聽說之前已經有整理過了，但顯然這個房間還充滿許多灰塵。</p>\n<p>我認為前端常常遇到的 smell 問題有：</p>\n<ul>\n<li>復用性不足：儘管已經採用 React，但仍有許多高耦合的 component。而且其中還夾雜著 flux 與 redux 兩種不同的 library</li>\n<li>大量混雜業務邏輯的代碼（如 API ability 的判斷等），不僅要實際去了解業務流程外，還要知道檔案放在哪，必要時可能還要去看後端的程式碼</li>\n<li>HTML 的撰寫不夠語義化，充斥太多 <code>util class</code> 及 <code>atomic class</code>，後面接手的人比較難搞懂這行 view 裡頭所要表達的東西。</li>\n<li>CSS 檔案的撰寫不夠模組化。有太多混雜的模組都放在同一隻檔案中，查找非常不方便。</li>\n<li>大量的覆寫 class 造成上版時有很多意外的狀況發生。</li>\n</ul>\n<p>沒有統一的規範跟撰寫方式，很快代碼就會往指數性的肥大邁進。</p>\n<p>身為一個前端工程師，經驗還稍嫌不足的我來說，雖然目前正在孤軍奮戰中，但其實還能做一些事。有問題對我來說是一件非常值得興奮的事，至少對我來說，那是一個可以捲起袖子來做事的大好機會。</p>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><p>那麼，到底該怎麼做呢？我認為可以從以下幾點開始下手</p>\n<ul>\n<li>著手撰寫 <code>styleguide</code>，讓自己與之後的前端團隊快速上手，並且有一定的準則可以遵守</li>\n<li>技術選型：自動化工具、code quality 工具、選擇與淘汰</li>\n<li>test 框架：前端代碼大部分都還沒寫 test，未來等架構穩定的時候希望可以趕快補上。</li>\n<li>讓重構變得簡單</li>\n<li>讓 comment 及 doc 變成習慣： comment 的 doc 永遠是工程師的好朋友！</li>\n<li>提交代碼的規範</li>\n</ul>\n<p>本系列的文章主要會著重在重構的部分，最後一篇會再跟大家分享文件應該寫些什麼，以及前端如何提交代碼及發送 pull request 給 code reviewer。</p>\n<p>目前已經大致撰寫了 styguide 的架構，下一步是逐漸重整 CSS 的架構以及拆分 HTML 組件。</p>\n<p>這不是一朝一夕就能完成的東西，甚至就某種角度來看會拖延到專案的進度。有點像是默默付出的工作吧…！畢竟在原有的專案中做改變本來就有較大的阻力。</p>\n<h2 id=\"何時應該重構\"><a href=\"#何時應該重構\" class=\"headerlink\" title=\"何時應該重構\"></a>何時應該重構</h2><p>隨時重構，不要為了重構而重構。再來可以參考<a href=\"http://www.wikiwand.com/zh-tw/%E4%B8%89%E6%AC%A1%E6%B3%95%E5%88%99_(%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\" target=\"_blank\" rel=\"external\">三次法則</a>)</p>\n<ul>\n<li>上版的時候對現有的 HTML 及 CSS 重構，或者對應的 component</li>\n<li>寫新的 js 模組時重構，順便撰寫 Comment 及文件</li>\n<li>送 pull request 的時候：不過要確定自己有寫上詳細的 comment 及 doc，才能提高 code reviewer 的 review 意願，而 senior 總是能更快看出代碼裡面的問題。</li>\n</ul>\n<p>我們常常對一些既有代碼的架構感到心癢，或者很想要趕快重構。但在 workaround 的情況下，有時重構的成本是非常大的。</p>\n<h2 id=\"何時不應該重構\"><a href=\"#何時不應該重構\" class=\"headerlink\" title=\"何時不應該重構\"></a>何時不應該重構</h2><p>其實比起重構來說，更重要的應該是拿捏不應該重構的程度。身為工程師或多或少都會對別人的代碼嗤之以鼻，恨不得趕快把 code 清掉。<br>但，既然 code 有某種程度的肥大，代表他或多或少解決了問題。而且重構是需要<strong>成本</strong>的。就算是以目前的開發來說，通常也是先著重於將功能實作後，在有限度地作小幅度的調整以及逐漸補齊文件及註解。對於重構來說，最重要的是 <code>consistency</code>。s</p>\n<ul>\n<li>目前的解法雖然不漂亮，但確實解決問題的時候。</li>\n<li>目前的代碼重複率還不高的時候</li>\n<li>重構的成本太大，甚至影響到系統本身的時候。</li>\n</ul>\n<h2 id=\"保持心平氣和\"><a href=\"#保持心平氣和\" class=\"headerlink\" title=\"保持心平氣和\"></a>保持心平氣和</h2><p>重構的時候記得控制自己的情緒。我們很可能一不小心就在咒罵代碼或前任，然後在情緒上頭反而過度重構，造成更多的問題也說不定。</p>\n<blockquote>\n<p>代碼的存在是有歷史的</p>\n</blockquote>\n<p>有可能是進度太趕、有可能是政治因素、又或者當時的技術還沒到位。但可以確定的是，情緒化完全無法解決問題。</p>\n<p><a href=\"http://www.apa.org/topics/anger/control.aspx\" target=\"_blank\" rel=\"external\">don’t let anger contol you</a></p>\n<blockquote>\n<p>Talk is cheap. Show me the code.</p>\n</blockquote>\n<p>下一篇，我會開始分享一些重構的技巧。</p>\n<h2 id=\"Final-Word\"><a href=\"#Final-Word\" class=\"headerlink\" title=\"Final Word\"></a>Final Word</h2><p>最後還是要聲明一下，這篇文章雖然會著重在一些重構的技巧上，但其實從 legacy code 中尋找出口的方法不只是重構而已。希望大家不要過往矯正，一看到髒 code 就急著捲起袖子重構。退一步評估一下成本跟重構的價值再做決定。</p>\n<h4 id=\"Legacy-Code-專欄\"><a href=\"#Legacy-Code-專欄\" class=\"headerlink\" title=\"Legacy Code 專欄\"></a>Legacy Code 專欄</h4><ul>\n<li><a href=\"/2016/06/14/legacy-code2/\" title=\"如何從 legacy code 中尋找出口（中）- CSS 篇\">如何從 legacy code 中尋找出口（中）- CSS 篇</a></li>\n<li><a href=\"/2016/09/17/legacy-code3/\" title=\"從 legacy code 中尋找出口（中）- HTML 篇\">從 legacy code 中尋找出口（中）- HTML 篇</a>\n</li>\n</ul>\n","excerpt":"","more":"<p>在我第一次進入主產品開發後，把代碼從 Github 上面 pull 下來。</p>\n<p>「這是什麼鬼東西？」</p>\n<p>結構混亂，大量覆寫的 class 各處都是，以及很可怕的巢狀 ID。<br>view 的部分也有些地方非常雜亂……。看來 legacy code 跟 refactor 永遠都在進行式。</p>\n<p>對於日新月異的前端來說，要接觸一個新技術、框架並不是太困難的事。但困難點在於如何在現有的大型專案中做取捨，我們常常會有其他考量。例如團隊的接受度、team leader、其他政治因素等等而無法輕易地將新框架套用在目前的專案上。</p>\n<p>這個系列的文章主要會分享如何在既有的專案中小心地進行重構。希望對各位有些幫助。</p>\n<h2 id=\"目前遇到的問題\"><a href=\"#目前遇到的問題\" class=\"headerlink\" title=\"目前遇到的問題\"></a>目前遇到的問題</h2><p>HTML 的架構混亂肥大，許多 <code>util class</code> 四散各處，在 CSS 中更可以看到大量的覆寫 class。雖然聽說之前已經有整理過了，但顯然這個房間還充滿許多灰塵。</p>\n<p>我認為前端常常遇到的 smell 問題有：</p>\n<ul>\n<li>復用性不足：儘管已經採用 React，但仍有許多高耦合的 component。而且其中還夾雜著 flux 與 redux 兩種不同的 library</li>\n<li>大量混雜業務邏輯的代碼（如 API ability 的判斷等），不僅要實際去了解業務流程外，還要知道檔案放在哪，必要時可能還要去看後端的程式碼</li>\n<li>HTML 的撰寫不夠語義化，充斥太多 <code>util class</code> 及 <code>atomic class</code>，後面接手的人比較難搞懂這行 view 裡頭所要表達的東西。</li>\n<li>CSS 檔案的撰寫不夠模組化。有太多混雜的模組都放在同一隻檔案中，查找非常不方便。</li>\n<li>大量的覆寫 class 造成上版時有很多意外的狀況發生。</li>\n</ul>\n<p>沒有統一的規範跟撰寫方式，很快代碼就會往指數性的肥大邁進。</p>\n<p>身為一個前端工程師，經驗還稍嫌不足的我來說，雖然目前正在孤軍奮戰中，但其實還能做一些事。有問題對我來說是一件非常值得興奮的事，至少對我來說，那是一個可以捲起袖子來做事的大好機會。</p>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><p>那麼，到底該怎麼做呢？我認為可以從以下幾點開始下手</p>\n<ul>\n<li>著手撰寫 <code>styleguide</code>，讓自己與之後的前端團隊快速上手，並且有一定的準則可以遵守</li>\n<li>技術選型：自動化工具、code quality 工具、選擇與淘汰</li>\n<li>test 框架：前端代碼大部分都還沒寫 test，未來等架構穩定的時候希望可以趕快補上。</li>\n<li>讓重構變得簡單</li>\n<li>讓 comment 及 doc 變成習慣： comment 的 doc 永遠是工程師的好朋友！</li>\n<li>提交代碼的規範</li>\n</ul>\n<p>本系列的文章主要會著重在重構的部分，最後一篇會再跟大家分享文件應該寫些什麼，以及前端如何提交代碼及發送 pull request 給 code reviewer。</p>\n<p>目前已經大致撰寫了 styguide 的架構，下一步是逐漸重整 CSS 的架構以及拆分 HTML 組件。</p>\n<p>這不是一朝一夕就能完成的東西，甚至就某種角度來看會拖延到專案的進度。有點像是默默付出的工作吧…！畢竟在原有的專案中做改變本來就有較大的阻力。</p>\n<h2 id=\"何時應該重構\"><a href=\"#何時應該重構\" class=\"headerlink\" title=\"何時應該重構\"></a>何時應該重構</h2><p>隨時重構，不要為了重構而重構。再來可以參考<a href=\"http://www.wikiwand.com/zh-tw/%E4%B8%89%E6%AC%A1%E6%B3%95%E5%88%99_(%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\">三次法則</a>)</p>\n<ul>\n<li>上版的時候對現有的 HTML 及 CSS 重構，或者對應的 component</li>\n<li>寫新的 js 模組時重構，順便撰寫 Comment 及文件</li>\n<li>送 pull request 的時候：不過要確定自己有寫上詳細的 comment 及 doc，才能提高 code reviewer 的 review 意願，而 senior 總是能更快看出代碼裡面的問題。</li>\n</ul>\n<p>我們常常對一些既有代碼的架構感到心癢，或者很想要趕快重構。但在 workaround 的情況下，有時重構的成本是非常大的。</p>\n<h2 id=\"何時不應該重構\"><a href=\"#何時不應該重構\" class=\"headerlink\" title=\"何時不應該重構\"></a>何時不應該重構</h2><p>其實比起重構來說，更重要的應該是拿捏不應該重構的程度。身為工程師或多或少都會對別人的代碼嗤之以鼻，恨不得趕快把 code 清掉。<br>但，既然 code 有某種程度的肥大，代表他或多或少解決了問題。而且重構是需要<strong>成本</strong>的。就算是以目前的開發來說，通常也是先著重於將功能實作後，在有限度地作小幅度的調整以及逐漸補齊文件及註解。對於重構來說，最重要的是 <code>consistency</code>。s</p>\n<ul>\n<li>目前的解法雖然不漂亮，但確實解決問題的時候。</li>\n<li>目前的代碼重複率還不高的時候</li>\n<li>重構的成本太大，甚至影響到系統本身的時候。</li>\n</ul>\n<h2 id=\"保持心平氣和\"><a href=\"#保持心平氣和\" class=\"headerlink\" title=\"保持心平氣和\"></a>保持心平氣和</h2><p>重構的時候記得控制自己的情緒。我們很可能一不小心就在咒罵代碼或前任，然後在情緒上頭反而過度重構，造成更多的問題也說不定。</p>\n<blockquote>\n<p>代碼的存在是有歷史的</p>\n</blockquote>\n<p>有可能是進度太趕、有可能是政治因素、又或者當時的技術還沒到位。但可以確定的是，情緒化完全無法解決問題。</p>\n<p><a href=\"http://www.apa.org/topics/anger/control.aspx\">don’t let anger contol you</a></p>\n<blockquote>\n<p>Talk is cheap. Show me the code.</p>\n</blockquote>\n<p>下一篇，我會開始分享一些重構的技巧。</p>\n<h2 id=\"Final-Word\"><a href=\"#Final-Word\" class=\"headerlink\" title=\"Final Word\"></a>Final Word</h2><p>最後還是要聲明一下，這篇文章雖然會著重在一些重構的技巧上，但其實從 legacy code 中尋找出口的方法不只是重構而已。希望大家不要過往矯正，一看到髒 code 就急著捲起袖子重構。退一步評估一下成本跟重構的價值再做決定。</p>\n<h4 id=\"Legacy-Code-專欄\"><a href=\"#Legacy-Code-專欄\" class=\"headerlink\" title=\"Legacy Code 專欄\"></a>Legacy Code 專欄</h4><ul>\n<li><a href=\"/2016/06/14/legacy-code2/\" title=\"如何從 legacy code 中尋找出口（中）- CSS 篇\">如何從 legacy code 中尋找出口（中）- CSS 篇</a></li>\n<li><a href=\"/2016/09/17/legacy-code3/\" title=\"從 legacy code 中尋找出口（中）- HTML 篇\">從 legacy code 中尋找出口（中）- HTML 篇</a>\n</li>\n</ul>\n"},{"title":"如何從 legacy code 中尋找出口（中）- CSS 篇","date":"2016-06-14T04:01:52.000Z","_content":"\n\n## 前言\n\n我們的第一步是先從 CSS 下手，因為 css 是相對於其他前端部分來說比較容易重構的部分。很容易髒亂的 code 也是 CSS。\n\n\n上一篇描述了在大型專案中引入新框架及技術的困難點，這一篇主要會專注在如何透過現有的工具及框架來重構現有的代碼。\n\n本次的重構技巧會以 SCSS 為主，所以在閱讀本文之前，我先假設你已經有基本的 SCSS 以及 CSS 的基礎。其他預處理器的概念應該是相通的。\n\n## 引入 style linter 及 editorconfig\n\n我們採取的第一步是先引入審查代碼工具。目前比較流行的 css linter 是 stylelinter，他能夠針對 scss sass 語法做 lint。也可以搭配其他 IDE、文字編輯器 plugin。這邊的範例是使用 sublime，其他的 IDE 應該也有類似的功能。\n\n### 1. 加入 stylelint\n\nstylelint 除了可以針對 scss 語法做 lint 之外。由於其本身是用 js 撰寫的，可以客製化自己的 rule 跟加入其他開源的 plugin。\n\n因為 stylelint 是以 AST 的方式解析，所以可以很容易的對文件中的節點做操作。\n\n關於 stylelint 的深入使用，已經超過本文篇幅，有興趣的人可以參考 css trick 的[教學](https://css-tricks.com/stylelint/)\n\n首先，先來安裝 `stylelint`，run `npm install -g stylelint`。\n\n再來設置 .stylelintrc 檔，詳細的 rules 可以到[這裡](http://stylelint.io/user-guide/rules/) 查看。如果你不想要那麼麻煩自己手動一個一個設定的話。可以考慮使用 [stylelint-config-standard](https://github.com/stylelint/stylelint-config-standard) 這個插件，再根據自己的需求做調整。\n\n`npm install --save-dev stylelint-config-standard`\n\n**這邊還是建議花時間瞭解一下專案的需求來制定 rule，不然有時候太嚴格的 rule，滿江紅看到也懶得改了。**\n\n\n### 2. 加入 .editorconfig\n\nEditorConfig 是一個為了統一代碼風格的解決方案。每個人文字編輯器的環境可能不盡相同，為了統一彼此之間的環境，這邊我們採用的 `editorconfig`\n\n設定非常簡單，只要新增一個檔案就好。[editorconfig](http://EditorConfig.org)。\n\n目前幾乎主流的文字編輯器都有支援 editorconfig。\n\n## 常見的 code smell 以及 refactor 方式\n\n在開始捲起袖子做事之前，還是先來確認一下目前的專案是否需要 refactor：\n\n- 許多元件（如 button input）等放在同一個檔案內，查找非常不易。\n- 覆寫了許多 class 造成預期之外的行為發生\n- 早期沒有統一的代碼規範，tab、空白夾雜在一起，閱讀性大幅降低\n- !important 四散各處\n- 變數的命名跟管理不夠統一\n- 團隊開始擴增\n- 相關的文件不足\n\n接下來介紹一些比較常見的 code smell\n\n### Order\n\nclass 變多之後，如果 rule 裡面沒有一定的排列順序的話，其實查找很不方便。而且易讀性並不高，像是下列的 code\n\n```css\n.class {\n\tposition: absolute;\n\tdisplay: none;\n\tpadding: 30px;\n\tcursor: pointer;\n\tlist-style: none;\n\tfont-size: 20px;\n\tbackground: white;\n\tmargin:0;\n\ttop:0;\n\tleft:0;\n\twidth: 250px;\n\tpadding-left: 15px;\n\toverflow-y: scroll;\n\toverflow-x: hidden;\n\tborder: 1px solid $hr-gray;\n\tz-index: 9999999;\n}\n```\n\n那麼要怎樣排序會比較好呢？這邊提供幾個大原則：\n\n1. display、position\n2. box-model\n3. font、typography\n4. layout(包含 color、border-radius 等)\n5. 其他屬性(如animation)\n\n\n原因：對一個 class 來說，最重要的就是 display 與 position ，所以應該擺在最上面。而其次重要的內容是文字，所以擺第二，最後才是 `layout` 與其他屬性。\n至於屬於同屬性的話不限制順序，例如 padding margin 順序調換沒有關係，因為找起來都很方便。只要維持一定的邏輯即可。\n\n```css\n.class {\n\tdisplay: none;\n\tposition: absolute;\n\ttop:0;\n\tleft:0;\n\tz-index: 9999999;\n\t\n\twidth: 250px;\n\n\tpadding: 30px;\n\tpadding-left: 15px;\n\tmargin:0;\n\n\tfont-size: 20px;\n\n\tbackground: white;\n\tborder: 1px solid #aaa;\n\n\tlist-style: none;\n\tcursor: pointer;\n\t\n\toverflow-y: scroll;\n\toverflow-x: hidden;\t\n}\n```\n\n### 善用 sass map 管理變數\n\nstyle 檔案變多了之後，相對的要管理的變數也會變得越來越多。\n除了在命名時加上前綴之外，我們也可以利用 sass map 的方式來統一管理。而且 sass map 提供了一些很方便的 [function](http://sass-lang.com/documentation/Sass/Script/Functions.html) 來操作，像是 `map-get` `map-has-key`等等，可以很有效地把變數 group 起來。很像 js 的 object。\n\n以 `z-index` 來說，我們可以改寫下面的 code\n\n\n```CSS\n/* before */\n$zindex-navbar: 100;\n$zindex-dropdown: 200;\n$zindex-tooltip: 300;\n$zindex-modal: 400;\n\n.navbar {\n\tz-index: $zindex-navbar;\n}\n\n/* after */\n$zindex: (\n  navbar: 100,\n  dropdown: 200,\n  tooltip: 300,\n  modal: 400\n);\n\n.navbar {\n\tz-index: map-get($zindex, 'navbar');\n}\n```\n\n用 `map` 的方式取值，看起來好像比較厚工一點，我們可以用 sass 的 function 包裝起來：\n\n```css\n/**\n * z alias for z-index\n * get zindex map value\n */\n@function z($key) {\n\t@if(map-has-key($zindex, $key)){\n    @return map-get($zindex, $key);\n  } @else {\n    @error \"unknown key #{$key}\";\n  }\n}\n.navbar {\n\tz-index: z($zindex, 'navbar');\n}\n```\n\n當然還有其他的應用像是 `color` `typography` 等等，都可以搭配 sass map 的方式來操作。\n\n如果你認為上述的方式跟用前綴的方式分類變數沒有什麼不同的話，不套用也沒關係，重構是為了讓之後的開發更舒服。\n\n### 大量的巢狀 class\n\n我的建議是不要超過三層，第一是易讀性非常低，再來很容易覆蓋到權重。\n可以採用一些目前比較熱門的 css 命名規範如 OOCSS 或是 BEM，或者搭配兩者一起使用。\n\n但最重要的一點是自己寫起來的感覺，不要讓規範箝制你了。\n\n如果想要使用 scss 的巢狀功能方便閱讀，又不想要讓巢狀 class 覆蓋權重的話，可以使用 @at-root，@at-root 在編譯的時候會幫你把巢狀拆出來到 root。\n\n另外可以使用 `>` 子元素選擇器來取代後代選擇器。\n\n```css\n.classA {\n\t@at-root .classB {\n    // bla\n\t}\n}\n\n// compiled\n\n.classA {\n\t\n}\n  .classB {\n    // bla\n  }\n```\n\n實際的 use case 如下：\n\n```css \n.alert-modal {\n  @at-root &__header {\n\n  }\n\n  @at-root &__body {\n\n  }\n\n  @at-root &__footer {\n\n  }\n}\n```\n\n以上的代碼好像沒有想像中的好看，等下可以搭配 mixin 把它進一步做簡化。\n\n## 善用 Mixin 簡化程式\n\n除了一般使用 mixin 來加入 `prefixer` 之外，mixin 能夠做的事情還有很多，這邊提出幾個方法給大家參考。\n\n### BEM mixin\n\nBEM 的命名方式，如果一直手動 key 的話，感覺也挺麻煩的，而且 key 錯的機率也蠻高的，我們可以利用 mixin 來簡化他。\n\n順便一提，如果你的專案已經套用了 `postCSS`，可以使用 [postcss-bem](https://www.npmjs.com/package/postcss-bem) 來幫助命名。\n\n如果你不喜歡他的命名方式，或是當前還無法套用 postCSS 的話也沒關係，我們可以自己做一個。\n\n上面的 code 可以改成下面的形式：\n\n```css\n@mixin block($block_name) {\n  .#{$block_name} { @content; }\n}\n\n@mixin element($element_name) { \n  @at-root &__#{$element_name} { @content; }\n}\n\n@mixin modifier($modifier_name) {\n  @at-root &-#{$modifier_name} { @content; }\t\n}\n\n@mixin state($state_name) {\n\t&.is-${#state_name} {@content;}\n}\n\n// modal.scss\n\n// before\n.alert-modal {\n  @at-root &__header {\n\n  }\n\n  @at-root &__body {\n\n  }\n\n  @at-root &__footer {\n\n  }\n}\n\n// after\n@include block(\"alert-modal\") {\n\t@include element(\"header\") {}\n\t@include element(\"body\") {}\n\t@include element(\"footer\") {}\n}\n```\n\n這樣一來簡單的 BEM mixins 就製作完成了。注意到這邊我們使用 `at-root` 的方式來避免巢狀 class。\n\n可以按照自己的喜好來調整命名方式，或者嚴謹一點對參數做一些處理（轉為小寫等等）、加入判斷式等等，或者今天你想要使用巢狀 class 的話可以加入額外的判斷參數。\n\n```css\n@mixin element($element_name, $at-root: true) { \n  @if($at-root) {\n    @at-root &__#{$element_name} { @content; }\n  }\n  @else {\n    &__#{$element_name} { @content; }\n  }\n  \n}\n```\n\n### util mixin\n\n舉例來說，在設置 padding margin 的時候，我們常常會將上下或是左右的值設為一樣。寫久了難免會嫌麻煩，這時候就可以拜託 mixin 了。\n\n```css\n// before\n.classA {\n\tmargin-right: 10px;\n\tmargin-left: 10px;\n}\n\n// after\n\n/*\n * lr Alias for left right\n */\n@mixin lr($box_model, $value) {\n\t#{$box_model}-left: $value;\n\t#{$box_model}-right: $value;\n};\n.classA {\n\t@include lr(\"margin\", 10px);\n}\n```\n這邊沒有寫得很嚴謹，你可以另外加入判斷式來保證輸入的值是合法的，類似的概念也能套用到 top left 設值上。\n\n或是常常遇到的 clearfix。\n\n```css\n@mixin clearfix() {\n\t&:before, &:after {\n    display: table;\n    content: \"\";\n\t\tclear: both;\n  }\n}\n\n.column {\n\t@include clearfix;\n}\n```\n\n### child selector mixin\n\n常常會遇到使用 child selector 的情境。我們可以用 mixin 進一步包裝起來。\n\n```css\n// before\n.list {\n\t&:first-child {\n\t  //bla\n\t}\n\n\t&:nth-child(2n) {\n\t  //bla\n\t}\n}\n// after \n@mixin first() {\n\t&:first-child { @content; }\n}\n.list {\n\t@include first() {};\n}\n```\n\n這邊推薦 [Family.scss](http://lukyvj.github.io/family.scss/)，搜集了許多好用 child selector mixin。\n\n**p.s：我認為剛入門 CSS 的人還是從純 CSS 開始學習比較好，以免被 SCSS 的語法糖給寵壞了**\n\n## 善用 Comment\n\n在缺乏 function 的 css 下，使用 comment 來解釋 class 更為重要。這邊提供一些，comment 的技巧。\n\n註解不但方便自己閱讀，之後別人接手也會比較快理解這個 class 該如何使用、在哪個場景使用。\n\n### 目錄\n\n如果文件包含的 class 較多，可以考慮在文件最前面加入目錄，方便之後查找。\n\n```css\n/**\n * INPUT\n *  text\n *  select\n *  number\n * BUTTON\n *  primary\n *  warn\n */\n```\n\n### 魔術數字、HACK、使用方式\n\n```css\n/*\n * for input[type=\"text\"]\n * e.g: <input type=\"text\" />\n */\n \n.text-input[type=\"text\"] {\n  padding: 20px;\n\n  /* page offset */\n\ttop: 27px;\n  /* IE 8+ hack */\n  // ...\n}\n```\n\n## CSS 結構\n\n基本上分成幾個大方向：`module` `base` `config` `helper`\n\n### module\n\nmodule 資料夾裡存放所有模組化的元件，像是 button input modal 等等。如果元件拆得更細的話，可以再另外開資料夾，像是 button 有可能樣式比較多，這時候我們可以另外開一個 `button` 資料夾，裡頭存放所有 button 的樣式。\n\n### base \n\nbase 裡頭放置了像是 `grid` `normalize` `reset` `typography` 等比較基本的架構。\n\n### config\n\n存放變數跟 color 的地方，設定的內容統一存放在這個資料夾統一管理。\n\n### helper\n\n存放客製化的 function 跟 mixin。\n\n## 寫在最後\n\n如果你有額外的時間，建議你還是可以去看看像是 [postCSS](https://github.com/postcss/postcss)、[css-modules](https://github.com/css-modules/css-modules)、[webpack](https://github.com/webpack/webpack) 等優秀的開源工具。\n不然整天跟 CSS 打架總有一天會精神耗弱的XD。\n\n做了一個[DEMO](https://github.com/kjj6198/css-structure-example)，非常陽春。\n\n如果你也想分享自己在前端跟 legacy code 奮鬥的過程，或是有更好的解決方案，歡迎在下面留言。\n\n## 持續關注前端趨勢\n\n這裡分享幾個覺得蠻優質的資源。\n\n[掘金網](http://gold.xitu.io/)\n\n[碼天狗（但最近前端的分享不多）](http://weekly.codetengu.com/)\n\n[TechBrige](https://www.techbridge.cc/)\n\n[CSS wizard](http://csswizardry.com/)\n\n\n### reference\n\n[CSS guideline](http://cssguidelin.es/)\n\n[Why Stylelint](https://www.smashingmagazine.com/2016/05/stylelint-the-style-sheet-linter-weve-always-wanted/)\n\n[CSS coding techniques](https://hacks.mozilla.org/2016/05/css-coding-techniques/?utm_campaign=CodeTengu&utm_medium=email&utm_source=CodeTengu_44)\n\n[why you should refactor your css](http://seesparkbox.com/foundry/why_you_need_to_refactor_your_css)\n\n[rsscss.io](http://rscss.io/)\n\n#### Legacy Code 專欄\n\n- {% post_link 'legacy-code' %}\n- {% post_link 'legacy-code3' %}\n","source":"_posts/legacy-code2.md","raw":"---\ntitle: 如何從 legacy code 中尋找出口（中）- CSS 篇\ncategories: 前端\ntags:\n  - 重構\n  - 前端\ndate: 2016-06-14 12:01:52\n---\n\n\n## 前言\n\n我們的第一步是先從 CSS 下手，因為 css 是相對於其他前端部分來說比較容易重構的部分。很容易髒亂的 code 也是 CSS。\n\n\n上一篇描述了在大型專案中引入新框架及技術的困難點，這一篇主要會專注在如何透過現有的工具及框架來重構現有的代碼。\n\n本次的重構技巧會以 SCSS 為主，所以在閱讀本文之前，我先假設你已經有基本的 SCSS 以及 CSS 的基礎。其他預處理器的概念應該是相通的。\n\n## 引入 style linter 及 editorconfig\n\n我們採取的第一步是先引入審查代碼工具。目前比較流行的 css linter 是 stylelinter，他能夠針對 scss sass 語法做 lint。也可以搭配其他 IDE、文字編輯器 plugin。這邊的範例是使用 sublime，其他的 IDE 應該也有類似的功能。\n\n### 1. 加入 stylelint\n\nstylelint 除了可以針對 scss 語法做 lint 之外。由於其本身是用 js 撰寫的，可以客製化自己的 rule 跟加入其他開源的 plugin。\n\n因為 stylelint 是以 AST 的方式解析，所以可以很容易的對文件中的節點做操作。\n\n關於 stylelint 的深入使用，已經超過本文篇幅，有興趣的人可以參考 css trick 的[教學](https://css-tricks.com/stylelint/)\n\n首先，先來安裝 `stylelint`，run `npm install -g stylelint`。\n\n再來設置 .stylelintrc 檔，詳細的 rules 可以到[這裡](http://stylelint.io/user-guide/rules/) 查看。如果你不想要那麼麻煩自己手動一個一個設定的話。可以考慮使用 [stylelint-config-standard](https://github.com/stylelint/stylelint-config-standard) 這個插件，再根據自己的需求做調整。\n\n`npm install --save-dev stylelint-config-standard`\n\n**這邊還是建議花時間瞭解一下專案的需求來制定 rule，不然有時候太嚴格的 rule，滿江紅看到也懶得改了。**\n\n\n### 2. 加入 .editorconfig\n\nEditorConfig 是一個為了統一代碼風格的解決方案。每個人文字編輯器的環境可能不盡相同，為了統一彼此之間的環境，這邊我們採用的 `editorconfig`\n\n設定非常簡單，只要新增一個檔案就好。[editorconfig](http://EditorConfig.org)。\n\n目前幾乎主流的文字編輯器都有支援 editorconfig。\n\n## 常見的 code smell 以及 refactor 方式\n\n在開始捲起袖子做事之前，還是先來確認一下目前的專案是否需要 refactor：\n\n- 許多元件（如 button input）等放在同一個檔案內，查找非常不易。\n- 覆寫了許多 class 造成預期之外的行為發生\n- 早期沒有統一的代碼規範，tab、空白夾雜在一起，閱讀性大幅降低\n- !important 四散各處\n- 變數的命名跟管理不夠統一\n- 團隊開始擴增\n- 相關的文件不足\n\n接下來介紹一些比較常見的 code smell\n\n### Order\n\nclass 變多之後，如果 rule 裡面沒有一定的排列順序的話，其實查找很不方便。而且易讀性並不高，像是下列的 code\n\n```css\n.class {\n\tposition: absolute;\n\tdisplay: none;\n\tpadding: 30px;\n\tcursor: pointer;\n\tlist-style: none;\n\tfont-size: 20px;\n\tbackground: white;\n\tmargin:0;\n\ttop:0;\n\tleft:0;\n\twidth: 250px;\n\tpadding-left: 15px;\n\toverflow-y: scroll;\n\toverflow-x: hidden;\n\tborder: 1px solid $hr-gray;\n\tz-index: 9999999;\n}\n```\n\n那麼要怎樣排序會比較好呢？這邊提供幾個大原則：\n\n1. display、position\n2. box-model\n3. font、typography\n4. layout(包含 color、border-radius 等)\n5. 其他屬性(如animation)\n\n\n原因：對一個 class 來說，最重要的就是 display 與 position ，所以應該擺在最上面。而其次重要的內容是文字，所以擺第二，最後才是 `layout` 與其他屬性。\n至於屬於同屬性的話不限制順序，例如 padding margin 順序調換沒有關係，因為找起來都很方便。只要維持一定的邏輯即可。\n\n```css\n.class {\n\tdisplay: none;\n\tposition: absolute;\n\ttop:0;\n\tleft:0;\n\tz-index: 9999999;\n\t\n\twidth: 250px;\n\n\tpadding: 30px;\n\tpadding-left: 15px;\n\tmargin:0;\n\n\tfont-size: 20px;\n\n\tbackground: white;\n\tborder: 1px solid #aaa;\n\n\tlist-style: none;\n\tcursor: pointer;\n\t\n\toverflow-y: scroll;\n\toverflow-x: hidden;\t\n}\n```\n\n### 善用 sass map 管理變數\n\nstyle 檔案變多了之後，相對的要管理的變數也會變得越來越多。\n除了在命名時加上前綴之外，我們也可以利用 sass map 的方式來統一管理。而且 sass map 提供了一些很方便的 [function](http://sass-lang.com/documentation/Sass/Script/Functions.html) 來操作，像是 `map-get` `map-has-key`等等，可以很有效地把變數 group 起來。很像 js 的 object。\n\n以 `z-index` 來說，我們可以改寫下面的 code\n\n\n```CSS\n/* before */\n$zindex-navbar: 100;\n$zindex-dropdown: 200;\n$zindex-tooltip: 300;\n$zindex-modal: 400;\n\n.navbar {\n\tz-index: $zindex-navbar;\n}\n\n/* after */\n$zindex: (\n  navbar: 100,\n  dropdown: 200,\n  tooltip: 300,\n  modal: 400\n);\n\n.navbar {\n\tz-index: map-get($zindex, 'navbar');\n}\n```\n\n用 `map` 的方式取值，看起來好像比較厚工一點，我們可以用 sass 的 function 包裝起來：\n\n```css\n/**\n * z alias for z-index\n * get zindex map value\n */\n@function z($key) {\n\t@if(map-has-key($zindex, $key)){\n    @return map-get($zindex, $key);\n  } @else {\n    @error \"unknown key #{$key}\";\n  }\n}\n.navbar {\n\tz-index: z($zindex, 'navbar');\n}\n```\n\n當然還有其他的應用像是 `color` `typography` 等等，都可以搭配 sass map 的方式來操作。\n\n如果你認為上述的方式跟用前綴的方式分類變數沒有什麼不同的話，不套用也沒關係，重構是為了讓之後的開發更舒服。\n\n### 大量的巢狀 class\n\n我的建議是不要超過三層，第一是易讀性非常低，再來很容易覆蓋到權重。\n可以採用一些目前比較熱門的 css 命名規範如 OOCSS 或是 BEM，或者搭配兩者一起使用。\n\n但最重要的一點是自己寫起來的感覺，不要讓規範箝制你了。\n\n如果想要使用 scss 的巢狀功能方便閱讀，又不想要讓巢狀 class 覆蓋權重的話，可以使用 @at-root，@at-root 在編譯的時候會幫你把巢狀拆出來到 root。\n\n另外可以使用 `>` 子元素選擇器來取代後代選擇器。\n\n```css\n.classA {\n\t@at-root .classB {\n    // bla\n\t}\n}\n\n// compiled\n\n.classA {\n\t\n}\n  .classB {\n    // bla\n  }\n```\n\n實際的 use case 如下：\n\n```css \n.alert-modal {\n  @at-root &__header {\n\n  }\n\n  @at-root &__body {\n\n  }\n\n  @at-root &__footer {\n\n  }\n}\n```\n\n以上的代碼好像沒有想像中的好看，等下可以搭配 mixin 把它進一步做簡化。\n\n## 善用 Mixin 簡化程式\n\n除了一般使用 mixin 來加入 `prefixer` 之外，mixin 能夠做的事情還有很多，這邊提出幾個方法給大家參考。\n\n### BEM mixin\n\nBEM 的命名方式，如果一直手動 key 的話，感覺也挺麻煩的，而且 key 錯的機率也蠻高的，我們可以利用 mixin 來簡化他。\n\n順便一提，如果你的專案已經套用了 `postCSS`，可以使用 [postcss-bem](https://www.npmjs.com/package/postcss-bem) 來幫助命名。\n\n如果你不喜歡他的命名方式，或是當前還無法套用 postCSS 的話也沒關係，我們可以自己做一個。\n\n上面的 code 可以改成下面的形式：\n\n```css\n@mixin block($block_name) {\n  .#{$block_name} { @content; }\n}\n\n@mixin element($element_name) { \n  @at-root &__#{$element_name} { @content; }\n}\n\n@mixin modifier($modifier_name) {\n  @at-root &-#{$modifier_name} { @content; }\t\n}\n\n@mixin state($state_name) {\n\t&.is-${#state_name} {@content;}\n}\n\n// modal.scss\n\n// before\n.alert-modal {\n  @at-root &__header {\n\n  }\n\n  @at-root &__body {\n\n  }\n\n  @at-root &__footer {\n\n  }\n}\n\n// after\n@include block(\"alert-modal\") {\n\t@include element(\"header\") {}\n\t@include element(\"body\") {}\n\t@include element(\"footer\") {}\n}\n```\n\n這樣一來簡單的 BEM mixins 就製作完成了。注意到這邊我們使用 `at-root` 的方式來避免巢狀 class。\n\n可以按照自己的喜好來調整命名方式，或者嚴謹一點對參數做一些處理（轉為小寫等等）、加入判斷式等等，或者今天你想要使用巢狀 class 的話可以加入額外的判斷參數。\n\n```css\n@mixin element($element_name, $at-root: true) { \n  @if($at-root) {\n    @at-root &__#{$element_name} { @content; }\n  }\n  @else {\n    &__#{$element_name} { @content; }\n  }\n  \n}\n```\n\n### util mixin\n\n舉例來說，在設置 padding margin 的時候，我們常常會將上下或是左右的值設為一樣。寫久了難免會嫌麻煩，這時候就可以拜託 mixin 了。\n\n```css\n// before\n.classA {\n\tmargin-right: 10px;\n\tmargin-left: 10px;\n}\n\n// after\n\n/*\n * lr Alias for left right\n */\n@mixin lr($box_model, $value) {\n\t#{$box_model}-left: $value;\n\t#{$box_model}-right: $value;\n};\n.classA {\n\t@include lr(\"margin\", 10px);\n}\n```\n這邊沒有寫得很嚴謹，你可以另外加入判斷式來保證輸入的值是合法的，類似的概念也能套用到 top left 設值上。\n\n或是常常遇到的 clearfix。\n\n```css\n@mixin clearfix() {\n\t&:before, &:after {\n    display: table;\n    content: \"\";\n\t\tclear: both;\n  }\n}\n\n.column {\n\t@include clearfix;\n}\n```\n\n### child selector mixin\n\n常常會遇到使用 child selector 的情境。我們可以用 mixin 進一步包裝起來。\n\n```css\n// before\n.list {\n\t&:first-child {\n\t  //bla\n\t}\n\n\t&:nth-child(2n) {\n\t  //bla\n\t}\n}\n// after \n@mixin first() {\n\t&:first-child { @content; }\n}\n.list {\n\t@include first() {};\n}\n```\n\n這邊推薦 [Family.scss](http://lukyvj.github.io/family.scss/)，搜集了許多好用 child selector mixin。\n\n**p.s：我認為剛入門 CSS 的人還是從純 CSS 開始學習比較好，以免被 SCSS 的語法糖給寵壞了**\n\n## 善用 Comment\n\n在缺乏 function 的 css 下，使用 comment 來解釋 class 更為重要。這邊提供一些，comment 的技巧。\n\n註解不但方便自己閱讀，之後別人接手也會比較快理解這個 class 該如何使用、在哪個場景使用。\n\n### 目錄\n\n如果文件包含的 class 較多，可以考慮在文件最前面加入目錄，方便之後查找。\n\n```css\n/**\n * INPUT\n *  text\n *  select\n *  number\n * BUTTON\n *  primary\n *  warn\n */\n```\n\n### 魔術數字、HACK、使用方式\n\n```css\n/*\n * for input[type=\"text\"]\n * e.g: <input type=\"text\" />\n */\n \n.text-input[type=\"text\"] {\n  padding: 20px;\n\n  /* page offset */\n\ttop: 27px;\n  /* IE 8+ hack */\n  // ...\n}\n```\n\n## CSS 結構\n\n基本上分成幾個大方向：`module` `base` `config` `helper`\n\n### module\n\nmodule 資料夾裡存放所有模組化的元件，像是 button input modal 等等。如果元件拆得更細的話，可以再另外開資料夾，像是 button 有可能樣式比較多，這時候我們可以另外開一個 `button` 資料夾，裡頭存放所有 button 的樣式。\n\n### base \n\nbase 裡頭放置了像是 `grid` `normalize` `reset` `typography` 等比較基本的架構。\n\n### config\n\n存放變數跟 color 的地方，設定的內容統一存放在這個資料夾統一管理。\n\n### helper\n\n存放客製化的 function 跟 mixin。\n\n## 寫在最後\n\n如果你有額外的時間，建議你還是可以去看看像是 [postCSS](https://github.com/postcss/postcss)、[css-modules](https://github.com/css-modules/css-modules)、[webpack](https://github.com/webpack/webpack) 等優秀的開源工具。\n不然整天跟 CSS 打架總有一天會精神耗弱的XD。\n\n做了一個[DEMO](https://github.com/kjj6198/css-structure-example)，非常陽春。\n\n如果你也想分享自己在前端跟 legacy code 奮鬥的過程，或是有更好的解決方案，歡迎在下面留言。\n\n## 持續關注前端趨勢\n\n這裡分享幾個覺得蠻優質的資源。\n\n[掘金網](http://gold.xitu.io/)\n\n[碼天狗（但最近前端的分享不多）](http://weekly.codetengu.com/)\n\n[TechBrige](https://www.techbridge.cc/)\n\n[CSS wizard](http://csswizardry.com/)\n\n\n### reference\n\n[CSS guideline](http://cssguidelin.es/)\n\n[Why Stylelint](https://www.smashingmagazine.com/2016/05/stylelint-the-style-sheet-linter-weve-always-wanted/)\n\n[CSS coding techniques](https://hacks.mozilla.org/2016/05/css-coding-techniques/?utm_campaign=CodeTengu&utm_medium=email&utm_source=CodeTengu_44)\n\n[why you should refactor your css](http://seesparkbox.com/foundry/why_you_need_to_refactor_your_css)\n\n[rsscss.io](http://rscss.io/)\n\n#### Legacy Code 專欄\n\n- {% post_link 'legacy-code' %}\n- {% post_link 'legacy-code3' %}\n","slug":"legacy-code2","published":1,"updated":"2016-10-18T11:32:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p7o000qb75tzzqjw2ln","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我們的第一步是先從 CSS 下手，因為 css 是相對於其他前端部分來說比較容易重構的部分。很容易髒亂的 code 也是 CSS。</p>\n<p>上一篇描述了在大型專案中引入新框架及技術的困難點，這一篇主要會專注在如何透過現有的工具及框架來重構現有的代碼。</p>\n<p>本次的重構技巧會以 SCSS 為主，所以在閱讀本文之前，我先假設你已經有基本的 SCSS 以及 CSS 的基礎。其他預處理器的概念應該是相通的。</p>\n<h2 id=\"引入-style-linter-及-editorconfig\"><a href=\"#引入-style-linter-及-editorconfig\" class=\"headerlink\" title=\"引入 style linter 及 editorconfig\"></a>引入 style linter 及 editorconfig</h2><p>我們採取的第一步是先引入審查代碼工具。目前比較流行的 css linter 是 stylelinter，他能夠針對 scss sass 語法做 lint。也可以搭配其他 IDE、文字編輯器 plugin。這邊的範例是使用 sublime，其他的 IDE 應該也有類似的功能。</p>\n<h3 id=\"1-加入-stylelint\"><a href=\"#1-加入-stylelint\" class=\"headerlink\" title=\"1. 加入 stylelint\"></a>1. 加入 stylelint</h3><p>stylelint 除了可以針對 scss 語法做 lint 之外。由於其本身是用 js 撰寫的，可以客製化自己的 rule 跟加入其他開源的 plugin。</p>\n<p>因為 stylelint 是以 AST 的方式解析，所以可以很容易的對文件中的節點做操作。</p>\n<p>關於 stylelint 的深入使用，已經超過本文篇幅，有興趣的人可以參考 css trick 的<a href=\"https://css-tricks.com/stylelint/\" target=\"_blank\" rel=\"external\">教學</a></p>\n<p>首先，先來安裝 <code>stylelint</code>，run <code>npm install -g stylelint</code>。</p>\n<p>再來設置 .stylelintrc 檔，詳細的 rules 可以到<a href=\"http://stylelint.io/user-guide/rules/\" target=\"_blank\" rel=\"external\">這裡</a> 查看。如果你不想要那麼麻煩自己手動一個一個設定的話。可以考慮使用 <a href=\"https://github.com/stylelint/stylelint-config-standard\" target=\"_blank\" rel=\"external\">stylelint-config-standard</a> 這個插件，再根據自己的需求做調整。</p>\n<p><code>npm install --save-dev stylelint-config-standard</code></p>\n<p><strong>這邊還是建議花時間瞭解一下專案的需求來制定 rule，不然有時候太嚴格的 rule，滿江紅看到也懶得改了。</strong></p>\n<h3 id=\"2-加入-editorconfig\"><a href=\"#2-加入-editorconfig\" class=\"headerlink\" title=\"2. 加入 .editorconfig\"></a>2. 加入 .editorconfig</h3><p>EditorConfig 是一個為了統一代碼風格的解決方案。每個人文字編輯器的環境可能不盡相同，為了統一彼此之間的環境，這邊我們採用的 <code>editorconfig</code></p>\n<p>設定非常簡單，只要新增一個檔案就好。<a href=\"http://EditorConfig.org\" target=\"_blank\" rel=\"external\">editorconfig</a>。</p>\n<p>目前幾乎主流的文字編輯器都有支援 editorconfig。</p>\n<h2 id=\"常見的-code-smell-以及-refactor-方式\"><a href=\"#常見的-code-smell-以及-refactor-方式\" class=\"headerlink\" title=\"常見的 code smell 以及 refactor 方式\"></a>常見的 code smell 以及 refactor 方式</h2><p>在開始捲起袖子做事之前，還是先來確認一下目前的專案是否需要 refactor：</p>\n<ul>\n<li>許多元件（如 button input）等放在同一個檔案內，查找非常不易。</li>\n<li>覆寫了許多 class 造成預期之外的行為發生</li>\n<li>早期沒有統一的代碼規範，tab、空白夾雜在一起，閱讀性大幅降低</li>\n<li>!important 四散各處</li>\n<li>變數的命名跟管理不夠統一</li>\n<li>團隊開始擴增</li>\n<li>相關的文件不足</li>\n</ul>\n<p>接下來介紹一些比較常見的 code smell</p>\n<h3 id=\"Order\"><a href=\"#Order\" class=\"headerlink\" title=\"Order\"></a>Order</h3><p>class 變多之後，如果 rule 裡面沒有一定的排列順序的話，其實查找很不方便。而且易讀性並不高，像是下列的 code</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.class</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">\t<span class=\"attribute\">display</span>: none;</div><div class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">30px</span>;</div><div class=\"line\">\t<span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">\t<span class=\"attribute\">list-style</span>: none;</div><div class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background</span>: white;</div><div class=\"line\">\t<span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">250px</span>;</div><div class=\"line\">\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">15px</span>;</div><div class=\"line\">\t<span class=\"attribute\">overflow-y</span>: scroll;</div><div class=\"line\">\t<span class=\"attribute\">overflow-x</span>: hidden;</div><div class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid $hr-gray;</div><div class=\"line\">\t<span class=\"attribute\">z-index</span>: <span class=\"number\">9999999</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>那麼要怎樣排序會比較好呢？這邊提供幾個大原則：</p>\n<ol>\n<li>display、position</li>\n<li>box-model</li>\n<li>font、typography</li>\n<li>layout(包含 color、border-radius 等)</li>\n<li>其他屬性(如animation)</li>\n</ol>\n<p>原因：對一個 class 來說，最重要的就是 display 與 position ，所以應該擺在最上面。而其次重要的內容是文字，所以擺第二，最後才是 <code>layout</code> 與其他屬性。<br>至於屬於同屬性的話不限制順序，例如 padding margin 順序調換沒有關係，因為找起來都很方便。只要維持一定的邏輯即可。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.class</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">display</span>: none;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">\t<span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">z-index</span>: <span class=\"number\">9999999</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">250px</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">30px</span>;</div><div class=\"line\">\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">15px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"attribute\">background</span>: white;</div><div class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#aaa</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"attribute\">list-style</span>: none;</div><div class=\"line\">\t<span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"attribute\">overflow-y</span>: scroll;</div><div class=\"line\">\t<span class=\"attribute\">overflow-x</span>: hidden;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"善用-sass-map-管理變數\"><a href=\"#善用-sass-map-管理變數\" class=\"headerlink\" title=\"善用 sass map 管理變數\"></a>善用 sass map 管理變數</h3><p>style 檔案變多了之後，相對的要管理的變數也會變得越來越多。<br>除了在命名時加上前綴之外，我們也可以利用 sass map 的方式來統一管理。而且 sass map 提供了一些很方便的 <a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html\" target=\"_blank\" rel=\"external\">function</a> 來操作，像是 <code>map-get</code> <code>map-has-key</code>等等，可以很有效地把變數 group 起來。很像 js 的 object。</p>\n<p>以 <code>z-index</code> 來說，我們可以改寫下面的 code</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* before */</div><div class=\"line\">$zindex-navbar: 100;</div><div class=\"line\">$zindex-dropdown: 200;</div><div class=\"line\">$zindex-tooltip: 300;</div><div class=\"line\">$zindex-modal: 400;</div><div class=\"line\"></div><div class=\"line\">.navbar &#123;</div><div class=\"line\">\tz-index: $zindex-navbar;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/* after */</div><div class=\"line\">$zindex: (</div><div class=\"line\">  navbar: 100,</div><div class=\"line\">  dropdown: 200,</div><div class=\"line\">  tooltip: 300,</div><div class=\"line\">  modal: 400</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">.navbar &#123;</div><div class=\"line\">\tz-index: map-get($zindex, 'navbar');</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>用 <code>map</code> 的方式取值，看起來好像比較厚工一點，我們可以用 sass 的 function 包裝起來：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * z alias for z-index</div><div class=\"line\"> * get zindex map value</div><div class=\"line\"> */</div><div class=\"line\">@<span class=\"keyword\">function</span> z($key) &#123;</div><div class=\"line\">\t@<span class=\"keyword\">if</span>(<span class=\"keyword\">map</span>-<span class=\"keyword\">has</span>-<span class=\"keyword\">key</span>($<span class=\"keyword\">zindex</span>, $key))&#123;</div><div class=\"line\">    @<span class=\"keyword\">return</span> map-get($zindex, $key);</div><div class=\"line\">  &#125; @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    @<span class=\"keyword\">error</span> <span class=\"string\">\"unknown key #&#123;$key&#125;\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.navbar</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">z-index</span>: <span class=\"built_in\">z</span>($zindex, <span class=\"string\">'navbar'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>當然還有其他的應用像是 <code>color</code> <code>typography</code> 等等，都可以搭配 sass map 的方式來操作。</p>\n<p>如果你認為上述的方式跟用前綴的方式分類變數沒有什麼不同的話，不套用也沒關係，重構是為了讓之後的開發更舒服。</p>\n<h3 id=\"大量的巢狀-class\"><a href=\"#大量的巢狀-class\" class=\"headerlink\" title=\"大量的巢狀 class\"></a>大量的巢狀 class</h3><p>我的建議是不要超過三層，第一是易讀性非常低，再來很容易覆蓋到權重。<br>可以採用一些目前比較熱門的 css 命名規範如 OOCSS 或是 BEM，或者搭配兩者一起使用。</p>\n<p>但最重要的一點是自己寫起來的感覺，不要讓規範箝制你了。</p>\n<p>如果想要使用 scss 的巢狀功能方便閱讀，又不想要讓巢狀 class 覆蓋權重的話，可以使用 @at-root，@at-root 在編譯的時候會幫你把巢狀拆出來到 root。</p>\n<p>另外可以使用 <code>&gt;</code> 子元素選擇器來取代後代選擇器。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">.classA &#123;</div><div class=\"line\">\t@at-root .classB &#123;</div><div class=\"line\">    // bla</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// compiled</div><div class=\"line\"></div><div class=\"line\">.classA &#123;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div><div class=\"line\">  .classB &#123;</div><div class=\"line\">    // bla</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>實際的 use case 如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">.alert-modal &#123;</div><div class=\"line\">  @at-root &amp;__header &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @at-root &amp;__body &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @at-root &amp;__footer &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上的代碼好像沒有想像中的好看，等下可以搭配 mixin 把它進一步做簡化。</p>\n<h2 id=\"善用-Mixin-簡化程式\"><a href=\"#善用-Mixin-簡化程式\" class=\"headerlink\" title=\"善用 Mixin 簡化程式\"></a>善用 Mixin 簡化程式</h2><p>除了一般使用 mixin 來加入 <code>prefixer</code> 之外，mixin 能夠做的事情還有很多，這邊提出幾個方法給大家參考。</p>\n<h3 id=\"BEM-mixin\"><a href=\"#BEM-mixin\" class=\"headerlink\" title=\"BEM mixin\"></a>BEM mixin</h3><p>BEM 的命名方式，如果一直手動 key 的話，感覺也挺麻煩的，而且 key 錯的機率也蠻高的，我們可以利用 mixin 來簡化他。</p>\n<p>順便一提，如果你的專案已經套用了 <code>postCSS</code>，可以使用 <a href=\"https://www.npmjs.com/package/postcss-bem\" target=\"_blank\" rel=\"external\">postcss-bem</a> 來幫助命名。</p>\n<p>如果你不喜歡他的命名方式，或是當前還無法套用 postCSS 的話也沒關係，我們可以自己做一個。</p>\n<p>上面的 code 可以改成下面的形式：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin block($block_name) &#123;</div><div class=\"line\">  .#&#123;$block_name&#125; &#123; @content; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@mixin element($element_name) &#123; </div><div class=\"line\">  @at-root &amp;__#&#123;$element_name&#125; &#123; @content; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@mixin modifier($modifier_name) &#123;</div><div class=\"line\">  @at-root &amp;-#&#123;$modifier_name&#125; &#123; @content; &#125;\t</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@mixin state($state_name) &#123;</div><div class=\"line\">\t&amp;.is-$&#123;#state_name&#125; &#123;@content;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// modal.scss</div><div class=\"line\"></div><div class=\"line\">// before</div><div class=\"line\">.alert-modal &#123;</div><div class=\"line\">  @at-root &amp;__header &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @at-root &amp;__body &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @at-root &amp;__footer &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// after</div><div class=\"line\">@include block(\"alert-modal\") &#123;</div><div class=\"line\">\t@include element(\"header\") &#123;&#125;</div><div class=\"line\">\t@include element(\"body\") &#123;&#125;</div><div class=\"line\">\t@include element(\"footer\") &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這樣一來簡單的 BEM mixins 就製作完成了。注意到這邊我們使用 <code>at-root</code> 的方式來避免巢狀 class。</p>\n<p>可以按照自己的喜好來調整命名方式，或者嚴謹一點對參數做一些處理（轉為小寫等等）、加入判斷式等等，或者今天你想要使用巢狀 class 的話可以加入額外的判斷參數。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin element($element_name, $at-root: true) &#123; </div><div class=\"line\">  @if($at-root) &#123;</div><div class=\"line\">    @at-root &amp;__#&#123;$element_name&#125; &#123; @content; &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  @else &#123;</div><div class=\"line\">    &amp;__#&#123;$element_name&#125; &#123; @content; &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"util-mixin\"><a href=\"#util-mixin\" class=\"headerlink\" title=\"util mixin\"></a>util mixin</h3><p>舉例來說，在設置 padding margin 的時候，我們常常會將上下或是左右的值設為一樣。寫久了難免會嫌麻煩，這時候就可以拜託 mixin 了。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">// before</div><div class=\"line\">.classA &#123;</div><div class=\"line\">\tmargin-right: 10px;</div><div class=\"line\">\tmargin-left: 10px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// after</div><div class=\"line\"></div><div class=\"line\">/*</div><div class=\"line\"> * lr Alias for left right</div><div class=\"line\"> */</div><div class=\"line\">@mixin lr($box_model, $value) &#123;</div><div class=\"line\">\t#&#123;$box_model&#125;-left: $value;</div><div class=\"line\">\t#&#123;$box_model&#125;-right: $value;</div><div class=\"line\">&#125;;</div><div class=\"line\">.classA &#123;</div><div class=\"line\">\t@include lr(\"margin\", 10px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這邊沒有寫得很嚴謹，你可以另外加入判斷式來保證輸入的值是合法的，類似的概念也能套用到 top left 設值上。</p>\n<p>或是常常遇到的 clearfix。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin clearfix() &#123;</div><div class=\"line\">\t&amp;:before, &amp;:after &#123;</div><div class=\"line\">    display: table;</div><div class=\"line\">    content: \"\";</div><div class=\"line\">\t\tclear: both;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.column &#123;</div><div class=\"line\">\t@include clearfix;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"child-selector-mixin\"><a href=\"#child-selector-mixin\" class=\"headerlink\" title=\"child selector mixin\"></a>child selector mixin</h3><p>常常會遇到使用 child selector 的情境。我們可以用 mixin 進一步包裝起來。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// before</div><div class=\"line\">.list &#123;</div><div class=\"line\">\t&amp;:first-child &#123;</div><div class=\"line\">\t  //bla</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&amp;:nth-child(2n) &#123;</div><div class=\"line\">\t  //bla</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">// after </div><div class=\"line\">@mixin first() &#123;</div><div class=\"line\">\t&amp;:first-child &#123; @content; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">.list &#123;</div><div class=\"line\">\t@include first() &#123;&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這邊推薦 <a href=\"http://lukyvj.github.io/family.scss/\" target=\"_blank\" rel=\"external\">Family.scss</a>，搜集了許多好用 child selector mixin。</p>\n<p><strong>p.s：我認為剛入門 CSS 的人還是從純 CSS 開始學習比較好，以免被 SCSS 的語法糖給寵壞了</strong></p>\n<h2 id=\"善用-Comment\"><a href=\"#善用-Comment\" class=\"headerlink\" title=\"善用 Comment\"></a>善用 Comment</h2><p>在缺乏 function 的 css 下，使用 comment 來解釋 class 更為重要。這邊提供一些，comment 的技巧。</p>\n<p>註解不但方便自己閱讀，之後別人接手也會比較快理解這個 class 該如何使用、在哪個場景使用。</p>\n<h3 id=\"目錄\"><a href=\"#目錄\" class=\"headerlink\" title=\"目錄\"></a>目錄</h3><p>如果文件包含的 class 較多，可以考慮在文件最前面加入目錄，方便之後查找。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * INPUT</div><div class=\"line\"> *  text</div><div class=\"line\"> *  select</div><div class=\"line\"> *  number</div><div class=\"line\"> * BUTTON</div><div class=\"line\"> *  primary</div><div class=\"line\"> *  warn</div><div class=\"line\"> */</div></pre></td></tr></table></figure>\n<h3 id=\"魔術數字、HACK、使用方式\"><a href=\"#魔術數字、HACK、使用方式\" class=\"headerlink\" title=\"魔術數字、HACK、使用方式\"></a>魔術數字、HACK、使用方式</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*</div><div class=\"line\"> * for input[type=\"text\"]</div><div class=\"line\"> * e.g: &lt;input type=\"text\" /&gt;</div><div class=\"line\"> */</div><div class=\"line\"> </div><div class=\"line\">.text-input[type=\"text\"] &#123;</div><div class=\"line\">  padding: 20px;</div><div class=\"line\"></div><div class=\"line\">  /* page offset */</div><div class=\"line\">\ttop: 27px;</div><div class=\"line\">  /* IE 8+ hack */</div><div class=\"line\">  // ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"CSS-結構\"><a href=\"#CSS-結構\" class=\"headerlink\" title=\"CSS 結構\"></a>CSS 結構</h2><p>基本上分成幾個大方向：<code>module</code> <code>base</code> <code>config</code> <code>helper</code></p>\n<h3 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h3><p>module 資料夾裡存放所有模組化的元件，像是 button input modal 等等。如果元件拆得更細的話，可以再另外開資料夾，像是 button 有可能樣式比較多，這時候我們可以另外開一個 <code>button</code> 資料夾，裡頭存放所有 button 的樣式。</p>\n<h3 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h3><p>base 裡頭放置了像是 <code>grid</code> <code>normalize</code> <code>reset</code> <code>typography</code> 等比較基本的架構。</p>\n<h3 id=\"config\"><a href=\"#config\" class=\"headerlink\" title=\"config\"></a>config</h3><p>存放變數跟 color 的地方，設定的內容統一存放在這個資料夾統一管理。</p>\n<h3 id=\"helper\"><a href=\"#helper\" class=\"headerlink\" title=\"helper\"></a>helper</h3><p>存放客製化的 function 跟 mixin。</p>\n<h2 id=\"寫在最後\"><a href=\"#寫在最後\" class=\"headerlink\" title=\"寫在最後\"></a>寫在最後</h2><p>如果你有額外的時間，建議你還是可以去看看像是 <a href=\"https://github.com/postcss/postcss\" target=\"_blank\" rel=\"external\">postCSS</a>、<a href=\"https://github.com/css-modules/css-modules\" target=\"_blank\" rel=\"external\">css-modules</a>、<a href=\"https://github.com/webpack/webpack\" target=\"_blank\" rel=\"external\">webpack</a> 等優秀的開源工具。<br>不然整天跟 CSS 打架總有一天會精神耗弱的XD。</p>\n<p>做了一個<a href=\"https://github.com/kjj6198/css-structure-example\" target=\"_blank\" rel=\"external\">DEMO</a>，非常陽春。</p>\n<p>如果你也想分享自己在前端跟 legacy code 奮鬥的過程，或是有更好的解決方案，歡迎在下面留言。</p>\n<h2 id=\"持續關注前端趨勢\"><a href=\"#持續關注前端趨勢\" class=\"headerlink\" title=\"持續關注前端趨勢\"></a>持續關注前端趨勢</h2><p>這裡分享幾個覺得蠻優質的資源。</p>\n<p><a href=\"http://gold.xitu.io/\" target=\"_blank\" rel=\"external\">掘金網</a></p>\n<p><a href=\"http://weekly.codetengu.com/\" target=\"_blank\" rel=\"external\">碼天狗（但最近前端的分享不多）</a></p>\n<p><a href=\"https://www.techbridge.cc/\" target=\"_blank\" rel=\"external\">TechBrige</a></p>\n<p><a href=\"http://csswizardry.com/\" target=\"_blank\" rel=\"external\">CSS wizard</a></p>\n<h3 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h3><p><a href=\"http://cssguidelin.es/\" target=\"_blank\" rel=\"external\">CSS guideline</a></p>\n<p><a href=\"https://www.smashingmagazine.com/2016/05/stylelint-the-style-sheet-linter-weve-always-wanted/\" target=\"_blank\" rel=\"external\">Why Stylelint</a></p>\n<p><a href=\"https://hacks.mozilla.org/2016/05/css-coding-techniques/?utm_campaign=CodeTengu&amp;utm_medium=email&amp;utm_source=CodeTengu_44\" target=\"_blank\" rel=\"external\">CSS coding techniques</a></p>\n<p><a href=\"http://seesparkbox.com/foundry/why_you_need_to_refactor_your_css\" target=\"_blank\" rel=\"external\">why you should refactor your css</a></p>\n<p><a href=\"http://rscss.io/\" target=\"_blank\" rel=\"external\">rsscss.io</a></p>\n<h4 id=\"Legacy-Code-專欄\"><a href=\"#Legacy-Code-專欄\" class=\"headerlink\" title=\"Legacy Code 專欄\"></a>Legacy Code 專欄</h4><ul>\n<li><a href=\"/2016/06/11/legacy-code/\" title=\"從 legacy code 中尋找出口（上）\">從 legacy code 中尋找出口（上）</a></li>\n<li><a href=\"/2016/09/17/legacy-code3/\" title=\"從 legacy code 中尋找出口（中）- HTML 篇\">從 legacy code 中尋找出口（中）- HTML 篇</a>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我們的第一步是先從 CSS 下手，因為 css 是相對於其他前端部分來說比較容易重構的部分。很容易髒亂的 code 也是 CSS。</p>\n<p>上一篇描述了在大型專案中引入新框架及技術的困難點，這一篇主要會專注在如何透過現有的工具及框架來重構現有的代碼。</p>\n<p>本次的重構技巧會以 SCSS 為主，所以在閱讀本文之前，我先假設你已經有基本的 SCSS 以及 CSS 的基礎。其他預處理器的概念應該是相通的。</p>\n<h2 id=\"引入-style-linter-及-editorconfig\"><a href=\"#引入-style-linter-及-editorconfig\" class=\"headerlink\" title=\"引入 style linter 及 editorconfig\"></a>引入 style linter 及 editorconfig</h2><p>我們採取的第一步是先引入審查代碼工具。目前比較流行的 css linter 是 stylelinter，他能夠針對 scss sass 語法做 lint。也可以搭配其他 IDE、文字編輯器 plugin。這邊的範例是使用 sublime，其他的 IDE 應該也有類似的功能。</p>\n<h3 id=\"1-加入-stylelint\"><a href=\"#1-加入-stylelint\" class=\"headerlink\" title=\"1. 加入 stylelint\"></a>1. 加入 stylelint</h3><p>stylelint 除了可以針對 scss 語法做 lint 之外。由於其本身是用 js 撰寫的，可以客製化自己的 rule 跟加入其他開源的 plugin。</p>\n<p>因為 stylelint 是以 AST 的方式解析，所以可以很容易的對文件中的節點做操作。</p>\n<p>關於 stylelint 的深入使用，已經超過本文篇幅，有興趣的人可以參考 css trick 的<a href=\"https://css-tricks.com/stylelint/\">教學</a></p>\n<p>首先，先來安裝 <code>stylelint</code>，run <code>npm install -g stylelint</code>。</p>\n<p>再來設置 .stylelintrc 檔，詳細的 rules 可以到<a href=\"http://stylelint.io/user-guide/rules/\">這裡</a> 查看。如果你不想要那麼麻煩自己手動一個一個設定的話。可以考慮使用 <a href=\"https://github.com/stylelint/stylelint-config-standard\">stylelint-config-standard</a> 這個插件，再根據自己的需求做調整。</p>\n<p><code>npm install --save-dev stylelint-config-standard</code></p>\n<p><strong>這邊還是建議花時間瞭解一下專案的需求來制定 rule，不然有時候太嚴格的 rule，滿江紅看到也懶得改了。</strong></p>\n<h3 id=\"2-加入-editorconfig\"><a href=\"#2-加入-editorconfig\" class=\"headerlink\" title=\"2. 加入 .editorconfig\"></a>2. 加入 .editorconfig</h3><p>EditorConfig 是一個為了統一代碼風格的解決方案。每個人文字編輯器的環境可能不盡相同，為了統一彼此之間的環境，這邊我們採用的 <code>editorconfig</code></p>\n<p>設定非常簡單，只要新增一個檔案就好。<a href=\"http://EditorConfig.org\">editorconfig</a>。</p>\n<p>目前幾乎主流的文字編輯器都有支援 editorconfig。</p>\n<h2 id=\"常見的-code-smell-以及-refactor-方式\"><a href=\"#常見的-code-smell-以及-refactor-方式\" class=\"headerlink\" title=\"常見的 code smell 以及 refactor 方式\"></a>常見的 code smell 以及 refactor 方式</h2><p>在開始捲起袖子做事之前，還是先來確認一下目前的專案是否需要 refactor：</p>\n<ul>\n<li>許多元件（如 button input）等放在同一個檔案內，查找非常不易。</li>\n<li>覆寫了許多 class 造成預期之外的行為發生</li>\n<li>早期沒有統一的代碼規範，tab、空白夾雜在一起，閱讀性大幅降低</li>\n<li>!important 四散各處</li>\n<li>變數的命名跟管理不夠統一</li>\n<li>團隊開始擴增</li>\n<li>相關的文件不足</li>\n</ul>\n<p>接下來介紹一些比較常見的 code smell</p>\n<h3 id=\"Order\"><a href=\"#Order\" class=\"headerlink\" title=\"Order\"></a>Order</h3><p>class 變多之後，如果 rule 裡面沒有一定的排列順序的話，其實查找很不方便。而且易讀性並不高，像是下列的 code</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.class</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">\t<span class=\"attribute\">display</span>: none;</div><div class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">30px</span>;</div><div class=\"line\">\t<span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">\t<span class=\"attribute\">list-style</span>: none;</div><div class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background</span>: white;</div><div class=\"line\">\t<span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">250px</span>;</div><div class=\"line\">\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">15px</span>;</div><div class=\"line\">\t<span class=\"attribute\">overflow-y</span>: scroll;</div><div class=\"line\">\t<span class=\"attribute\">overflow-x</span>: hidden;</div><div class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid $hr-gray;</div><div class=\"line\">\t<span class=\"attribute\">z-index</span>: <span class=\"number\">9999999</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>那麼要怎樣排序會比較好呢？這邊提供幾個大原則：</p>\n<ol>\n<li>display、position</li>\n<li>box-model</li>\n<li>font、typography</li>\n<li>layout(包含 color、border-radius 等)</li>\n<li>其他屬性(如animation)</li>\n</ol>\n<p>原因：對一個 class 來說，最重要的就是 display 與 position ，所以應該擺在最上面。而其次重要的內容是文字，所以擺第二，最後才是 <code>layout</code> 與其他屬性。<br>至於屬於同屬性的話不限制順序，例如 padding margin 順序調換沒有關係，因為找起來都很方便。只要維持一定的邏輯即可。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.class</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">display</span>: none;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">\t<span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">z-index</span>: <span class=\"number\">9999999</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">250px</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">30px</span>;</div><div class=\"line\">\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">15px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"attribute\">background</span>: white;</div><div class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#aaa</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"attribute\">list-style</span>: none;</div><div class=\"line\">\t<span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"attribute\">overflow-y</span>: scroll;</div><div class=\"line\">\t<span class=\"attribute\">overflow-x</span>: hidden;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"善用-sass-map-管理變數\"><a href=\"#善用-sass-map-管理變數\" class=\"headerlink\" title=\"善用 sass map 管理變數\"></a>善用 sass map 管理變數</h3><p>style 檔案變多了之後，相對的要管理的變數也會變得越來越多。<br>除了在命名時加上前綴之外，我們也可以利用 sass map 的方式來統一管理。而且 sass map 提供了一些很方便的 <a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html\">function</a> 來操作，像是 <code>map-get</code> <code>map-has-key</code>等等，可以很有效地把變數 group 起來。很像 js 的 object。</p>\n<p>以 <code>z-index</code> 來說，我們可以改寫下面的 code</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* before */</div><div class=\"line\">$zindex-navbar: 100;</div><div class=\"line\">$zindex-dropdown: 200;</div><div class=\"line\">$zindex-tooltip: 300;</div><div class=\"line\">$zindex-modal: 400;</div><div class=\"line\"></div><div class=\"line\">.navbar &#123;</div><div class=\"line\">\tz-index: $zindex-navbar;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/* after */</div><div class=\"line\">$zindex: (</div><div class=\"line\">  navbar: 100,</div><div class=\"line\">  dropdown: 200,</div><div class=\"line\">  tooltip: 300,</div><div class=\"line\">  modal: 400</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">.navbar &#123;</div><div class=\"line\">\tz-index: map-get($zindex, 'navbar');</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>用 <code>map</code> 的方式取值，看起來好像比較厚工一點，我們可以用 sass 的 function 包裝起來：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * z alias for z-index</div><div class=\"line\"> * get zindex map value</div><div class=\"line\"> */</span></div><div class=\"line\">@<span class=\"keyword\">function</span> z($key) &#123;</div><div class=\"line\">\t@<span class=\"keyword\">if</span>(<span class=\"keyword\">map</span>-<span class=\"keyword\">has</span>-<span class=\"keyword\">key</span>($<span class=\"keyword\">zindex</span>, $key))&#123;</div><div class=\"line\">    @<span class=\"keyword\">return</span> map-get($zindex, $key);</div><div class=\"line\">  &#125; @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    @<span class=\"keyword\">error</span> <span class=\"string\">\"unknown key #&#123;$key&#125;\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.navbar</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">z-index</span>: <span class=\"built_in\">z</span>($zindex, <span class=\"string\">'navbar'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>當然還有其他的應用像是 <code>color</code> <code>typography</code> 等等，都可以搭配 sass map 的方式來操作。</p>\n<p>如果你認為上述的方式跟用前綴的方式分類變數沒有什麼不同的話，不套用也沒關係，重構是為了讓之後的開發更舒服。</p>\n<h3 id=\"大量的巢狀-class\"><a href=\"#大量的巢狀-class\" class=\"headerlink\" title=\"大量的巢狀 class\"></a>大量的巢狀 class</h3><p>我的建議是不要超過三層，第一是易讀性非常低，再來很容易覆蓋到權重。<br>可以採用一些目前比較熱門的 css 命名規範如 OOCSS 或是 BEM，或者搭配兩者一起使用。</p>\n<p>但最重要的一點是自己寫起來的感覺，不要讓規範箝制你了。</p>\n<p>如果想要使用 scss 的巢狀功能方便閱讀，又不想要讓巢狀 class 覆蓋權重的話，可以使用 @at-root，@at-root 在編譯的時候會幫你把巢狀拆出來到 root。</p>\n<p>另外可以使用 <code>&gt;</code> 子元素選擇器來取代後代選擇器。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">.classA &#123;</div><div class=\"line\">\t@at-root .classB &#123;</div><div class=\"line\">    // bla</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// compiled</div><div class=\"line\"></div><div class=\"line\">.classA &#123;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div><div class=\"line\">  .classB &#123;</div><div class=\"line\">    // bla</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>實際的 use case 如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">.alert-modal &#123;</div><div class=\"line\">  @at-root &amp;__header &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @at-root &amp;__body &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @at-root &amp;__footer &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上的代碼好像沒有想像中的好看，等下可以搭配 mixin 把它進一步做簡化。</p>\n<h2 id=\"善用-Mixin-簡化程式\"><a href=\"#善用-Mixin-簡化程式\" class=\"headerlink\" title=\"善用 Mixin 簡化程式\"></a>善用 Mixin 簡化程式</h2><p>除了一般使用 mixin 來加入 <code>prefixer</code> 之外，mixin 能夠做的事情還有很多，這邊提出幾個方法給大家參考。</p>\n<h3 id=\"BEM-mixin\"><a href=\"#BEM-mixin\" class=\"headerlink\" title=\"BEM mixin\"></a>BEM mixin</h3><p>BEM 的命名方式，如果一直手動 key 的話，感覺也挺麻煩的，而且 key 錯的機率也蠻高的，我們可以利用 mixin 來簡化他。</p>\n<p>順便一提，如果你的專案已經套用了 <code>postCSS</code>，可以使用 <a href=\"https://www.npmjs.com/package/postcss-bem\">postcss-bem</a> 來幫助命名。</p>\n<p>如果你不喜歡他的命名方式，或是當前還無法套用 postCSS 的話也沒關係，我們可以自己做一個。</p>\n<p>上面的 code 可以改成下面的形式：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin block($block_name) &#123;</div><div class=\"line\">  .#&#123;$block_name&#125; &#123; @content; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@mixin element($element_name) &#123; </div><div class=\"line\">  @at-root &amp;__#&#123;$element_name&#125; &#123; @content; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@mixin modifier($modifier_name) &#123;</div><div class=\"line\">  @at-root &amp;-#&#123;$modifier_name&#125; &#123; @content; &#125;\t</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@mixin state($state_name) &#123;</div><div class=\"line\">\t&amp;.is-$&#123;#state_name&#125; &#123;@content;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// modal.scss</div><div class=\"line\"></div><div class=\"line\">// before</div><div class=\"line\">.alert-modal &#123;</div><div class=\"line\">  @at-root &amp;__header &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @at-root &amp;__body &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @at-root &amp;__footer &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// after</div><div class=\"line\">@include block(\"alert-modal\") &#123;</div><div class=\"line\">\t@include element(\"header\") &#123;&#125;</div><div class=\"line\">\t@include element(\"body\") &#123;&#125;</div><div class=\"line\">\t@include element(\"footer\") &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這樣一來簡單的 BEM mixins 就製作完成了。注意到這邊我們使用 <code>at-root</code> 的方式來避免巢狀 class。</p>\n<p>可以按照自己的喜好來調整命名方式，或者嚴謹一點對參數做一些處理（轉為小寫等等）、加入判斷式等等，或者今天你想要使用巢狀 class 的話可以加入額外的判斷參數。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin element($element_name, $at-root: true) &#123; </div><div class=\"line\">  @if($at-root) &#123;</div><div class=\"line\">    @at-root &amp;__#&#123;$element_name&#125; &#123; @content; &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  @else &#123;</div><div class=\"line\">    &amp;__#&#123;$element_name&#125; &#123; @content; &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"util-mixin\"><a href=\"#util-mixin\" class=\"headerlink\" title=\"util mixin\"></a>util mixin</h3><p>舉例來說，在設置 padding margin 的時候，我們常常會將上下或是左右的值設為一樣。寫久了難免會嫌麻煩，這時候就可以拜託 mixin 了。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">// before</div><div class=\"line\">.classA &#123;</div><div class=\"line\">\tmargin-right: 10px;</div><div class=\"line\">\tmargin-left: 10px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// after</div><div class=\"line\"></div><div class=\"line\">/*</div><div class=\"line\"> * lr Alias for left right</div><div class=\"line\"> */</div><div class=\"line\">@mixin lr($box_model, $value) &#123;</div><div class=\"line\">\t#&#123;$box_model&#125;-left: $value;</div><div class=\"line\">\t#&#123;$box_model&#125;-right: $value;</div><div class=\"line\">&#125;;</div><div class=\"line\">.classA &#123;</div><div class=\"line\">\t@include lr(\"margin\", 10px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這邊沒有寫得很嚴謹，你可以另外加入判斷式來保證輸入的值是合法的，類似的概念也能套用到 top left 設值上。</p>\n<p>或是常常遇到的 clearfix。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin clearfix() &#123;</div><div class=\"line\">\t&amp;:before, &amp;:after &#123;</div><div class=\"line\">    display: table;</div><div class=\"line\">    content: \"\";</div><div class=\"line\">\t\tclear: both;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.column &#123;</div><div class=\"line\">\t@include clearfix;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"child-selector-mixin\"><a href=\"#child-selector-mixin\" class=\"headerlink\" title=\"child selector mixin\"></a>child selector mixin</h3><p>常常會遇到使用 child selector 的情境。我們可以用 mixin 進一步包裝起來。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// before</div><div class=\"line\">.list &#123;</div><div class=\"line\">\t&amp;:first-child &#123;</div><div class=\"line\">\t  //bla</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&amp;:nth-child(2n) &#123;</div><div class=\"line\">\t  //bla</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">// after </div><div class=\"line\">@mixin first() &#123;</div><div class=\"line\">\t&amp;:first-child &#123; @content; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">.list &#123;</div><div class=\"line\">\t@include first() &#123;&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這邊推薦 <a href=\"http://lukyvj.github.io/family.scss/\">Family.scss</a>，搜集了許多好用 child selector mixin。</p>\n<p><strong>p.s：我認為剛入門 CSS 的人還是從純 CSS 開始學習比較好，以免被 SCSS 的語法糖給寵壞了</strong></p>\n<h2 id=\"善用-Comment\"><a href=\"#善用-Comment\" class=\"headerlink\" title=\"善用 Comment\"></a>善用 Comment</h2><p>在缺乏 function 的 css 下，使用 comment 來解釋 class 更為重要。這邊提供一些，comment 的技巧。</p>\n<p>註解不但方便自己閱讀，之後別人接手也會比較快理解這個 class 該如何使用、在哪個場景使用。</p>\n<h3 id=\"目錄\"><a href=\"#目錄\" class=\"headerlink\" title=\"目錄\"></a>目錄</h3><p>如果文件包含的 class 較多，可以考慮在文件最前面加入目錄，方便之後查找。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * INPUT</div><div class=\"line\"> *  text</div><div class=\"line\"> *  select</div><div class=\"line\"> *  number</div><div class=\"line\"> * BUTTON</div><div class=\"line\"> *  primary</div><div class=\"line\"> *  warn</div><div class=\"line\"> */</span></div></pre></td></tr></table></figure>\n<h3 id=\"魔術數字、HACK、使用方式\"><a href=\"#魔術數字、HACK、使用方式\" class=\"headerlink\" title=\"魔術數字、HACK、使用方式\"></a>魔術數字、HACK、使用方式</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*</div><div class=\"line\"> * for input[type=\"text\"]</div><div class=\"line\"> * e.g: &lt;input type=\"text\" /&gt;</div><div class=\"line\"> */</div><div class=\"line\"> </div><div class=\"line\">.text-input[type=\"text\"] &#123;</div><div class=\"line\">  padding: 20px;</div><div class=\"line\"></div><div class=\"line\">  /* page offset */</div><div class=\"line\">\ttop: 27px;</div><div class=\"line\">  /* IE 8+ hack */</div><div class=\"line\">  // ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"CSS-結構\"><a href=\"#CSS-結構\" class=\"headerlink\" title=\"CSS 結構\"></a>CSS 結構</h2><p>基本上分成幾個大方向：<code>module</code> <code>base</code> <code>config</code> <code>helper</code></p>\n<h3 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h3><p>module 資料夾裡存放所有模組化的元件，像是 button input modal 等等。如果元件拆得更細的話，可以再另外開資料夾，像是 button 有可能樣式比較多，這時候我們可以另外開一個 <code>button</code> 資料夾，裡頭存放所有 button 的樣式。</p>\n<h3 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h3><p>base 裡頭放置了像是 <code>grid</code> <code>normalize</code> <code>reset</code> <code>typography</code> 等比較基本的架構。</p>\n<h3 id=\"config\"><a href=\"#config\" class=\"headerlink\" title=\"config\"></a>config</h3><p>存放變數跟 color 的地方，設定的內容統一存放在這個資料夾統一管理。</p>\n<h3 id=\"helper\"><a href=\"#helper\" class=\"headerlink\" title=\"helper\"></a>helper</h3><p>存放客製化的 function 跟 mixin。</p>\n<h2 id=\"寫在最後\"><a href=\"#寫在最後\" class=\"headerlink\" title=\"寫在最後\"></a>寫在最後</h2><p>如果你有額外的時間，建議你還是可以去看看像是 <a href=\"https://github.com/postcss/postcss\">postCSS</a>、<a href=\"https://github.com/css-modules/css-modules\">css-modules</a>、<a href=\"https://github.com/webpack/webpack\">webpack</a> 等優秀的開源工具。<br>不然整天跟 CSS 打架總有一天會精神耗弱的XD。</p>\n<p>做了一個<a href=\"https://github.com/kjj6198/css-structure-example\">DEMO</a>，非常陽春。</p>\n<p>如果你也想分享自己在前端跟 legacy code 奮鬥的過程，或是有更好的解決方案，歡迎在下面留言。</p>\n<h2 id=\"持續關注前端趨勢\"><a href=\"#持續關注前端趨勢\" class=\"headerlink\" title=\"持續關注前端趨勢\"></a>持續關注前端趨勢</h2><p>這裡分享幾個覺得蠻優質的資源。</p>\n<p><a href=\"http://gold.xitu.io/\">掘金網</a></p>\n<p><a href=\"http://weekly.codetengu.com/\">碼天狗（但最近前端的分享不多）</a></p>\n<p><a href=\"https://www.techbridge.cc/\">TechBrige</a></p>\n<p><a href=\"http://csswizardry.com/\">CSS wizard</a></p>\n<h3 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h3><p><a href=\"http://cssguidelin.es/\">CSS guideline</a></p>\n<p><a href=\"https://www.smashingmagazine.com/2016/05/stylelint-the-style-sheet-linter-weve-always-wanted/\">Why Stylelint</a></p>\n<p><a href=\"https://hacks.mozilla.org/2016/05/css-coding-techniques/?utm_campaign=CodeTengu&amp;utm_medium=email&amp;utm_source=CodeTengu_44\">CSS coding techniques</a></p>\n<p><a href=\"http://seesparkbox.com/foundry/why_you_need_to_refactor_your_css\">why you should refactor your css</a></p>\n<p><a href=\"http://rscss.io/\">rsscss.io</a></p>\n<h4 id=\"Legacy-Code-專欄\"><a href=\"#Legacy-Code-專欄\" class=\"headerlink\" title=\"Legacy Code 專欄\"></a>Legacy Code 專欄</h4><ul>\n<li><a href=\"/2016/06/11/legacy-code/\" title=\"從 legacy code 中尋找出口（上）\">從 legacy code 中尋找出口（上）</a></li>\n<li><a href=\"/2016/09/17/legacy-code3/\" title=\"從 legacy code 中尋找出口（中）- HTML 篇\">從 legacy code 中尋找出口（中）- HTML 篇</a>\n</li>\n</ul>\n"},{"title":"從 legacy code 中尋找出口（中）- HTML 篇","date":"2016-09-17T02:40:16.000Z","_content":"\n\n講完 CSS 的重構技巧之後，接下來會專注在 HTML 的重構技巧上。本系列的文章將不會談論 js 的重構部分，因為牽扯到較多的程式撰寫技巧，而且網路上類似的文章應該是不勝枚舉。\n\n## 前言\n\n其實 HTML 能夠重構的點並不多，主要就是標籤的正確使用以及顧慮 accessibility 等小細節。\n\n所以這篇文章會著重在如何使用正確的標籤以及語義化；基本的 accessiblity 認識跟 aria 標籤的使用，不僅對 screen reader 較友善，語義化的標籤使用也能夠在之後修改 HTML 時更有效率；最後是模板語言的技巧應用，這邊會用 rails 的 views 為例，不過概念的部分應該是相通的。 \n\n---\n\n### 語義化\n\n首先，我們先來看看 HTML5 新增的 tag 有哪些\n\n#### section\n\n* 用來表示網頁裡的一個**段落**，常見的誤解是用來表示一篇文章。\n\n* 基本上跟 div 沒有太大的差別，只有語義化的表現。\n\n#### article\n\n* 用來表示一篇**文章**\n\n#### datalist\n\n#### dl dt dd\n\n* 如果資訊是以條列式來呈現，可以使用 dt, dd 來區分。\n\n  > Definition lists, created using the DL element, generally consist of a series of term\\/definition pairs \\(although definition lists may have other applications\\). Thus, when advertising a product, one might use a definition list:\n\n```html\n\n<dl class=\"information\">\n\n  <dt>薪水：</dt>\n\n  <dd>100000 ~ 300000<dd>\n\n  <dt>工作地點：</dt>\n\n  <dd>台北市</dd>\n\n</dl>\n```\n\n任何以成對方式呈現的資訊都可以使用 dt, dd 包裝，像是範例中的：薪水搭配 100000 ~ 300000、工作地點搭配台北市。不過要注意的一點是 dl 預設會將內容縮排（就跟 ul, ol 一樣）。可以將 padding 設置為 0 來解決。\n\n#### figure figcaption\n\n* 使用在和主內容相關的圖片、代碼，或其他資訊，不一定只能放圖而已\n\n* 搭配 figcaption 來定義標題\n\n#### legend\n\n* 搭配 fieldset 使用，用來表示輸入表單的內容\n\n* 預設的邊框很醜，如果要使用這樣的結構可能要重置一下 CSS\n\n<iframe height='265' scrolling='no' src='//codepen.io/kjj6198/embed/LRkQAB/?height=265&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='http://codepen.io/kjj6198/pen/LRkQAB/'>fieldset</a> by 愷開 (<a href='http://codepen.io/kjj6198'>@kjj6198</a>) on <a href='http://codepen.io'>CodePen</a>.\n</iframe>\n\n族繁不及備載，tag 的部分就在此告一段落。我個人覺得有一大部分是因為**不知道**才沒有使用這些 tag 的，詳情可以到[w3c](http://www.w3school.com.cn/tags/tag_legend.asp) 的網站看看。之後會再將其他 tag 的使用方式補上。\n\n#### 如果都沒辦法滿足怎麼辦？\n\n如果以上的 tag 都沒有辦法滿足你的需求，最常見的做法就是用純 div。而 HTML 為了因應這樣的需求，也提出的 ARIA 的 spec，讓開發者可以更容易製作客製化的元件。如果我們想要使用 div 來模擬按鈕的行為，除了在 class 加上 `btn` 之外，我們同時可以加上 role attribute，並且使用相對應的 aria-\\* 標籤來做對應的狀態處理（是否按下、disabled、haspopup 等等），除了更加語義化之外，這些看起來有點麻煩的細節，都會大幅地改善使用 screen reader 的體驗。\n\n但是，盡量不要取代原本語義化的標籤的含義，例如將 button 標籤加入 `role=\"modal\"`  之後當作 modal 使用。\n\n> Web developers _must not_ use the ARIA `role` and `aria-*` attributes in a manner that conflicts with the semantics described in the [Document conformance requirements for use of ARIA attributes in HTML](https://www.w3.org/TR/html-aria/#docconformance)table. Web developers _should not_ set the ARIA `role` and `aria-*` attributes to values that match the default implicit ARIA semantics defined in the table. - [w3c spec](https://www.w3.org/TR/html-aria/#rules-wd)\n\n當然，雖然 spec 這麼說，但某些 tag 像是 `input + label` 的 hack 對前端開發來講真的很方便。這部分或許就看大家的取捨了。\n\n```html\n\n<div class=\"btn\" role=\"button\" aria-disabled=\"false\">Click to Signup</div>\n\n```\n\n### Accessibility\n\naccessibility 其實可以另外再寫一篇文章來討論，但因為不再本篇的討論範圍內，這邊只列幾點關於 accessibility 的注意要點。\n\n* 文字的大小\n\n* 顏色的對比\n\n* 是否加入適當的 attr。（img 的 alt, link 的 title 等）\n\n* 適當的 aria-\\* 使用\n\n如果對 accessility 有興趣，建議大家看看：\n\n- [ARIA](https://www.w3.org/TR/html-aria/) w3c 的 aria 標準。\n\n- [WebAIM checklist](http://webaim.org/standards/wcag/checklist) WCAG 的 checklist\n\n- [WebAIM inviblecontent](http://webaim.org/techniques/css/invisiblecontent/) 關於 CSS invisible content 的介紹\n\n### 模板語言（已 rails views 為例）\n\n目前市面上有很多模板引擎，像是 `ejs` `erb` `handlebar` `jade` 等等，都有一套特定的語法、partial、客製化的函數等等幫助你簡化冗長的 HTML。\n\n就 rails views 來說\n\n```html\n\n<%= render 'partial/buttons/primary', locals: {\n\n  :name => 'foo'\n\n  :title => 'bar'\n\n} %>\n\n```\n\n將常用的元件拆成 partial，並且放在對應的資料夾（我的習慣是將所有 partial 檔統一資料夾管理，除非那個 partial 只有在某一個特定頁面使用）。這樣一來就可以很容易地引入已經撰寫好的 HTML 架構。\n\n```html\n\n<%= render 'partial/modal', locals: {\n :name => 'foo',\n :title => 'bar',\n :image => image_path('a.png')\n} %>\n```\n\n## 結論\n\nHTML 的重構比起 CSS 跟 JS，算是簡單許多（只要 css 撰寫的時候不用 tag 做 styling），不過從頭看下來，要顧慮的事情也不少。正確的使用 tag 以及顧慮 accessibility，能夠有效地增加 UX，同時自己在修改的時候也不會看到一大堆 div 看到心癢癢。\n\n#### Legacy Code 專欄\n\n- {% post_link 'legacy-code' %}\n- {% post_link 'legacy-code2' %}\n","source":"_posts/legacy-code3.md","raw":"---\ntitle: 從 legacy code 中尋找出口（中）- HTML 篇\ncategories: 前端\ntags:\n  - HTML\n  - 重構\n  - aria\ndate: 2016-09-17 10:40:16\n---\n\n\n講完 CSS 的重構技巧之後，接下來會專注在 HTML 的重構技巧上。本系列的文章將不會談論 js 的重構部分，因為牽扯到較多的程式撰寫技巧，而且網路上類似的文章應該是不勝枚舉。\n\n## 前言\n\n其實 HTML 能夠重構的點並不多，主要就是標籤的正確使用以及顧慮 accessibility 等小細節。\n\n所以這篇文章會著重在如何使用正確的標籤以及語義化；基本的 accessiblity 認識跟 aria 標籤的使用，不僅對 screen reader 較友善，語義化的標籤使用也能夠在之後修改 HTML 時更有效率；最後是模板語言的技巧應用，這邊會用 rails 的 views 為例，不過概念的部分應該是相通的。 \n\n---\n\n### 語義化\n\n首先，我們先來看看 HTML5 新增的 tag 有哪些\n\n#### section\n\n* 用來表示網頁裡的一個**段落**，常見的誤解是用來表示一篇文章。\n\n* 基本上跟 div 沒有太大的差別，只有語義化的表現。\n\n#### article\n\n* 用來表示一篇**文章**\n\n#### datalist\n\n#### dl dt dd\n\n* 如果資訊是以條列式來呈現，可以使用 dt, dd 來區分。\n\n  > Definition lists, created using the DL element, generally consist of a series of term\\/definition pairs \\(although definition lists may have other applications\\). Thus, when advertising a product, one might use a definition list:\n\n```html\n\n<dl class=\"information\">\n\n  <dt>薪水：</dt>\n\n  <dd>100000 ~ 300000<dd>\n\n  <dt>工作地點：</dt>\n\n  <dd>台北市</dd>\n\n</dl>\n```\n\n任何以成對方式呈現的資訊都可以使用 dt, dd 包裝，像是範例中的：薪水搭配 100000 ~ 300000、工作地點搭配台北市。不過要注意的一點是 dl 預設會將內容縮排（就跟 ul, ol 一樣）。可以將 padding 設置為 0 來解決。\n\n#### figure figcaption\n\n* 使用在和主內容相關的圖片、代碼，或其他資訊，不一定只能放圖而已\n\n* 搭配 figcaption 來定義標題\n\n#### legend\n\n* 搭配 fieldset 使用，用來表示輸入表單的內容\n\n* 預設的邊框很醜，如果要使用這樣的結構可能要重置一下 CSS\n\n<iframe height='265' scrolling='no' src='//codepen.io/kjj6198/embed/LRkQAB/?height=265&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='http://codepen.io/kjj6198/pen/LRkQAB/'>fieldset</a> by 愷開 (<a href='http://codepen.io/kjj6198'>@kjj6198</a>) on <a href='http://codepen.io'>CodePen</a>.\n</iframe>\n\n族繁不及備載，tag 的部分就在此告一段落。我個人覺得有一大部分是因為**不知道**才沒有使用這些 tag 的，詳情可以到[w3c](http://www.w3school.com.cn/tags/tag_legend.asp) 的網站看看。之後會再將其他 tag 的使用方式補上。\n\n#### 如果都沒辦法滿足怎麼辦？\n\n如果以上的 tag 都沒有辦法滿足你的需求，最常見的做法就是用純 div。而 HTML 為了因應這樣的需求，也提出的 ARIA 的 spec，讓開發者可以更容易製作客製化的元件。如果我們想要使用 div 來模擬按鈕的行為，除了在 class 加上 `btn` 之外，我們同時可以加上 role attribute，並且使用相對應的 aria-\\* 標籤來做對應的狀態處理（是否按下、disabled、haspopup 等等），除了更加語義化之外，這些看起來有點麻煩的細節，都會大幅地改善使用 screen reader 的體驗。\n\n但是，盡量不要取代原本語義化的標籤的含義，例如將 button 標籤加入 `role=\"modal\"`  之後當作 modal 使用。\n\n> Web developers _must not_ use the ARIA `role` and `aria-*` attributes in a manner that conflicts with the semantics described in the [Document conformance requirements for use of ARIA attributes in HTML](https://www.w3.org/TR/html-aria/#docconformance)table. Web developers _should not_ set the ARIA `role` and `aria-*` attributes to values that match the default implicit ARIA semantics defined in the table. - [w3c spec](https://www.w3.org/TR/html-aria/#rules-wd)\n\n當然，雖然 spec 這麼說，但某些 tag 像是 `input + label` 的 hack 對前端開發來講真的很方便。這部分或許就看大家的取捨了。\n\n```html\n\n<div class=\"btn\" role=\"button\" aria-disabled=\"false\">Click to Signup</div>\n\n```\n\n### Accessibility\n\naccessibility 其實可以另外再寫一篇文章來討論，但因為不再本篇的討論範圍內，這邊只列幾點關於 accessibility 的注意要點。\n\n* 文字的大小\n\n* 顏色的對比\n\n* 是否加入適當的 attr。（img 的 alt, link 的 title 等）\n\n* 適當的 aria-\\* 使用\n\n如果對 accessility 有興趣，建議大家看看：\n\n- [ARIA](https://www.w3.org/TR/html-aria/) w3c 的 aria 標準。\n\n- [WebAIM checklist](http://webaim.org/standards/wcag/checklist) WCAG 的 checklist\n\n- [WebAIM inviblecontent](http://webaim.org/techniques/css/invisiblecontent/) 關於 CSS invisible content 的介紹\n\n### 模板語言（已 rails views 為例）\n\n目前市面上有很多模板引擎，像是 `ejs` `erb` `handlebar` `jade` 等等，都有一套特定的語法、partial、客製化的函數等等幫助你簡化冗長的 HTML。\n\n就 rails views 來說\n\n```html\n\n<%= render 'partial/buttons/primary', locals: {\n\n  :name => 'foo'\n\n  :title => 'bar'\n\n} %>\n\n```\n\n將常用的元件拆成 partial，並且放在對應的資料夾（我的習慣是將所有 partial 檔統一資料夾管理，除非那個 partial 只有在某一個特定頁面使用）。這樣一來就可以很容易地引入已經撰寫好的 HTML 架構。\n\n```html\n\n<%= render 'partial/modal', locals: {\n :name => 'foo',\n :title => 'bar',\n :image => image_path('a.png')\n} %>\n```\n\n## 結論\n\nHTML 的重構比起 CSS 跟 JS，算是簡單許多（只要 css 撰寫的時候不用 tag 做 styling），不過從頭看下來，要顧慮的事情也不少。正確的使用 tag 以及顧慮 accessibility，能夠有效地增加 UX，同時自己在修改的時候也不會看到一大堆 div 看到心癢癢。\n\n#### Legacy Code 專欄\n\n- {% post_link 'legacy-code' %}\n- {% post_link 'legacy-code2' %}\n","slug":"legacy-code3","published":1,"updated":"2016-10-18T11:32:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p7r000tb75tlo4oyokx","content":"<p>講完 CSS 的重構技巧之後，接下來會專注在 HTML 的重構技巧上。本系列的文章將不會談論 js 的重構部分，因為牽扯到較多的程式撰寫技巧，而且網路上類似的文章應該是不勝枚舉。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>其實 HTML 能夠重構的點並不多，主要就是標籤的正確使用以及顧慮 accessibility 等小細節。</p>\n<p>所以這篇文章會著重在如何使用正確的標籤以及語義化；基本的 accessiblity 認識跟 aria 標籤的使用，不僅對 screen reader 較友善，語義化的標籤使用也能夠在之後修改 HTML 時更有效率；最後是模板語言的技巧應用，這邊會用 rails 的 views 為例，不過概念的部分應該是相通的。 </p>\n<hr>\n<h3 id=\"語義化\"><a href=\"#語義化\" class=\"headerlink\" title=\"語義化\"></a>語義化</h3><p>首先，我們先來看看 HTML5 新增的 tag 有哪些</p>\n<h4 id=\"section\"><a href=\"#section\" class=\"headerlink\" title=\"section\"></a>section</h4><ul>\n<li><p>用來表示網頁裡的一個<strong>段落</strong>，常見的誤解是用來表示一篇文章。</p>\n</li>\n<li><p>基本上跟 div 沒有太大的差別，只有語義化的表現。</p>\n</li>\n</ul>\n<h4 id=\"article\"><a href=\"#article\" class=\"headerlink\" title=\"article\"></a>article</h4><ul>\n<li>用來表示一篇<strong>文章</strong></li>\n</ul>\n<h4 id=\"datalist\"><a href=\"#datalist\" class=\"headerlink\" title=\"datalist\"></a>datalist</h4><h4 id=\"dl-dt-dd\"><a href=\"#dl-dt-dd\" class=\"headerlink\" title=\"dl dt dd\"></a>dl dt dd</h4><ul>\n<li><p>如果資訊是以條列式來呈現，可以使用 dt, dd 來區分。</p>\n<blockquote>\n<p>Definition lists, created using the DL element, generally consist of a series of term\\/definition pairs (although definition lists may have other applications). Thus, when advertising a product, one might use a definition list:</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">class</span>=<span class=\"string\">\"information\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>薪水：<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>100000 ~ 300000<span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>工作地點：<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>台北市<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>任何以成對方式呈現的資訊都可以使用 dt, dd 包裝，像是範例中的：薪水搭配 100000 ~ 300000、工作地點搭配台北市。不過要注意的一點是 dl 預設會將內容縮排（就跟 ul, ol 一樣）。可以將 padding 設置為 0 來解決。</p>\n<h4 id=\"figure-figcaption\"><a href=\"#figure-figcaption\" class=\"headerlink\" title=\"figure figcaption\"></a>figure figcaption</h4><ul>\n<li><p>使用在和主內容相關的圖片、代碼，或其他資訊，不一定只能放圖而已</p>\n</li>\n<li><p>搭配 figcaption 來定義標題</p>\n</li>\n</ul>\n<h4 id=\"legend\"><a href=\"#legend\" class=\"headerlink\" title=\"legend\"></a>legend</h4><ul>\n<li><p>搭配 fieldset 使用，用來表示輸入表單的內容</p>\n</li>\n<li><p>預設的邊框很醜，如果要使用這樣的結構可能要重置一下 CSS</p>\n</li>\n</ul>\n<iframe height=\"265\" scrolling=\"no\" src=\"//codepen.io/kjj6198/embed/LRkQAB/?height=265&theme-id=0&default-tab=html,result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"http://codepen.io/kjj6198/pen/LRkQAB/\" target=\"_blank\" rel=\"external\">fieldset</a> by 愷開 (<a href=\"http://codepen.io/kjj6198\" target=\"_blank\" rel=\"external\">@kjj6198</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"external\">CodePen</a>.<br></iframe>\n\n<p>族繁不及備載，tag 的部分就在此告一段落。我個人覺得有一大部分是因為<strong>不知道</strong>才沒有使用這些 tag 的，詳情可以到<a href=\"http://www.w3school.com.cn/tags/tag_legend.asp\" target=\"_blank\" rel=\"external\">w3c</a> 的網站看看。之後會再將其他 tag 的使用方式補上。</p>\n<h4 id=\"如果都沒辦法滿足怎麼辦？\"><a href=\"#如果都沒辦法滿足怎麼辦？\" class=\"headerlink\" title=\"如果都沒辦法滿足怎麼辦？\"></a>如果都沒辦法滿足怎麼辦？</h4><p>如果以上的 tag 都沒有辦法滿足你的需求，最常見的做法就是用純 div。而 HTML 為了因應這樣的需求，也提出的 ARIA 的 spec，讓開發者可以更容易製作客製化的元件。如果我們想要使用 div 來模擬按鈕的行為，除了在 class 加上 <code>btn</code> 之外，我們同時可以加上 role attribute，並且使用相對應的 aria-* 標籤來做對應的狀態處理（是否按下、disabled、haspopup 等等），除了更加語義化之外，這些看起來有點麻煩的細節，都會大幅地改善使用 screen reader 的體驗。</p>\n<p>但是，盡量不要取代原本語義化的標籤的含義，例如將 button 標籤加入 <code>role=&quot;modal&quot;</code>  之後當作 modal 使用。</p>\n<blockquote>\n<p>Web developers <em>must not</em> use the ARIA <code>role</code> and <code>aria-*</code> attributes in a manner that conflicts with the semantics described in the <a href=\"https://www.w3.org/TR/html-aria/#docconformance\" target=\"_blank\" rel=\"external\">Document conformance requirements for use of ARIA attributes in HTML</a>table. Web developers <em>should not</em> set the ARIA <code>role</code> and <code>aria-*</code> attributes to values that match the default implicit ARIA semantics defined in the table. - <a href=\"https://www.w3.org/TR/html-aria/#rules-wd\" target=\"_blank\" rel=\"external\">w3c spec</a></p>\n</blockquote>\n<p>當然，雖然 spec 這麼說，但某些 tag 像是 <code>input + label</code> 的 hack 對前端開發來講真的很方便。這部分或許就看大家的取捨了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">aria-disabled</span>=<span class=\"string\">\"false\"</span>&gt;</span>Click to Signup<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Accessibility\"><a href=\"#Accessibility\" class=\"headerlink\" title=\"Accessibility\"></a>Accessibility</h3><p>accessibility 其實可以另外再寫一篇文章來討論，但因為不再本篇的討論範圍內，這邊只列幾點關於 accessibility 的注意要點。</p>\n<ul>\n<li><p>文字的大小</p>\n</li>\n<li><p>顏色的對比</p>\n</li>\n<li><p>是否加入適當的 attr。（img 的 alt, link 的 title 等）</p>\n</li>\n<li><p>適當的 aria-* 使用</p>\n</li>\n</ul>\n<p>如果對 accessility 有興趣，建議大家看看：</p>\n<ul>\n<li><p><a href=\"https://www.w3.org/TR/html-aria/\" target=\"_blank\" rel=\"external\">ARIA</a> w3c 的 aria 標準。</p>\n</li>\n<li><p><a href=\"http://webaim.org/standards/wcag/checklist\" target=\"_blank\" rel=\"external\">WebAIM checklist</a> WCAG 的 checklist</p>\n</li>\n<li><p><a href=\"http://webaim.org/techniques/css/invisiblecontent/\" target=\"_blank\" rel=\"external\">WebAIM inviblecontent</a> 關於 CSS invisible content 的介紹</p>\n</li>\n</ul>\n<h3 id=\"模板語言（已-rails-views-為例）\"><a href=\"#模板語言（已-rails-views-為例）\" class=\"headerlink\" title=\"模板語言（已 rails views 為例）\"></a>模板語言（已 rails views 為例）</h3><p>目前市面上有很多模板引擎，像是 <code>ejs</code> <code>erb</code> <code>handlebar</code> <code>jade</code> 等等，都有一套特定的語法、partial、客製化的函數等等幫助你簡化冗長的 HTML。</p>\n<p>就 rails views 來說</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">render</span> '<span class=\"attr\">partial</span>/<span class=\"attr\">buttons</span>/<span class=\"attr\">primary</span>', <span class=\"attr\">locals:</span> &#123;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">:name</span> =&gt; 'foo'</div><div class=\"line\"></div><div class=\"line\">  :title =&gt; 'bar'</div><div class=\"line\"></div><div class=\"line\">&#125; %&gt;</div></pre></td></tr></table></figure>\n<p>將常用的元件拆成 partial，並且放在對應的資料夾（我的習慣是將所有 partial 檔統一資料夾管理，除非那個 partial 只有在某一個特定頁面使用）。這樣一來就可以很容易地引入已經撰寫好的 HTML 架構。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">render</span> '<span class=\"attr\">partial</span>/<span class=\"attr\">modal</span>', <span class=\"attr\">locals:</span> &#123;</span></div><div class=\"line\"> <span class=\"attr\">:name</span> =&gt; 'foo',</div><div class=\"line\"> :title =&gt; 'bar',</div><div class=\"line\"> :image =&gt; image_path('a.png')</div><div class=\"line\">&#125; %&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>HTML 的重構比起 CSS 跟 JS，算是簡單許多（只要 css 撰寫的時候不用 tag 做 styling），不過從頭看下來，要顧慮的事情也不少。正確的使用 tag 以及顧慮 accessibility，能夠有效地增加 UX，同時自己在修改的時候也不會看到一大堆 div 看到心癢癢。</p>\n<h4 id=\"Legacy-Code-專欄\"><a href=\"#Legacy-Code-專欄\" class=\"headerlink\" title=\"Legacy Code 專欄\"></a>Legacy Code 專欄</h4><ul>\n<li><a href=\"/2016/06/11/legacy-code/\" title=\"從 legacy code 中尋找出口（上）\">從 legacy code 中尋找出口（上）</a></li>\n<li><a href=\"/2016/06/14/legacy-code2/\" title=\"如何從 legacy code 中尋找出口（中）- CSS 篇\">如何從 legacy code 中尋找出口（中）- CSS 篇</a>\n</li>\n</ul>\n","excerpt":"","more":"<p>講完 CSS 的重構技巧之後，接下來會專注在 HTML 的重構技巧上。本系列的文章將不會談論 js 的重構部分，因為牽扯到較多的程式撰寫技巧，而且網路上類似的文章應該是不勝枚舉。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>其實 HTML 能夠重構的點並不多，主要就是標籤的正確使用以及顧慮 accessibility 等小細節。</p>\n<p>所以這篇文章會著重在如何使用正確的標籤以及語義化；基本的 accessiblity 認識跟 aria 標籤的使用，不僅對 screen reader 較友善，語義化的標籤使用也能夠在之後修改 HTML 時更有效率；最後是模板語言的技巧應用，這邊會用 rails 的 views 為例，不過概念的部分應該是相通的。 </p>\n<hr>\n<h3 id=\"語義化\"><a href=\"#語義化\" class=\"headerlink\" title=\"語義化\"></a>語義化</h3><p>首先，我們先來看看 HTML5 新增的 tag 有哪些</p>\n<h4 id=\"section\"><a href=\"#section\" class=\"headerlink\" title=\"section\"></a>section</h4><ul>\n<li><p>用來表示網頁裡的一個<strong>段落</strong>，常見的誤解是用來表示一篇文章。</p>\n</li>\n<li><p>基本上跟 div 沒有太大的差別，只有語義化的表現。</p>\n</li>\n</ul>\n<h4 id=\"article\"><a href=\"#article\" class=\"headerlink\" title=\"article\"></a>article</h4><ul>\n<li>用來表示一篇<strong>文章</strong></li>\n</ul>\n<h4 id=\"datalist\"><a href=\"#datalist\" class=\"headerlink\" title=\"datalist\"></a>datalist</h4><h4 id=\"dl-dt-dd\"><a href=\"#dl-dt-dd\" class=\"headerlink\" title=\"dl dt dd\"></a>dl dt dd</h4><ul>\n<li><p>如果資訊是以條列式來呈現，可以使用 dt, dd 來區分。</p>\n<blockquote>\n<p>Definition lists, created using the DL element, generally consist of a series of term\\/definition pairs (although definition lists may have other applications). Thus, when advertising a product, one might use a definition list:</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">class</span>=<span class=\"string\">\"information\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>薪水：<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>100000 ~ 300000<span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>工作地點：<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>台北市<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>任何以成對方式呈現的資訊都可以使用 dt, dd 包裝，像是範例中的：薪水搭配 100000 ~ 300000、工作地點搭配台北市。不過要注意的一點是 dl 預設會將內容縮排（就跟 ul, ol 一樣）。可以將 padding 設置為 0 來解決。</p>\n<h4 id=\"figure-figcaption\"><a href=\"#figure-figcaption\" class=\"headerlink\" title=\"figure figcaption\"></a>figure figcaption</h4><ul>\n<li><p>使用在和主內容相關的圖片、代碼，或其他資訊，不一定只能放圖而已</p>\n</li>\n<li><p>搭配 figcaption 來定義標題</p>\n</li>\n</ul>\n<h4 id=\"legend\"><a href=\"#legend\" class=\"headerlink\" title=\"legend\"></a>legend</h4><ul>\n<li><p>搭配 fieldset 使用，用來表示輸入表單的內容</p>\n</li>\n<li><p>預設的邊框很醜，如果要使用這樣的結構可能要重置一下 CSS</p>\n</li>\n</ul>\n<iframe height='265' scrolling='no' src='//codepen.io/kjj6198/embed/LRkQAB/?height=265&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='http://codepen.io/kjj6198/pen/LRkQAB/'>fieldset</a> by 愷開 (<a href='http://codepen.io/kjj6198'>@kjj6198</a>) on <a href='http://codepen.io'>CodePen</a>.<br></iframe>\n\n<p>族繁不及備載，tag 的部分就在此告一段落。我個人覺得有一大部分是因為<strong>不知道</strong>才沒有使用這些 tag 的，詳情可以到<a href=\"http://www.w3school.com.cn/tags/tag_legend.asp\">w3c</a> 的網站看看。之後會再將其他 tag 的使用方式補上。</p>\n<h4 id=\"如果都沒辦法滿足怎麼辦？\"><a href=\"#如果都沒辦法滿足怎麼辦？\" class=\"headerlink\" title=\"如果都沒辦法滿足怎麼辦？\"></a>如果都沒辦法滿足怎麼辦？</h4><p>如果以上的 tag 都沒有辦法滿足你的需求，最常見的做法就是用純 div。而 HTML 為了因應這樣的需求，也提出的 ARIA 的 spec，讓開發者可以更容易製作客製化的元件。如果我們想要使用 div 來模擬按鈕的行為，除了在 class 加上 <code>btn</code> 之外，我們同時可以加上 role attribute，並且使用相對應的 aria-* 標籤來做對應的狀態處理（是否按下、disabled、haspopup 等等），除了更加語義化之外，這些看起來有點麻煩的細節，都會大幅地改善使用 screen reader 的體驗。</p>\n<p>但是，盡量不要取代原本語義化的標籤的含義，例如將 button 標籤加入 <code>role=&quot;modal&quot;</code>  之後當作 modal 使用。</p>\n<blockquote>\n<p>Web developers <em>must not</em> use the ARIA <code>role</code> and <code>aria-*</code> attributes in a manner that conflicts with the semantics described in the <a href=\"https://www.w3.org/TR/html-aria/#docconformance\">Document conformance requirements for use of ARIA attributes in HTML</a>table. Web developers <em>should not</em> set the ARIA <code>role</code> and <code>aria-*</code> attributes to values that match the default implicit ARIA semantics defined in the table. - <a href=\"https://www.w3.org/TR/html-aria/#rules-wd\">w3c spec</a></p>\n</blockquote>\n<p>當然，雖然 spec 這麼說，但某些 tag 像是 <code>input + label</code> 的 hack 對前端開發來講真的很方便。這部分或許就看大家的取捨了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">aria-disabled</span>=<span class=\"string\">\"false\"</span>&gt;</span>Click to Signup<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Accessibility\"><a href=\"#Accessibility\" class=\"headerlink\" title=\"Accessibility\"></a>Accessibility</h3><p>accessibility 其實可以另外再寫一篇文章來討論，但因為不再本篇的討論範圍內，這邊只列幾點關於 accessibility 的注意要點。</p>\n<ul>\n<li><p>文字的大小</p>\n</li>\n<li><p>顏色的對比</p>\n</li>\n<li><p>是否加入適當的 attr。（img 的 alt, link 的 title 等）</p>\n</li>\n<li><p>適當的 aria-* 使用</p>\n</li>\n</ul>\n<p>如果對 accessility 有興趣，建議大家看看：</p>\n<ul>\n<li><p><a href=\"https://www.w3.org/TR/html-aria/\">ARIA</a> w3c 的 aria 標準。</p>\n</li>\n<li><p><a href=\"http://webaim.org/standards/wcag/checklist\">WebAIM checklist</a> WCAG 的 checklist</p>\n</li>\n<li><p><a href=\"http://webaim.org/techniques/css/invisiblecontent/\">WebAIM inviblecontent</a> 關於 CSS invisible content 的介紹</p>\n</li>\n</ul>\n<h3 id=\"模板語言（已-rails-views-為例）\"><a href=\"#模板語言（已-rails-views-為例）\" class=\"headerlink\" title=\"模板語言（已 rails views 為例）\"></a>模板語言（已 rails views 為例）</h3><p>目前市面上有很多模板引擎，像是 <code>ejs</code> <code>erb</code> <code>handlebar</code> <code>jade</code> 等等，都有一套特定的語法、partial、客製化的函數等等幫助你簡化冗長的 HTML。</p>\n<p>就 rails views 來說</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">render</span> '<span class=\"attr\">partial</span>/<span class=\"attr\">buttons</span>/<span class=\"attr\">primary</span>', <span class=\"attr\">locals:</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">:name</span> =&gt;</span> 'foo'</div><div class=\"line\"></div><div class=\"line\">  :title =&gt; 'bar'</div><div class=\"line\"></div><div class=\"line\">&#125; %&gt;</div></pre></td></tr></table></figure>\n<p>將常用的元件拆成 partial，並且放在對應的資料夾（我的習慣是將所有 partial 檔統一資料夾管理，除非那個 partial 只有在某一個特定頁面使用）。這樣一來就可以很容易地引入已經撰寫好的 HTML 架構。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">render</span> '<span class=\"attr\">partial</span>/<span class=\"attr\">modal</span>', <span class=\"attr\">locals:</span> &#123;</div><div class=\"line\"> <span class=\"attr\">:name</span> =&gt;</span> 'foo',</div><div class=\"line\"> :title =&gt; 'bar',</div><div class=\"line\"> :image =&gt; image_path('a.png')</div><div class=\"line\">&#125; %&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>HTML 的重構比起 CSS 跟 JS，算是簡單許多（只要 css 撰寫的時候不用 tag 做 styling），不過從頭看下來，要顧慮的事情也不少。正確的使用 tag 以及顧慮 accessibility，能夠有效地增加 UX，同時自己在修改的時候也不會看到一大堆 div 看到心癢癢。</p>\n<h4 id=\"Legacy-Code-專欄\"><a href=\"#Legacy-Code-專欄\" class=\"headerlink\" title=\"Legacy Code 專欄\"></a>Legacy Code 專欄</h4><ul>\n<li><a href=\"/2016/06/11/legacy-code/\" title=\"從 legacy code 中尋找出口（上）\">從 legacy code 中尋找出口（上）</a></li>\n<li><a href=\"/2016/06/14/legacy-code2/\" title=\"如何從 legacy code 中尋找出口（中）- CSS 篇\">如何從 legacy code 中尋找出口（中）- CSS 篇</a>\n</li>\n</ul>\n"},{"title":"用 Canvas 實作 low-poly art 心得","date":"2016-11-01T03:40:41.000Z","_content":"\n文章待補，圖片。\n\n### 前言\n\n說到 low poly，最讓我驚豔的是 [species in pieces](http://species-in-pieces.com/) 這個網站，他使用 low-poly 的方式畫出 30 種現在地球上瀕臨絕種的動物，是用 CSS 的 clip-path 做出來的，為了兼容瀏覽器，甚至還有做 fallback 的圖片，非常的用心。\n\n之前有在知乎上有看見 low poly 的實作方式，但看了一下原始碼，回答是用 THREE.js 做的。一來我對 three 的掌握程度還太低，再來是 2D 的圖形用 WebGL 加速實在有點奢侈啊。這邊記錄一下思路跟實現過程。\n\n其實要做到 low poly 的效果並不難，最直覺的方式就是在畫面上取點，然後把點連接成三角形。再把三角形著色就完成了。不過隨機取點的方式會造成圖片很大的失真。\n\n有以下四大步驟：\n\n- 轉為灰階\n- 使用 sobel 做邊緣偵測\n- 選擇 vertices\n- 使用 Delaunay 三角化\n- 幫三角形上色\n\n#### 圖片轉灰階\n\n有了 canvas 之後，我們可以使用 `getImageData` 這個 API 對圖片中的任何 pixel 做操作，這給 canvas 更大的彈性跟靈活度，代表圖片的操作有更多的可能性了。\n\n而灰階的實現並不難，將圖片中的 r g b 相加取平均即可。示意的程式碼大概像這樣：\n\n```javascript\nvar resultArr = [];\nfor (var row = 0; row < height; y++) {\n  var i = row * width * 4 + 4;\n  for(var col = 1; col < width; col++, i+=4) {\n    \n  }\n}\n```\n\n其實在實際應用中，要取得邊緣的方式並不是那麼簡單，有可能會影響的因素有：\n\n- 陰影\n- 聚焦模糊\n\n#### Sobel 取邊緣\n\n通常檢測邊界的算法原理在於，將此像素的資料與其他像素比較，如果比較起來發現差距很大（顏色），那麼即可判斷這一點是邊緣。取邊界的算法有很多種，一般最暴力也最直接的方法就是 Sobel。\n\n這邊就不解釋 Sobel 的原理了，[維基百科](https://www.wikiwand.com/zh-tw/%E7%B4%A2%E8%B2%9D%E7%88%BE%E7%AE%97%E5%AD%90)上面寫得蠻清楚的。\n{% math %}\nGx = \\begin{vmatrix} \n\\mathbf{-1} & \\mathbf{0} & \\mathbf{1} \\\\\n\\mathbf{-2} & \\mathbf{0} & \\mathbf{2} \\\\\n\\mathbf{-1} & \\mathbf{0} & \\mathbf{1}\n\\end{vmatrix}\nGy = \\begin{vmatrix} \n\\mathbf{-1} & \\mathbf{-2} & \\mathbf{-1} \\\\\n\\mathbf{0} & \\mathbf{0} & \\mathbf{0} \\\\\n\\mathbf{1} & \\mathbf{2} & \\mathbf{1}\n\\end{vmatrix}\n{% endmath %}\n將矩陣做乘法之後就可以得到梯度大小了。\n\n取完邊界之後，重頭戲就是如何將它三角化了！\n\n#### 取點\n\n如果是隨機取點，很快就會發現一些盲點，邊緣常常沒有辦法很完整的保存下來，因為取點的方式隨機，三角形就會破壞邊緣的形狀，所以這邊的思路是三角形盡量不要出現在邊緣上，而是用邊緣當做三角形的點，這樣才能將邊緣比較完整的保存下來。\n\n但取邊緣的點也不能全部都取，不然這張圖就根本沒有任何藝術效果了，像這個樣子。\n\n醜不拉機，而且裡頭還有很多過小的三角形造成瑣碎的效果，這顯然不是我們想的樣子。那麼，如果都用邊緣的點當作組成三角形的點呢？\n\n我們來看看效果，因為都是用邊緣取點，很容易造成三角形過於尖銳的效果，為了避免這樣的情形發生，我們必須**有限制地**取邊緣的點。所以，除了邊緣上的點會被選中之外，我們也加入一些邊緣外的點，避免銳角三角形的情況發生。\n\n此外，為了更有效的避免銳角三角形發生，我們可以使用 Delaunay 三角化的算法更有效率的取點。這樣子的效果就更完美了，但顯然我的實作上還有一些小問題：\n\n- 在一些細節當中，如何保存比較完整的圖片訊息\n- 失真太大，有些圖片被三角化之後會完全走樣\n\n#### 結論\n\n關於圖學領域真的是一門很深奧的學問啊…，不但要有一定的數學基礎與背景，還需要跟 openCV 或是 webGL、canvas 打交道，而最重要的是創意。\n\n光是圖形的轉換跟變化，就足以寫一本厚厚的教科書了，更何況是用程式語言實作。不過第一次接觸這個領域，挺好玩的。\n\n這個演算法最重要的部分在於選取點的方式，如果更有技巧地取點，那麼三角化後的圖形失真會越少。許多論文跟網路上的實現都比我胡亂湊出來的算法屌多了。\n\n\n\n","source":"_posts/low-poly-art.md","raw":"---\ntitle: 用 Canvas 實作 low-poly art 心得\ntags:\n  - canvas\n  - low poly\ncategory: 前端\ndate: 2016-11-01 11:40:41\n---\n\n文章待補，圖片。\n\n### 前言\n\n說到 low poly，最讓我驚豔的是 [species in pieces](http://species-in-pieces.com/) 這個網站，他使用 low-poly 的方式畫出 30 種現在地球上瀕臨絕種的動物，是用 CSS 的 clip-path 做出來的，為了兼容瀏覽器，甚至還有做 fallback 的圖片，非常的用心。\n\n之前有在知乎上有看見 low poly 的實作方式，但看了一下原始碼，回答是用 THREE.js 做的。一來我對 three 的掌握程度還太低，再來是 2D 的圖形用 WebGL 加速實在有點奢侈啊。這邊記錄一下思路跟實現過程。\n\n其實要做到 low poly 的效果並不難，最直覺的方式就是在畫面上取點，然後把點連接成三角形。再把三角形著色就完成了。不過隨機取點的方式會造成圖片很大的失真。\n\n有以下四大步驟：\n\n- 轉為灰階\n- 使用 sobel 做邊緣偵測\n- 選擇 vertices\n- 使用 Delaunay 三角化\n- 幫三角形上色\n\n#### 圖片轉灰階\n\n有了 canvas 之後，我們可以使用 `getImageData` 這個 API 對圖片中的任何 pixel 做操作，這給 canvas 更大的彈性跟靈活度，代表圖片的操作有更多的可能性了。\n\n而灰階的實現並不難，將圖片中的 r g b 相加取平均即可。示意的程式碼大概像這樣：\n\n```javascript\nvar resultArr = [];\nfor (var row = 0; row < height; y++) {\n  var i = row * width * 4 + 4;\n  for(var col = 1; col < width; col++, i+=4) {\n    \n  }\n}\n```\n\n其實在實際應用中，要取得邊緣的方式並不是那麼簡單，有可能會影響的因素有：\n\n- 陰影\n- 聚焦模糊\n\n#### Sobel 取邊緣\n\n通常檢測邊界的算法原理在於，將此像素的資料與其他像素比較，如果比較起來發現差距很大（顏色），那麼即可判斷這一點是邊緣。取邊界的算法有很多種，一般最暴力也最直接的方法就是 Sobel。\n\n這邊就不解釋 Sobel 的原理了，[維基百科](https://www.wikiwand.com/zh-tw/%E7%B4%A2%E8%B2%9D%E7%88%BE%E7%AE%97%E5%AD%90)上面寫得蠻清楚的。\n{% math %}\nGx = \\begin{vmatrix} \n\\mathbf{-1} & \\mathbf{0} & \\mathbf{1} \\\\\n\\mathbf{-2} & \\mathbf{0} & \\mathbf{2} \\\\\n\\mathbf{-1} & \\mathbf{0} & \\mathbf{1}\n\\end{vmatrix}\nGy = \\begin{vmatrix} \n\\mathbf{-1} & \\mathbf{-2} & \\mathbf{-1} \\\\\n\\mathbf{0} & \\mathbf{0} & \\mathbf{0} \\\\\n\\mathbf{1} & \\mathbf{2} & \\mathbf{1}\n\\end{vmatrix}\n{% endmath %}\n將矩陣做乘法之後就可以得到梯度大小了。\n\n取完邊界之後，重頭戲就是如何將它三角化了！\n\n#### 取點\n\n如果是隨機取點，很快就會發現一些盲點，邊緣常常沒有辦法很完整的保存下來，因為取點的方式隨機，三角形就會破壞邊緣的形狀，所以這邊的思路是三角形盡量不要出現在邊緣上，而是用邊緣當做三角形的點，這樣才能將邊緣比較完整的保存下來。\n\n但取邊緣的點也不能全部都取，不然這張圖就根本沒有任何藝術效果了，像這個樣子。\n\n醜不拉機，而且裡頭還有很多過小的三角形造成瑣碎的效果，這顯然不是我們想的樣子。那麼，如果都用邊緣的點當作組成三角形的點呢？\n\n我們來看看效果，因為都是用邊緣取點，很容易造成三角形過於尖銳的效果，為了避免這樣的情形發生，我們必須**有限制地**取邊緣的點。所以，除了邊緣上的點會被選中之外，我們也加入一些邊緣外的點，避免銳角三角形的情況發生。\n\n此外，為了更有效的避免銳角三角形發生，我們可以使用 Delaunay 三角化的算法更有效率的取點。這樣子的效果就更完美了，但顯然我的實作上還有一些小問題：\n\n- 在一些細節當中，如何保存比較完整的圖片訊息\n- 失真太大，有些圖片被三角化之後會完全走樣\n\n#### 結論\n\n關於圖學領域真的是一門很深奧的學問啊…，不但要有一定的數學基礎與背景，還需要跟 openCV 或是 webGL、canvas 打交道，而最重要的是創意。\n\n光是圖形的轉換跟變化，就足以寫一本厚厚的教科書了，更何況是用程式語言實作。不過第一次接觸這個領域，挺好玩的。\n\n這個演算法最重要的部分在於選取點的方式，如果更有技巧地取點，那麼三角化後的圖形失真會越少。許多論文跟網路上的實現都比我胡亂湊出來的算法屌多了。\n\n\n\n","slug":"low-poly-art","published":1,"updated":"2017-02-28T15:41:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p81000wb75t8lp4qdlv","content":"<p>文章待補，圖片。</p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>說到 low poly，最讓我驚豔的是 <a href=\"http://species-in-pieces.com/\" target=\"_blank\" rel=\"external\">species in pieces</a> 這個網站，他使用 low-poly 的方式畫出 30 種現在地球上瀕臨絕種的動物，是用 CSS 的 clip-path 做出來的，為了兼容瀏覽器，甚至還有做 fallback 的圖片，非常的用心。</p>\n<p>之前有在知乎上有看見 low poly 的實作方式，但看了一下原始碼，回答是用 THREE.js 做的。一來我對 three 的掌握程度還太低，再來是 2D 的圖形用 WebGL 加速實在有點奢侈啊。這邊記錄一下思路跟實現過程。</p>\n<p>其實要做到 low poly 的效果並不難，最直覺的方式就是在畫面上取點，然後把點連接成三角形。再把三角形著色就完成了。不過隨機取點的方式會造成圖片很大的失真。</p>\n<p>有以下四大步驟：</p>\n<ul>\n<li>轉為灰階</li>\n<li>使用 sobel 做邊緣偵測</li>\n<li>選擇 vertices</li>\n<li>使用 Delaunay 三角化</li>\n<li>幫三角形上色</li>\n</ul>\n<h4 id=\"圖片轉灰階\"><a href=\"#圖片轉灰階\" class=\"headerlink\" title=\"圖片轉灰階\"></a>圖片轉灰階</h4><p>有了 canvas 之後，我們可以使用 <code>getImageData</code> 這個 API 對圖片中的任何 pixel 做操作，這給 canvas 更大的彈性跟靈活度，代表圖片的操作有更多的可能性了。</p>\n<p>而灰階的實現並不難，將圖片中的 r g b 相加取平均即可。示意的程式碼大概像這樣：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> resultArr = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> row = <span class=\"number\">0</span>; row &lt; height; y++) &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> i = row * width * <span class=\"number\">4</span> + <span class=\"number\">4</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> col = <span class=\"number\">1</span>; col &lt; width; col++, i+=<span class=\"number\">4</span>) &#123;</div><div class=\"line\">    </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其實在實際應用中，要取得邊緣的方式並不是那麼簡單，有可能會影響的因素有：</p>\n<ul>\n<li>陰影</li>\n<li>聚焦模糊</li>\n</ul>\n<h4 id=\"Sobel-取邊緣\"><a href=\"#Sobel-取邊緣\" class=\"headerlink\" title=\"Sobel 取邊緣\"></a>Sobel 取邊緣</h4><p>通常檢測邊界的算法原理在於，將此像素的資料與其他像素比較，如果比較起來發現差距很大（顏色），那麼即可判斷這一點是邊緣。取邊界的算法有很多種，一般最暴力也最直接的方法就是 Sobel。</p>\n<p>這邊就不解釋 Sobel 的原理了，<a href=\"https://www.wikiwand.com/zh-tw/%E7%B4%A2%E8%B2%9D%E7%88%BE%E7%AE%97%E5%AD%90\" target=\"_blank\" rel=\"external\">維基百科</a>上面寫得蠻清楚的。<br><span>$$Gx = \\begin{vmatrix} \n\\mathbf{-1} &amp; \\mathbf{0} &amp; \\mathbf{1} \\\\\n\\mathbf{-2} &amp; \\mathbf{0} &amp; \\mathbf{2} \\\\\n\\mathbf{-1} &amp; \\mathbf{0} &amp; \\mathbf{1}\n\\end{vmatrix}\nGy = \\begin{vmatrix} \n\\mathbf{-1} &amp; \\mathbf{-2} &amp; \\mathbf{-1} \\\\\n\\mathbf{0} &amp; \\mathbf{0} &amp; \\mathbf{0} \\\\\n\\mathbf{1} &amp; \\mathbf{2} &amp; \\mathbf{1}\n\\end{vmatrix}$$</span><!-- Has MathJax --><br>將矩陣做乘法之後就可以得到梯度大小了。</p>\n<p>取完邊界之後，重頭戲就是如何將它三角化了！</p>\n<h4 id=\"取點\"><a href=\"#取點\" class=\"headerlink\" title=\"取點\"></a>取點</h4><p>如果是隨機取點，很快就會發現一些盲點，邊緣常常沒有辦法很完整的保存下來，因為取點的方式隨機，三角形就會破壞邊緣的形狀，所以這邊的思路是三角形盡量不要出現在邊緣上，而是用邊緣當做三角形的點，這樣才能將邊緣比較完整的保存下來。</p>\n<p>但取邊緣的點也不能全部都取，不然這張圖就根本沒有任何藝術效果了，像這個樣子。</p>\n<p>醜不拉機，而且裡頭還有很多過小的三角形造成瑣碎的效果，這顯然不是我們想的樣子。那麼，如果都用邊緣的點當作組成三角形的點呢？</p>\n<p>我們來看看效果，因為都是用邊緣取點，很容易造成三角形過於尖銳的效果，為了避免這樣的情形發生，我們必須<strong>有限制地</strong>取邊緣的點。所以，除了邊緣上的點會被選中之外，我們也加入一些邊緣外的點，避免銳角三角形的情況發生。</p>\n<p>此外，為了更有效的避免銳角三角形發生，我們可以使用 Delaunay 三角化的算法更有效率的取點。這樣子的效果就更完美了，但顯然我的實作上還有一些小問題：</p>\n<ul>\n<li>在一些細節當中，如何保存比較完整的圖片訊息</li>\n<li>失真太大，有些圖片被三角化之後會完全走樣</li>\n</ul>\n<h4 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h4><p>關於圖學領域真的是一門很深奧的學問啊…，不但要有一定的數學基礎與背景，還需要跟 openCV 或是 webGL、canvas 打交道，而最重要的是創意。</p>\n<p>光是圖形的轉換跟變化，就足以寫一本厚厚的教科書了，更何況是用程式語言實作。不過第一次接觸這個領域，挺好玩的。</p>\n<p>這個演算法最重要的部分在於選取點的方式，如果更有技巧地取點，那麼三角化後的圖形失真會越少。許多論文跟網路上的實現都比我胡亂湊出來的算法屌多了。</p>\n","excerpt":"","more":"<p>文章待補，圖片。</p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>說到 low poly，最讓我驚豔的是 <a href=\"http://species-in-pieces.com/\">species in pieces</a> 這個網站，他使用 low-poly 的方式畫出 30 種現在地球上瀕臨絕種的動物，是用 CSS 的 clip-path 做出來的，為了兼容瀏覽器，甚至還有做 fallback 的圖片，非常的用心。</p>\n<p>之前有在知乎上有看見 low poly 的實作方式，但看了一下原始碼，回答是用 THREE.js 做的。一來我對 three 的掌握程度還太低，再來是 2D 的圖形用 WebGL 加速實在有點奢侈啊。這邊記錄一下思路跟實現過程。</p>\n<p>其實要做到 low poly 的效果並不難，最直覺的方式就是在畫面上取點，然後把點連接成三角形。再把三角形著色就完成了。不過隨機取點的方式會造成圖片很大的失真。</p>\n<p>有以下四大步驟：</p>\n<ul>\n<li>轉為灰階</li>\n<li>使用 sobel 做邊緣偵測</li>\n<li>選擇 vertices</li>\n<li>使用 Delaunay 三角化</li>\n<li>幫三角形上色</li>\n</ul>\n<h4 id=\"圖片轉灰階\"><a href=\"#圖片轉灰階\" class=\"headerlink\" title=\"圖片轉灰階\"></a>圖片轉灰階</h4><p>有了 canvas 之後，我們可以使用 <code>getImageData</code> 這個 API 對圖片中的任何 pixel 做操作，這給 canvas 更大的彈性跟靈活度，代表圖片的操作有更多的可能性了。</p>\n<p>而灰階的實現並不難，將圖片中的 r g b 相加取平均即可。示意的程式碼大概像這樣：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> resultArr = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> row = <span class=\"number\">0</span>; row &lt; height; y++) &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> i = row * width * <span class=\"number\">4</span> + <span class=\"number\">4</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> col = <span class=\"number\">1</span>; col &lt; width; col++, i+=<span class=\"number\">4</span>) &#123;</div><div class=\"line\">    </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其實在實際應用中，要取得邊緣的方式並不是那麼簡單，有可能會影響的因素有：</p>\n<ul>\n<li>陰影</li>\n<li>聚焦模糊</li>\n</ul>\n<h4 id=\"Sobel-取邊緣\"><a href=\"#Sobel-取邊緣\" class=\"headerlink\" title=\"Sobel 取邊緣\"></a>Sobel 取邊緣</h4><p>通常檢測邊界的算法原理在於，將此像素的資料與其他像素比較，如果比較起來發現差距很大（顏色），那麼即可判斷這一點是邊緣。取邊界的算法有很多種，一般最暴力也最直接的方法就是 Sobel。</p>\n<p>這邊就不解釋 Sobel 的原理了，<a href=\"https://www.wikiwand.com/zh-tw/%E7%B4%A2%E8%B2%9D%E7%88%BE%E7%AE%97%E5%AD%90\">維基百科</a>上面寫得蠻清楚的。<br><span>$$Gx = \\begin{vmatrix} \n\\mathbf{-1} &amp; \\mathbf{0} &amp; \\mathbf{1} \\\\\n\\mathbf{-2} &amp; \\mathbf{0} &amp; \\mathbf{2} \\\\\n\\mathbf{-1} &amp; \\mathbf{0} &amp; \\mathbf{1}\n\\end{vmatrix}\nGy = \\begin{vmatrix} \n\\mathbf{-1} &amp; \\mathbf{-2} &amp; \\mathbf{-1} \\\\\n\\mathbf{0} &amp; \\mathbf{0} &amp; \\mathbf{0} \\\\\n\\mathbf{1} &amp; \\mathbf{2} &amp; \\mathbf{1}\n\\end{vmatrix}$$</span><!-- Has MathJax --><br>將矩陣做乘法之後就可以得到梯度大小了。</p>\n<p>取完邊界之後，重頭戲就是如何將它三角化了！</p>\n<h4 id=\"取點\"><a href=\"#取點\" class=\"headerlink\" title=\"取點\"></a>取點</h4><p>如果是隨機取點，很快就會發現一些盲點，邊緣常常沒有辦法很完整的保存下來，因為取點的方式隨機，三角形就會破壞邊緣的形狀，所以這邊的思路是三角形盡量不要出現在邊緣上，而是用邊緣當做三角形的點，這樣才能將邊緣比較完整的保存下來。</p>\n<p>但取邊緣的點也不能全部都取，不然這張圖就根本沒有任何藝術效果了，像這個樣子。</p>\n<p>醜不拉機，而且裡頭還有很多過小的三角形造成瑣碎的效果，這顯然不是我們想的樣子。那麼，如果都用邊緣的點當作組成三角形的點呢？</p>\n<p>我們來看看效果，因為都是用邊緣取點，很容易造成三角形過於尖銳的效果，為了避免這樣的情形發生，我們必須<strong>有限制地</strong>取邊緣的點。所以，除了邊緣上的點會被選中之外，我們也加入一些邊緣外的點，避免銳角三角形的情況發生。</p>\n<p>此外，為了更有效的避免銳角三角形發生，我們可以使用 Delaunay 三角化的算法更有效率的取點。這樣子的效果就更完美了，但顯然我的實作上還有一些小問題：</p>\n<ul>\n<li>在一些細節當中，如何保存比較完整的圖片訊息</li>\n<li>失真太大，有些圖片被三角化之後會完全走樣</li>\n</ul>\n<h4 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h4><p>關於圖學領域真的是一門很深奧的學問啊…，不但要有一定的數學基礎與背景，還需要跟 openCV 或是 webGL、canvas 打交道，而最重要的是創意。</p>\n<p>光是圖形的轉換跟變化，就足以寫一本厚厚的教科書了，更何況是用程式語言實作。不過第一次接觸這個領域，挺好玩的。</p>\n<p>這個演算法最重要的部分在於選取點的方式，如果更有技巧地取點，那麼三角化後的圖形失真會越少。許多論文跟網路上的實現都比我胡亂湊出來的算法屌多了。</p>\n"},{"title":"伊坂幸太郎 - 摩登時代","date":"2017-02-21T16:00:00.000Z","_content":"\n《摩登時代》原本是喜劇天王卓別林最著名的一部默劇電影。並且被認為是美國史上最偉大的電影之一。\n\n在討論社會學以及國家、個人、家庭之間的關係時，這部電影也常常會被拿出來討論。\n\n雖然是用戲謔而滑稽的手法詮釋的電影，卻將殘忍的事實完整的描述出來。\n\n從卓別林的眼中看見這個國家所隱含的殘酷現實，這就是我們所知的城市，儘管醜陋，卻是我們必須賴以維生的重要場所。這樣令人哭笑不得的劇情，是卓別林突出的功力。![getImage](https://lh6.googleusercontent.com/gIDqGR6FPGQIX2h1DYM4Z7-Yr1geftISfKU6spUKKljcnAk8zyOThE0vbPmUXREVRRD5q6pOX6ugUpThHOf1X3tQTDRz14ZP75OR085AH2G6uNxEzHepY3sAK7pJhONplNnD8_4) \n\n## 摩登時代\n\n這本書是伊坂幸太郎在2010發表的長篇小說，配上花澤健吾的插畫，更富有戲謔感。\n\n伊坂幸太郎將這個故事從頭說起，主軸仍然是在討論這個國家、組織的運作，卻更有戲劇性，雖然也有不少湊篇幅而出現的情節，不過這部小說是連載之後才出版成小說的。\n\n這次連伊坂幸太郎都跳入這個故事中，「我的小說無法改變世界」、「小說啊！只能滲進讀者的體內，然後溶解」似乎隱約道出他的無奈。但不管如何，唯一能確定的是，他深厚的寫作功力以及架構，的確讓這篇故事相當精彩。\n\n「你有沒有勇氣？」是讀完小說後，最深刻的印象之一，男主角平凡的要命，膽小怕死又背著老婆外遇，這樣一位平凡人，就跟螺絲釘一樣。\n\n故事從一位系統工程師發現某個交友網站的程式內部隱藏著某種驚人的事實，愈是深入了解，愈發覺事情的不對勁，因為鍵入特定的關鍵字而受害，這位工程師開始深入調查，然後開始展開了一連串的故事。\n\n書中寫到了許多小故事，也是伊坂的特有風格之一。\n\n每本作品都會有個人物串場，而且不限於人而已，連湯瑪士小火車也曾出現在伊坂的筆中。不僅和劇情有呼應，也似乎在傳達著這個社會下所顯現出來的殘酷。\n\n### 漢娜鄂蘭\n\n![content_womany_ying_mu_kuai_zhao_2014_10_14__shang_wu_9_58_57_1413255831-28769-9510](https://lh5.googleusercontent.com/G_oMnIcF7R2uLH7YLqWT20RPt33rObkd7RBx1TrSzhj_ASrLbCRjio5TEQCmasUq1ZGIjRv4WyZUSyCTgoSXRrjwSfTFppvMwy83g0yETqgH2F7j84tDj07NTptCyiSO7NL3BD4)\n\n「邪惡的平庸」，強調平庸才是邪惡的源頭。\n\n事情拉回到二次世界大戰，猶太人被納粹黨大量屠殺的喋血事件。\n\n當時的劊子手「艾西曼」被批評為惡魔。後來發現，他並不是懷抱著對猶太人的憎恨而屠殺，**而是依照著上級命令行事罷了。**\n\n然後呢？他就不需要懷有內疚感或是責任感，一切都只是遵照指示，不需要受到良心的譴責。\n\n每個人都只是機械性地完成工作，卻對整個工作流程一無所知。只是遵守著龐大的組織運作而已。然而這樣的思想並不只存在於當時。\n\n這是巧合嗎？\n\n還是一種帶有歷史性、諷刺的無奈輪迴？漢娜鄂蘭、伊坂幸太郎所要表達的觀念竟然不約而同地出現在現代。\n\n這是伊坂幸太郎的答案「如果因此做什麼都不會覺得不痛不癢的話，這個人就完了」。\n\n在這個資本過剩的年代，生活雖然不容易，卻已經比之前好太多了。更何況年輕時的機會成本出乎意料地低，真的要讓賺錢、找工作這件事變成放棄思考的藉口嗎？就算真的努力工作，存到不錯的存款，又能夠這樣認定這就是正確的嗎？\n\n邏輯上的確說得通，畢竟別人怎麼活是他們的事，能夠做自己喜歡、有回報、擅長的的事當然是個大幸運，但大部分的人都只能擇其一，並且這樣活下去。\n\n既然有實現夢想的人，那就有不得不放棄夢想的人在。\n\n但是，拿自己的職業做比喻好了。我是一個前端工程師，工作就是從實現設計師所產出的 mockup，儘管頭銜好聽了一點，但本質上也跟擰螺絲的卓别林沒什麼不同。\n\n任何重複性的工作，久了就會覺得枯燥，劇中的卓别林擰啊擰著，擰出病來，甚至把女生的胸部當作螺絲擰下去，結果被抓去監牢。\n\n從早打晚埋頭敲鍵盤，不去思考需求、不去思考這樣做對不對、功能的必要性，那麼的確就跟擰螺絲的工人差不多。\n\n「我只是按照上級指示行動。」這句話聽起來多令人心寒。很多人為了生活跟賺錢放棄思考。捨棄思考的我們、努力（而盲目？）工作的我們，真的只是完成工作就好了嗎？在這樣下去豈不是就像被操控的小丑一樣？\n\n在這個百花齊放的時代，更要不斷提醒自己，我是個活生生的人，有血肉之軀，被打會痛、開心會笑，而不是他人的工具，被動地為他人所用，而是應該要有自己的價值。\n\n### 人是會習慣的動物\n\n工作久了會習慣、反覆練習而純熟。面對不熟悉的領域最原始的情緒就是恐懼跟害怕，如果因為這樣而不敢接觸世界的話，未來也一定會更膽怯的吧！\n\n### 總結\n\n想說的很多，但最完整能表現的大概是這一句吧！\n\n> 「比起支配人，我更想要幫助人」卓別林 -《大獨裁者》\n\n至少在年輕的時候，做什麼事情機會成本都還小的可以時，趕快接觸世界。\n","source":"_posts/morden-time.md","raw":"---\ntitle: 伊坂幸太郎 - 摩登時代\ncategories: 讀書心得\ntags:\n  - 伊坂幸太郎\n  - 卓别林\n  - 摩登時代\ndate: 2017-2-22\n---\n\n《摩登時代》原本是喜劇天王卓別林最著名的一部默劇電影。並且被認為是美國史上最偉大的電影之一。\n\n在討論社會學以及國家、個人、家庭之間的關係時，這部電影也常常會被拿出來討論。\n\n雖然是用戲謔而滑稽的手法詮釋的電影，卻將殘忍的事實完整的描述出來。\n\n從卓別林的眼中看見這個國家所隱含的殘酷現實，這就是我們所知的城市，儘管醜陋，卻是我們必須賴以維生的重要場所。這樣令人哭笑不得的劇情，是卓別林突出的功力。![getImage](https://lh6.googleusercontent.com/gIDqGR6FPGQIX2h1DYM4Z7-Yr1geftISfKU6spUKKljcnAk8zyOThE0vbPmUXREVRRD5q6pOX6ugUpThHOf1X3tQTDRz14ZP75OR085AH2G6uNxEzHepY3sAK7pJhONplNnD8_4) \n\n## 摩登時代\n\n這本書是伊坂幸太郎在2010發表的長篇小說，配上花澤健吾的插畫，更富有戲謔感。\n\n伊坂幸太郎將這個故事從頭說起，主軸仍然是在討論這個國家、組織的運作，卻更有戲劇性，雖然也有不少湊篇幅而出現的情節，不過這部小說是連載之後才出版成小說的。\n\n這次連伊坂幸太郎都跳入這個故事中，「我的小說無法改變世界」、「小說啊！只能滲進讀者的體內，然後溶解」似乎隱約道出他的無奈。但不管如何，唯一能確定的是，他深厚的寫作功力以及架構，的確讓這篇故事相當精彩。\n\n「你有沒有勇氣？」是讀完小說後，最深刻的印象之一，男主角平凡的要命，膽小怕死又背著老婆外遇，這樣一位平凡人，就跟螺絲釘一樣。\n\n故事從一位系統工程師發現某個交友網站的程式內部隱藏著某種驚人的事實，愈是深入了解，愈發覺事情的不對勁，因為鍵入特定的關鍵字而受害，這位工程師開始深入調查，然後開始展開了一連串的故事。\n\n書中寫到了許多小故事，也是伊坂的特有風格之一。\n\n每本作品都會有個人物串場，而且不限於人而已，連湯瑪士小火車也曾出現在伊坂的筆中。不僅和劇情有呼應，也似乎在傳達著這個社會下所顯現出來的殘酷。\n\n### 漢娜鄂蘭\n\n![content_womany_ying_mu_kuai_zhao_2014_10_14__shang_wu_9_58_57_1413255831-28769-9510](https://lh5.googleusercontent.com/G_oMnIcF7R2uLH7YLqWT20RPt33rObkd7RBx1TrSzhj_ASrLbCRjio5TEQCmasUq1ZGIjRv4WyZUSyCTgoSXRrjwSfTFppvMwy83g0yETqgH2F7j84tDj07NTptCyiSO7NL3BD4)\n\n「邪惡的平庸」，強調平庸才是邪惡的源頭。\n\n事情拉回到二次世界大戰，猶太人被納粹黨大量屠殺的喋血事件。\n\n當時的劊子手「艾西曼」被批評為惡魔。後來發現，他並不是懷抱著對猶太人的憎恨而屠殺，**而是依照著上級命令行事罷了。**\n\n然後呢？他就不需要懷有內疚感或是責任感，一切都只是遵照指示，不需要受到良心的譴責。\n\n每個人都只是機械性地完成工作，卻對整個工作流程一無所知。只是遵守著龐大的組織運作而已。然而這樣的思想並不只存在於當時。\n\n這是巧合嗎？\n\n還是一種帶有歷史性、諷刺的無奈輪迴？漢娜鄂蘭、伊坂幸太郎所要表達的觀念竟然不約而同地出現在現代。\n\n這是伊坂幸太郎的答案「如果因此做什麼都不會覺得不痛不癢的話，這個人就完了」。\n\n在這個資本過剩的年代，生活雖然不容易，卻已經比之前好太多了。更何況年輕時的機會成本出乎意料地低，真的要讓賺錢、找工作這件事變成放棄思考的藉口嗎？就算真的努力工作，存到不錯的存款，又能夠這樣認定這就是正確的嗎？\n\n邏輯上的確說得通，畢竟別人怎麼活是他們的事，能夠做自己喜歡、有回報、擅長的的事當然是個大幸運，但大部分的人都只能擇其一，並且這樣活下去。\n\n既然有實現夢想的人，那就有不得不放棄夢想的人在。\n\n但是，拿自己的職業做比喻好了。我是一個前端工程師，工作就是從實現設計師所產出的 mockup，儘管頭銜好聽了一點，但本質上也跟擰螺絲的卓别林沒什麼不同。\n\n任何重複性的工作，久了就會覺得枯燥，劇中的卓别林擰啊擰著，擰出病來，甚至把女生的胸部當作螺絲擰下去，結果被抓去監牢。\n\n從早打晚埋頭敲鍵盤，不去思考需求、不去思考這樣做對不對、功能的必要性，那麼的確就跟擰螺絲的工人差不多。\n\n「我只是按照上級指示行動。」這句話聽起來多令人心寒。很多人為了生活跟賺錢放棄思考。捨棄思考的我們、努力（而盲目？）工作的我們，真的只是完成工作就好了嗎？在這樣下去豈不是就像被操控的小丑一樣？\n\n在這個百花齊放的時代，更要不斷提醒自己，我是個活生生的人，有血肉之軀，被打會痛、開心會笑，而不是他人的工具，被動地為他人所用，而是應該要有自己的價值。\n\n### 人是會習慣的動物\n\n工作久了會習慣、反覆練習而純熟。面對不熟悉的領域最原始的情緒就是恐懼跟害怕，如果因為這樣而不敢接觸世界的話，未來也一定會更膽怯的吧！\n\n### 總結\n\n想說的很多，但最完整能表現的大概是這一句吧！\n\n> 「比起支配人，我更想要幫助人」卓別林 -《大獨裁者》\n\n至少在年輕的時候，做什麼事情機會成本都還小的可以時，趕快接觸世界。\n","slug":"morden-time","published":1,"updated":"2017-03-01T06:03:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p85000zb75t3hh9x4q9","content":"<p>《摩登時代》原本是喜劇天王卓別林最著名的一部默劇電影。並且被認為是美國史上最偉大的電影之一。</p>\n<p>在討論社會學以及國家、個人、家庭之間的關係時，這部電影也常常會被拿出來討論。</p>\n<p>雖然是用戲謔而滑稽的手法詮釋的電影，卻將殘忍的事實完整的描述出來。</p>\n<p>從卓別林的眼中看見這個國家所隱含的殘酷現實，這就是我們所知的城市，儘管醜陋，卻是我們必須賴以維生的重要場所。這樣令人哭笑不得的劇情，是卓別林突出的功力。<img src=\"https://lh6.googleusercontent.com/gIDqGR6FPGQIX2h1DYM4Z7-Yr1geftISfKU6spUKKljcnAk8zyOThE0vbPmUXREVRRD5q6pOX6ugUpThHOf1X3tQTDRz14ZP75OR085AH2G6uNxEzHepY3sAK7pJhONplNnD8_4\" alt=\"getImage\"> </p>\n<h2 id=\"摩登時代\"><a href=\"#摩登時代\" class=\"headerlink\" title=\"摩登時代\"></a>摩登時代</h2><p>這本書是伊坂幸太郎在2010發表的長篇小說，配上花澤健吾的插畫，更富有戲謔感。</p>\n<p>伊坂幸太郎將這個故事從頭說起，主軸仍然是在討論這個國家、組織的運作，卻更有戲劇性，雖然也有不少湊篇幅而出現的情節，不過這部小說是連載之後才出版成小說的。</p>\n<p>這次連伊坂幸太郎都跳入這個故事中，「我的小說無法改變世界」、「小說啊！只能滲進讀者的體內，然後溶解」似乎隱約道出他的無奈。但不管如何，唯一能確定的是，他深厚的寫作功力以及架構，的確讓這篇故事相當精彩。</p>\n<p>「你有沒有勇氣？」是讀完小說後，最深刻的印象之一，男主角平凡的要命，膽小怕死又背著老婆外遇，這樣一位平凡人，就跟螺絲釘一樣。</p>\n<p>故事從一位系統工程師發現某個交友網站的程式內部隱藏著某種驚人的事實，愈是深入了解，愈發覺事情的不對勁，因為鍵入特定的關鍵字而受害，這位工程師開始深入調查，然後開始展開了一連串的故事。</p>\n<p>書中寫到了許多小故事，也是伊坂的特有風格之一。</p>\n<p>每本作品都會有個人物串場，而且不限於人而已，連湯瑪士小火車也曾出現在伊坂的筆中。不僅和劇情有呼應，也似乎在傳達著這個社會下所顯現出來的殘酷。</p>\n<h3 id=\"漢娜鄂蘭\"><a href=\"#漢娜鄂蘭\" class=\"headerlink\" title=\"漢娜鄂蘭\"></a>漢娜鄂蘭</h3><p><img src=\"https://lh5.googleusercontent.com/G_oMnIcF7R2uLH7YLqWT20RPt33rObkd7RBx1TrSzhj_ASrLbCRjio5TEQCmasUq1ZGIjRv4WyZUSyCTgoSXRrjwSfTFppvMwy83g0yETqgH2F7j84tDj07NTptCyiSO7NL3BD4\" alt=\"content_womany_ying_mu_kuai_zhao_2014_10_14__shang_wu_9_58_57_1413255831-28769-9510\"></p>\n<p>「邪惡的平庸」，強調平庸才是邪惡的源頭。</p>\n<p>事情拉回到二次世界大戰，猶太人被納粹黨大量屠殺的喋血事件。</p>\n<p>當時的劊子手「艾西曼」被批評為惡魔。後來發現，他並不是懷抱著對猶太人的憎恨而屠殺，<strong>而是依照著上級命令行事罷了。</strong></p>\n<p>然後呢？他就不需要懷有內疚感或是責任感，一切都只是遵照指示，不需要受到良心的譴責。</p>\n<p>每個人都只是機械性地完成工作，卻對整個工作流程一無所知。只是遵守著龐大的組織運作而已。然而這樣的思想並不只存在於當時。</p>\n<p>這是巧合嗎？</p>\n<p>還是一種帶有歷史性、諷刺的無奈輪迴？漢娜鄂蘭、伊坂幸太郎所要表達的觀念竟然不約而同地出現在現代。</p>\n<p>這是伊坂幸太郎的答案「如果因此做什麼都不會覺得不痛不癢的話，這個人就完了」。</p>\n<p>在這個資本過剩的年代，生活雖然不容易，卻已經比之前好太多了。更何況年輕時的機會成本出乎意料地低，真的要讓賺錢、找工作這件事變成放棄思考的藉口嗎？就算真的努力工作，存到不錯的存款，又能夠這樣認定這就是正確的嗎？</p>\n<p>邏輯上的確說得通，畢竟別人怎麼活是他們的事，能夠做自己喜歡、有回報、擅長的的事當然是個大幸運，但大部分的人都只能擇其一，並且這樣活下去。</p>\n<p>既然有實現夢想的人，那就有不得不放棄夢想的人在。</p>\n<p>但是，拿自己的職業做比喻好了。我是一個前端工程師，工作就是從實現設計師所產出的 mockup，儘管頭銜好聽了一點，但本質上也跟擰螺絲的卓别林沒什麼不同。</p>\n<p>任何重複性的工作，久了就會覺得枯燥，劇中的卓别林擰啊擰著，擰出病來，甚至把女生的胸部當作螺絲擰下去，結果被抓去監牢。</p>\n<p>從早打晚埋頭敲鍵盤，不去思考需求、不去思考這樣做對不對、功能的必要性，那麼的確就跟擰螺絲的工人差不多。</p>\n<p>「我只是按照上級指示行動。」這句話聽起來多令人心寒。很多人為了生活跟賺錢放棄思考。捨棄思考的我們、努力（而盲目？）工作的我們，真的只是完成工作就好了嗎？在這樣下去豈不是就像被操控的小丑一樣？</p>\n<p>在這個百花齊放的時代，更要不斷提醒自己，我是個活生生的人，有血肉之軀，被打會痛、開心會笑，而不是他人的工具，被動地為他人所用，而是應該要有自己的價值。</p>\n<h3 id=\"人是會習慣的動物\"><a href=\"#人是會習慣的動物\" class=\"headerlink\" title=\"人是會習慣的動物\"></a>人是會習慣的動物</h3><p>工作久了會習慣、反覆練習而純熟。面對不熟悉的領域最原始的情緒就是恐懼跟害怕，如果因為這樣而不敢接觸世界的話，未來也一定會更膽怯的吧！</p>\n<h3 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h3><p>想說的很多，但最完整能表現的大概是這一句吧！</p>\n<blockquote>\n<p>「比起支配人，我更想要幫助人」卓別林 -《大獨裁者》</p>\n</blockquote>\n<p>至少在年輕的時候，做什麼事情機會成本都還小的可以時，趕快接觸世界。</p>\n","excerpt":"","more":"<p>《摩登時代》原本是喜劇天王卓別林最著名的一部默劇電影。並且被認為是美國史上最偉大的電影之一。</p>\n<p>在討論社會學以及國家、個人、家庭之間的關係時，這部電影也常常會被拿出來討論。</p>\n<p>雖然是用戲謔而滑稽的手法詮釋的電影，卻將殘忍的事實完整的描述出來。</p>\n<p>從卓別林的眼中看見這個國家所隱含的殘酷現實，這就是我們所知的城市，儘管醜陋，卻是我們必須賴以維生的重要場所。這樣令人哭笑不得的劇情，是卓別林突出的功力。<img src=\"https://lh6.googleusercontent.com/gIDqGR6FPGQIX2h1DYM4Z7-Yr1geftISfKU6spUKKljcnAk8zyOThE0vbPmUXREVRRD5q6pOX6ugUpThHOf1X3tQTDRz14ZP75OR085AH2G6uNxEzHepY3sAK7pJhONplNnD8_4\" alt=\"getImage\"> </p>\n<h2 id=\"摩登時代\"><a href=\"#摩登時代\" class=\"headerlink\" title=\"摩登時代\"></a>摩登時代</h2><p>這本書是伊坂幸太郎在2010發表的長篇小說，配上花澤健吾的插畫，更富有戲謔感。</p>\n<p>伊坂幸太郎將這個故事從頭說起，主軸仍然是在討論這個國家、組織的運作，卻更有戲劇性，雖然也有不少湊篇幅而出現的情節，不過這部小說是連載之後才出版成小說的。</p>\n<p>這次連伊坂幸太郎都跳入這個故事中，「我的小說無法改變世界」、「小說啊！只能滲進讀者的體內，然後溶解」似乎隱約道出他的無奈。但不管如何，唯一能確定的是，他深厚的寫作功力以及架構，的確讓這篇故事相當精彩。</p>\n<p>「你有沒有勇氣？」是讀完小說後，最深刻的印象之一，男主角平凡的要命，膽小怕死又背著老婆外遇，這樣一位平凡人，就跟螺絲釘一樣。</p>\n<p>故事從一位系統工程師發現某個交友網站的程式內部隱藏著某種驚人的事實，愈是深入了解，愈發覺事情的不對勁，因為鍵入特定的關鍵字而受害，這位工程師開始深入調查，然後開始展開了一連串的故事。</p>\n<p>書中寫到了許多小故事，也是伊坂的特有風格之一。</p>\n<p>每本作品都會有個人物串場，而且不限於人而已，連湯瑪士小火車也曾出現在伊坂的筆中。不僅和劇情有呼應，也似乎在傳達著這個社會下所顯現出來的殘酷。</p>\n<h3 id=\"漢娜鄂蘭\"><a href=\"#漢娜鄂蘭\" class=\"headerlink\" title=\"漢娜鄂蘭\"></a>漢娜鄂蘭</h3><p><img src=\"https://lh5.googleusercontent.com/G_oMnIcF7R2uLH7YLqWT20RPt33rObkd7RBx1TrSzhj_ASrLbCRjio5TEQCmasUq1ZGIjRv4WyZUSyCTgoSXRrjwSfTFppvMwy83g0yETqgH2F7j84tDj07NTptCyiSO7NL3BD4\" alt=\"content_womany_ying_mu_kuai_zhao_2014_10_14__shang_wu_9_58_57_1413255831-28769-9510\"></p>\n<p>「邪惡的平庸」，強調平庸才是邪惡的源頭。</p>\n<p>事情拉回到二次世界大戰，猶太人被納粹黨大量屠殺的喋血事件。</p>\n<p>當時的劊子手「艾西曼」被批評為惡魔。後來發現，他並不是懷抱著對猶太人的憎恨而屠殺，<strong>而是依照著上級命令行事罷了。</strong></p>\n<p>然後呢？他就不需要懷有內疚感或是責任感，一切都只是遵照指示，不需要受到良心的譴責。</p>\n<p>每個人都只是機械性地完成工作，卻對整個工作流程一無所知。只是遵守著龐大的組織運作而已。然而這樣的思想並不只存在於當時。</p>\n<p>這是巧合嗎？</p>\n<p>還是一種帶有歷史性、諷刺的無奈輪迴？漢娜鄂蘭、伊坂幸太郎所要表達的觀念竟然不約而同地出現在現代。</p>\n<p>這是伊坂幸太郎的答案「如果因此做什麼都不會覺得不痛不癢的話，這個人就完了」。</p>\n<p>在這個資本過剩的年代，生活雖然不容易，卻已經比之前好太多了。更何況年輕時的機會成本出乎意料地低，真的要讓賺錢、找工作這件事變成放棄思考的藉口嗎？就算真的努力工作，存到不錯的存款，又能夠這樣認定這就是正確的嗎？</p>\n<p>邏輯上的確說得通，畢竟別人怎麼活是他們的事，能夠做自己喜歡、有回報、擅長的的事當然是個大幸運，但大部分的人都只能擇其一，並且這樣活下去。</p>\n<p>既然有實現夢想的人，那就有不得不放棄夢想的人在。</p>\n<p>但是，拿自己的職業做比喻好了。我是一個前端工程師，工作就是從實現設計師所產出的 mockup，儘管頭銜好聽了一點，但本質上也跟擰螺絲的卓别林沒什麼不同。</p>\n<p>任何重複性的工作，久了就會覺得枯燥，劇中的卓别林擰啊擰著，擰出病來，甚至把女生的胸部當作螺絲擰下去，結果被抓去監牢。</p>\n<p>從早打晚埋頭敲鍵盤，不去思考需求、不去思考這樣做對不對、功能的必要性，那麼的確就跟擰螺絲的工人差不多。</p>\n<p>「我只是按照上級指示行動。」這句話聽起來多令人心寒。很多人為了生活跟賺錢放棄思考。捨棄思考的我們、努力（而盲目？）工作的我們，真的只是完成工作就好了嗎？在這樣下去豈不是就像被操控的小丑一樣？</p>\n<p>在這個百花齊放的時代，更要不斷提醒自己，我是個活生生的人，有血肉之軀，被打會痛、開心會笑，而不是他人的工具，被動地為他人所用，而是應該要有自己的價值。</p>\n<h3 id=\"人是會習慣的動物\"><a href=\"#人是會習慣的動物\" class=\"headerlink\" title=\"人是會習慣的動物\"></a>人是會習慣的動物</h3><p>工作久了會習慣、反覆練習而純熟。面對不熟悉的領域最原始的情緒就是恐懼跟害怕，如果因為這樣而不敢接觸世界的話，未來也一定會更膽怯的吧！</p>\n<h3 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h3><p>想說的很多，但最完整能表現的大概是這一句吧！</p>\n<blockquote>\n<p>「比起支配人，我更想要幫助人」卓別林 -《大獨裁者》</p>\n</blockquote>\n<p>至少在年輕的時候，做什麼事情機會成本都還小的可以時，趕快接觸世界。</p>\n"},{"title":"【筆記】易讀程式碼之美學","date":"2016-03-19T16:00:00.000Z","_content":"\n\n\n## 比較短的程式碼比較好嗎？\n\n雖然減少程式碼會提高易讀性，但**縮短讀程式碼的時間才是重點**。\n\n## 表層結構\n\n1. 清楚的命名方法跟變數名稱\n   - 方法不需要用 `do`\n   - 選擇詞彙的時候不要用模擬兩可的名稱，ex: pop popItem \n   - 在方法名稱加入更多的資訊\n\n```javascript\n  function getPage() {}\n  // 對方可能不知道 getPage 的實作方式？爬蟲？ ajax？\n\tfunction fetchPage() {}\n\t// 可能比較清楚是用 ajax 的方式並且回傳 json。\n```\n\n2. 找尋更明確的詞彙\n   - send => deliver dispatch announce route\n   - find => search extract locate recover\n   - start => launch create begin open\n   - make => create setup build generate add new compose\n\n**清楚明確比可愛更重要**\n\n3. 就算是 tmp 變數，也可以提供多一點資訊。\n   - tmpNumber\n   - tmpFile\n   - tmpUsrData\n\n4. 如果迴圈的 i,j 有意義，那麼就取個適當的名字。 ex: row col index\n\n5. 選擇具體的方法名稱。\n\n6. 如果變數具有單位，把單位放進去。\n   - startSec\n   - delayMs\n\n7. 重要屬性的變數命名\n   - plainData\n   - entryptedData\n\n8. 如果變數的作用範圍比較大的時候，用比較長（or 包含資訊較多）的變數是比較好的選擇，相反的如果只有幾行程式碼就結束，其他人可以馬上看出這個變數在做什麼，那麼就算用 `alias` 也沒關係。\n\n\n## 不被誤解的名稱\n\n1. filter 是把東西 filter 掉，還是留下？\n2. min max 前綴\n3. 布林值\n4. computeData => 比較像執行一個耗費較大的 function\n\n\n\n## 排版一致\n\n1. 符合排版一致\n2. 調整程式碼有的相似外觀\n3. 相關程式碼為一個段落。\n4. 註解的美學\n\n為什麼排版那麼重要？第一個是其他人（或者是你）以後再看程式碼的時候，至少比較容易（也比較願意）看得懂，再來是你可以花更少的時間去理解你的 code 在幹麻，何樂不為？\n\n#### 代碼品質工具\n\n- eslint\n\n- stylelint\n\n  ​\n\n## 用方法消除混亂？\n\n> 如果你發現你在做某一件事情感覺很混亂的時候，就該使用 method 包裝。\n\n用精美不實的包裝來欺騙消費者是人類的本性（誤）。能不能欺騙別人不是重點，重要的是是否能夠欺騙你自己。連你自己都不尊重的 code 別人也不尊重的。\n\n例如說：\n\n```javascript\nassert(checkTime('12:00')) === \"12:00\";\nassert(checkName('kalan', 20)) === {name: \"kalan\", age: 20};\nassert(checkPaid(20000, true)) === 20000;\n\n```\n\n仔細觀察一下上面的 code ，不難發現它們都是在做一些同樣的事情，而且還有一些重複出現的字串。而且太長了，我們需要一點時間才能知道這幾行 code 在幹嘛。\n\n這個時候就需要重構啦，我們可以用 method 把它包裝起來。\n\n```javascript\n\nfunction checkValue(type, value) {\n  if (type === \"time\") {\n\t\tassert(checkTime(value));\n  }\n\n  if (type === \"name\") {\n    assert(checkName(value) === value;\n\t}\n\n\tif (type === \"paid\") {\n\t\tassert(checkPaid(value)) === value;\n\t}\n}\n\n// checkValue(type,    value);\n//  \t\t\t\t\t[string] [depend]\ncheckValue(\"name\", kalan);\ncheckValue(\"time\", 12:00);\ncheckValue(\"paid\", 20000);\n```\n\n這樣一來 code 比較簡潔，易讀性也提升了！\n再次強調，並不是比較精簡的程式碼就是好 code ，容易讓人理解的 code 才是好 code。\n除了這些之外，還有一些好處：\n\n- 清楚呈現測試的部分。\n- 更容易加入其他測試！\n\n\n## 照順序及段落區分：\n\n落落長的程式碼不僅是別人，連自己都不會想看。在變數宣告、陳述式表達的時候，可以依照所做的行為不同拆分。這個寫文章也需要段落是同樣的道理。\n\n\n\n```javascript\n function getUserInfo(userName, age) {}\n\n\n\n getUserInfo(\"kalan\", 20);\n\n // getUserInfo(userName, age)\n // \t\t\t\t\t  [string]  [number]\n getUserInfo(\"kalan\", 20)\n\n```\n\n如果有相同的函式呼叫的話，可以讓參數對齊方便閱讀。\n\n```javascript\n\ncommand = {\n\t{ \"timeout\"      ,   null,     cmd_spec_timeout},\n\t{ \"timestamping\" ,   bull,     cmd_adj_boolean},\nf\n}\n\n```\n\n在寫註解的時候，其實不需要太拘泥，把自己當時想到的想法，以及這個 function 應該做的事情寫下來就好了，有時候過了一段時間你會忘記這個 function 在幹麻。\n\n\n--\n\n#2. 註解篇：\n\n> 註解是為了讓其他人了解程式設計者的想法而存在的。同時也讓自己了解自己當初的想法。\n\n- 如何撰寫好的註解，以及哪些東西`不需要註解`。\n- 不該註解的部分\n- 為讀者設身處地著想\n\n**不要讓註解搶走了程式該有的位置**\n\n避免寫作抗拒。這通常需要一段時間才能體會到。但當專案架構還沒有變得複雜之前就盡快寫註解絕對是件好事。不然你只能寫下違背良心的\n\n// TODO: refactor\n\n然後就再也沒有下文了。\n\n### 結語\n\n- 選用特定寫法的原因\n- 程式碼中的缺陷。\n- 使用者會對哪個部分感到疑惑\n\n\n### 維持註解簡潔\n\n- 用更精確的方式來描述自己的程式碼，並且不要用代名詞來描述參數。\n- 如果參數的行為較複雜，可以直接給範例讓使用者一目了然。\n\n\n#3. 流程控制：\n\n最常見的就是 `if/else` 的判斷。書中提供一個準則，就是肯定的條件句先擺前面、先處理簡單的狀況。\n如果你的 function / method 是有返回值的，就盡快讓他 return 吧！\n\n- 善用迪摩根定律：這個定律應該理工科都有印象吧！他可以把一些比較複雜的邏輯判斷簡化。\n\n\n### 與複雜的邏輯搏鬥：\n\n書中提到一個蠻有趣的方式，我想把它記錄下來。\n在實作 range 的時候，我們可能有一個方法 overlapWith ，來判斷兩個 range 之間是否有重疊。比起使用直接比對這兩個 range 是否有重疊，不如比對這兩個 range 是否不重疊更簡單。因為只要比對兩種狀況 => other 的 end 在 range 之前。 other 的 start 在 end 之後。\n\n\n### 將龐大的表示式用變數裝起來。\n```javascript\n\n$('.thumb_up').removeClass('highlighted');\n$('.thumb_up').removeClass('highlighted');\n$('.thumb_up').removeClass('highlighted');\n\n// refactor\n\nconst $thumbUp = $('.thumb_up');\nconst highLight = \"highlighted\";\n\n$('.thumb_up').removeClass('highlighted');\n$('.thumb_up').removeClass('highlighted');\n$('.thumb_up').removeClass('highlighted');\n\n// \n```\n\n#4. 變數：\n\n**變數存在越久，就越難 debug**\n\n- 減少不必要的變數宣告。\n\n什麼是不必要的變數？\n\n1. 無法讓意思變得更言簡意賅\n2. 本身的邏輯不複雜，不需要再用變數取代\n3. 只使用一次\n\n- 使用一次性寫入的變數\n\n在 functional programming 當中，我們希望 function 是 pure 且 immutable 的，對於變數來說也是，盡量讓你的變數為 const 或 immutable 的。這樣子不僅你對 function 可以一目了然，也比較容易掌握出錯的點在哪裡。\n\n\n## 將想法轉為程式碼：\n\n先用口語敘述行為，再把程式的行為轉換為程式碼。這樣子可以幫助程式設計師寫出更自然的程式碼。\n\n\n## 避免撰寫不必要的程式碼\n\n- 了解需求\n- 重新思考需求\n- 定期閱讀 API 以維持對標準函式庫的熟悉度\n","source":"_posts/readble-code-art.md","raw":"---\ntitle: 【筆記】易讀程式碼之美學\ncategories: 程式筆記\ndate: 2016-3-20\n---\n\n\n\n## 比較短的程式碼比較好嗎？\n\n雖然減少程式碼會提高易讀性，但**縮短讀程式碼的時間才是重點**。\n\n## 表層結構\n\n1. 清楚的命名方法跟變數名稱\n   - 方法不需要用 `do`\n   - 選擇詞彙的時候不要用模擬兩可的名稱，ex: pop popItem \n   - 在方法名稱加入更多的資訊\n\n```javascript\n  function getPage() {}\n  // 對方可能不知道 getPage 的實作方式？爬蟲？ ajax？\n\tfunction fetchPage() {}\n\t// 可能比較清楚是用 ajax 的方式並且回傳 json。\n```\n\n2. 找尋更明確的詞彙\n   - send => deliver dispatch announce route\n   - find => search extract locate recover\n   - start => launch create begin open\n   - make => create setup build generate add new compose\n\n**清楚明確比可愛更重要**\n\n3. 就算是 tmp 變數，也可以提供多一點資訊。\n   - tmpNumber\n   - tmpFile\n   - tmpUsrData\n\n4. 如果迴圈的 i,j 有意義，那麼就取個適當的名字。 ex: row col index\n\n5. 選擇具體的方法名稱。\n\n6. 如果變數具有單位，把單位放進去。\n   - startSec\n   - delayMs\n\n7. 重要屬性的變數命名\n   - plainData\n   - entryptedData\n\n8. 如果變數的作用範圍比較大的時候，用比較長（or 包含資訊較多）的變數是比較好的選擇，相反的如果只有幾行程式碼就結束，其他人可以馬上看出這個變數在做什麼，那麼就算用 `alias` 也沒關係。\n\n\n## 不被誤解的名稱\n\n1. filter 是把東西 filter 掉，還是留下？\n2. min max 前綴\n3. 布林值\n4. computeData => 比較像執行一個耗費較大的 function\n\n\n\n## 排版一致\n\n1. 符合排版一致\n2. 調整程式碼有的相似外觀\n3. 相關程式碼為一個段落。\n4. 註解的美學\n\n為什麼排版那麼重要？第一個是其他人（或者是你）以後再看程式碼的時候，至少比較容易（也比較願意）看得懂，再來是你可以花更少的時間去理解你的 code 在幹麻，何樂不為？\n\n#### 代碼品質工具\n\n- eslint\n\n- stylelint\n\n  ​\n\n## 用方法消除混亂？\n\n> 如果你發現你在做某一件事情感覺很混亂的時候，就該使用 method 包裝。\n\n用精美不實的包裝來欺騙消費者是人類的本性（誤）。能不能欺騙別人不是重點，重要的是是否能夠欺騙你自己。連你自己都不尊重的 code 別人也不尊重的。\n\n例如說：\n\n```javascript\nassert(checkTime('12:00')) === \"12:00\";\nassert(checkName('kalan', 20)) === {name: \"kalan\", age: 20};\nassert(checkPaid(20000, true)) === 20000;\n\n```\n\n仔細觀察一下上面的 code ，不難發現它們都是在做一些同樣的事情，而且還有一些重複出現的字串。而且太長了，我們需要一點時間才能知道這幾行 code 在幹嘛。\n\n這個時候就需要重構啦，我們可以用 method 把它包裝起來。\n\n```javascript\n\nfunction checkValue(type, value) {\n  if (type === \"time\") {\n\t\tassert(checkTime(value));\n  }\n\n  if (type === \"name\") {\n    assert(checkName(value) === value;\n\t}\n\n\tif (type === \"paid\") {\n\t\tassert(checkPaid(value)) === value;\n\t}\n}\n\n// checkValue(type,    value);\n//  \t\t\t\t\t[string] [depend]\ncheckValue(\"name\", kalan);\ncheckValue(\"time\", 12:00);\ncheckValue(\"paid\", 20000);\n```\n\n這樣一來 code 比較簡潔，易讀性也提升了！\n再次強調，並不是比較精簡的程式碼就是好 code ，容易讓人理解的 code 才是好 code。\n除了這些之外，還有一些好處：\n\n- 清楚呈現測試的部分。\n- 更容易加入其他測試！\n\n\n## 照順序及段落區分：\n\n落落長的程式碼不僅是別人，連自己都不會想看。在變數宣告、陳述式表達的時候，可以依照所做的行為不同拆分。這個寫文章也需要段落是同樣的道理。\n\n\n\n```javascript\n function getUserInfo(userName, age) {}\n\n\n\n getUserInfo(\"kalan\", 20);\n\n // getUserInfo(userName, age)\n // \t\t\t\t\t  [string]  [number]\n getUserInfo(\"kalan\", 20)\n\n```\n\n如果有相同的函式呼叫的話，可以讓參數對齊方便閱讀。\n\n```javascript\n\ncommand = {\n\t{ \"timeout\"      ,   null,     cmd_spec_timeout},\n\t{ \"timestamping\" ,   bull,     cmd_adj_boolean},\nf\n}\n\n```\n\n在寫註解的時候，其實不需要太拘泥，把自己當時想到的想法，以及這個 function 應該做的事情寫下來就好了，有時候過了一段時間你會忘記這個 function 在幹麻。\n\n\n--\n\n#2. 註解篇：\n\n> 註解是為了讓其他人了解程式設計者的想法而存在的。同時也讓自己了解自己當初的想法。\n\n- 如何撰寫好的註解，以及哪些東西`不需要註解`。\n- 不該註解的部分\n- 為讀者設身處地著想\n\n**不要讓註解搶走了程式該有的位置**\n\n避免寫作抗拒。這通常需要一段時間才能體會到。但當專案架構還沒有變得複雜之前就盡快寫註解絕對是件好事。不然你只能寫下違背良心的\n\n// TODO: refactor\n\n然後就再也沒有下文了。\n\n### 結語\n\n- 選用特定寫法的原因\n- 程式碼中的缺陷。\n- 使用者會對哪個部分感到疑惑\n\n\n### 維持註解簡潔\n\n- 用更精確的方式來描述自己的程式碼，並且不要用代名詞來描述參數。\n- 如果參數的行為較複雜，可以直接給範例讓使用者一目了然。\n\n\n#3. 流程控制：\n\n最常見的就是 `if/else` 的判斷。書中提供一個準則，就是肯定的條件句先擺前面、先處理簡單的狀況。\n如果你的 function / method 是有返回值的，就盡快讓他 return 吧！\n\n- 善用迪摩根定律：這個定律應該理工科都有印象吧！他可以把一些比較複雜的邏輯判斷簡化。\n\n\n### 與複雜的邏輯搏鬥：\n\n書中提到一個蠻有趣的方式，我想把它記錄下來。\n在實作 range 的時候，我們可能有一個方法 overlapWith ，來判斷兩個 range 之間是否有重疊。比起使用直接比對這兩個 range 是否有重疊，不如比對這兩個 range 是否不重疊更簡單。因為只要比對兩種狀況 => other 的 end 在 range 之前。 other 的 start 在 end 之後。\n\n\n### 將龐大的表示式用變數裝起來。\n```javascript\n\n$('.thumb_up').removeClass('highlighted');\n$('.thumb_up').removeClass('highlighted');\n$('.thumb_up').removeClass('highlighted');\n\n// refactor\n\nconst $thumbUp = $('.thumb_up');\nconst highLight = \"highlighted\";\n\n$('.thumb_up').removeClass('highlighted');\n$('.thumb_up').removeClass('highlighted');\n$('.thumb_up').removeClass('highlighted');\n\n// \n```\n\n#4. 變數：\n\n**變數存在越久，就越難 debug**\n\n- 減少不必要的變數宣告。\n\n什麼是不必要的變數？\n\n1. 無法讓意思變得更言簡意賅\n2. 本身的邏輯不複雜，不需要再用變數取代\n3. 只使用一次\n\n- 使用一次性寫入的變數\n\n在 functional programming 當中，我們希望 function 是 pure 且 immutable 的，對於變數來說也是，盡量讓你的變數為 const 或 immutable 的。這樣子不僅你對 function 可以一目了然，也比較容易掌握出錯的點在哪裡。\n\n\n## 將想法轉為程式碼：\n\n先用口語敘述行為，再把程式的行為轉換為程式碼。這樣子可以幫助程式設計師寫出更自然的程式碼。\n\n\n## 避免撰寫不必要的程式碼\n\n- 了解需求\n- 重新思考需求\n- 定期閱讀 API 以維持對標準函式庫的熟悉度\n","slug":"readble-code-art","published":1,"updated":"2017-02-28T16:16:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p880012b75t7zxcl7vz","content":"<h2 id=\"比較短的程式碼比較好嗎？\"><a href=\"#比較短的程式碼比較好嗎？\" class=\"headerlink\" title=\"比較短的程式碼比較好嗎？\"></a>比較短的程式碼比較好嗎？</h2><p>雖然減少程式碼會提高易讀性，但<strong>縮短讀程式碼的時間才是重點</strong>。</p>\n<h2 id=\"表層結構\"><a href=\"#表層結構\" class=\"headerlink\" title=\"表層結構\"></a>表層結構</h2><ol>\n<li>清楚的命名方法跟變數名稱<ul>\n<li>方法不需要用 <code>do</code></li>\n<li>選擇詞彙的時候不要用模擬兩可的名稱，ex: pop popItem </li>\n<li>在方法名稱加入更多的資訊</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPage</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\"> <span class=\"comment\">// 對方可能不知道 getPage 的實作方式？爬蟲？ ajax？</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchPage</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\"><span class=\"comment\">// 可能比較清楚是用 ajax 的方式並且回傳 json。</span></div></pre></td></tr></table></figure>\n<ol>\n<li>找尋更明確的詞彙<ul>\n<li>send =&gt; deliver dispatch announce route</li>\n<li>find =&gt; search extract locate recover</li>\n<li>start =&gt; launch create begin open</li>\n<li>make =&gt; create setup build generate add new compose</li>\n</ul>\n</li>\n</ol>\n<p><strong>清楚明確比可愛更重要</strong></p>\n<ol>\n<li><p>就算是 tmp 變數，也可以提供多一點資訊。</p>\n<ul>\n<li>tmpNumber</li>\n<li>tmpFile</li>\n<li>tmpUsrData</li>\n</ul>\n</li>\n<li><p>如果迴圈的 i,j 有意義，那麼就取個適當的名字。 ex: row col index</p>\n</li>\n<li><p>選擇具體的方法名稱。</p>\n</li>\n<li><p>如果變數具有單位，把單位放進去。</p>\n<ul>\n<li>startSec</li>\n<li>delayMs</li>\n</ul>\n</li>\n<li><p>重要屬性的變數命名</p>\n<ul>\n<li>plainData</li>\n<li>entryptedData</li>\n</ul>\n</li>\n<li><p>如果變數的作用範圍比較大的時候，用比較長（or 包含資訊較多）的變數是比較好的選擇，相反的如果只有幾行程式碼就結束，其他人可以馬上看出這個變數在做什麼，那麼就算用 <code>alias</code> 也沒關係。</p>\n</li>\n</ol>\n<h2 id=\"不被誤解的名稱\"><a href=\"#不被誤解的名稱\" class=\"headerlink\" title=\"不被誤解的名稱\"></a>不被誤解的名稱</h2><ol>\n<li>filter 是把東西 filter 掉，還是留下？</li>\n<li>min max 前綴</li>\n<li>布林值</li>\n<li>computeData =&gt; 比較像執行一個耗費較大的 function</li>\n</ol>\n<h2 id=\"排版一致\"><a href=\"#排版一致\" class=\"headerlink\" title=\"排版一致\"></a>排版一致</h2><ol>\n<li>符合排版一致</li>\n<li>調整程式碼有的相似外觀</li>\n<li>相關程式碼為一個段落。</li>\n<li>註解的美學</li>\n</ol>\n<p>為什麼排版那麼重要？第一個是其他人（或者是你）以後再看程式碼的時候，至少比較容易（也比較願意）看得懂，再來是你可以花更少的時間去理解你的 code 在幹麻，何樂不為？</p>\n<h4 id=\"代碼品質工具\"><a href=\"#代碼品質工具\" class=\"headerlink\" title=\"代碼品質工具\"></a>代碼品質工具</h4><ul>\n<li><p>eslint</p>\n</li>\n<li><p>stylelint</p>\n<p>​</p>\n</li>\n</ul>\n<h2 id=\"用方法消除混亂？\"><a href=\"#用方法消除混亂？\" class=\"headerlink\" title=\"用方法消除混亂？\"></a>用方法消除混亂？</h2><blockquote>\n<p>如果你發現你在做某一件事情感覺很混亂的時候，就該使用 method 包裝。</p>\n</blockquote>\n<p>用精美不實的包裝來欺騙消費者是人類的本性（誤）。能不能欺騙別人不是重點，重要的是是否能夠欺騙你自己。連你自己都不尊重的 code 別人也不尊重的。</p>\n<p>例如說：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">assert(checkTime(<span class=\"string\">'12:00'</span>)) === <span class=\"string\">\"12:00\"</span>;</div><div class=\"line\">assert(checkName(<span class=\"string\">'kalan'</span>, <span class=\"number\">20</span>)) === &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"kalan\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;;</div><div class=\"line\">assert(checkPaid(<span class=\"number\">20000</span>, <span class=\"literal\">true</span>)) === <span class=\"number\">20000</span>;</div></pre></td></tr></table></figure>\n<p>仔細觀察一下上面的 code ，不難發現它們都是在做一些同樣的事情，而且還有一些重複出現的字串。而且太長了，我們需要一點時間才能知道這幾行 code 在幹嘛。</p>\n<p>這個時候就需要重構啦，我們可以用 method 把它包裝起來。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkValue</span>(<span class=\"params\">type, value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (type === <span class=\"string\">\"time\"</span>) &#123;</div><div class=\"line\">\t\tassert(checkTime(value));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (type === <span class=\"string\">\"name\"</span>) &#123;</div><div class=\"line\">    assert(checkName(value) === value;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (type === <span class=\"string\">\"paid\"</span>) &#123;</div><div class=\"line\">\t\tassert(checkPaid(value)) === value;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// checkValue(type,    value);</span></div><div class=\"line\"><span class=\"comment\">//  \t\t\t\t\t[string] [depend]</span></div><div class=\"line\">checkValue(<span class=\"string\">\"name\"</span>, kalan);</div><div class=\"line\">checkValue(<span class=\"string\">\"time\"</span>, <span class=\"number\">12</span>:<span class=\"number\">00</span>);</div><div class=\"line\">checkValue(<span class=\"string\">\"paid\"</span>, <span class=\"number\">20000</span>);</div></pre></td></tr></table></figure>\n<p>這樣一來 code 比較簡潔，易讀性也提升了！<br>再次強調，並不是比較精簡的程式碼就是好 code ，容易讓人理解的 code 才是好 code。<br>除了這些之外，還有一些好處：</p>\n<ul>\n<li>清楚呈現測試的部分。</li>\n<li>更容易加入其他測試！</li>\n</ul>\n<h2 id=\"照順序及段落區分：\"><a href=\"#照順序及段落區分：\" class=\"headerlink\" title=\"照順序及段落區分：\"></a>照順序及段落區分：</h2><p>落落長的程式碼不僅是別人，連自己都不會想看。在變數宣告、陳述式表達的時候，可以依照所做的行為不同拆分。這個寫文章也需要段落是同樣的道理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserInfo</span>(<span class=\"params\">userName, age</span>) </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">getUserInfo(<span class=\"string\">\"kalan\"</span>, <span class=\"number\">20</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getUserInfo(userName, age)</span></div><div class=\"line\"><span class=\"comment\">// \t\t\t\t\t  [string]  [number]</span></div><div class=\"line\">getUserInfo(<span class=\"string\">\"kalan\"</span>, <span class=\"number\">20</span>)</div></pre></td></tr></table></figure>\n<p>如果有相同的函式呼叫的話，可以讓參數對齊方便閱讀。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">command = &#123;</div><div class=\"line\">\t&#123; <span class=\"string\">\"timeout\"</span>      ,   <span class=\"literal\">null</span>,     cmd_spec_timeout&#125;,</div><div class=\"line\">\t&#123; <span class=\"string\">\"timestamping\"</span> ,   bull,     cmd_adj_boolean&#125;,</div><div class=\"line\">f</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在寫註解的時候，其實不需要太拘泥，把自己當時想到的想法，以及這個 function 應該做的事情寫下來就好了，有時候過了一段時間你會忘記這個 function 在幹麻。</p>\n<p>–</p>\n<p>#2. 註解篇：</p>\n<blockquote>\n<p>註解是為了讓其他人了解程式設計者的想法而存在的。同時也讓自己了解自己當初的想法。</p>\n</blockquote>\n<ul>\n<li>如何撰寫好的註解，以及哪些東西<code>不需要註解</code>。</li>\n<li>不該註解的部分</li>\n<li>為讀者設身處地著想</li>\n</ul>\n<p><strong>不要讓註解搶走了程式該有的位置</strong></p>\n<p>避免寫作抗拒。這通常需要一段時間才能體會到。但當專案架構還沒有變得複雜之前就盡快寫註解絕對是件好事。不然你只能寫下違背良心的</p>\n<p>// TODO: refactor</p>\n<p>然後就再也沒有下文了。</p>\n<h3 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h3><ul>\n<li>選用特定寫法的原因</li>\n<li>程式碼中的缺陷。</li>\n<li>使用者會對哪個部分感到疑惑</li>\n</ul>\n<h3 id=\"維持註解簡潔\"><a href=\"#維持註解簡潔\" class=\"headerlink\" title=\"維持註解簡潔\"></a>維持註解簡潔</h3><ul>\n<li>用更精確的方式來描述自己的程式碼，並且不要用代名詞來描述參數。</li>\n<li>如果參數的行為較複雜，可以直接給範例讓使用者一目了然。</li>\n</ul>\n<p>#3. 流程控制：</p>\n<p>最常見的就是 <code>if/else</code> 的判斷。書中提供一個準則，就是肯定的條件句先擺前面、先處理簡單的狀況。<br>如果你的 function / method 是有返回值的，就盡快讓他 return 吧！</p>\n<ul>\n<li>善用迪摩根定律：這個定律應該理工科都有印象吧！他可以把一些比較複雜的邏輯判斷簡化。</li>\n</ul>\n<h3 id=\"與複雜的邏輯搏鬥：\"><a href=\"#與複雜的邏輯搏鬥：\" class=\"headerlink\" title=\"與複雜的邏輯搏鬥：\"></a>與複雜的邏輯搏鬥：</h3><p>書中提到一個蠻有趣的方式，我想把它記錄下來。<br>在實作 range 的時候，我們可能有一個方法 overlapWith ，來判斷兩個 range 之間是否有重疊。比起使用直接比對這兩個 range 是否有重疊，不如比對這兩個 range 是否不重疊更簡單。因為只要比對兩種狀況 =&gt; other 的 end 在 range 之前。 other 的 start 在 end 之後。</p>\n<h3 id=\"將龐大的表示式用變數裝起來。\"><a href=\"#將龐大的表示式用變數裝起來。\" class=\"headerlink\" title=\"將龐大的表示式用變數裝起來。\"></a>將龐大的表示式用變數裝起來。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'.thumb_up'</span>).removeClass(<span class=\"string\">'highlighted'</span>);</div><div class=\"line\">$(<span class=\"string\">'.thumb_up'</span>).removeClass(<span class=\"string\">'highlighted'</span>);</div><div class=\"line\">$(<span class=\"string\">'.thumb_up'</span>).removeClass(<span class=\"string\">'highlighted'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// refactor</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> $thumbUp = $(<span class=\"string\">'.thumb_up'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> highLight = <span class=\"string\">\"highlighted\"</span>;</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'.thumb_up'</span>).removeClass(<span class=\"string\">'highlighted'</span>);</div><div class=\"line\">$(<span class=\"string\">'.thumb_up'</span>).removeClass(<span class=\"string\">'highlighted'</span>);</div><div class=\"line\">$(<span class=\"string\">'.thumb_up'</span>).removeClass(<span class=\"string\">'highlighted'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//</span></div></pre></td></tr></table></figure>\n<p>#4. 變數：</p>\n<p><strong>變數存在越久，就越難 debug</strong></p>\n<ul>\n<li>減少不必要的變數宣告。</li>\n</ul>\n<p>什麼是不必要的變數？</p>\n<ol>\n<li>無法讓意思變得更言簡意賅</li>\n<li>本身的邏輯不複雜，不需要再用變數取代</li>\n<li>只使用一次</li>\n</ol>\n<ul>\n<li>使用一次性寫入的變數</li>\n</ul>\n<p>在 functional programming 當中，我們希望 function 是 pure 且 immutable 的，對於變數來說也是，盡量讓你的變數為 const 或 immutable 的。這樣子不僅你對 function 可以一目了然，也比較容易掌握出錯的點在哪裡。</p>\n<h2 id=\"將想法轉為程式碼：\"><a href=\"#將想法轉為程式碼：\" class=\"headerlink\" title=\"將想法轉為程式碼：\"></a>將想法轉為程式碼：</h2><p>先用口語敘述行為，再把程式的行為轉換為程式碼。這樣子可以幫助程式設計師寫出更自然的程式碼。</p>\n<h2 id=\"避免撰寫不必要的程式碼\"><a href=\"#避免撰寫不必要的程式碼\" class=\"headerlink\" title=\"避免撰寫不必要的程式碼\"></a>避免撰寫不必要的程式碼</h2><ul>\n<li>了解需求</li>\n<li>重新思考需求</li>\n<li>定期閱讀 API 以維持對標準函式庫的熟悉度</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"比較短的程式碼比較好嗎？\"><a href=\"#比較短的程式碼比較好嗎？\" class=\"headerlink\" title=\"比較短的程式碼比較好嗎？\"></a>比較短的程式碼比較好嗎？</h2><p>雖然減少程式碼會提高易讀性，但<strong>縮短讀程式碼的時間才是重點</strong>。</p>\n<h2 id=\"表層結構\"><a href=\"#表層結構\" class=\"headerlink\" title=\"表層結構\"></a>表層結構</h2><ol>\n<li>清楚的命名方法跟變數名稱<ul>\n<li>方法不需要用 <code>do</code></li>\n<li>選擇詞彙的時候不要用模擬兩可的名稱，ex: pop popItem </li>\n<li>在方法名稱加入更多的資訊</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPage</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\"> <span class=\"comment\">// 對方可能不知道 getPage 的實作方式？爬蟲？ ajax？</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchPage</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\"><span class=\"comment\">// 可能比較清楚是用 ajax 的方式並且回傳 json。</span></div></pre></td></tr></table></figure>\n<ol>\n<li>找尋更明確的詞彙<ul>\n<li>send =&gt; deliver dispatch announce route</li>\n<li>find =&gt; search extract locate recover</li>\n<li>start =&gt; launch create begin open</li>\n<li>make =&gt; create setup build generate add new compose</li>\n</ul>\n</li>\n</ol>\n<p><strong>清楚明確比可愛更重要</strong></p>\n<ol>\n<li><p>就算是 tmp 變數，也可以提供多一點資訊。</p>\n<ul>\n<li>tmpNumber</li>\n<li>tmpFile</li>\n<li>tmpUsrData</li>\n</ul>\n</li>\n<li><p>如果迴圈的 i,j 有意義，那麼就取個適當的名字。 ex: row col index</p>\n</li>\n<li><p>選擇具體的方法名稱。</p>\n</li>\n<li><p>如果變數具有單位，把單位放進去。</p>\n<ul>\n<li>startSec</li>\n<li>delayMs</li>\n</ul>\n</li>\n<li><p>重要屬性的變數命名</p>\n<ul>\n<li>plainData</li>\n<li>entryptedData</li>\n</ul>\n</li>\n<li><p>如果變數的作用範圍比較大的時候，用比較長（or 包含資訊較多）的變數是比較好的選擇，相反的如果只有幾行程式碼就結束，其他人可以馬上看出這個變數在做什麼，那麼就算用 <code>alias</code> 也沒關係。</p>\n</li>\n</ol>\n<h2 id=\"不被誤解的名稱\"><a href=\"#不被誤解的名稱\" class=\"headerlink\" title=\"不被誤解的名稱\"></a>不被誤解的名稱</h2><ol>\n<li>filter 是把東西 filter 掉，還是留下？</li>\n<li>min max 前綴</li>\n<li>布林值</li>\n<li>computeData =&gt; 比較像執行一個耗費較大的 function</li>\n</ol>\n<h2 id=\"排版一致\"><a href=\"#排版一致\" class=\"headerlink\" title=\"排版一致\"></a>排版一致</h2><ol>\n<li>符合排版一致</li>\n<li>調整程式碼有的相似外觀</li>\n<li>相關程式碼為一個段落。</li>\n<li>註解的美學</li>\n</ol>\n<p>為什麼排版那麼重要？第一個是其他人（或者是你）以後再看程式碼的時候，至少比較容易（也比較願意）看得懂，再來是你可以花更少的時間去理解你的 code 在幹麻，何樂不為？</p>\n<h4 id=\"代碼品質工具\"><a href=\"#代碼品質工具\" class=\"headerlink\" title=\"代碼品質工具\"></a>代碼品質工具</h4><ul>\n<li><p>eslint</p>\n</li>\n<li><p>stylelint</p>\n<p>​</p>\n</li>\n</ul>\n<h2 id=\"用方法消除混亂？\"><a href=\"#用方法消除混亂？\" class=\"headerlink\" title=\"用方法消除混亂？\"></a>用方法消除混亂？</h2><blockquote>\n<p>如果你發現你在做某一件事情感覺很混亂的時候，就該使用 method 包裝。</p>\n</blockquote>\n<p>用精美不實的包裝來欺騙消費者是人類的本性（誤）。能不能欺騙別人不是重點，重要的是是否能夠欺騙你自己。連你自己都不尊重的 code 別人也不尊重的。</p>\n<p>例如說：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">assert(checkTime(<span class=\"string\">'12:00'</span>)) === <span class=\"string\">\"12:00\"</span>;</div><div class=\"line\">assert(checkName(<span class=\"string\">'kalan'</span>, <span class=\"number\">20</span>)) === &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"kalan\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;;</div><div class=\"line\">assert(checkPaid(<span class=\"number\">20000</span>, <span class=\"literal\">true</span>)) === <span class=\"number\">20000</span>;</div></pre></td></tr></table></figure>\n<p>仔細觀察一下上面的 code ，不難發現它們都是在做一些同樣的事情，而且還有一些重複出現的字串。而且太長了，我們需要一點時間才能知道這幾行 code 在幹嘛。</p>\n<p>這個時候就需要重構啦，我們可以用 method 把它包裝起來。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkValue</span>(<span class=\"params\">type, value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (type === <span class=\"string\">\"time\"</span>) &#123;</div><div class=\"line\">\t\tassert(checkTime(value));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (type === <span class=\"string\">\"name\"</span>) &#123;</div><div class=\"line\">    assert(checkName(value) === value;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (type === <span class=\"string\">\"paid\"</span>) &#123;</div><div class=\"line\">\t\tassert(checkPaid(value)) === value;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// checkValue(type,    value);</span></div><div class=\"line\"><span class=\"comment\">//  \t\t\t\t\t[string] [depend]</span></div><div class=\"line\">checkValue(<span class=\"string\">\"name\"</span>, kalan);</div><div class=\"line\">checkValue(<span class=\"string\">\"time\"</span>, <span class=\"number\">12</span>:<span class=\"number\">00</span>);</div><div class=\"line\">checkValue(<span class=\"string\">\"paid\"</span>, <span class=\"number\">20000</span>);</div></pre></td></tr></table></figure>\n<p>這樣一來 code 比較簡潔，易讀性也提升了！<br>再次強調，並不是比較精簡的程式碼就是好 code ，容易讓人理解的 code 才是好 code。<br>除了這些之外，還有一些好處：</p>\n<ul>\n<li>清楚呈現測試的部分。</li>\n<li>更容易加入其他測試！</li>\n</ul>\n<h2 id=\"照順序及段落區分：\"><a href=\"#照順序及段落區分：\" class=\"headerlink\" title=\"照順序及段落區分：\"></a>照順序及段落區分：</h2><p>落落長的程式碼不僅是別人，連自己都不會想看。在變數宣告、陳述式表達的時候，可以依照所做的行為不同拆分。這個寫文章也需要段落是同樣的道理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserInfo</span>(<span class=\"params\">userName, age</span>) </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">getUserInfo(<span class=\"string\">\"kalan\"</span>, <span class=\"number\">20</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getUserInfo(userName, age)</span></div><div class=\"line\"><span class=\"comment\">// \t\t\t\t\t  [string]  [number]</span></div><div class=\"line\">getUserInfo(<span class=\"string\">\"kalan\"</span>, <span class=\"number\">20</span>)</div></pre></td></tr></table></figure>\n<p>如果有相同的函式呼叫的話，可以讓參數對齊方便閱讀。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">command = &#123;</div><div class=\"line\">\t&#123; <span class=\"string\">\"timeout\"</span>      ,   <span class=\"literal\">null</span>,     cmd_spec_timeout&#125;,</div><div class=\"line\">\t&#123; <span class=\"string\">\"timestamping\"</span> ,   bull,     cmd_adj_boolean&#125;,</div><div class=\"line\">f</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在寫註解的時候，其實不需要太拘泥，把自己當時想到的想法，以及這個 function 應該做的事情寫下來就好了，有時候過了一段時間你會忘記這個 function 在幹麻。</p>\n<p>–</p>\n<p>#2. 註解篇：</p>\n<blockquote>\n<p>註解是為了讓其他人了解程式設計者的想法而存在的。同時也讓自己了解自己當初的想法。</p>\n</blockquote>\n<ul>\n<li>如何撰寫好的註解，以及哪些東西<code>不需要註解</code>。</li>\n<li>不該註解的部分</li>\n<li>為讀者設身處地著想</li>\n</ul>\n<p><strong>不要讓註解搶走了程式該有的位置</strong></p>\n<p>避免寫作抗拒。這通常需要一段時間才能體會到。但當專案架構還沒有變得複雜之前就盡快寫註解絕對是件好事。不然你只能寫下違背良心的</p>\n<p>// TODO: refactor</p>\n<p>然後就再也沒有下文了。</p>\n<h3 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h3><ul>\n<li>選用特定寫法的原因</li>\n<li>程式碼中的缺陷。</li>\n<li>使用者會對哪個部分感到疑惑</li>\n</ul>\n<h3 id=\"維持註解簡潔\"><a href=\"#維持註解簡潔\" class=\"headerlink\" title=\"維持註解簡潔\"></a>維持註解簡潔</h3><ul>\n<li>用更精確的方式來描述自己的程式碼，並且不要用代名詞來描述參數。</li>\n<li>如果參數的行為較複雜，可以直接給範例讓使用者一目了然。</li>\n</ul>\n<p>#3. 流程控制：</p>\n<p>最常見的就是 <code>if/else</code> 的判斷。書中提供一個準則，就是肯定的條件句先擺前面、先處理簡單的狀況。<br>如果你的 function / method 是有返回值的，就盡快讓他 return 吧！</p>\n<ul>\n<li>善用迪摩根定律：這個定律應該理工科都有印象吧！他可以把一些比較複雜的邏輯判斷簡化。</li>\n</ul>\n<h3 id=\"與複雜的邏輯搏鬥：\"><a href=\"#與複雜的邏輯搏鬥：\" class=\"headerlink\" title=\"與複雜的邏輯搏鬥：\"></a>與複雜的邏輯搏鬥：</h3><p>書中提到一個蠻有趣的方式，我想把它記錄下來。<br>在實作 range 的時候，我們可能有一個方法 overlapWith ，來判斷兩個 range 之間是否有重疊。比起使用直接比對這兩個 range 是否有重疊，不如比對這兩個 range 是否不重疊更簡單。因為只要比對兩種狀況 =&gt; other 的 end 在 range 之前。 other 的 start 在 end 之後。</p>\n<h3 id=\"將龐大的表示式用變數裝起來。\"><a href=\"#將龐大的表示式用變數裝起來。\" class=\"headerlink\" title=\"將龐大的表示式用變數裝起來。\"></a>將龐大的表示式用變數裝起來。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'.thumb_up'</span>).removeClass(<span class=\"string\">'highlighted'</span>);</div><div class=\"line\">$(<span class=\"string\">'.thumb_up'</span>).removeClass(<span class=\"string\">'highlighted'</span>);</div><div class=\"line\">$(<span class=\"string\">'.thumb_up'</span>).removeClass(<span class=\"string\">'highlighted'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// refactor</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> $thumbUp = $(<span class=\"string\">'.thumb_up'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> highLight = <span class=\"string\">\"highlighted\"</span>;</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'.thumb_up'</span>).removeClass(<span class=\"string\">'highlighted'</span>);</div><div class=\"line\">$(<span class=\"string\">'.thumb_up'</span>).removeClass(<span class=\"string\">'highlighted'</span>);</div><div class=\"line\">$(<span class=\"string\">'.thumb_up'</span>).removeClass(<span class=\"string\">'highlighted'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//</span></div></pre></td></tr></table></figure>\n<p>#4. 變數：</p>\n<p><strong>變數存在越久，就越難 debug</strong></p>\n<ul>\n<li>減少不必要的變數宣告。</li>\n</ul>\n<p>什麼是不必要的變數？</p>\n<ol>\n<li>無法讓意思變得更言簡意賅</li>\n<li>本身的邏輯不複雜，不需要再用變數取代</li>\n<li>只使用一次</li>\n</ol>\n<ul>\n<li>使用一次性寫入的變數</li>\n</ul>\n<p>在 functional programming 當中，我們希望 function 是 pure 且 immutable 的，對於變數來說也是，盡量讓你的變數為 const 或 immutable 的。這樣子不僅你對 function 可以一目了然，也比較容易掌握出錯的點在哪裡。</p>\n<h2 id=\"將想法轉為程式碼：\"><a href=\"#將想法轉為程式碼：\" class=\"headerlink\" title=\"將想法轉為程式碼：\"></a>將想法轉為程式碼：</h2><p>先用口語敘述行為，再把程式的行為轉換為程式碼。這樣子可以幫助程式設計師寫出更自然的程式碼。</p>\n<h2 id=\"避免撰寫不必要的程式碼\"><a href=\"#避免撰寫不必要的程式碼\" class=\"headerlink\" title=\"避免撰寫不必要的程式碼\"></a>避免撰寫不必要的程式碼</h2><ul>\n<li>了解需求</li>\n<li>重新思考需求</li>\n<li>定期閱讀 API 以維持對標準函式庫的熟悉度</li>\n</ul>\n"},{"title":"高度相同的排版解決方案","date":"2017-02-01T07:33:41.000Z","_content":"\n在前端的頁面中，我們經常會碰到需要相同高度的排版。最直覺的方法就是將容器裡的所有元素設為 float 或是 inline-block。\n\n### float 及 inline-block\n\n如果是使用 float 排版，不但要先撐開父元素容器(clearfix)，還要針對子元素設定 margin。\n所以一旦內容太多，或是高度不足就會跑版。\n\n而且，這樣的排版最大的缺陷就是，**必須設定高度**。\n\n那，如果不設置高度呢？\n就算設定了 min-height 也一樣，當內容超出高度時，就必定會面臨 overflow 的危機。\n\n{% asset_img \"example1.png\" \"example1\" %}\n\n後來決定直接用 css media query 在不同的螢幕寬度下分別給予不同的高度。\n雖然解法比較麻煩，也比較醜一點，但的確解決了寬度過窄時會跑版的問題。\n\n\n這個問題後來一直深埋在心中，直到最近發現了 flex 的奧秘。\n\n### 排版遇到困難，先想想 flex\n\n人生遇到挫折的時候，想想 flex，這個彈性盒子常常會救你一命。\nflex 已經支援大部分的主流瀏覽器，而且真的很好用！\n\n將 display 設置為 flex 的時候，如果子元素沒有設定高度，則子元素的高度會是其中最高的那個。\n\n一行屬性就解決了我朝思暮想的問題，真是優雅的 `flex`。\n\n但除此之外，我們還需要對排版做一些調整。 flex 預設如果沒有設置 `flex-wrap` 屬性的話，就會以單行顯示的方式來撐開父容器。\n因此我們可以再加上一行。\n\n```css\n.wrap { flex-wrap: wrap; }\n```\n\n好了，高度相同的 responsive 排版，不宣告 `height` 就此完成。大概的 css 會長得像這樣：\n\n```css\n.container {\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tjustify-content: space-around;\n}\n\n.card {\n\theight: auto;\n\twidth: 30%;\n\tborder: 1px solid #aaa;\n}\n\n```\n\n### 不支援 flex 的瀏覽器怎麼辦？\n\n首先 flex 已經支援大部分的主流瀏覽器了，不要用支援度這種藉口來忽視這麼好用的 `flex`。\n但如果瀏覽器真的不支援，可以用 js 的方式來做排版。主要的原理是不設定高度，偵測 container 裡面的所有元素，並且找出高度最高的，並將此高度套用到每個元素中。\n\n寫了一個很基本的範例代碼：\n\n```js\nvar cards = document.querySelectorAll('.card');\n\nfunction getMaxinumHeight(elements) {\n  var nums = [];\n\n  elements.forEach(function(value) {\n    nums.push(value.offsetHeight);\n  });\n\n  return nums.sort(function(a,b) {\n  \treturn a < b;\n  })[0];\n}\n\nvar maxHeight = getMaxinumHeight(cards);\ncards.forEach(value => {\n\n  value.style.height = maxHeight + 'px';\n});\n```\n\n### Table is new sexy\n\n雖然古老的 table 排版已經被唾棄，不過像是等高這種場景，如果不幸無法使用 flex 時，可以利用 table 的特性來達成等高排版。\n\n要完成 table 排版，可以使用 `display: table`, `display:table-row`, `display: table-cell`，來完成。\n\n`display: table` 等同於 `<table>`；`display: table-row` 等同於 `<tr>`；`display: table-cell` 等同於 `<td>`。\n\n<iframe height='265' scrolling='no' title='table-height' src='//codepen.io/kjj6198/embed/evpxjx/?height=265&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='http://codepen.io/kjj6198/pen/evpxjx/'>table-height</a> by 愷開 (<a href='http://codepen.io/kjj6198'>@kjj6198</a>) on <a href='http://codepen.io'>CodePen</a>.\n</iframe>\n\n不過，雖然能夠達到等高的效果，但 HTML 的 markup 變得更複雜了。而且 table 在使用上仍然有一些限制，像是 margin 沒辦法在 `table` 裡頭生效等等，這些在實作 mockup 時都是很大的阻礙。所以，如果能夠用 flex 來做的話，就盡量使用 flex 吧！\n\n\n\n### 延伸閱讀\n\n[Flexbox responsive equal height](http://osvaldas.info/flexbox-based-responsive-equal-height-blocks-with-javascript-fallback)\n","source":"_posts/responsive-flex.md","raw":"---\ntitle: 高度相同的排版解決方案\ncategories: 前端\ntags: flex\ndate: 2017-2-1 15:33:41\n---\n\n在前端的頁面中，我們經常會碰到需要相同高度的排版。最直覺的方法就是將容器裡的所有元素設為 float 或是 inline-block。\n\n### float 及 inline-block\n\n如果是使用 float 排版，不但要先撐開父元素容器(clearfix)，還要針對子元素設定 margin。\n所以一旦內容太多，或是高度不足就會跑版。\n\n而且，這樣的排版最大的缺陷就是，**必須設定高度**。\n\n那，如果不設置高度呢？\n就算設定了 min-height 也一樣，當內容超出高度時，就必定會面臨 overflow 的危機。\n\n{% asset_img \"example1.png\" \"example1\" %}\n\n後來決定直接用 css media query 在不同的螢幕寬度下分別給予不同的高度。\n雖然解法比較麻煩，也比較醜一點，但的確解決了寬度過窄時會跑版的問題。\n\n\n這個問題後來一直深埋在心中，直到最近發現了 flex 的奧秘。\n\n### 排版遇到困難，先想想 flex\n\n人生遇到挫折的時候，想想 flex，這個彈性盒子常常會救你一命。\nflex 已經支援大部分的主流瀏覽器，而且真的很好用！\n\n將 display 設置為 flex 的時候，如果子元素沒有設定高度，則子元素的高度會是其中最高的那個。\n\n一行屬性就解決了我朝思暮想的問題，真是優雅的 `flex`。\n\n但除此之外，我們還需要對排版做一些調整。 flex 預設如果沒有設置 `flex-wrap` 屬性的話，就會以單行顯示的方式來撐開父容器。\n因此我們可以再加上一行。\n\n```css\n.wrap { flex-wrap: wrap; }\n```\n\n好了，高度相同的 responsive 排版，不宣告 `height` 就此完成。大概的 css 會長得像這樣：\n\n```css\n.container {\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tjustify-content: space-around;\n}\n\n.card {\n\theight: auto;\n\twidth: 30%;\n\tborder: 1px solid #aaa;\n}\n\n```\n\n### 不支援 flex 的瀏覽器怎麼辦？\n\n首先 flex 已經支援大部分的主流瀏覽器了，不要用支援度這種藉口來忽視這麼好用的 `flex`。\n但如果瀏覽器真的不支援，可以用 js 的方式來做排版。主要的原理是不設定高度，偵測 container 裡面的所有元素，並且找出高度最高的，並將此高度套用到每個元素中。\n\n寫了一個很基本的範例代碼：\n\n```js\nvar cards = document.querySelectorAll('.card');\n\nfunction getMaxinumHeight(elements) {\n  var nums = [];\n\n  elements.forEach(function(value) {\n    nums.push(value.offsetHeight);\n  });\n\n  return nums.sort(function(a,b) {\n  \treturn a < b;\n  })[0];\n}\n\nvar maxHeight = getMaxinumHeight(cards);\ncards.forEach(value => {\n\n  value.style.height = maxHeight + 'px';\n});\n```\n\n### Table is new sexy\n\n雖然古老的 table 排版已經被唾棄，不過像是等高這種場景，如果不幸無法使用 flex 時，可以利用 table 的特性來達成等高排版。\n\n要完成 table 排版，可以使用 `display: table`, `display:table-row`, `display: table-cell`，來完成。\n\n`display: table` 等同於 `<table>`；`display: table-row` 等同於 `<tr>`；`display: table-cell` 等同於 `<td>`。\n\n<iframe height='265' scrolling='no' title='table-height' src='//codepen.io/kjj6198/embed/evpxjx/?height=265&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='http://codepen.io/kjj6198/pen/evpxjx/'>table-height</a> by 愷開 (<a href='http://codepen.io/kjj6198'>@kjj6198</a>) on <a href='http://codepen.io'>CodePen</a>.\n</iframe>\n\n不過，雖然能夠達到等高的效果，但 HTML 的 markup 變得更複雜了。而且 table 在使用上仍然有一些限制，像是 margin 沒辦法在 `table` 裡頭生效等等，這些在實作 mockup 時都是很大的阻礙。所以，如果能夠用 flex 來做的話，就盡量使用 flex 吧！\n\n\n\n### 延伸閱讀\n\n[Flexbox responsive equal height](http://osvaldas.info/flexbox-based-responsive-equal-height-blocks-with-javascript-fallback)\n","slug":"responsive-flex","published":1,"updated":"2017-03-01T03:04:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p8c0016b75tdyfm91ab","content":"<p>在前端的頁面中，我們經常會碰到需要相同高度的排版。最直覺的方法就是將容器裡的所有元素設為 float 或是 inline-block。</p>\n<h3 id=\"float-及-inline-block\"><a href=\"#float-及-inline-block\" class=\"headerlink\" title=\"float 及 inline-block\"></a>float 及 inline-block</h3><p>如果是使用 float 排版，不但要先撐開父元素容器(clearfix)，還要針對子元素設定 margin。<br>所以一旦內容太多，或是高度不足就會跑版。</p>\n<p>而且，這樣的排版最大的缺陷就是，<strong>必須設定高度</strong>。</p>\n<p>那，如果不設置高度呢？<br>就算設定了 min-height 也一樣，當內容超出高度時，就必定會面臨 overflow 的危機。</p>\n<img src=\"/2017/02/01/responsive-flex/example1.png\" alt=\"example1\" title=\"example1\">\n<p>後來決定直接用 css media query 在不同的螢幕寬度下分別給予不同的高度。<br>雖然解法比較麻煩，也比較醜一點，但的確解決了寬度過窄時會跑版的問題。</p>\n<p>這個問題後來一直深埋在心中，直到最近發現了 flex 的奧秘。</p>\n<h3 id=\"排版遇到困難，先想想-flex\"><a href=\"#排版遇到困難，先想想-flex\" class=\"headerlink\" title=\"排版遇到困難，先想想 flex\"></a>排版遇到困難，先想想 flex</h3><p>人生遇到挫折的時候，想想 flex，這個彈性盒子常常會救你一命。<br>flex 已經支援大部分的主流瀏覽器，而且真的很好用！</p>\n<p>將 display 設置為 flex 的時候，如果子元素沒有設定高度，則子元素的高度會是其中最高的那個。</p>\n<p>一行屬性就解決了我朝思暮想的問題，真是優雅的 <code>flex</code>。</p>\n<p>但除此之外，我們還需要對排版做一些調整。 flex 預設如果沒有設置 <code>flex-wrap</code> 屬性的話，就會以單行顯示的方式來撐開父容器。<br>因此我們可以再加上一行。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.wrap</span> &#123; <span class=\"attribute\">flex-wrap</span>: wrap; &#125;</div></pre></td></tr></table></figure>\n<p>好了，高度相同的 responsive 排版，不宣告 <code>height</code> 就此完成。大概的 css 會長得像這樣：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">display</span>: flex;</div><div class=\"line\">\t<span class=\"attribute\">flex-wrap</span>: wrap;</div><div class=\"line\">\t<span class=\"attribute\">justify-content</span>: space-around;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.card</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: auto;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">30%</span>;</div><div class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#aaa</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"不支援-flex-的瀏覽器怎麼辦？\"><a href=\"#不支援-flex-的瀏覽器怎麼辦？\" class=\"headerlink\" title=\"不支援 flex 的瀏覽器怎麼辦？\"></a>不支援 flex 的瀏覽器怎麼辦？</h3><p>首先 flex 已經支援大部分的主流瀏覽器了，不要用支援度這種藉口來忽視這麼好用的 <code>flex</code>。<br>但如果瀏覽器真的不支援，可以用 js 的方式來做排版。主要的原理是不設定高度，偵測 container 裡面的所有元素，並且找出高度最高的，並將此高度套用到每個元素中。</p>\n<p>寫了一個很基本的範例代碼：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cards = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.card'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMaxinumHeight</span>(<span class=\"params\">elements</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> nums = [];</div><div class=\"line\"></div><div class=\"line\">  elements.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">    nums.push(value.offsetHeight);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> nums.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>) </span>&#123;</div><div class=\"line\">  \t<span class=\"keyword\">return</span> a &lt; b;</div><div class=\"line\">  &#125;)[<span class=\"number\">0</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> maxHeight = getMaxinumHeight(cards);</div><div class=\"line\">cards.forEach(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  value.style.height = maxHeight + <span class=\"string\">'px'</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"Table-is-new-sexy\"><a href=\"#Table-is-new-sexy\" class=\"headerlink\" title=\"Table is new sexy\"></a>Table is new sexy</h3><p>雖然古老的 table 排版已經被唾棄，不過像是等高這種場景，如果不幸無法使用 flex 時，可以利用 table 的特性來達成等高排版。</p>\n<p>要完成 table 排版，可以使用 <code>display: table</code>, <code>display:table-row</code>, <code>display: table-cell</code>，來完成。</p>\n<p><code>display: table</code> 等同於 <code>&lt;table&gt;</code>；<code>display: table-row</code> 等同於 <code>&lt;tr&gt;</code>；<code>display: table-cell</code> 等同於 <code>&lt;td&gt;</code>。</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"table-height\" src=\"//codepen.io/kjj6198/embed/evpxjx/?height=265&theme-id=0&default-tab=html,result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"http://codepen.io/kjj6198/pen/evpxjx/\" target=\"_blank\" rel=\"external\">table-height</a> by 愷開 (<a href=\"http://codepen.io/kjj6198\" target=\"_blank\" rel=\"external\">@kjj6198</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"external\">CodePen</a>.<br></iframe>\n\n<p>不過，雖然能夠達到等高的效果，但 HTML 的 markup 變得更複雜了。而且 table 在使用上仍然有一些限制，像是 margin 沒辦法在 <code>table</code> 裡頭生效等等，這些在實作 mockup 時都是很大的阻礙。所以，如果能夠用 flex 來做的話，就盡量使用 flex 吧！</p>\n<h3 id=\"延伸閱讀\"><a href=\"#延伸閱讀\" class=\"headerlink\" title=\"延伸閱讀\"></a>延伸閱讀</h3><p><a href=\"http://osvaldas.info/flexbox-based-responsive-equal-height-blocks-with-javascript-fallback\" target=\"_blank\" rel=\"external\">Flexbox responsive equal height</a></p>\n","excerpt":"","more":"<p>在前端的頁面中，我們經常會碰到需要相同高度的排版。最直覺的方法就是將容器裡的所有元素設為 float 或是 inline-block。</p>\n<h3 id=\"float-及-inline-block\"><a href=\"#float-及-inline-block\" class=\"headerlink\" title=\"float 及 inline-block\"></a>float 及 inline-block</h3><p>如果是使用 float 排版，不但要先撐開父元素容器(clearfix)，還要針對子元素設定 margin。<br>所以一旦內容太多，或是高度不足就會跑版。</p>\n<p>而且，這樣的排版最大的缺陷就是，<strong>必須設定高度</strong>。</p>\n<p>那，如果不設置高度呢？<br>就算設定了 min-height 也一樣，當內容超出高度時，就必定會面臨 overflow 的危機。</p>\n<img src=\"/2017/02/01/responsive-flex/example1.png\" alt=\"example1\" title=\"example1\">\n<p>後來決定直接用 css media query 在不同的螢幕寬度下分別給予不同的高度。<br>雖然解法比較麻煩，也比較醜一點，但的確解決了寬度過窄時會跑版的問題。</p>\n<p>這個問題後來一直深埋在心中，直到最近發現了 flex 的奧秘。</p>\n<h3 id=\"排版遇到困難，先想想-flex\"><a href=\"#排版遇到困難，先想想-flex\" class=\"headerlink\" title=\"排版遇到困難，先想想 flex\"></a>排版遇到困難，先想想 flex</h3><p>人生遇到挫折的時候，想想 flex，這個彈性盒子常常會救你一命。<br>flex 已經支援大部分的主流瀏覽器，而且真的很好用！</p>\n<p>將 display 設置為 flex 的時候，如果子元素沒有設定高度，則子元素的高度會是其中最高的那個。</p>\n<p>一行屬性就解決了我朝思暮想的問題，真是優雅的 <code>flex</code>。</p>\n<p>但除此之外，我們還需要對排版做一些調整。 flex 預設如果沒有設置 <code>flex-wrap</code> 屬性的話，就會以單行顯示的方式來撐開父容器。<br>因此我們可以再加上一行。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.wrap</span> &#123; <span class=\"attribute\">flex-wrap</span>: wrap; &#125;</div></pre></td></tr></table></figure>\n<p>好了，高度相同的 responsive 排版，不宣告 <code>height</code> 就此完成。大概的 css 會長得像這樣：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">display</span>: flex;</div><div class=\"line\">\t<span class=\"attribute\">flex-wrap</span>: wrap;</div><div class=\"line\">\t<span class=\"attribute\">justify-content</span>: space-around;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.card</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: auto;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">30%</span>;</div><div class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#aaa</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"不支援-flex-的瀏覽器怎麼辦？\"><a href=\"#不支援-flex-的瀏覽器怎麼辦？\" class=\"headerlink\" title=\"不支援 flex 的瀏覽器怎麼辦？\"></a>不支援 flex 的瀏覽器怎麼辦？</h3><p>首先 flex 已經支援大部分的主流瀏覽器了，不要用支援度這種藉口來忽視這麼好用的 <code>flex</code>。<br>但如果瀏覽器真的不支援，可以用 js 的方式來做排版。主要的原理是不設定高度，偵測 container 裡面的所有元素，並且找出高度最高的，並將此高度套用到每個元素中。</p>\n<p>寫了一個很基本的範例代碼：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cards = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.card'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMaxinumHeight</span>(<span class=\"params\">elements</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> nums = [];</div><div class=\"line\"></div><div class=\"line\">  elements.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">    nums.push(value.offsetHeight);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> nums.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>) </span>&#123;</div><div class=\"line\">  \t<span class=\"keyword\">return</span> a &lt; b;</div><div class=\"line\">  &#125;)[<span class=\"number\">0</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> maxHeight = getMaxinumHeight(cards);</div><div class=\"line\">cards.forEach(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  value.style.height = maxHeight + <span class=\"string\">'px'</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"Table-is-new-sexy\"><a href=\"#Table-is-new-sexy\" class=\"headerlink\" title=\"Table is new sexy\"></a>Table is new sexy</h3><p>雖然古老的 table 排版已經被唾棄，不過像是等高這種場景，如果不幸無法使用 flex 時，可以利用 table 的特性來達成等高排版。</p>\n<p>要完成 table 排版，可以使用 <code>display: table</code>, <code>display:table-row</code>, <code>display: table-cell</code>，來完成。</p>\n<p><code>display: table</code> 等同於 <code>&lt;table&gt;</code>；<code>display: table-row</code> 等同於 <code>&lt;tr&gt;</code>；<code>display: table-cell</code> 等同於 <code>&lt;td&gt;</code>。</p>\n<iframe height='265' scrolling='no' title='table-height' src='//codepen.io/kjj6198/embed/evpxjx/?height=265&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='http://codepen.io/kjj6198/pen/evpxjx/'>table-height</a> by 愷開 (<a href='http://codepen.io/kjj6198'>@kjj6198</a>) on <a href='http://codepen.io'>CodePen</a>.<br></iframe>\n\n<p>不過，雖然能夠達到等高的效果，但 HTML 的 markup 變得更複雜了。而且 table 在使用上仍然有一些限制，像是 margin 沒辦法在 <code>table</code> 裡頭生效等等，這些在實作 mockup 時都是很大的阻礙。所以，如果能夠用 flex 來做的話，就盡量使用 flex 吧！</p>\n<h3 id=\"延伸閱讀\"><a href=\"#延伸閱讀\" class=\"headerlink\" title=\"延伸閱讀\"></a>延伸閱讀</h3><p><a href=\"http://osvaldas.info/flexbox-based-responsive-equal-height-blocks-with-javascript-fallback\">Flexbox responsive equal height</a></p>\n"},{"title":"smooth animation - （下）easing 的使用","date":"2016-10-13T09:06:19.000Z","_content":"\n\n但是，為什麼感覺動畫那麼不自然呢？\n\n有沒有發現，時間與距離是完全呈現線性變化的，這代表我們假設這個物體在所有的時間點，速度都是相同的。真實生活中通常不會有這樣的事情發生，物體一定都是從靜止狀態**逐漸加速**，再從移動的狀態中**逐漸停止**。而上一篇的範例當中，動畫是突然開始，突然停止。在現實生活中，**物體的移動速度並非成線性變化**，這是造成我們動畫看起來不自然的主要原因。\n\n知道了原理之後，就可以馬上來實作了：\n\n- 計算距離\n- 重新計算每一次的位移 = 距離 * 比例係數（easing）\n\n把我們原本的 `function` 改寫成這樣：\n\n```javascript\nfunction moveScrollY(targetY, speed) {\n  const scrollY = window.scrollY || window.pageYOffset;\n  const t = Math.min(0.5, Math.abs((targetY - scrollY) / speed)); // 將時間限制在 0.5(500ms) \n  let currentTime = 0;\n  \n  function move() {\n    currentTime += 1 / 60;\n    var p = currentTime / t;\n    var d = Math.cos(Math.PI * pos) - 1); // 利用 cos 函數，重新計算移動的位置。\n    \n    if (p < 1) {\n      scrollTo(0, scrollY + (targetY - scrollY) * d);\n      requestAnimationFrame(move); // 採用 requestAnimationFrame\n    } else {\n      scrollTo(0, targetY);\n      alert('done');\n    }\n  }\n  move();\n}\n```\n\n這邊我們加上了一個簡單的 cos 函數，重新計算位移的位置，達到 easing 的效果。詳細 easing 效果，可以到 [easing.js](https://github.com/danro/easing-js/blob/master/easing.js) 看看，這裡蒐藏了很多 `ease` 效果。\n\n### 小結\n\n原本以為篇幅很長，不過基本的動畫原理的確只有這樣而已，加上了 easing 之後，動畫的效果看起來自然很多，當然，你也可以依照自己的經驗調整參數，達到更完美的使用者體驗。\n\n不過，如果可以，盡量不要綁架使用者預設的滾動效果，一來可能會造成效能的問題，二來你綁定的滾動效果如果沒有依照使用者預期反應的話，很容易造成非常差的體驗。\n\n","source":"_posts/scroll-animation-2.md","raw":"---\ntitle: smooth animation - （下）easing 的使用\ndate: 2016-10-13 17:06:19\ncategories: 前端\ntags:\n  - smooth scoll\n  - animation\n  - easing\n---\n\n\n但是，為什麼感覺動畫那麼不自然呢？\n\n有沒有發現，時間與距離是完全呈現線性變化的，這代表我們假設這個物體在所有的時間點，速度都是相同的。真實生活中通常不會有這樣的事情發生，物體一定都是從靜止狀態**逐漸加速**，再從移動的狀態中**逐漸停止**。而上一篇的範例當中，動畫是突然開始，突然停止。在現實生活中，**物體的移動速度並非成線性變化**，這是造成我們動畫看起來不自然的主要原因。\n\n知道了原理之後，就可以馬上來實作了：\n\n- 計算距離\n- 重新計算每一次的位移 = 距離 * 比例係數（easing）\n\n把我們原本的 `function` 改寫成這樣：\n\n```javascript\nfunction moveScrollY(targetY, speed) {\n  const scrollY = window.scrollY || window.pageYOffset;\n  const t = Math.min(0.5, Math.abs((targetY - scrollY) / speed)); // 將時間限制在 0.5(500ms) \n  let currentTime = 0;\n  \n  function move() {\n    currentTime += 1 / 60;\n    var p = currentTime / t;\n    var d = Math.cos(Math.PI * pos) - 1); // 利用 cos 函數，重新計算移動的位置。\n    \n    if (p < 1) {\n      scrollTo(0, scrollY + (targetY - scrollY) * d);\n      requestAnimationFrame(move); // 採用 requestAnimationFrame\n    } else {\n      scrollTo(0, targetY);\n      alert('done');\n    }\n  }\n  move();\n}\n```\n\n這邊我們加上了一個簡單的 cos 函數，重新計算位移的位置，達到 easing 的效果。詳細 easing 效果，可以到 [easing.js](https://github.com/danro/easing-js/blob/master/easing.js) 看看，這裡蒐藏了很多 `ease` 效果。\n\n### 小結\n\n原本以為篇幅很長，不過基本的動畫原理的確只有這樣而已，加上了 easing 之後，動畫的效果看起來自然很多，當然，你也可以依照自己的經驗調整參數，達到更完美的使用者體驗。\n\n不過，如果可以，盡量不要綁架使用者預設的滾動效果，一來可能會造成效能的問題，二來你綁定的滾動效果如果沒有依照使用者預期反應的話，很容易造成非常差的體驗。\n\n","slug":"scroll-animation-2","published":1,"updated":"2016-10-19T06:20:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p8g001ab75tn5udjs87","content":"<p>但是，為什麼感覺動畫那麼不自然呢？</p>\n<p>有沒有發現，時間與距離是完全呈現線性變化的，這代表我們假設這個物體在所有的時間點，速度都是相同的。真實生活中通常不會有這樣的事情發生，物體一定都是從靜止狀態<strong>逐漸加速</strong>，再從移動的狀態中<strong>逐漸停止</strong>。而上一篇的範例當中，動畫是突然開始，突然停止。在現實生活中，<strong>物體的移動速度並非成線性變化</strong>，這是造成我們動畫看起來不自然的主要原因。</p>\n<p>知道了原理之後，就可以馬上來實作了：</p>\n<ul>\n<li>計算距離</li>\n<li>重新計算每一次的位移 = 距離 * 比例係數（easing）</li>\n</ul>\n<p>把我們原本的 <code>function</code> 改寫成這樣：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moveScrollY</span>(<span class=\"params\">targetY, speed</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> scrollY = <span class=\"built_in\">window</span>.scrollY || <span class=\"built_in\">window</span>.pageYOffset;</div><div class=\"line\">  <span class=\"keyword\">const</span> t = <span class=\"built_in\">Math</span>.min(<span class=\"number\">0.5</span>, <span class=\"built_in\">Math</span>.abs((targetY - scrollY) / speed)); <span class=\"comment\">// 將時間限制在 0.5(500ms) </span></div><div class=\"line\">  <span class=\"keyword\">let</span> currentTime = <span class=\"number\">0</span>;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    currentTime += <span class=\"number\">1</span> / <span class=\"number\">60</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> p = currentTime / t;</div><div class=\"line\">    <span class=\"keyword\">var</span> d = <span class=\"built_in\">Math</span>.cos(<span class=\"built_in\">Math</span>.PI * pos) - <span class=\"number\">1</span>); <span class=\"comment\">// 利用 cos 函數，重新計算移動的位置。</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (p &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">      scrollTo(<span class=\"number\">0</span>, scrollY + (targetY - scrollY) * d);</div><div class=\"line\">      requestAnimationFrame(move); <span class=\"comment\">// 採用 requestAnimationFrame</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      scrollTo(<span class=\"number\">0</span>, targetY);</div><div class=\"line\">      alert(<span class=\"string\">'done'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  move();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這邊我們加上了一個簡單的 cos 函數，重新計算位移的位置，達到 easing 的效果。詳細 easing 效果，可以到 <a href=\"https://github.com/danro/easing-js/blob/master/easing.js\" target=\"_blank\" rel=\"external\">easing.js</a> 看看，這裡蒐藏了很多 <code>ease</code> 效果。</p>\n<h3 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h3><p>原本以為篇幅很長，不過基本的動畫原理的確只有這樣而已，加上了 easing 之後，動畫的效果看起來自然很多，當然，你也可以依照自己的經驗調整參數，達到更完美的使用者體驗。</p>\n<p>不過，如果可以，盡量不要綁架使用者預設的滾動效果，一來可能會造成效能的問題，二來你綁定的滾動效果如果沒有依照使用者預期反應的話，很容易造成非常差的體驗。</p>\n","excerpt":"","more":"<p>但是，為什麼感覺動畫那麼不自然呢？</p>\n<p>有沒有發現，時間與距離是完全呈現線性變化的，這代表我們假設這個物體在所有的時間點，速度都是相同的。真實生活中通常不會有這樣的事情發生，物體一定都是從靜止狀態<strong>逐漸加速</strong>，再從移動的狀態中<strong>逐漸停止</strong>。而上一篇的範例當中，動畫是突然開始，突然停止。在現實生活中，<strong>物體的移動速度並非成線性變化</strong>，這是造成我們動畫看起來不自然的主要原因。</p>\n<p>知道了原理之後，就可以馬上來實作了：</p>\n<ul>\n<li>計算距離</li>\n<li>重新計算每一次的位移 = 距離 * 比例係數（easing）</li>\n</ul>\n<p>把我們原本的 <code>function</code> 改寫成這樣：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moveScrollY</span>(<span class=\"params\">targetY, speed</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> scrollY = <span class=\"built_in\">window</span>.scrollY || <span class=\"built_in\">window</span>.pageYOffset;</div><div class=\"line\">  <span class=\"keyword\">const</span> t = <span class=\"built_in\">Math</span>.min(<span class=\"number\">0.5</span>, <span class=\"built_in\">Math</span>.abs((targetY - scrollY) / speed)); <span class=\"comment\">// 將時間限制在 0.5(500ms) </span></div><div class=\"line\">  <span class=\"keyword\">let</span> currentTime = <span class=\"number\">0</span>;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    currentTime += <span class=\"number\">1</span> / <span class=\"number\">60</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> p = currentTime / t;</div><div class=\"line\">    <span class=\"keyword\">var</span> d = <span class=\"built_in\">Math</span>.cos(<span class=\"built_in\">Math</span>.PI * pos) - <span class=\"number\">1</span>); <span class=\"comment\">// 利用 cos 函數，重新計算移動的位置。</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (p &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">      scrollTo(<span class=\"number\">0</span>, scrollY + (targetY - scrollY) * d);</div><div class=\"line\">      requestAnimationFrame(move); <span class=\"comment\">// 採用 requestAnimationFrame</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      scrollTo(<span class=\"number\">0</span>, targetY);</div><div class=\"line\">      alert(<span class=\"string\">'done'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  move();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這邊我們加上了一個簡單的 cos 函數，重新計算位移的位置，達到 easing 的效果。詳細 easing 效果，可以到 <a href=\"https://github.com/danro/easing-js/blob/master/easing.js\">easing.js</a> 看看，這裡蒐藏了很多 <code>ease</code> 效果。</p>\n<h3 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h3><p>原本以為篇幅很長，不過基本的動畫原理的確只有這樣而已，加上了 easing 之後，動畫的效果看起來自然很多，當然，你也可以依照自己的經驗調整參數，達到更完美的使用者體驗。</p>\n<p>不過，如果可以，盡量不要綁架使用者預設的滾動效果，一來可能會造成效能的問題，二來你綁定的滾動效果如果沒有依照使用者預期反應的話，很容易造成非常差的體驗。</p>\n"},{"title":"smooth scroll","date":"2016-10-12T09:06:19.000Z","_content":"\n在 window 物件當中，提供了 `scrollTo(x, y)` 的方法，我們可以透過 `scrollTo` 來操作滾動。但， scrollTo 方法是直接讓滾動軸移到指定的位置，並沒有動畫的效果，如果要藉由動畫的幫助達到良好的使用者體驗，我們必須自己設計。\n\n## 基本動畫知識\n\n在開始之前先來讓我們了解一下動畫的基礎吧！\n\n動畫最基本的要素有這些：\n\n- 時間 = 距離（位移）/ 速度\n- 位移 = 速度 * 時間\n- 速度 = 距離 / 時間\n\n有了這些基礎知識就可以來製作簡單的動畫效果了。\n\n### 第一次嘗試\n\n我們要做的事是要讓 scroll 能夠用動畫的方式滑到自己想要的地方。所以，在本例當中，`scrollTo(x, y)` 將會是我們的`位移`。速度的話，我們先暫定是 200ms 吧！\n\n```javascript\n/* */\nfunction moveScrollY(targetY, speed) {\n  const speed = 200;\n  const scrollY = window.scrollY || window.pageYOffset;\n  scrollTo(0, scrollY + (targetY - scrollY) * t);\n}\n```\n\n咦？這個 t 是 `undefined` 吧？\n\n在定義 t(time) 之前，我們先來思考 t 應該要是什麼。根據剛剛的公式，時間 = 距離 / 速度，所以在本例當中，t 為 `targetY - scrollY / speed`。這樣寫的話如果 scrollY 大於 targetY 的話時間就會為負了，所以這邊我們要取絕對值。\n\n```javascript\n/* */\nfunction moveScrollY(targetY, speed) {\n  const scrollY = window.scrollY || window.pageYOffset;\n  const t = Math.abs((targetY - scrollY) / speed);\n  let currentTime = 0;\n  \n  function move() {\n    currentTime += 1 / 60;\n    p = currentTime / t;\n    scrollTo(0, scrollY + (targetY - scrollY) * p);\n    setTimeout(move, 1000/60);\n  }\n  move();\n}\n```\n\n到目前為止，我們的 scroll 動畫雛形已經出來，不過存在一些問題：\n\n- 距離太遠的時候，動畫的時間顯得有點長\n- 這個動畫不會停\n\n現在我們來改善一下 scroll 的動畫。\n\n### 距離太遠\n\n顯然如果距離太遠時，動畫完成的時間會變得更長，所以我們需要限制一下 t 的範圍。\n\n```javascript\nfunction moveScrollY(targetY, speed) {\n  const scrollY = window.scrollY || window.pageYOffset;\n  const t = Math.min(0.5, Math.abs((targetY - scrollY) / speed)); // 將時間限制在 0.5(500ms) 以下\n}\n```\n\n這樣子好多了，在距離太遠時，動畫不會顯得太慢。\n\n\n\n### 動畫不會停\n\n在程式碼當中，因為沒有設定停止條件，所以會無止盡的延續下去。[芝諾悖論](https://www.wikiwand.com/zh-tw/%E8%8A%9D%E8%AF%BA%E6%82%96%E8%AE%BA)\n\n怎樣才算是完成了呢？這邊的終止條件是目前的時間（禎數）等於 t 的時候，就算終止了。\n\n```javascript\nfunction moveScrollY(targetY, speed) {\n  const scrollY = window.scrollY || window.pageYOffset;\n  const t = Math.min(0.5, Math.abs((targetY - scrollY) / speed)); // 將時間限制在 0.5(500ms) 以下\n  let currentTime = 0;\n  \n  function move() {\n    currentTime += 1 / 60;\n    p = currentTime / t;\n    if (p < 1) {\n      scrollTo(0, scrollY + (targetY - scrollY) * p);\n      requestAnimationFrame(move); // 採用 requestAnimationFrame\n    } else {\n      scrollTo(0, targetY);\n      alert('done');\n    }\n  }\n  move();\n}\n```\n\n這邊我們將 `setTimeout` 取代成 `requestAnimationFrame`，requestAnimation 跟 setTimeout 的差別在於使用 `requestAnimationFrame` 時，瀏覽器會幫我們做最佳化，在不必要的時候不會進行重繪，達到節省資源的效果。\n\n目前主流瀏覽器都已經支援了（主流當然不包含 IE8 囉！）\n\n但是，為什麼感覺動畫那麼不自然呢？\n\n有沒有發現，時間與距離是完全呈現線性變化的，這代表我們假設這個物體在所有的時間點，速度都是相同的。真實生活中通常不會有這樣的事情發生，物體一定都是從靜止狀態**逐漸加速**，再從移動的狀態中**逐漸停止**。而上一篇的範例當中，動畫是突然開始，突然停止。在現實生活中，**物體的移動速度並非成線性變化**，這是造成我們動畫看起來不自然的主要原因。\n\n知道了原理之後，就可以馬上來實作了：\n\n- 計算距離\n- 重新計算每一次的位移 = 距離 * 比例係數（easing）\n\n把我們原本的 `function` 改寫成這樣：\n\n```javascript\nfunction moveScrollY(targetY, speed) {\n  const scrollY = window.scrollY || window.pageYOffset;\n  const t = Math.min(0.5, Math.abs((targetY - scrollY) / speed)); // 將時間限制在 0.5(500ms) \n  let currentTime = 0;\n  \n  function move() {\n    currentTime += 1 / 60;\n    var p = currentTime / t;\n    var d = Math.cos(Math.PI * pos) - 1); // 利用 cos 函數，重新計算移動的位置。\n    \n    if (p < 1) {\n      scrollTo(0, scrollY + (targetY - scrollY) * d);\n      requestAnimationFrame(move); // 採用 requestAnimationFrame\n    } else {\n      scrollTo(0, targetY);\n      alert('done');\n    }\n  }\n  move();\n}\n```\n\n這邊我們加上了一個簡單的 cos 函數，重新計算位移的位置，達到 easing 的效果。詳細 easing 效果，可以到 [easing.js](https://github.com/danro/easing-js/blob/master/easing.js) 看看，這裡蒐藏了很多 `ease` 效果。\n\n## 結論\n\n這邊很簡略地用 scroll 的 API 當作範例，介紹了動畫的基礎。當然還動畫的原理跟使用，又是另外一門深奧的學問了。\n\n到目前爲止，我們的 scroll 動畫就算完成了，但因為位移是線性移動，看起來比較不自然一點，下一篇文章，再來介紹 ease 的概念，讓我們 scroller 變得更 smooth。\n\n原本以為篇幅很長，不過基本的動畫原理的確只有這樣而已，加上了 easing 之後，動畫的效果看起來自然很多，當然，你也可以依照自己的經驗調整參數，達到更完美的使用者體驗。\n\n不過，如果可以，盡量不要綁架使用者預設的滾動效果，一來可能會造成效能的問題，二來你綁定的滾動效果如果沒有依照使用者預期反應的話，很容易造成非常差的體驗。\n","source":"_posts/scroll-animation.md","raw":"---\ntitle: smooth scroll\ndate: 2016-10-12 17:06:19\ncategory: 前端\ntags:\n  - scroll\n---\n\n在 window 物件當中，提供了 `scrollTo(x, y)` 的方法，我們可以透過 `scrollTo` 來操作滾動。但， scrollTo 方法是直接讓滾動軸移到指定的位置，並沒有動畫的效果，如果要藉由動畫的幫助達到良好的使用者體驗，我們必須自己設計。\n\n## 基本動畫知識\n\n在開始之前先來讓我們了解一下動畫的基礎吧！\n\n動畫最基本的要素有這些：\n\n- 時間 = 距離（位移）/ 速度\n- 位移 = 速度 * 時間\n- 速度 = 距離 / 時間\n\n有了這些基礎知識就可以來製作簡單的動畫效果了。\n\n### 第一次嘗試\n\n我們要做的事是要讓 scroll 能夠用動畫的方式滑到自己想要的地方。所以，在本例當中，`scrollTo(x, y)` 將會是我們的`位移`。速度的話，我們先暫定是 200ms 吧！\n\n```javascript\n/* */\nfunction moveScrollY(targetY, speed) {\n  const speed = 200;\n  const scrollY = window.scrollY || window.pageYOffset;\n  scrollTo(0, scrollY + (targetY - scrollY) * t);\n}\n```\n\n咦？這個 t 是 `undefined` 吧？\n\n在定義 t(time) 之前，我們先來思考 t 應該要是什麼。根據剛剛的公式，時間 = 距離 / 速度，所以在本例當中，t 為 `targetY - scrollY / speed`。這樣寫的話如果 scrollY 大於 targetY 的話時間就會為負了，所以這邊我們要取絕對值。\n\n```javascript\n/* */\nfunction moveScrollY(targetY, speed) {\n  const scrollY = window.scrollY || window.pageYOffset;\n  const t = Math.abs((targetY - scrollY) / speed);\n  let currentTime = 0;\n  \n  function move() {\n    currentTime += 1 / 60;\n    p = currentTime / t;\n    scrollTo(0, scrollY + (targetY - scrollY) * p);\n    setTimeout(move, 1000/60);\n  }\n  move();\n}\n```\n\n到目前為止，我們的 scroll 動畫雛形已經出來，不過存在一些問題：\n\n- 距離太遠的時候，動畫的時間顯得有點長\n- 這個動畫不會停\n\n現在我們來改善一下 scroll 的動畫。\n\n### 距離太遠\n\n顯然如果距離太遠時，動畫完成的時間會變得更長，所以我們需要限制一下 t 的範圍。\n\n```javascript\nfunction moveScrollY(targetY, speed) {\n  const scrollY = window.scrollY || window.pageYOffset;\n  const t = Math.min(0.5, Math.abs((targetY - scrollY) / speed)); // 將時間限制在 0.5(500ms) 以下\n}\n```\n\n這樣子好多了，在距離太遠時，動畫不會顯得太慢。\n\n\n\n### 動畫不會停\n\n在程式碼當中，因為沒有設定停止條件，所以會無止盡的延續下去。[芝諾悖論](https://www.wikiwand.com/zh-tw/%E8%8A%9D%E8%AF%BA%E6%82%96%E8%AE%BA)\n\n怎樣才算是完成了呢？這邊的終止條件是目前的時間（禎數）等於 t 的時候，就算終止了。\n\n```javascript\nfunction moveScrollY(targetY, speed) {\n  const scrollY = window.scrollY || window.pageYOffset;\n  const t = Math.min(0.5, Math.abs((targetY - scrollY) / speed)); // 將時間限制在 0.5(500ms) 以下\n  let currentTime = 0;\n  \n  function move() {\n    currentTime += 1 / 60;\n    p = currentTime / t;\n    if (p < 1) {\n      scrollTo(0, scrollY + (targetY - scrollY) * p);\n      requestAnimationFrame(move); // 採用 requestAnimationFrame\n    } else {\n      scrollTo(0, targetY);\n      alert('done');\n    }\n  }\n  move();\n}\n```\n\n這邊我們將 `setTimeout` 取代成 `requestAnimationFrame`，requestAnimation 跟 setTimeout 的差別在於使用 `requestAnimationFrame` 時，瀏覽器會幫我們做最佳化，在不必要的時候不會進行重繪，達到節省資源的效果。\n\n目前主流瀏覽器都已經支援了（主流當然不包含 IE8 囉！）\n\n但是，為什麼感覺動畫那麼不自然呢？\n\n有沒有發現，時間與距離是完全呈現線性變化的，這代表我們假設這個物體在所有的時間點，速度都是相同的。真實生活中通常不會有這樣的事情發生，物體一定都是從靜止狀態**逐漸加速**，再從移動的狀態中**逐漸停止**。而上一篇的範例當中，動畫是突然開始，突然停止。在現實生活中，**物體的移動速度並非成線性變化**，這是造成我們動畫看起來不自然的主要原因。\n\n知道了原理之後，就可以馬上來實作了：\n\n- 計算距離\n- 重新計算每一次的位移 = 距離 * 比例係數（easing）\n\n把我們原本的 `function` 改寫成這樣：\n\n```javascript\nfunction moveScrollY(targetY, speed) {\n  const scrollY = window.scrollY || window.pageYOffset;\n  const t = Math.min(0.5, Math.abs((targetY - scrollY) / speed)); // 將時間限制在 0.5(500ms) \n  let currentTime = 0;\n  \n  function move() {\n    currentTime += 1 / 60;\n    var p = currentTime / t;\n    var d = Math.cos(Math.PI * pos) - 1); // 利用 cos 函數，重新計算移動的位置。\n    \n    if (p < 1) {\n      scrollTo(0, scrollY + (targetY - scrollY) * d);\n      requestAnimationFrame(move); // 採用 requestAnimationFrame\n    } else {\n      scrollTo(0, targetY);\n      alert('done');\n    }\n  }\n  move();\n}\n```\n\n這邊我們加上了一個簡單的 cos 函數，重新計算位移的位置，達到 easing 的效果。詳細 easing 效果，可以到 [easing.js](https://github.com/danro/easing-js/blob/master/easing.js) 看看，這裡蒐藏了很多 `ease` 效果。\n\n## 結論\n\n這邊很簡略地用 scroll 的 API 當作範例，介紹了動畫的基礎。當然還動畫的原理跟使用，又是另外一門深奧的學問了。\n\n到目前爲止，我們的 scroll 動畫就算完成了，但因為位移是線性移動，看起來比較不自然一點，下一篇文章，再來介紹 ease 的概念，讓我們 scroller 變得更 smooth。\n\n原本以為篇幅很長，不過基本的動畫原理的確只有這樣而已，加上了 easing 之後，動畫的效果看起來自然很多，當然，你也可以依照自己的經驗調整參數，達到更完美的使用者體驗。\n\n不過，如果可以，盡量不要綁架使用者預設的滾動效果，一來可能會造成效能的問題，二來你綁定的滾動效果如果沒有依照使用者預期反應的話，很容易造成非常差的體驗。\n","slug":"scroll-animation","published":1,"updated":"2016-10-19T06:21:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p8j001cb75tcyjri65l","content":"<p>在 window 物件當中，提供了 <code>scrollTo(x, y)</code> 的方法，我們可以透過 <code>scrollTo</code> 來操作滾動。但， scrollTo 方法是直接讓滾動軸移到指定的位置，並沒有動畫的效果，如果要藉由動畫的幫助達到良好的使用者體驗，我們必須自己設計。</p>\n<h2 id=\"基本動畫知識\"><a href=\"#基本動畫知識\" class=\"headerlink\" title=\"基本動畫知識\"></a>基本動畫知識</h2><p>在開始之前先來讓我們了解一下動畫的基礎吧！</p>\n<p>動畫最基本的要素有這些：</p>\n<ul>\n<li>時間 = 距離（位移）/ 速度</li>\n<li>位移 = 速度 * 時間</li>\n<li>速度 = 距離 / 時間</li>\n</ul>\n<p>有了這些基礎知識就可以來製作簡單的動畫效果了。</p>\n<h3 id=\"第一次嘗試\"><a href=\"#第一次嘗試\" class=\"headerlink\" title=\"第一次嘗試\"></a>第一次嘗試</h3><p>我們要做的事是要讓 scroll 能夠用動畫的方式滑到自己想要的地方。所以，在本例當中，<code>scrollTo(x, y)</code> 將會是我們的<code>位移</code>。速度的話，我們先暫定是 200ms 吧！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moveScrollY</span>(<span class=\"params\">targetY, speed</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> speed = <span class=\"number\">200</span>;</div><div class=\"line\">  <span class=\"keyword\">const</span> scrollY = <span class=\"built_in\">window</span>.scrollY || <span class=\"built_in\">window</span>.pageYOffset;</div><div class=\"line\">  scrollTo(<span class=\"number\">0</span>, scrollY + (targetY - scrollY) * t);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>咦？這個 t 是 <code>undefined</code> 吧？</p>\n<p>在定義 t(time) 之前，我們先來思考 t 應該要是什麼。根據剛剛的公式，時間 = 距離 / 速度，所以在本例當中，t 為 <code>targetY - scrollY / speed</code>。這樣寫的話如果 scrollY 大於 targetY 的話時間就會為負了，所以這邊我們要取絕對值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moveScrollY</span>(<span class=\"params\">targetY, speed</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> scrollY = <span class=\"built_in\">window</span>.scrollY || <span class=\"built_in\">window</span>.pageYOffset;</div><div class=\"line\">  <span class=\"keyword\">const</span> t = <span class=\"built_in\">Math</span>.abs((targetY - scrollY) / speed);</div><div class=\"line\">  <span class=\"keyword\">let</span> currentTime = <span class=\"number\">0</span>;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    currentTime += <span class=\"number\">1</span> / <span class=\"number\">60</span>;</div><div class=\"line\">    p = currentTime / t;</div><div class=\"line\">    scrollTo(<span class=\"number\">0</span>, scrollY + (targetY - scrollY) * p);</div><div class=\"line\">    setTimeout(move, <span class=\"number\">1000</span>/<span class=\"number\">60</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  move();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到目前為止，我們的 scroll 動畫雛形已經出來，不過存在一些問題：</p>\n<ul>\n<li>距離太遠的時候，動畫的時間顯得有點長</li>\n<li>這個動畫不會停</li>\n</ul>\n<p>現在我們來改善一下 scroll 的動畫。</p>\n<h3 id=\"距離太遠\"><a href=\"#距離太遠\" class=\"headerlink\" title=\"距離太遠\"></a>距離太遠</h3><p>顯然如果距離太遠時，動畫完成的時間會變得更長，所以我們需要限制一下 t 的範圍。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moveScrollY</span>(<span class=\"params\">targetY, speed</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> scrollY = <span class=\"built_in\">window</span>.scrollY || <span class=\"built_in\">window</span>.pageYOffset;</div><div class=\"line\">  <span class=\"keyword\">const</span> t = <span class=\"built_in\">Math</span>.min(<span class=\"number\">0.5</span>, <span class=\"built_in\">Math</span>.abs((targetY - scrollY) / speed)); <span class=\"comment\">// 將時間限制在 0.5(500ms) 以下</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這樣子好多了，在距離太遠時，動畫不會顯得太慢。</p>\n<h3 id=\"動畫不會停\"><a href=\"#動畫不會停\" class=\"headerlink\" title=\"動畫不會停\"></a>動畫不會停</h3><p>在程式碼當中，因為沒有設定停止條件，所以會無止盡的延續下去。<a href=\"https://www.wikiwand.com/zh-tw/%E8%8A%9D%E8%AF%BA%E6%82%96%E8%AE%BA\" target=\"_blank\" rel=\"external\">芝諾悖論</a></p>\n<p>怎樣才算是完成了呢？這邊的終止條件是目前的時間（禎數）等於 t 的時候，就算終止了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moveScrollY</span>(<span class=\"params\">targetY, speed</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> scrollY = <span class=\"built_in\">window</span>.scrollY || <span class=\"built_in\">window</span>.pageYOffset;</div><div class=\"line\">  <span class=\"keyword\">const</span> t = <span class=\"built_in\">Math</span>.min(<span class=\"number\">0.5</span>, <span class=\"built_in\">Math</span>.abs((targetY - scrollY) / speed)); <span class=\"comment\">// 將時間限制在 0.5(500ms) 以下</span></div><div class=\"line\">  <span class=\"keyword\">let</span> currentTime = <span class=\"number\">0</span>;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    currentTime += <span class=\"number\">1</span> / <span class=\"number\">60</span>;</div><div class=\"line\">    p = currentTime / t;</div><div class=\"line\">    <span class=\"keyword\">if</span> (p &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">      scrollTo(<span class=\"number\">0</span>, scrollY + (targetY - scrollY) * p);</div><div class=\"line\">      requestAnimationFrame(move); <span class=\"comment\">// 採用 requestAnimationFrame</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      scrollTo(<span class=\"number\">0</span>, targetY);</div><div class=\"line\">      alert(<span class=\"string\">'done'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  move();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這邊我們將 <code>setTimeout</code> 取代成 <code>requestAnimationFrame</code>，requestAnimation 跟 setTimeout 的差別在於使用 <code>requestAnimationFrame</code> 時，瀏覽器會幫我們做最佳化，在不必要的時候不會進行重繪，達到節省資源的效果。</p>\n<p>目前主流瀏覽器都已經支援了（主流當然不包含 IE8 囉！）</p>\n<p>但是，為什麼感覺動畫那麼不自然呢？</p>\n<p>有沒有發現，時間與距離是完全呈現線性變化的，這代表我們假設這個物體在所有的時間點，速度都是相同的。真實生活中通常不會有這樣的事情發生，物體一定都是從靜止狀態<strong>逐漸加速</strong>，再從移動的狀態中<strong>逐漸停止</strong>。而上一篇的範例當中，動畫是突然開始，突然停止。在現實生活中，<strong>物體的移動速度並非成線性變化</strong>，這是造成我們動畫看起來不自然的主要原因。</p>\n<p>知道了原理之後，就可以馬上來實作了：</p>\n<ul>\n<li>計算距離</li>\n<li>重新計算每一次的位移 = 距離 * 比例係數（easing）</li>\n</ul>\n<p>把我們原本的 <code>function</code> 改寫成這樣：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moveScrollY</span>(<span class=\"params\">targetY, speed</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> scrollY = <span class=\"built_in\">window</span>.scrollY || <span class=\"built_in\">window</span>.pageYOffset;</div><div class=\"line\">  <span class=\"keyword\">const</span> t = <span class=\"built_in\">Math</span>.min(<span class=\"number\">0.5</span>, <span class=\"built_in\">Math</span>.abs((targetY - scrollY) / speed)); <span class=\"comment\">// 將時間限制在 0.5(500ms) </span></div><div class=\"line\">  <span class=\"keyword\">let</span> currentTime = <span class=\"number\">0</span>;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    currentTime += <span class=\"number\">1</span> / <span class=\"number\">60</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> p = currentTime / t;</div><div class=\"line\">    <span class=\"keyword\">var</span> d = <span class=\"built_in\">Math</span>.cos(<span class=\"built_in\">Math</span>.PI * pos) - <span class=\"number\">1</span>); <span class=\"comment\">// 利用 cos 函數，重新計算移動的位置。</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (p &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">      scrollTo(<span class=\"number\">0</span>, scrollY + (targetY - scrollY) * d);</div><div class=\"line\">      requestAnimationFrame(move); <span class=\"comment\">// 採用 requestAnimationFrame</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      scrollTo(<span class=\"number\">0</span>, targetY);</div><div class=\"line\">      alert(<span class=\"string\">'done'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  move();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這邊我們加上了一個簡單的 cos 函數，重新計算位移的位置，達到 easing 的效果。詳細 easing 效果，可以到 <a href=\"https://github.com/danro/easing-js/blob/master/easing.js\" target=\"_blank\" rel=\"external\">easing.js</a> 看看，這裡蒐藏了很多 <code>ease</code> 效果。</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>這邊很簡略地用 scroll 的 API 當作範例，介紹了動畫的基礎。當然還動畫的原理跟使用，又是另外一門深奧的學問了。</p>\n<p>到目前爲止，我們的 scroll 動畫就算完成了，但因為位移是線性移動，看起來比較不自然一點，下一篇文章，再來介紹 ease 的概念，讓我們 scroller 變得更 smooth。</p>\n<p>原本以為篇幅很長，不過基本的動畫原理的確只有這樣而已，加上了 easing 之後，動畫的效果看起來自然很多，當然，你也可以依照自己的經驗調整參數，達到更完美的使用者體驗。</p>\n<p>不過，如果可以，盡量不要綁架使用者預設的滾動效果，一來可能會造成效能的問題，二來你綁定的滾動效果如果沒有依照使用者預期反應的話，很容易造成非常差的體驗。</p>\n","excerpt":"","more":"<p>在 window 物件當中，提供了 <code>scrollTo(x, y)</code> 的方法，我們可以透過 <code>scrollTo</code> 來操作滾動。但， scrollTo 方法是直接讓滾動軸移到指定的位置，並沒有動畫的效果，如果要藉由動畫的幫助達到良好的使用者體驗，我們必須自己設計。</p>\n<h2 id=\"基本動畫知識\"><a href=\"#基本動畫知識\" class=\"headerlink\" title=\"基本動畫知識\"></a>基本動畫知識</h2><p>在開始之前先來讓我們了解一下動畫的基礎吧！</p>\n<p>動畫最基本的要素有這些：</p>\n<ul>\n<li>時間 = 距離（位移）/ 速度</li>\n<li>位移 = 速度 * 時間</li>\n<li>速度 = 距離 / 時間</li>\n</ul>\n<p>有了這些基礎知識就可以來製作簡單的動畫效果了。</p>\n<h3 id=\"第一次嘗試\"><a href=\"#第一次嘗試\" class=\"headerlink\" title=\"第一次嘗試\"></a>第一次嘗試</h3><p>我們要做的事是要讓 scroll 能夠用動畫的方式滑到自己想要的地方。所以，在本例當中，<code>scrollTo(x, y)</code> 將會是我們的<code>位移</code>。速度的話，我們先暫定是 200ms 吧！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moveScrollY</span>(<span class=\"params\">targetY, speed</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> speed = <span class=\"number\">200</span>;</div><div class=\"line\">  <span class=\"keyword\">const</span> scrollY = <span class=\"built_in\">window</span>.scrollY || <span class=\"built_in\">window</span>.pageYOffset;</div><div class=\"line\">  scrollTo(<span class=\"number\">0</span>, scrollY + (targetY - scrollY) * t);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>咦？這個 t 是 <code>undefined</code> 吧？</p>\n<p>在定義 t(time) 之前，我們先來思考 t 應該要是什麼。根據剛剛的公式，時間 = 距離 / 速度，所以在本例當中，t 為 <code>targetY - scrollY / speed</code>。這樣寫的話如果 scrollY 大於 targetY 的話時間就會為負了，所以這邊我們要取絕對值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moveScrollY</span>(<span class=\"params\">targetY, speed</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> scrollY = <span class=\"built_in\">window</span>.scrollY || <span class=\"built_in\">window</span>.pageYOffset;</div><div class=\"line\">  <span class=\"keyword\">const</span> t = <span class=\"built_in\">Math</span>.abs((targetY - scrollY) / speed);</div><div class=\"line\">  <span class=\"keyword\">let</span> currentTime = <span class=\"number\">0</span>;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    currentTime += <span class=\"number\">1</span> / <span class=\"number\">60</span>;</div><div class=\"line\">    p = currentTime / t;</div><div class=\"line\">    scrollTo(<span class=\"number\">0</span>, scrollY + (targetY - scrollY) * p);</div><div class=\"line\">    setTimeout(move, <span class=\"number\">1000</span>/<span class=\"number\">60</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  move();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到目前為止，我們的 scroll 動畫雛形已經出來，不過存在一些問題：</p>\n<ul>\n<li>距離太遠的時候，動畫的時間顯得有點長</li>\n<li>這個動畫不會停</li>\n</ul>\n<p>現在我們來改善一下 scroll 的動畫。</p>\n<h3 id=\"距離太遠\"><a href=\"#距離太遠\" class=\"headerlink\" title=\"距離太遠\"></a>距離太遠</h3><p>顯然如果距離太遠時，動畫完成的時間會變得更長，所以我們需要限制一下 t 的範圍。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moveScrollY</span>(<span class=\"params\">targetY, speed</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> scrollY = <span class=\"built_in\">window</span>.scrollY || <span class=\"built_in\">window</span>.pageYOffset;</div><div class=\"line\">  <span class=\"keyword\">const</span> t = <span class=\"built_in\">Math</span>.min(<span class=\"number\">0.5</span>, <span class=\"built_in\">Math</span>.abs((targetY - scrollY) / speed)); <span class=\"comment\">// 將時間限制在 0.5(500ms) 以下</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這樣子好多了，在距離太遠時，動畫不會顯得太慢。</p>\n<h3 id=\"動畫不會停\"><a href=\"#動畫不會停\" class=\"headerlink\" title=\"動畫不會停\"></a>動畫不會停</h3><p>在程式碼當中，因為沒有設定停止條件，所以會無止盡的延續下去。<a href=\"https://www.wikiwand.com/zh-tw/%E8%8A%9D%E8%AF%BA%E6%82%96%E8%AE%BA\">芝諾悖論</a></p>\n<p>怎樣才算是完成了呢？這邊的終止條件是目前的時間（禎數）等於 t 的時候，就算終止了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moveScrollY</span>(<span class=\"params\">targetY, speed</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> scrollY = <span class=\"built_in\">window</span>.scrollY || <span class=\"built_in\">window</span>.pageYOffset;</div><div class=\"line\">  <span class=\"keyword\">const</span> t = <span class=\"built_in\">Math</span>.min(<span class=\"number\">0.5</span>, <span class=\"built_in\">Math</span>.abs((targetY - scrollY) / speed)); <span class=\"comment\">// 將時間限制在 0.5(500ms) 以下</span></div><div class=\"line\">  <span class=\"keyword\">let</span> currentTime = <span class=\"number\">0</span>;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    currentTime += <span class=\"number\">1</span> / <span class=\"number\">60</span>;</div><div class=\"line\">    p = currentTime / t;</div><div class=\"line\">    <span class=\"keyword\">if</span> (p &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">      scrollTo(<span class=\"number\">0</span>, scrollY + (targetY - scrollY) * p);</div><div class=\"line\">      requestAnimationFrame(move); <span class=\"comment\">// 採用 requestAnimationFrame</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      scrollTo(<span class=\"number\">0</span>, targetY);</div><div class=\"line\">      alert(<span class=\"string\">'done'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  move();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這邊我們將 <code>setTimeout</code> 取代成 <code>requestAnimationFrame</code>，requestAnimation 跟 setTimeout 的差別在於使用 <code>requestAnimationFrame</code> 時，瀏覽器會幫我們做最佳化，在不必要的時候不會進行重繪，達到節省資源的效果。</p>\n<p>目前主流瀏覽器都已經支援了（主流當然不包含 IE8 囉！）</p>\n<p>但是，為什麼感覺動畫那麼不自然呢？</p>\n<p>有沒有發現，時間與距離是完全呈現線性變化的，這代表我們假設這個物體在所有的時間點，速度都是相同的。真實生活中通常不會有這樣的事情發生，物體一定都是從靜止狀態<strong>逐漸加速</strong>，再從移動的狀態中<strong>逐漸停止</strong>。而上一篇的範例當中，動畫是突然開始，突然停止。在現實生活中，<strong>物體的移動速度並非成線性變化</strong>，這是造成我們動畫看起來不自然的主要原因。</p>\n<p>知道了原理之後，就可以馬上來實作了：</p>\n<ul>\n<li>計算距離</li>\n<li>重新計算每一次的位移 = 距離 * 比例係數（easing）</li>\n</ul>\n<p>把我們原本的 <code>function</code> 改寫成這樣：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moveScrollY</span>(<span class=\"params\">targetY, speed</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> scrollY = <span class=\"built_in\">window</span>.scrollY || <span class=\"built_in\">window</span>.pageYOffset;</div><div class=\"line\">  <span class=\"keyword\">const</span> t = <span class=\"built_in\">Math</span>.min(<span class=\"number\">0.5</span>, <span class=\"built_in\">Math</span>.abs((targetY - scrollY) / speed)); <span class=\"comment\">// 將時間限制在 0.5(500ms) </span></div><div class=\"line\">  <span class=\"keyword\">let</span> currentTime = <span class=\"number\">0</span>;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    currentTime += <span class=\"number\">1</span> / <span class=\"number\">60</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> p = currentTime / t;</div><div class=\"line\">    <span class=\"keyword\">var</span> d = <span class=\"built_in\">Math</span>.cos(<span class=\"built_in\">Math</span>.PI * pos) - <span class=\"number\">1</span>); <span class=\"comment\">// 利用 cos 函數，重新計算移動的位置。</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (p &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">      scrollTo(<span class=\"number\">0</span>, scrollY + (targetY - scrollY) * d);</div><div class=\"line\">      requestAnimationFrame(move); <span class=\"comment\">// 採用 requestAnimationFrame</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      scrollTo(<span class=\"number\">0</span>, targetY);</div><div class=\"line\">      alert(<span class=\"string\">'done'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  move();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這邊我們加上了一個簡單的 cos 函數，重新計算位移的位置，達到 easing 的效果。詳細 easing 效果，可以到 <a href=\"https://github.com/danro/easing-js/blob/master/easing.js\">easing.js</a> 看看，這裡蒐藏了很多 <code>ease</code> 效果。</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>這邊很簡略地用 scroll 的 API 當作範例，介紹了動畫的基礎。當然還動畫的原理跟使用，又是另外一門深奧的學問了。</p>\n<p>到目前爲止，我們的 scroll 動畫就算完成了，但因為位移是線性移動，看起來比較不自然一點，下一篇文章，再來介紹 ease 的概念，讓我們 scroller 變得更 smooth。</p>\n<p>原本以為篇幅很長，不過基本的動畫原理的確只有這樣而已，加上了 easing 之後，動畫的效果看起來自然很多，當然，你也可以依照自己的經驗調整參數，達到更完美的使用者體驗。</p>\n<p>不過，如果可以，盡量不要綁架使用者預設的滾動效果，一來可能會造成效能的問題，二來你綁定的滾動效果如果沒有依照使用者預期反應的話，很容易造成非常差的體驗。</p>\n"},{"title":"IT 鐵人幫完賽心得","date":"2017-02-28T15:44:42.000Z","_content":"\n[連結](http://ithelp.ithome.com.tw/users/20103565/ironman/1188)\n\n今天是鐵人賽的最後一天，感覺自己最後結尾的部分收得不是很好，也有很多部分都因為時間上的關係沒有很完整地\n介紹完。\n\n挑戰 30 天連續發文的確是一件非常不容易的事情，自己也更了解到如果還有類似的機會，一定要事先做好準備才行，才不會突發狀況發生時，急就章地寫完文章結尾。\n\n同時，這次挑戰的主題是以前從來沒有碰過的 webGL 及 3D 圖學。原本以為前 10 天的學習能夠掌握基本的知識，不過實際上要了解 webGL shader 的應用跟撰寫、活用 three.js API 等等，都需要相對應的圖形理論做補助，這樣框架用起來才能得心應手。\n\n不過 10 天的學習完全不夠用，光是要了解 GSGL 的撰寫就要不少時間了，更別說應用在實際的計算上。儘管已經有框架幫我們處理掉底層的操作，但如果需要更進階、或是更強大的活用，就必須更了解背後的操作。\n\naframe 的部分，我會再找時間陸續補齊（如果有時間的話QQ）。未來也希望自己能夠繼續往 3D 之路邁進，讓前端畫面的展現更加豐富。\n\n這絕對需要時間的累積跟練習，也比以往的前端開發更有挑戰性，不過這 30 天的確學習到了很多過去完全不懂的知識。過去望之生畏的 shader ，現在也能夠寫、也能夠看懂；three.js 的 API 有基本的認知和了解；同時也看了一下 webVR 的發展跟認識 aframe 這個框架。\n\n這 30 天可以堪稱最充實的一個月了（笑）。我知道本系列文章中仍然有許多不完整的部分，但希望各位讀者或多或少都能從中獲得一些知識！\n\n## 後記\n\n得到[佳作](http://ithelp.ithome.com.tw/announces/9)。算是自己 2016 的總結吧！有太多事情沒有好好地記錄下來。\n\n看到報名通知時其實掙扎蠻久的，因爲前端可想而知，今年寫 `react` `redux` 的人一定很多，既然如此，何不嘗試一下自己想碰很久，卻一直沒有碰過的 webGL？\n\n一直以來都對畫面上的互動很有興趣，但是對一位工程師來說，處理動畫之類的邏輯是很煩人又枯燥的事。這一個月雖然學習的東西跟網站開發天差地遠，甚至很少能夠應用在實際的開發當中（壓榨時程都不夠了，誰還在管特效？）。不過能夠學習這些知識，拓寬自己的視野，又何嘗不是件好事呢？\n\n越來越多公司對前端的要求，都是在數據視覺化上。以前被視為無聊、枯燥，在大數據的時代下開始被重視，對這個方向的要求就是 canvas 以及 webGL 的操作能力，不過現在也已經有很多框架幫你處理底層的 API 了。但身為前端，還是要有對底層的基本認識。不然總有一天抽象化滲透還是會找上門。\n","source":"_posts/webgl-it.md","raw":"---\ntitle: IT 鐵人幫完賽心得\ncategories: 前端\ndate: 2017-02-28 23:44:42\ntags:\n  - webGL\n  - IT 鐵人幫\n---\n\n[連結](http://ithelp.ithome.com.tw/users/20103565/ironman/1188)\n\n今天是鐵人賽的最後一天，感覺自己最後結尾的部分收得不是很好，也有很多部分都因為時間上的關係沒有很完整地\n介紹完。\n\n挑戰 30 天連續發文的確是一件非常不容易的事情，自己也更了解到如果還有類似的機會，一定要事先做好準備才行，才不會突發狀況發生時，急就章地寫完文章結尾。\n\n同時，這次挑戰的主題是以前從來沒有碰過的 webGL 及 3D 圖學。原本以為前 10 天的學習能夠掌握基本的知識，不過實際上要了解 webGL shader 的應用跟撰寫、活用 three.js API 等等，都需要相對應的圖形理論做補助，這樣框架用起來才能得心應手。\n\n不過 10 天的學習完全不夠用，光是要了解 GSGL 的撰寫就要不少時間了，更別說應用在實際的計算上。儘管已經有框架幫我們處理掉底層的操作，但如果需要更進階、或是更強大的活用，就必須更了解背後的操作。\n\naframe 的部分，我會再找時間陸續補齊（如果有時間的話QQ）。未來也希望自己能夠繼續往 3D 之路邁進，讓前端畫面的展現更加豐富。\n\n這絕對需要時間的累積跟練習，也比以往的前端開發更有挑戰性，不過這 30 天的確學習到了很多過去完全不懂的知識。過去望之生畏的 shader ，現在也能夠寫、也能夠看懂；three.js 的 API 有基本的認知和了解；同時也看了一下 webVR 的發展跟認識 aframe 這個框架。\n\n這 30 天可以堪稱最充實的一個月了（笑）。我知道本系列文章中仍然有許多不完整的部分，但希望各位讀者或多或少都能從中獲得一些知識！\n\n## 後記\n\n得到[佳作](http://ithelp.ithome.com.tw/announces/9)。算是自己 2016 的總結吧！有太多事情沒有好好地記錄下來。\n\n看到報名通知時其實掙扎蠻久的，因爲前端可想而知，今年寫 `react` `redux` 的人一定很多，既然如此，何不嘗試一下自己想碰很久，卻一直沒有碰過的 webGL？\n\n一直以來都對畫面上的互動很有興趣，但是對一位工程師來說，處理動畫之類的邏輯是很煩人又枯燥的事。這一個月雖然學習的東西跟網站開發天差地遠，甚至很少能夠應用在實際的開發當中（壓榨時程都不夠了，誰還在管特效？）。不過能夠學習這些知識，拓寬自己的視野，又何嘗不是件好事呢？\n\n越來越多公司對前端的要求，都是在數據視覺化上。以前被視為無聊、枯燥，在大數據的時代下開始被重視，對這個方向的要求就是 canvas 以及 webGL 的操作能力，不過現在也已經有很多框架幫你處理底層的 API 了。但身為前端，還是要有對底層的基本認識。不然總有一天抽象化滲透還是會找上門。\n","slug":"webgl-it","published":1,"updated":"2017-02-28T16:28:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p8n001fb75t2yrlte1z","content":"<p><a href=\"http://ithelp.ithome.com.tw/users/20103565/ironman/1188\" target=\"_blank\" rel=\"external\">連結</a></p>\n<p>今天是鐵人賽的最後一天，感覺自己最後結尾的部分收得不是很好，也有很多部分都因為時間上的關係沒有很完整地<br>介紹完。</p>\n<p>挑戰 30 天連續發文的確是一件非常不容易的事情，自己也更了解到如果還有類似的機會，一定要事先做好準備才行，才不會突發狀況發生時，急就章地寫完文章結尾。</p>\n<p>同時，這次挑戰的主題是以前從來沒有碰過的 webGL 及 3D 圖學。原本以為前 10 天的學習能夠掌握基本的知識，不過實際上要了解 webGL shader 的應用跟撰寫、活用 three.js API 等等，都需要相對應的圖形理論做補助，這樣框架用起來才能得心應手。</p>\n<p>不過 10 天的學習完全不夠用，光是要了解 GSGL 的撰寫就要不少時間了，更別說應用在實際的計算上。儘管已經有框架幫我們處理掉底層的操作，但如果需要更進階、或是更強大的活用，就必須更了解背後的操作。</p>\n<p>aframe 的部分，我會再找時間陸續補齊（如果有時間的話QQ）。未來也希望自己能夠繼續往 3D 之路邁進，讓前端畫面的展現更加豐富。</p>\n<p>這絕對需要時間的累積跟練習，也比以往的前端開發更有挑戰性，不過這 30 天的確學習到了很多過去完全不懂的知識。過去望之生畏的 shader ，現在也能夠寫、也能夠看懂；three.js 的 API 有基本的認知和了解；同時也看了一下 webVR 的發展跟認識 aframe 這個框架。</p>\n<p>這 30 天可以堪稱最充實的一個月了（笑）。我知道本系列文章中仍然有許多不完整的部分，但希望各位讀者或多或少都能從中獲得一些知識！</p>\n<h2 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h2><p>得到<a href=\"http://ithelp.ithome.com.tw/announces/9\" target=\"_blank\" rel=\"external\">佳作</a>。算是自己 2016 的總結吧！有太多事情沒有好好地記錄下來。</p>\n<p>看到報名通知時其實掙扎蠻久的，因爲前端可想而知，今年寫 <code>react</code> <code>redux</code> 的人一定很多，既然如此，何不嘗試一下自己想碰很久，卻一直沒有碰過的 webGL？</p>\n<p>一直以來都對畫面上的互動很有興趣，但是對一位工程師來說，處理動畫之類的邏輯是很煩人又枯燥的事。這一個月雖然學習的東西跟網站開發天差地遠，甚至很少能夠應用在實際的開發當中（壓榨時程都不夠了，誰還在管特效？）。不過能夠學習這些知識，拓寬自己的視野，又何嘗不是件好事呢？</p>\n<p>越來越多公司對前端的要求，都是在數據視覺化上。以前被視為無聊、枯燥，在大數據的時代下開始被重視，對這個方向的要求就是 canvas 以及 webGL 的操作能力，不過現在也已經有很多框架幫你處理底層的 API 了。但身為前端，還是要有對底層的基本認識。不然總有一天抽象化滲透還是會找上門。</p>\n","excerpt":"","more":"<p><a href=\"http://ithelp.ithome.com.tw/users/20103565/ironman/1188\">連結</a></p>\n<p>今天是鐵人賽的最後一天，感覺自己最後結尾的部分收得不是很好，也有很多部分都因為時間上的關係沒有很完整地<br>介紹完。</p>\n<p>挑戰 30 天連續發文的確是一件非常不容易的事情，自己也更了解到如果還有類似的機會，一定要事先做好準備才行，才不會突發狀況發生時，急就章地寫完文章結尾。</p>\n<p>同時，這次挑戰的主題是以前從來沒有碰過的 webGL 及 3D 圖學。原本以為前 10 天的學習能夠掌握基本的知識，不過實際上要了解 webGL shader 的應用跟撰寫、活用 three.js API 等等，都需要相對應的圖形理論做補助，這樣框架用起來才能得心應手。</p>\n<p>不過 10 天的學習完全不夠用，光是要了解 GSGL 的撰寫就要不少時間了，更別說應用在實際的計算上。儘管已經有框架幫我們處理掉底層的操作，但如果需要更進階、或是更強大的活用，就必須更了解背後的操作。</p>\n<p>aframe 的部分，我會再找時間陸續補齊（如果有時間的話QQ）。未來也希望自己能夠繼續往 3D 之路邁進，讓前端畫面的展現更加豐富。</p>\n<p>這絕對需要時間的累積跟練習，也比以往的前端開發更有挑戰性，不過這 30 天的確學習到了很多過去完全不懂的知識。過去望之生畏的 shader ，現在也能夠寫、也能夠看懂；three.js 的 API 有基本的認知和了解；同時也看了一下 webVR 的發展跟認識 aframe 這個框架。</p>\n<p>這 30 天可以堪稱最充實的一個月了（笑）。我知道本系列文章中仍然有許多不完整的部分，但希望各位讀者或多或少都能從中獲得一些知識！</p>\n<h2 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h2><p>得到<a href=\"http://ithelp.ithome.com.tw/announces/9\">佳作</a>。算是自己 2016 的總結吧！有太多事情沒有好好地記錄下來。</p>\n<p>看到報名通知時其實掙扎蠻久的，因爲前端可想而知，今年寫 <code>react</code> <code>redux</code> 的人一定很多，既然如此，何不嘗試一下自己想碰很久，卻一直沒有碰過的 webGL？</p>\n<p>一直以來都對畫面上的互動很有興趣，但是對一位工程師來說，處理動畫之類的邏輯是很煩人又枯燥的事。這一個月雖然學習的東西跟網站開發天差地遠，甚至很少能夠應用在實際的開發當中（壓榨時程都不夠了，誰還在管特效？）。不過能夠學習這些知識，拓寬自己的視野，又何嘗不是件好事呢？</p>\n<p>越來越多公司對前端的要求，都是在數據視覺化上。以前被視為無聊、枯燥，在大數據的時代下開始被重視，對這個方向的要求就是 canvas 以及 webGL 的操作能力，不過現在也已經有很多框架幫你處理底層的 API 了。但身為前端，還是要有對底層的基本認識。不然總有一天抽象化滲透還是會找上門。</p>\n"},{"title":"weekly-6/6","date":"2016-06-06T13:52:39.000Z","_content":"\n\n這次介紹一下我建置 style guide 的過程以及心得。\n\n## 工作內容\n\n1. styleguide 建置\n2. 新的 `ws_job_index` search bar\n\n## Styleguide 真的很重要\n\n在建置的過程中，我們常常會忽略，「如果是別人，該如何快速懂得文件的內容」。\n所以在上以前的 view 當中，我其實都不太清楚。「啊！原來這個已經寫成 helper 了」「啊！這個已經寫成 class」的情況屢見不鮮，所以我在上新的版面過程中，都會盡量地以「之後的自己或別人也能看得懂」為原則。同時也會順手把以前的 code 跟文件統一整理。\n\n最陽春的 styleguide 只花了兩天就有了雛形了，這證明文件的建置並不是那麼困難。但是更重要的是 consistency，也就是持續更新這件事。\n\n而且透過寫文件的方式，其實 code 的概念很容易就讓別人懂，雖然無可避免地要花一些時間，但我認為這是蠻值得的投資。所以讓我們一起來 document driven 吧！\n\n接下來會介紹我在建置時發現的一些不錯的概念。\n\n## Helper 真的很好用\n\n使用 helper 的方式，我們不僅可以快速套用 `rails` `ruby` 內建的方法，還可以讓 view 裡面的 HTML 碼大量減少，增加易讀性跟擴展性。\n\n```html\n<%= ui_component(\"sudo_tags\", {\n\t:tags => \"blabla\"\n}) %>\n```\n\n這個 `ui_component` 的方法，其實是對 render 的進一步包裝：\n\n```ruby\ndef ui_component url, options = nil\n\trender \"components/#{url}\", :locals => options\nend\n```\n\n雖然是簡單的方法包裝，但其實大量提升了可讀性，我們也可以拆分元件，統一放入 `component` 裡面管理。如果元件的構成很簡單，甚至還可利用 `content_tag` 來包裝。\n\n```ruby\ndef\tbutton_generator content, options = nil\n\tbtn_class = \"btn \"\n\toptions.merge(:class => btn_class)\n  content_tag :button, content, options\nend\n```\n\n希望以後真的可以達到高度組件化，這樣就算是科科，也能簡單引用某個元件。\n\n## 關於 layout 的新想法：\n\n我實在非常不喜歡 grid，但實務上無可避免地還是會使用到。\n那麼，有沒有比較折衷的辦法來維持可讀性，也就是所謂的 `layout` 與語意分離。\n\n還真的有，而且這個方法實作起來並不難。答案是善用 css 的 attribute selector\n\n```html\n<div layout=\"col-3\"></div>\n```\n\n```css\n[layout^=\"col-*\"] {\n  // your gird style\n}\n```\n\n雖然看起來只是將 layout 拆至一個 attribute 裡面，但這樣至少不會看見 `col-3` 等 grid 的 rule 出現在 class 裡面。對我來說可讀性提高很多，但最理想的方式還是盡可能寫進 class\t裡面吧！\n\n","source":"_posts/weekly-6-6.md","raw":"---\ntitle: weekly-6/6\ncategories: 前端週刊\ndate: 2016-06-06 21:52:39\ntags:\n---\n\n\n這次介紹一下我建置 style guide 的過程以及心得。\n\n## 工作內容\n\n1. styleguide 建置\n2. 新的 `ws_job_index` search bar\n\n## Styleguide 真的很重要\n\n在建置的過程中，我們常常會忽略，「如果是別人，該如何快速懂得文件的內容」。\n所以在上以前的 view 當中，我其實都不太清楚。「啊！原來這個已經寫成 helper 了」「啊！這個已經寫成 class」的情況屢見不鮮，所以我在上新的版面過程中，都會盡量地以「之後的自己或別人也能看得懂」為原則。同時也會順手把以前的 code 跟文件統一整理。\n\n最陽春的 styleguide 只花了兩天就有了雛形了，這證明文件的建置並不是那麼困難。但是更重要的是 consistency，也就是持續更新這件事。\n\n而且透過寫文件的方式，其實 code 的概念很容易就讓別人懂，雖然無可避免地要花一些時間，但我認為這是蠻值得的投資。所以讓我們一起來 document driven 吧！\n\n接下來會介紹我在建置時發現的一些不錯的概念。\n\n## Helper 真的很好用\n\n使用 helper 的方式，我們不僅可以快速套用 `rails` `ruby` 內建的方法，還可以讓 view 裡面的 HTML 碼大量減少，增加易讀性跟擴展性。\n\n```html\n<%= ui_component(\"sudo_tags\", {\n\t:tags => \"blabla\"\n}) %>\n```\n\n這個 `ui_component` 的方法，其實是對 render 的進一步包裝：\n\n```ruby\ndef ui_component url, options = nil\n\trender \"components/#{url}\", :locals => options\nend\n```\n\n雖然是簡單的方法包裝，但其實大量提升了可讀性，我們也可以拆分元件，統一放入 `component` 裡面管理。如果元件的構成很簡單，甚至還可利用 `content_tag` 來包裝。\n\n```ruby\ndef\tbutton_generator content, options = nil\n\tbtn_class = \"btn \"\n\toptions.merge(:class => btn_class)\n  content_tag :button, content, options\nend\n```\n\n希望以後真的可以達到高度組件化，這樣就算是科科，也能簡單引用某個元件。\n\n## 關於 layout 的新想法：\n\n我實在非常不喜歡 grid，但實務上無可避免地還是會使用到。\n那麼，有沒有比較折衷的辦法來維持可讀性，也就是所謂的 `layout` 與語意分離。\n\n還真的有，而且這個方法實作起來並不難。答案是善用 css 的 attribute selector\n\n```html\n<div layout=\"col-3\"></div>\n```\n\n```css\n[layout^=\"col-*\"] {\n  // your gird style\n}\n```\n\n雖然看起來只是將 layout 拆至一個 attribute 裡面，但這樣至少不會看見 `col-3` 等 grid 的 rule 出現在 class 裡面。對我來說可讀性提高很多，但最理想的方式還是盡可能寫進 class\t裡面吧！\n\n","slug":"weekly-6-6","published":1,"updated":"2016-11-14T11:45:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p8p001hb75t35hg4pcw","content":"<p>這次介紹一下我建置 style guide 的過程以及心得。</p>\n<h2 id=\"工作內容\"><a href=\"#工作內容\" class=\"headerlink\" title=\"工作內容\"></a>工作內容</h2><ol>\n<li>styleguide 建置</li>\n<li>新的 <code>ws_job_index</code> search bar</li>\n</ol>\n<h2 id=\"Styleguide-真的很重要\"><a href=\"#Styleguide-真的很重要\" class=\"headerlink\" title=\"Styleguide 真的很重要\"></a>Styleguide 真的很重要</h2><p>在建置的過程中，我們常常會忽略，「如果是別人，該如何快速懂得文件的內容」。<br>所以在上以前的 view 當中，我其實都不太清楚。「啊！原來這個已經寫成 helper 了」「啊！這個已經寫成 class」的情況屢見不鮮，所以我在上新的版面過程中，都會盡量地以「之後的自己或別人也能看得懂」為原則。同時也會順手把以前的 code 跟文件統一整理。</p>\n<p>最陽春的 styleguide 只花了兩天就有了雛形了，這證明文件的建置並不是那麼困難。但是更重要的是 consistency，也就是持續更新這件事。</p>\n<p>而且透過寫文件的方式，其實 code 的概念很容易就讓別人懂，雖然無可避免地要花一些時間，但我認為這是蠻值得的投資。所以讓我們一起來 document driven 吧！</p>\n<p>接下來會介紹我在建置時發現的一些不錯的概念。</p>\n<h2 id=\"Helper-真的很好用\"><a href=\"#Helper-真的很好用\" class=\"headerlink\" title=\"Helper 真的很好用\"></a>Helper 真的很好用</h2><p>使用 helper 的方式，我們不僅可以快速套用 <code>rails</code> <code>ruby</code> 內建的方法，還可以讓 view 裡面的 HTML 碼大量減少，增加易讀性跟擴展性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">ui_component</span>(\"<span class=\"attr\">sudo_tags</span>\", &#123;</span></div><div class=\"line\">\t<span class=\"attr\">:tags</span> =&gt; \"blabla\"</div><div class=\"line\">&#125;) %&gt;</div></pre></td></tr></table></figure>\n<p>這個 <code>ui_component</code> 的方法，其實是對 render 的進一步包裝：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ui_component</span> <span class=\"title\">url</span>, <span class=\"title\">options</span> = <span class=\"title\">nil</span></span></div><div class=\"line\">\trender <span class=\"string\">\"components/<span class=\"subst\">#&#123;url&#125;</span>\"</span>, <span class=\"symbol\">:locals</span> =&gt; options</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>雖然是簡單的方法包裝，但其實大量提升了可讀性，我們也可以拆分元件，統一放入 <code>component</code> 裡面管理。如果元件的構成很簡單，甚至還可利用 <code>content_tag</code> 來包裝。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span>\t<span class=\"title\">button_generator</span> <span class=\"title\">content</span>, <span class=\"title\">options</span> = <span class=\"title\">nil</span></span></div><div class=\"line\">\tbtn_class = <span class=\"string\">\"btn \"</span></div><div class=\"line\">\toptions.merge(<span class=\"symbol\">:class</span> =&gt; btn_class)</div><div class=\"line\">  content_tag <span class=\"symbol\">:button</span>, content, options</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>希望以後真的可以達到高度組件化，這樣就算是科科，也能簡單引用某個元件。</p>\n<h2 id=\"關於-layout-的新想法：\"><a href=\"#關於-layout-的新想法：\" class=\"headerlink\" title=\"關於 layout 的新想法：\"></a>關於 layout 的新想法：</h2><p>我實在非常不喜歡 grid，但實務上無可避免地還是會使用到。<br>那麼，有沒有比較折衷的辦法來維持可讀性，也就是所謂的 <code>layout</code> 與語意分離。</p>\n<p>還真的有，而且這個方法實作起來並不難。答案是善用 css 的 attribute selector</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">layout</span>=<span class=\"string\">\"col-3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[layout^=\"col-*\"] &#123;</div><div class=\"line\">  // your gird style</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>雖然看起來只是將 layout 拆至一個 attribute 裡面，但這樣至少不會看見 <code>col-3</code> 等 grid 的 rule 出現在 class 裡面。對我來說可讀性提高很多，但最理想的方式還是盡可能寫進 class    裡面吧！</p>\n","excerpt":"","more":"<p>這次介紹一下我建置 style guide 的過程以及心得。</p>\n<h2 id=\"工作內容\"><a href=\"#工作內容\" class=\"headerlink\" title=\"工作內容\"></a>工作內容</h2><ol>\n<li>styleguide 建置</li>\n<li>新的 <code>ws_job_index</code> search bar</li>\n</ol>\n<h2 id=\"Styleguide-真的很重要\"><a href=\"#Styleguide-真的很重要\" class=\"headerlink\" title=\"Styleguide 真的很重要\"></a>Styleguide 真的很重要</h2><p>在建置的過程中，我們常常會忽略，「如果是別人，該如何快速懂得文件的內容」。<br>所以在上以前的 view 當中，我其實都不太清楚。「啊！原來這個已經寫成 helper 了」「啊！這個已經寫成 class」的情況屢見不鮮，所以我在上新的版面過程中，都會盡量地以「之後的自己或別人也能看得懂」為原則。同時也會順手把以前的 code 跟文件統一整理。</p>\n<p>最陽春的 styleguide 只花了兩天就有了雛形了，這證明文件的建置並不是那麼困難。但是更重要的是 consistency，也就是持續更新這件事。</p>\n<p>而且透過寫文件的方式，其實 code 的概念很容易就讓別人懂，雖然無可避免地要花一些時間，但我認為這是蠻值得的投資。所以讓我們一起來 document driven 吧！</p>\n<p>接下來會介紹我在建置時發現的一些不錯的概念。</p>\n<h2 id=\"Helper-真的很好用\"><a href=\"#Helper-真的很好用\" class=\"headerlink\" title=\"Helper 真的很好用\"></a>Helper 真的很好用</h2><p>使用 helper 的方式，我們不僅可以快速套用 <code>rails</code> <code>ruby</code> 內建的方法，還可以讓 view 裡面的 HTML 碼大量減少，增加易讀性跟擴展性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">ui_component</span>(\"<span class=\"attr\">sudo_tags</span>\", &#123;</div><div class=\"line\">\t<span class=\"attr\">:tags</span> =&gt;</span> \"blabla\"</div><div class=\"line\">&#125;) %&gt;</div></pre></td></tr></table></figure>\n<p>這個 <code>ui_component</code> 的方法，其實是對 render 的進一步包裝：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ui_component</span> <span class=\"title\">url</span>, <span class=\"title\">options</span> = <span class=\"title\">nil</span></span></div><div class=\"line\">\trender <span class=\"string\">\"components/<span class=\"subst\">#&#123;url&#125;</span>\"</span>, <span class=\"symbol\">:locals</span> =&gt; options</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>雖然是簡單的方法包裝，但其實大量提升了可讀性，我們也可以拆分元件，統一放入 <code>component</code> 裡面管理。如果元件的構成很簡單，甚至還可利用 <code>content_tag</code> 來包裝。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span>\t<span class=\"title\">button_generator</span> <span class=\"title\">content</span>, <span class=\"title\">options</span> = <span class=\"title\">nil</span></span></div><div class=\"line\">\tbtn_class = <span class=\"string\">\"btn \"</span></div><div class=\"line\">\toptions.merge(<span class=\"symbol\">:class</span> =&gt; btn_class)</div><div class=\"line\">  content_tag <span class=\"symbol\">:button</span>, content, options</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>希望以後真的可以達到高度組件化，這樣就算是科科，也能簡單引用某個元件。</p>\n<h2 id=\"關於-layout-的新想法：\"><a href=\"#關於-layout-的新想法：\" class=\"headerlink\" title=\"關於 layout 的新想法：\"></a>關於 layout 的新想法：</h2><p>我實在非常不喜歡 grid，但實務上無可避免地還是會使用到。<br>那麼，有沒有比較折衷的辦法來維持可讀性，也就是所謂的 <code>layout</code> 與語意分離。</p>\n<p>還真的有，而且這個方法實作起來並不難。答案是善用 css 的 attribute selector</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">layout</span>=<span class=\"string\">\"col-3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[layout^=\"col-*\"] &#123;</div><div class=\"line\">  // your gird style</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>雖然看起來只是將 layout 拆至一個 attribute 裡面，但這樣至少不會看見 <code>col-3</code> 等 grid 的 rule 出現在 class 裡面。對我來說可讀性提高很多，但最理想的方式還是盡可能寫進 class    裡面吧！</p>\n"},{"title":"weekly-thought-5/29","date":"2016-05-29T13:09:36.000Z","_content":"\n\n### 發現的新東西\n\n## flow\n\n第一次聽到，是從 henry 的口中。第二次看到，是從看了 draftjs 的 source code。\n\n當前端的 code 無可避免地增肥之後（尤其是 js 跟 css)，我們也應該尋找更有效的代碼管理方式。像是逐漸引入的 eslinter 跟 stylelint 都是。\n\n而 flow 給我的感覺有點像 Typescript，但優點是你可以完全用寫 js 的方式，也不需要改變副檔名（typescript 要寫成 a.ts)。不過還是會害怕抽象化滲透，所以一樣會先觀望一段陣子再套用到主站上吧。\n\n## draft\n\n假日閒來無事、天氣燥熱，在咖啡廳喝咖啡、聽音樂、寫 code 也蠻愜意的。所以就趁著假日的時光研究了一下科科所說的[draft-js](https://facebook.github.io/draft-js/)\n\n所有的骯髒事（selection 兼容、檔案拖曳、編輯器內的樣式）draft-js 幾乎都幫你搞定了。當然因為這個 open source 還非常新（react conf 的時候才推出來），有時候噴錯也不知道從哪邊找起。但這的確是值得令人關注的 editor 解決方案。\n\n### 目前編輯器會遇到的問題\n\n#### 1. input 跟 textarea 是有極限的\n\n- 他們只能渲染 plain text，如果想要對文字做加粗、斜體、標記等動作，需要花很大的功實作\n- 當你的文字輸入到下一行時，textarea 高度不足不會自動幫你移位。你可能需要計算下一行文字的位置，然後做相關的操作。這也很費工，而且對使用者的體驗非常糟糕。(備註：現在已經有了新的解法 []())\n\n#### 2. [contenteditable is terrible](https://medium.engineering/why-contenteditable-is-terrible-122d8a40e480#.7cqtr19fk)\n\n因為是將文字內容放在非 input 的 tag 裡面，每種瀏覽器的實作都不太一樣，也很容易就會有意想不到的問題發生。不過 contenteditable 的好處是他活得夠久，瀏覽器也都幾乎實作了，所以反而可以利用這樣的特性來解決當前編輯器遇到的問題。\n\n\ndraft 的概念其實也跟 react 很像，將 editor 跟 content 的狀態存放起來，而非依賴在 DOM 上面。而且他們的狀態不是用純 string 去儲存，而是用 Record(他們實作的資料結構)來代表每個節點。\n\n而 API 文件也寫得挺清楚的，同時也完全實作 immutable 的概念。每次對編輯的內容做操作，就是完全更新狀態。剛開始會覺得很麻煩，我明明只是要一段 text，還要呼叫 getCurrentContent() 回傳的竟然還是一個 `Map` 在從裡面呼叫 getText()；或者我想要更動狀態時，還要做類似這樣的操作：`RichUtils.toggleInlineStyle(curState,'BOLD')`，然後再把新的 state 傳進去。看似麻煩，不過這樣的方式到後期的開發顯然是有好處的。\n容易測試，易讀性高，容易修改、除錯。\n\nfacebook 也提供了蠻實用的[範例](https://github.com/facebook/draft-js) 看完之後可以更瞭解 draft 到底是怎樣運作的。\n\n這邊是我看了官方文件之後實作的範例：[draft-example](https://github.com/kjj6198/redux-setup) 。還不算太完整，之後會再慢慢補上。\n\n**reference**\n\n[a guide to draftJS](https://medium.com/@adrianli/a-beginner-s-guide-to-draft-js-d1823f58d8cc#.3apelia5r)\n\n## 重新思考 rails helper\n\n在逐漸重構 css 跟 html 的過程中，常常會忘記 helper 的存在，最近寫一寫才恍然大悟，對啊！我不是有 helper 嗎？目前對於比較複雜的邏輯判斷已經會習慣性地去使用 helper，但在 view 裡頭，有沒有 helper 可以幫上忙的可能性？\n\n雖然用 partial 也可以做到類似的事情，但跟 helper 做搭配會更強大啊！\n\n而且因為 partial 有時候還要去對應路徑，而 helper 則是全域都可以使用。對高度重複的頁面來說或許用 helper 會更加簡單！\n\n**例如我們很常用到的 tags。**\n\n當初 sudo tags 改版的時候花了不少時間去更動，因為幾乎每個 tag 裡面都重寫了一次 each，class 命名有時候也不盡相同。\n\n不過使用 partial 又好像太小題大作，畢竟 tag 的架構並沒有如此複雜。\n\n```ruby\ndef tag_of_tags(tags, options = {}, html_options)\n\n  raw tags.collect { |tag| content_tag(:span,tag.name, options, html_options)}\nend\n```\n\n這樣一來，每次我需要用到 tag 的時候就只要\n\n```html\n<%= tag_of_tags(@post.tags) %>\n```\n\n當然也可以做一些調整，例如加入 namespace 來符合我們的使用情境。\n```ruby\ndef tag_of_tags(tags, namespace,options = {}, html_options)\n\n  raw tags.collect { |tag| content_tag(:span,tag.name, :class => namespace)\nend\n```\n\n```html\n<%= tag_of_tags(@post.tags, \"sudo\") %>\n```\n這樣一來每次 tag 要更新的時候，我只要安心修改 helper，其他地方全部都會生效。寫起來自然輕鬆！\n\n以上只是一小部分的例子，舉凡 `navbar` `button` `dropdown` 等，幾乎是每個網站開發必備的元素。我們在新增 partial 的同時，說不定也可以搭配 helper 一起思考更多的可能性！\n\n## 關於文件，我有話要說\n\n最近因為想要讓 legacy 漸漸減少，會盡量地用重用性的角度來思考。\n\n不過科科給了我一句話「太早談重用性，反而會掉入過度設計的陷阱」。仔細想過之後，的確如此吧！\n\n但我認為，這樣的嘗試是好的，對自己來講是從更寬的角度來看自己的 code，也可以減少一些自己以前的盲點等等。\n\n而想要讓 code review 變得輕鬆的辦法，就是寫文件。不管對 senior 也好對 junior 也好都是有幫助。雖然我的 code 現階段還沒有達到很高的水準，可是透過寫文件這件事情，code reviewer 可以快速理解我的想法，為什麼我要這麼做。\n\n而不是讓 reviewer 從頭看我的 code，揣測我到底在幹嘛？像是 modal 對我來說就是一個很好的嘗試，科科很快地就指出其中的問題跟盲點。\n\n這樣一來，對我來說，我可以從自己的想法裡面寫出品質更好的 code；而 reviewer 因為容易理解我的想法，給予 feedback 的意願也就相對提高了。\n\n當然，可能目前寫得還不夠多，想法也還不夠成熟也說不定，但是從這樣的練習過程中，我想也會慢慢進步吧！\n\n這是我為什麼很用心在寫文件的原因，因為對彼此來講都是節省時間。我省掉以後再看 code 時回想的時間，而 code reviewer 則是省下從頭開始理解的時間。\n\n目前還在磨合期中，希望科科也可以提供建議！\n\n### reference\n\n[good commit message](https://speakerdeck.com/yinghau76/the-elements-of-good-commit-messages?utm_campaign=CodeTengu&utm_medium=email&utm_source=CodeTengu_44)\n\n## javascipt test\n\n[how to write test in existing javascript](https://rmurphey.com/blog/2014/07/13/unit-tests)\n\n很多人都是從前任接手 code 的，這篇文章教你如何從現存的 code 當中進行 refactor。裡頭有很多想法值得一提：\n\n- 不要怪罪前任，要知道代碼的由來通常是有歷史的（每個人都會寫爛 code）\n- 如果沒有 unit test 也沒關係，至少從自己做起\n- 用消極的態度、因為情緒而過度設計，反而會造成更多問題\n- 永遠不要情緒化寫 code\n- **don't use !important with anger**\n\n目前也正在找尋適合主站的測試工具中，希望有一天我們可以達到超過...百分之五十的測試率。\n\n## [日本工作三個月](http://wangyung.blogspot.tw/2016/05/blog-post.html?utm_content=bufferd71fd&utm_medium=social&utm_source=facebook.com&utm_campaign=buffer)\n","source":"_posts/weekly-thought-5-29.md","raw":"---\ntitle: weekly-thought-5/29\ncategories: 前端週刊\ntags:\n  - js\n  - draft-js\n  - flow\ndate: 2016-05-29 21:09:36\n---\n\n\n### 發現的新東西\n\n## flow\n\n第一次聽到，是從 henry 的口中。第二次看到，是從看了 draftjs 的 source code。\n\n當前端的 code 無可避免地增肥之後（尤其是 js 跟 css)，我們也應該尋找更有效的代碼管理方式。像是逐漸引入的 eslinter 跟 stylelint 都是。\n\n而 flow 給我的感覺有點像 Typescript，但優點是你可以完全用寫 js 的方式，也不需要改變副檔名（typescript 要寫成 a.ts)。不過還是會害怕抽象化滲透，所以一樣會先觀望一段陣子再套用到主站上吧。\n\n## draft\n\n假日閒來無事、天氣燥熱，在咖啡廳喝咖啡、聽音樂、寫 code 也蠻愜意的。所以就趁著假日的時光研究了一下科科所說的[draft-js](https://facebook.github.io/draft-js/)\n\n所有的骯髒事（selection 兼容、檔案拖曳、編輯器內的樣式）draft-js 幾乎都幫你搞定了。當然因為這個 open source 還非常新（react conf 的時候才推出來），有時候噴錯也不知道從哪邊找起。但這的確是值得令人關注的 editor 解決方案。\n\n### 目前編輯器會遇到的問題\n\n#### 1. input 跟 textarea 是有極限的\n\n- 他們只能渲染 plain text，如果想要對文字做加粗、斜體、標記等動作，需要花很大的功實作\n- 當你的文字輸入到下一行時，textarea 高度不足不會自動幫你移位。你可能需要計算下一行文字的位置，然後做相關的操作。這也很費工，而且對使用者的體驗非常糟糕。(備註：現在已經有了新的解法 []())\n\n#### 2. [contenteditable is terrible](https://medium.engineering/why-contenteditable-is-terrible-122d8a40e480#.7cqtr19fk)\n\n因為是將文字內容放在非 input 的 tag 裡面，每種瀏覽器的實作都不太一樣，也很容易就會有意想不到的問題發生。不過 contenteditable 的好處是他活得夠久，瀏覽器也都幾乎實作了，所以反而可以利用這樣的特性來解決當前編輯器遇到的問題。\n\n\ndraft 的概念其實也跟 react 很像，將 editor 跟 content 的狀態存放起來，而非依賴在 DOM 上面。而且他們的狀態不是用純 string 去儲存，而是用 Record(他們實作的資料結構)來代表每個節點。\n\n而 API 文件也寫得挺清楚的，同時也完全實作 immutable 的概念。每次對編輯的內容做操作，就是完全更新狀態。剛開始會覺得很麻煩，我明明只是要一段 text，還要呼叫 getCurrentContent() 回傳的竟然還是一個 `Map` 在從裡面呼叫 getText()；或者我想要更動狀態時，還要做類似這樣的操作：`RichUtils.toggleInlineStyle(curState,'BOLD')`，然後再把新的 state 傳進去。看似麻煩，不過這樣的方式到後期的開發顯然是有好處的。\n容易測試，易讀性高，容易修改、除錯。\n\nfacebook 也提供了蠻實用的[範例](https://github.com/facebook/draft-js) 看完之後可以更瞭解 draft 到底是怎樣運作的。\n\n這邊是我看了官方文件之後實作的範例：[draft-example](https://github.com/kjj6198/redux-setup) 。還不算太完整，之後會再慢慢補上。\n\n**reference**\n\n[a guide to draftJS](https://medium.com/@adrianli/a-beginner-s-guide-to-draft-js-d1823f58d8cc#.3apelia5r)\n\n## 重新思考 rails helper\n\n在逐漸重構 css 跟 html 的過程中，常常會忘記 helper 的存在，最近寫一寫才恍然大悟，對啊！我不是有 helper 嗎？目前對於比較複雜的邏輯判斷已經會習慣性地去使用 helper，但在 view 裡頭，有沒有 helper 可以幫上忙的可能性？\n\n雖然用 partial 也可以做到類似的事情，但跟 helper 做搭配會更強大啊！\n\n而且因為 partial 有時候還要去對應路徑，而 helper 則是全域都可以使用。對高度重複的頁面來說或許用 helper 會更加簡單！\n\n**例如我們很常用到的 tags。**\n\n當初 sudo tags 改版的時候花了不少時間去更動，因為幾乎每個 tag 裡面都重寫了一次 each，class 命名有時候也不盡相同。\n\n不過使用 partial 又好像太小題大作，畢竟 tag 的架構並沒有如此複雜。\n\n```ruby\ndef tag_of_tags(tags, options = {}, html_options)\n\n  raw tags.collect { |tag| content_tag(:span,tag.name, options, html_options)}\nend\n```\n\n這樣一來，每次我需要用到 tag 的時候就只要\n\n```html\n<%= tag_of_tags(@post.tags) %>\n```\n\n當然也可以做一些調整，例如加入 namespace 來符合我們的使用情境。\n```ruby\ndef tag_of_tags(tags, namespace,options = {}, html_options)\n\n  raw tags.collect { |tag| content_tag(:span,tag.name, :class => namespace)\nend\n```\n\n```html\n<%= tag_of_tags(@post.tags, \"sudo\") %>\n```\n這樣一來每次 tag 要更新的時候，我只要安心修改 helper，其他地方全部都會生效。寫起來自然輕鬆！\n\n以上只是一小部分的例子，舉凡 `navbar` `button` `dropdown` 等，幾乎是每個網站開發必備的元素。我們在新增 partial 的同時，說不定也可以搭配 helper 一起思考更多的可能性！\n\n## 關於文件，我有話要說\n\n最近因為想要讓 legacy 漸漸減少，會盡量地用重用性的角度來思考。\n\n不過科科給了我一句話「太早談重用性，反而會掉入過度設計的陷阱」。仔細想過之後，的確如此吧！\n\n但我認為，這樣的嘗試是好的，對自己來講是從更寬的角度來看自己的 code，也可以減少一些自己以前的盲點等等。\n\n而想要讓 code review 變得輕鬆的辦法，就是寫文件。不管對 senior 也好對 junior 也好都是有幫助。雖然我的 code 現階段還沒有達到很高的水準，可是透過寫文件這件事情，code reviewer 可以快速理解我的想法，為什麼我要這麼做。\n\n而不是讓 reviewer 從頭看我的 code，揣測我到底在幹嘛？像是 modal 對我來說就是一個很好的嘗試，科科很快地就指出其中的問題跟盲點。\n\n這樣一來，對我來說，我可以從自己的想法裡面寫出品質更好的 code；而 reviewer 因為容易理解我的想法，給予 feedback 的意願也就相對提高了。\n\n當然，可能目前寫得還不夠多，想法也還不夠成熟也說不定，但是從這樣的練習過程中，我想也會慢慢進步吧！\n\n這是我為什麼很用心在寫文件的原因，因為對彼此來講都是節省時間。我省掉以後再看 code 時回想的時間，而 code reviewer 則是省下從頭開始理解的時間。\n\n目前還在磨合期中，希望科科也可以提供建議！\n\n### reference\n\n[good commit message](https://speakerdeck.com/yinghau76/the-elements-of-good-commit-messages?utm_campaign=CodeTengu&utm_medium=email&utm_source=CodeTengu_44)\n\n## javascipt test\n\n[how to write test in existing javascript](https://rmurphey.com/blog/2014/07/13/unit-tests)\n\n很多人都是從前任接手 code 的，這篇文章教你如何從現存的 code 當中進行 refactor。裡頭有很多想法值得一提：\n\n- 不要怪罪前任，要知道代碼的由來通常是有歷史的（每個人都會寫爛 code）\n- 如果沒有 unit test 也沒關係，至少從自己做起\n- 用消極的態度、因為情緒而過度設計，反而會造成更多問題\n- 永遠不要情緒化寫 code\n- **don't use !important with anger**\n\n目前也正在找尋適合主站的測試工具中，希望有一天我們可以達到超過...百分之五十的測試率。\n\n## [日本工作三個月](http://wangyung.blogspot.tw/2016/05/blog-post.html?utm_content=bufferd71fd&utm_medium=social&utm_source=facebook.com&utm_campaign=buffer)\n","slug":"weekly-thought-5-29","published":1,"updated":"2017-02-19T11:19:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p8u001kb75tovhksxkp","content":"<h3 id=\"發現的新東西\"><a href=\"#發現的新東西\" class=\"headerlink\" title=\"發現的新東西\"></a>發現的新東西</h3><h2 id=\"flow\"><a href=\"#flow\" class=\"headerlink\" title=\"flow\"></a>flow</h2><p>第一次聽到，是從 henry 的口中。第二次看到，是從看了 draftjs 的 source code。</p>\n<p>當前端的 code 無可避免地增肥之後（尤其是 js 跟 css)，我們也應該尋找更有效的代碼管理方式。像是逐漸引入的 eslinter 跟 stylelint 都是。</p>\n<p>而 flow 給我的感覺有點像 Typescript，但優點是你可以完全用寫 js 的方式，也不需要改變副檔名（typescript 要寫成 a.ts)。不過還是會害怕抽象化滲透，所以一樣會先觀望一段陣子再套用到主站上吧。</p>\n<h2 id=\"draft\"><a href=\"#draft\" class=\"headerlink\" title=\"draft\"></a>draft</h2><p>假日閒來無事、天氣燥熱，在咖啡廳喝咖啡、聽音樂、寫 code 也蠻愜意的。所以就趁著假日的時光研究了一下科科所說的<a href=\"https://facebook.github.io/draft-js/\" target=\"_blank\" rel=\"external\">draft-js</a></p>\n<p>所有的骯髒事（selection 兼容、檔案拖曳、編輯器內的樣式）draft-js 幾乎都幫你搞定了。當然因為這個 open source 還非常新（react conf 的時候才推出來），有時候噴錯也不知道從哪邊找起。但這的確是值得令人關注的 editor 解決方案。</p>\n<h3 id=\"目前編輯器會遇到的問題\"><a href=\"#目前編輯器會遇到的問題\" class=\"headerlink\" title=\"目前編輯器會遇到的問題\"></a>目前編輯器會遇到的問題</h3><h4 id=\"1-input-跟-textarea-是有極限的\"><a href=\"#1-input-跟-textarea-是有極限的\" class=\"headerlink\" title=\"1. input 跟 textarea 是有極限的\"></a>1. input 跟 textarea 是有極限的</h4><ul>\n<li>他們只能渲染 plain text，如果想要對文字做加粗、斜體、標記等動作，需要花很大的功實作</li>\n<li>當你的文字輸入到下一行時，textarea 高度不足不會自動幫你移位。你可能需要計算下一行文字的位置，然後做相關的操作。這也很費工，而且對使用者的體驗非常糟糕。(備註：現在已經有了新的解法 <a href=\"\"></a>)</li>\n</ul>\n<h4 id=\"2-contenteditable-is-terrible\"><a href=\"#2-contenteditable-is-terrible\" class=\"headerlink\" title=\"2. contenteditable is terrible\"></a>2. <a href=\"https://medium.engineering/why-contenteditable-is-terrible-122d8a40e480#.7cqtr19fk\" target=\"_blank\" rel=\"external\">contenteditable is terrible</a></h4><p>因為是將文字內容放在非 input 的 tag 裡面，每種瀏覽器的實作都不太一樣，也很容易就會有意想不到的問題發生。不過 contenteditable 的好處是他活得夠久，瀏覽器也都幾乎實作了，所以反而可以利用這樣的特性來解決當前編輯器遇到的問題。</p>\n<p>draft 的概念其實也跟 react 很像，將 editor 跟 content 的狀態存放起來，而非依賴在 DOM 上面。而且他們的狀態不是用純 string 去儲存，而是用 Record(他們實作的資料結構)來代表每個節點。</p>\n<p>而 API 文件也寫得挺清楚的，同時也完全實作 immutable 的概念。每次對編輯的內容做操作，就是完全更新狀態。剛開始會覺得很麻煩，我明明只是要一段 text，還要呼叫 getCurrentContent() 回傳的竟然還是一個 <code>Map</code> 在從裡面呼叫 getText()；或者我想要更動狀態時，還要做類似這樣的操作：<code>RichUtils.toggleInlineStyle(curState,&#39;BOLD&#39;)</code>，然後再把新的 state 傳進去。看似麻煩，不過這樣的方式到後期的開發顯然是有好處的。<br>容易測試，易讀性高，容易修改、除錯。</p>\n<p>facebook 也提供了蠻實用的<a href=\"https://github.com/facebook/draft-js\" target=\"_blank\" rel=\"external\">範例</a> 看完之後可以更瞭解 draft 到底是怎樣運作的。</p>\n<p>這邊是我看了官方文件之後實作的範例：<a href=\"https://github.com/kjj6198/redux-setup\" target=\"_blank\" rel=\"external\">draft-example</a> 。還不算太完整，之後會再慢慢補上。</p>\n<p><strong>reference</strong></p>\n<p><a href=\"https://medium.com/@adrianli/a-beginner-s-guide-to-draft-js-d1823f58d8cc#.3apelia5r\" target=\"_blank\" rel=\"external\">a guide to draftJS</a></p>\n<h2 id=\"重新思考-rails-helper\"><a href=\"#重新思考-rails-helper\" class=\"headerlink\" title=\"重新思考 rails helper\"></a>重新思考 rails helper</h2><p>在逐漸重構 css 跟 html 的過程中，常常會忘記 helper 的存在，最近寫一寫才恍然大悟，對啊！我不是有 helper 嗎？目前對於比較複雜的邏輯判斷已經會習慣性地去使用 helper，但在 view 裡頭，有沒有 helper 可以幫上忙的可能性？</p>\n<p>雖然用 partial 也可以做到類似的事情，但跟 helper 做搭配會更強大啊！</p>\n<p>而且因為 partial 有時候還要去對應路徑，而 helper 則是全域都可以使用。對高度重複的頁面來說或許用 helper 會更加簡單！</p>\n<p><strong>例如我們很常用到的 tags。</strong></p>\n<p>當初 sudo tags 改版的時候花了不少時間去更動，因為幾乎每個 tag 裡面都重寫了一次 each，class 命名有時候也不盡相同。</p>\n<p>不過使用 partial 又好像太小題大作，畢竟 tag 的架構並沒有如此複雜。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tag_of_tags</span><span class=\"params\">(tags, options = &#123;&#125;, html_options)</span></span></div><div class=\"line\"></div><div class=\"line\">  raw tags.collect &#123; <span class=\"params\">|tag|</span> content_tag(<span class=\"symbol\">:span</span>,tag.name, options, html_options)&#125;</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>這樣一來，每次我需要用到 tag 的時候就只要</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">tag_of_tags</span>(@<span class=\"attr\">post.tags</span>) %&gt;</span></div></pre></td></tr></table></figure>\n<p>當然也可以做一些調整，例如加入 namespace 來符合我們的使用情境。<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tag_of_tags</span><span class=\"params\">(tags, namespace,options = &#123;&#125;, html_options)</span></span></div><div class=\"line\"></div><div class=\"line\">  raw tags.collect &#123; <span class=\"params\">|tag|</span> content_tag(<span class=\"symbol\">:span</span>,tag.name, <span class=\"symbol\">:class</span> =&gt; namespace)</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">tag_of_tags</span>(@<span class=\"attr\">post.tags</span>, \"<span class=\"attr\">sudo</span>\") %&gt;</span></div></pre></td></tr></table></figure>\n<p>這樣一來每次 tag 要更新的時候，我只要安心修改 helper，其他地方全部都會生效。寫起來自然輕鬆！</p>\n<p>以上只是一小部分的例子，舉凡 <code>navbar</code> <code>button</code> <code>dropdown</code> 等，幾乎是每個網站開發必備的元素。我們在新增 partial 的同時，說不定也可以搭配 helper 一起思考更多的可能性！</p>\n<h2 id=\"關於文件，我有話要說\"><a href=\"#關於文件，我有話要說\" class=\"headerlink\" title=\"關於文件，我有話要說\"></a>關於文件，我有話要說</h2><p>最近因為想要讓 legacy 漸漸減少，會盡量地用重用性的角度來思考。</p>\n<p>不過科科給了我一句話「太早談重用性，反而會掉入過度設計的陷阱」。仔細想過之後，的確如此吧！</p>\n<p>但我認為，這樣的嘗試是好的，對自己來講是從更寬的角度來看自己的 code，也可以減少一些自己以前的盲點等等。</p>\n<p>而想要讓 code review 變得輕鬆的辦法，就是寫文件。不管對 senior 也好對 junior 也好都是有幫助。雖然我的 code 現階段還沒有達到很高的水準，可是透過寫文件這件事情，code reviewer 可以快速理解我的想法，為什麼我要這麼做。</p>\n<p>而不是讓 reviewer 從頭看我的 code，揣測我到底在幹嘛？像是 modal 對我來說就是一個很好的嘗試，科科很快地就指出其中的問題跟盲點。</p>\n<p>這樣一來，對我來說，我可以從自己的想法裡面寫出品質更好的 code；而 reviewer 因為容易理解我的想法，給予 feedback 的意願也就相對提高了。</p>\n<p>當然，可能目前寫得還不夠多，想法也還不夠成熟也說不定，但是從這樣的練習過程中，我想也會慢慢進步吧！</p>\n<p>這是我為什麼很用心在寫文件的原因，因為對彼此來講都是節省時間。我省掉以後再看 code 時回想的時間，而 code reviewer 則是省下從頭開始理解的時間。</p>\n<p>目前還在磨合期中，希望科科也可以提供建議！</p>\n<h3 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h3><p><a href=\"https://speakerdeck.com/yinghau76/the-elements-of-good-commit-messages?utm_campaign=CodeTengu&amp;utm_medium=email&amp;utm_source=CodeTengu_44\" target=\"_blank\" rel=\"external\">good commit message</a></p>\n<h2 id=\"javascipt-test\"><a href=\"#javascipt-test\" class=\"headerlink\" title=\"javascipt test\"></a>javascipt test</h2><p><a href=\"https://rmurphey.com/blog/2014/07/13/unit-tests\" target=\"_blank\" rel=\"external\">how to write test in existing javascript</a></p>\n<p>很多人都是從前任接手 code 的，這篇文章教你如何從現存的 code 當中進行 refactor。裡頭有很多想法值得一提：</p>\n<ul>\n<li>不要怪罪前任，要知道代碼的由來通常是有歷史的（每個人都會寫爛 code）</li>\n<li>如果沒有 unit test 也沒關係，至少從自己做起</li>\n<li>用消極的態度、因為情緒而過度設計，反而會造成更多問題</li>\n<li>永遠不要情緒化寫 code</li>\n<li><strong>don’t use !important with anger</strong></li>\n</ul>\n<p>目前也正在找尋適合主站的測試工具中，希望有一天我們可以達到超過…百分之五十的測試率。</p>\n<h2 id=\"日本工作三個月\"><a href=\"#日本工作三個月\" class=\"headerlink\" title=\"日本工作三個月\"></a><a href=\"http://wangyung.blogspot.tw/2016/05/blog-post.html?utm_content=bufferd71fd&amp;utm_medium=social&amp;utm_source=facebook.com&amp;utm_campaign=buffer\" target=\"_blank\" rel=\"external\">日本工作三個月</a></h2>","excerpt":"","more":"<h3 id=\"發現的新東西\"><a href=\"#發現的新東西\" class=\"headerlink\" title=\"發現的新東西\"></a>發現的新東西</h3><h2 id=\"flow\"><a href=\"#flow\" class=\"headerlink\" title=\"flow\"></a>flow</h2><p>第一次聽到，是從 henry 的口中。第二次看到，是從看了 draftjs 的 source code。</p>\n<p>當前端的 code 無可避免地增肥之後（尤其是 js 跟 css)，我們也應該尋找更有效的代碼管理方式。像是逐漸引入的 eslinter 跟 stylelint 都是。</p>\n<p>而 flow 給我的感覺有點像 Typescript，但優點是你可以完全用寫 js 的方式，也不需要改變副檔名（typescript 要寫成 a.ts)。不過還是會害怕抽象化滲透，所以一樣會先觀望一段陣子再套用到主站上吧。</p>\n<h2 id=\"draft\"><a href=\"#draft\" class=\"headerlink\" title=\"draft\"></a>draft</h2><p>假日閒來無事、天氣燥熱，在咖啡廳喝咖啡、聽音樂、寫 code 也蠻愜意的。所以就趁著假日的時光研究了一下科科所說的<a href=\"https://facebook.github.io/draft-js/\">draft-js</a></p>\n<p>所有的骯髒事（selection 兼容、檔案拖曳、編輯器內的樣式）draft-js 幾乎都幫你搞定了。當然因為這個 open source 還非常新（react conf 的時候才推出來），有時候噴錯也不知道從哪邊找起。但這的確是值得令人關注的 editor 解決方案。</p>\n<h3 id=\"目前編輯器會遇到的問題\"><a href=\"#目前編輯器會遇到的問題\" class=\"headerlink\" title=\"目前編輯器會遇到的問題\"></a>目前編輯器會遇到的問題</h3><h4 id=\"1-input-跟-textarea-是有極限的\"><a href=\"#1-input-跟-textarea-是有極限的\" class=\"headerlink\" title=\"1. input 跟 textarea 是有極限的\"></a>1. input 跟 textarea 是有極限的</h4><ul>\n<li>他們只能渲染 plain text，如果想要對文字做加粗、斜體、標記等動作，需要花很大的功實作</li>\n<li>當你的文字輸入到下一行時，textarea 高度不足不會自動幫你移位。你可能需要計算下一行文字的位置，然後做相關的操作。這也很費工，而且對使用者的體驗非常糟糕。(備註：現在已經有了新的解法 <a href=\"\"></a>)</li>\n</ul>\n<h4 id=\"2-contenteditable-is-terrible\"><a href=\"#2-contenteditable-is-terrible\" class=\"headerlink\" title=\"2. contenteditable is terrible\"></a>2. <a href=\"https://medium.engineering/why-contenteditable-is-terrible-122d8a40e480#.7cqtr19fk\">contenteditable is terrible</a></h4><p>因為是將文字內容放在非 input 的 tag 裡面，每種瀏覽器的實作都不太一樣，也很容易就會有意想不到的問題發生。不過 contenteditable 的好處是他活得夠久，瀏覽器也都幾乎實作了，所以反而可以利用這樣的特性來解決當前編輯器遇到的問題。</p>\n<p>draft 的概念其實也跟 react 很像，將 editor 跟 content 的狀態存放起來，而非依賴在 DOM 上面。而且他們的狀態不是用純 string 去儲存，而是用 Record(他們實作的資料結構)來代表每個節點。</p>\n<p>而 API 文件也寫得挺清楚的，同時也完全實作 immutable 的概念。每次對編輯的內容做操作，就是完全更新狀態。剛開始會覺得很麻煩，我明明只是要一段 text，還要呼叫 getCurrentContent() 回傳的竟然還是一個 <code>Map</code> 在從裡面呼叫 getText()；或者我想要更動狀態時，還要做類似這樣的操作：<code>RichUtils.toggleInlineStyle(curState,&#39;BOLD&#39;)</code>，然後再把新的 state 傳進去。看似麻煩，不過這樣的方式到後期的開發顯然是有好處的。<br>容易測試，易讀性高，容易修改、除錯。</p>\n<p>facebook 也提供了蠻實用的<a href=\"https://github.com/facebook/draft-js\">範例</a> 看完之後可以更瞭解 draft 到底是怎樣運作的。</p>\n<p>這邊是我看了官方文件之後實作的範例：<a href=\"https://github.com/kjj6198/redux-setup\">draft-example</a> 。還不算太完整，之後會再慢慢補上。</p>\n<p><strong>reference</strong></p>\n<p><a href=\"https://medium.com/@adrianli/a-beginner-s-guide-to-draft-js-d1823f58d8cc#.3apelia5r\">a guide to draftJS</a></p>\n<h2 id=\"重新思考-rails-helper\"><a href=\"#重新思考-rails-helper\" class=\"headerlink\" title=\"重新思考 rails helper\"></a>重新思考 rails helper</h2><p>在逐漸重構 css 跟 html 的過程中，常常會忘記 helper 的存在，最近寫一寫才恍然大悟，對啊！我不是有 helper 嗎？目前對於比較複雜的邏輯判斷已經會習慣性地去使用 helper，但在 view 裡頭，有沒有 helper 可以幫上忙的可能性？</p>\n<p>雖然用 partial 也可以做到類似的事情，但跟 helper 做搭配會更強大啊！</p>\n<p>而且因為 partial 有時候還要去對應路徑，而 helper 則是全域都可以使用。對高度重複的頁面來說或許用 helper 會更加簡單！</p>\n<p><strong>例如我們很常用到的 tags。</strong></p>\n<p>當初 sudo tags 改版的時候花了不少時間去更動，因為幾乎每個 tag 裡面都重寫了一次 each，class 命名有時候也不盡相同。</p>\n<p>不過使用 partial 又好像太小題大作，畢竟 tag 的架構並沒有如此複雜。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tag_of_tags</span><span class=\"params\">(tags, options = &#123;&#125;, html_options)</span></span></div><div class=\"line\"></div><div class=\"line\">  raw tags.collect &#123; <span class=\"params\">|tag|</span> content_tag(<span class=\"symbol\">:span</span>,tag.name, options, html_options)&#125;</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>這樣一來，每次我需要用到 tag 的時候就只要</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">tag_of_tags</span>(@<span class=\"attr\">post.tags</span>) %&gt;</span></div></pre></td></tr></table></figure>\n<p>當然也可以做一些調整，例如加入 namespace 來符合我們的使用情境。<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tag_of_tags</span><span class=\"params\">(tags, namespace,options = &#123;&#125;, html_options)</span></span></div><div class=\"line\"></div><div class=\"line\">  raw tags.collect &#123; <span class=\"params\">|tag|</span> content_tag(<span class=\"symbol\">:span</span>,tag.name, <span class=\"symbol\">:class</span> =&gt; namespace)</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">tag_of_tags</span>(@<span class=\"attr\">post.tags</span>, \"<span class=\"attr\">sudo</span>\") %&gt;</span></div></pre></td></tr></table></figure>\n<p>這樣一來每次 tag 要更新的時候，我只要安心修改 helper，其他地方全部都會生效。寫起來自然輕鬆！</p>\n<p>以上只是一小部分的例子，舉凡 <code>navbar</code> <code>button</code> <code>dropdown</code> 等，幾乎是每個網站開發必備的元素。我們在新增 partial 的同時，說不定也可以搭配 helper 一起思考更多的可能性！</p>\n<h2 id=\"關於文件，我有話要說\"><a href=\"#關於文件，我有話要說\" class=\"headerlink\" title=\"關於文件，我有話要說\"></a>關於文件，我有話要說</h2><p>最近因為想要讓 legacy 漸漸減少，會盡量地用重用性的角度來思考。</p>\n<p>不過科科給了我一句話「太早談重用性，反而會掉入過度設計的陷阱」。仔細想過之後，的確如此吧！</p>\n<p>但我認為，這樣的嘗試是好的，對自己來講是從更寬的角度來看自己的 code，也可以減少一些自己以前的盲點等等。</p>\n<p>而想要讓 code review 變得輕鬆的辦法，就是寫文件。不管對 senior 也好對 junior 也好都是有幫助。雖然我的 code 現階段還沒有達到很高的水準，可是透過寫文件這件事情，code reviewer 可以快速理解我的想法，為什麼我要這麼做。</p>\n<p>而不是讓 reviewer 從頭看我的 code，揣測我到底在幹嘛？像是 modal 對我來說就是一個很好的嘗試，科科很快地就指出其中的問題跟盲點。</p>\n<p>這樣一來，對我來說，我可以從自己的想法裡面寫出品質更好的 code；而 reviewer 因為容易理解我的想法，給予 feedback 的意願也就相對提高了。</p>\n<p>當然，可能目前寫得還不夠多，想法也還不夠成熟也說不定，但是從這樣的練習過程中，我想也會慢慢進步吧！</p>\n<p>這是我為什麼很用心在寫文件的原因，因為對彼此來講都是節省時間。我省掉以後再看 code 時回想的時間，而 code reviewer 則是省下從頭開始理解的時間。</p>\n<p>目前還在磨合期中，希望科科也可以提供建議！</p>\n<h3 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h3><p><a href=\"https://speakerdeck.com/yinghau76/the-elements-of-good-commit-messages?utm_campaign=CodeTengu&amp;utm_medium=email&amp;utm_source=CodeTengu_44\">good commit message</a></p>\n<h2 id=\"javascipt-test\"><a href=\"#javascipt-test\" class=\"headerlink\" title=\"javascipt test\"></a>javascipt test</h2><p><a href=\"https://rmurphey.com/blog/2014/07/13/unit-tests\">how to write test in existing javascript</a></p>\n<p>很多人都是從前任接手 code 的，這篇文章教你如何從現存的 code 當中進行 refactor。裡頭有很多想法值得一提：</p>\n<ul>\n<li>不要怪罪前任，要知道代碼的由來通常是有歷史的（每個人都會寫爛 code）</li>\n<li>如果沒有 unit test 也沒關係，至少從自己做起</li>\n<li>用消極的態度、因為情緒而過度設計，反而會造成更多問題</li>\n<li>永遠不要情緒化寫 code</li>\n<li><strong>don’t use !important with anger</strong></li>\n</ul>\n<p>目前也正在找尋適合主站的測試工具中，希望有一天我們可以達到超過…百分之五十的測試率。</p>\n<h2 id=\"日本工作三個月\"><a href=\"#日本工作三個月\" class=\"headerlink\" title=\"日本工作三個月\"></a><a href=\"http://wangyung.blogspot.tw/2016/05/blog-post.html?utm_content=bufferd71fd&amp;utm_medium=social&amp;utm_source=facebook.com&amp;utm_campaign=buffer\">日本工作三個月</a></h2>"},{"title":"weekly-thought-5/30","image":"landing.png","desc":"這個禮拜不談「新」東西，多數會是關於網頁開發的重新思考。算是回過頭來漸漸補齊自己的技術債吧！比起前幾個禮拜所談的新東西，這一篇文章可能相對枯燥一點，當然篇幅也會比較長，但我認為這是必要的。","date":"2016-11-14T11:51:39.000Z","_content":"\n\n這個禮拜不談「新」東西，多數會是關於網頁開發的重新思考。算是回過頭來漸漸補齊自己的技術債吧！比起前幾個禮拜所談的新東西，這一篇文章可能相對枯燥一點，當然篇幅也會比較長，但我認為這是必要的。\n\n這些東西在前端變化快速的時代下或許顯得不那麼重要，不過思考總是件好事。\n\n## 語義化標籤\n\n### 重新思考語義化這件事\n\n會有這個想法，是看到 `instant article` 的 html 架構，他們規範 instant article 的架構必須符合他們的規範，而且結構的表達也很清楚。我在裡頭看到了好多我以前沒有注意過的 html tag。像是 `address` `figure` `caption` `summary` 。好奇之下查了一下[文件](http://www.w3schools.com/tags/tag_html.asp)等等。發現其實有很多語義化的標籤都已經支持目前主流的瀏覽器，spec 也寫得很清楚，但是目前主站多還是以 `div + class` 的方式做表達，雖然有些地方會套用 `header`，但我認為有更多適合的語義化標籤可以加入使用。除了減少不必要的 class 命名，也能夠提高 html 的易讀性跟 SEO，重點是，我們寫的是符合標準的 html。\n\n\n而且 w3c 在 html5 致力推廣語義化的標籤，諸如 `nav` `header` `dd` `dt` 等等，並且將一些沒有意義的 tag 刪除或是不推薦使用如 `b` `font` `center` 等等。\n\n\n### 對於 class 的思考\n\n[語義化 css](http://www.w3cplus.com/css/semantic-css-with-intelligent-selectors.html)\n\n用了那麼久的 class，我回去找了找 spec，發現了 w3c 對 class 的描述。\n\n> There are no additional restrictions on the tokens authors can use in the class attribute, but authors are encouraged to use values that describe the nature of the content, rather than values that describe the desired presentation of the content.  -w3c\n\n\n雖然 class 並沒有使用上的規定，但是鼓勵盡量將 class 用於表達元素內容而非描述元素的展現。也就是說那些 `col-md-*` 等表現性的 class 名稱其實在 w3c 的 spec 裡面是不符合規範的。但是會出現 unit class 的原因卻是因為我們沒有按照標準來而孵化出來的產物。雖然很多人擁護 unit class 的便利性跟節省開發的速度，但我認為比起開發上的時間節省，**身為網頁開發人員，我們要注重的更應該是頁面的表達跟使用者的互動**。\n\n當然不得不承認的是，在理想上跟實際上總是會有差異。因為嚴格說起來，facebook 也沒有符合規範，他們是用`css module`的方式進行開發。\n\n不過這裡想提出這樣子的想法跟大家討論。\n雖然標準的定案到瀏覽器的實作，總是要花不少時間。\n\n為什麼要符合標準？\n1. 標準規範是由一大堆科學家研究過後、大量的討論過後所制定出來的規範，給大家遵守以便達到統一性。\n2. 通常這些規範是 best practice。\n3. 為什麼我們要為了節省開發時間而寫出不符標準的網頁本末倒置？\n\n\n\n我們有更好的解決方案 > SASS\ntake id rethink\n我不會反對用挖掘機清理災難現場，但我不會拿來整理自己的家。\n給後代選擇器一個平反的機會，搭配 id 使用效果佳\n\n\n\n```html\n<!-- 元素展現 -->\n<div class=\"margin-b-10\">\n\n</div>\n\n<!-- 內容 -->\n<div class=\"user_info\">\n\n</div>\n\n```\n\n自己的理解是這樣。\n\n至於為什麼會造成這樣的原因，或許是因為在網頁發展初期，CSS 的支持性並不好，在語義化跟表現之間很難得到平衡，才會有當時純 style 的 `center` `width` 出現。但現在已經不是那個綁手綁腳的年代了。我們應該朝向語義化的年代前進，而且這也是`w3c`在推廣的事情，身為一個站在網路業尖端的優質網路招聘公司，就由我們來引領風騷吧！\n\n對 `unit class` 難道沒有其他辦法解決嗎？我自己非常喜歡語義化的 `class`，而且很討厭 `row` `col` `text-center`，每次寫起來都會有罪惡感...。\n\n至於用 unit class 的人，通常是因為不想花太多時間重寫 style 架構、節省開發時間、或是他根本不會 css，所以找個 `bootstrap` 直接套。但我們是前端工程師，我們有能力去組織 css。現在這個語義化年代，正是我們前端平反的好時機。\n\n1. 推行標準的目的是為技術交流構建一個統一的上下文語境平台，提高溝通效率，避免雞同鴨講。\n2. 同時標準跟規範的製定是經過一群資深開發者／科學家經過仔細研究及社區討論的，一套完整的一致的基礎架構系統是推進生態發展的必要條件。\n3. 就Web語義化這件事情而言，如果你的HTML是基於標準來編寫的，意味著你的頁面具備更多的可能性。比如搜索引擎友好，多終端適配(不是響應式。。是指兼容各種閱讀設備、讀屏軟件等。參見microformats )，更智能的風格查錯能力。\n4. 在前端開發體系裡，能體系專業性的地方不多。。拿程序複雜度而言，它跟大型後端系統差不止一個量級(前端的難度在於工程上)。。好不容易有一個能體現專業素養的領域(語義化Web)，為什麼我們不抓住機會為自己正名呢。。\n\n我覺得這並不會增加維護成本，反而會在長期內減少冗餘樣式、不可預知的樣式覆蓋等維護問題。唯一的成本可能就是你在開始一個頁面之前，需要去抽像一下可複用的單元，然後用sass表達出來。不過我感覺如果你採用的是正確的工作流(面向語義)，這些事情都是比較順理成章的。\n\n對於團隊開發如何確保面向語義，這確實是一個比較難解決的問題。除了需要提供一個清晰的團隊sass庫說明之外，貌似只能通過一些工程化手段解決了(加強code review流程、制定規範等等)。\n\n### grid system 是個很棒的東西耶！\n\n我承認 grid system 的確是個非常好用的模式，在實際場景也會遇到 layout 無法用語義化來表示的問題，但根據語義化的定義，為了寫出更好看的 HTML 跟易讀性，我們或許總有一天還是要把 grid system 拔掉。這會是個大工程，但在目前主站說大不大，說小不小的架構上，還是越早開始越好吧！\n\n- 使用 susy\n- @include @extend\n\n## Page Visibility API\n\n能夠知道目前 user 是否 focus 在這個 page 上。\n在很多情境下，我們希望當使用者沒有聚焦在這個網頁上（可能跳去別的應用程式、切換分頁時），可以盡量減少不必的請求或操作。facebook 好像也是當你回到網頁時才會有訊息的提示聲音。\n比較常見的情景是播放影片時，如果使用者跳出頁面，我們可以先自動讓影片停止，等使用者回來之後，影片在繼續播放。\n\n### 回頭看看 js 的事件傳播\n\n最近把犀牛書拿回來翻了翻，主要是為了釐清以前不是那麼明白的觀念。太多 js library 充斥在網路，我們是否已經忘記原生的 js 了？雖然高度的抽象化是科技趨於發達後一定會有的現象，但是了解一下內部的運作也是好的，對於之後寫 code 也會比較有概念！\n\n#### js 事件傳播\n\njs 的事件傳播主要分為兩大類型，`bubble` 跟 `capture`，大部分的傳播方式是用 `bubble`。什麼是 `bubble` 呢？在註冊對象元素的事件處理器被調用之後，事件就會開始往上漂浮（不包含某些元素的特定事件），然後再調用註冊於祖父元素上的處理器。這種現象會上升到 `document` 最後到達 `window`。\n\n在實際應用上，我們時常看到：\n```js\n$(\".abc\").on('click', e => {\n\t\n});\n\n$(\".ass\").on('click', e => {\n\t\n});\n\n$(\".asass\").on('click', e => {\n\t\n});\n\n```\n\n散亂的事件註冊在角落，不僅維護上困難，在尋找 code 的時候也沒有統一入口，非常難以除錯。於是我們可以利用 js 事件的冒泡特性，為 document 統一註冊事件。jQuery 的 on 第二個函數便提供了事件委託的功能，如下：\n\n```js\n$('document').on('click','.sass', e => {\n \n});\n```\n\n這樣的好處不僅減少了散亂的事件註冊，還統一了入口。如果要新增事件，只要在 document 統一做擴充即可。我們還可以在 html 這樣寫：\n\n```html\n\t<a  class=\"js_action\" data-action=\"foo\">\n\t<a  class=\"js_action\" data-action=\"bar\">\n```\n\n```js\n  var actionList = {\n  \tfoo: function(),\n  \tbar: function()\n\t}\n\t$('document').on('click','.js_action', e => {\n\t\tif(typeof e.target.dataset.action === 'function'){\n\t\t\tactionList[e.target.dataset.action]\n\t\t}\n\t})\n```\n\n像這樣，以後如果要增加新的 event handlder 只要在 acionList 新增就好，甚至搭配 extend 的方式，可以不用寫在 actionList 也沒關係。充分提高了擴充性\n\n\n那麼，為什麼那麼少人使用 capture 呢？最大的原因在於因為可愛的 IE 無法使用。再來事件捕捉只適用於 addEventListener 的方式。\n事件捕捉有點像是反過來，會先從祖父開始，依序向下船，直到**事件父元素的事件處理被被調用為止**，註冊於事件元素的事件處理器永遠不會被調用。\n\n#### 事件取消\n\n我們也常常看到類似 `e.preventDefault()` 的方法。其實像是舊版的瀏覽器並不支援，我們可以用一些比較 tricky 的方式來做取消。\n\n```js\nfunction cancelDefault(event) {\n\tvar event = event || window.event;\n\n\tif(event.preventDefault) event.preventDefault()\n\tif(event.returnValue) event.returnValue = false\n\treturn false\n}\n\n```\n\n","source":"_posts/weekly-thought-5-30.md","raw":"---\ntitle: weekly-thought-5/30\ncategories: 前端週刊\ntags:\n  - javascript\n  - html\n  - css\nimage: landing.png\ndesc: >-\n  這個禮拜不談「新」東西，多數會是關於網頁開發的重新思考。算是回過頭來漸漸補齊自己的技術債吧！比起前幾個禮拜所談的新東西，這一篇文章可能相對枯燥一點，當然篇幅也會比較長，但我認為這是必要的。\ndate: 2016-11-14 19:51:39\n---\n\n\n這個禮拜不談「新」東西，多數會是關於網頁開發的重新思考。算是回過頭來漸漸補齊自己的技術債吧！比起前幾個禮拜所談的新東西，這一篇文章可能相對枯燥一點，當然篇幅也會比較長，但我認為這是必要的。\n\n這些東西在前端變化快速的時代下或許顯得不那麼重要，不過思考總是件好事。\n\n## 語義化標籤\n\n### 重新思考語義化這件事\n\n會有這個想法，是看到 `instant article` 的 html 架構，他們規範 instant article 的架構必須符合他們的規範，而且結構的表達也很清楚。我在裡頭看到了好多我以前沒有注意過的 html tag。像是 `address` `figure` `caption` `summary` 。好奇之下查了一下[文件](http://www.w3schools.com/tags/tag_html.asp)等等。發現其實有很多語義化的標籤都已經支持目前主流的瀏覽器，spec 也寫得很清楚，但是目前主站多還是以 `div + class` 的方式做表達，雖然有些地方會套用 `header`，但我認為有更多適合的語義化標籤可以加入使用。除了減少不必要的 class 命名，也能夠提高 html 的易讀性跟 SEO，重點是，我們寫的是符合標準的 html。\n\n\n而且 w3c 在 html5 致力推廣語義化的標籤，諸如 `nav` `header` `dd` `dt` 等等，並且將一些沒有意義的 tag 刪除或是不推薦使用如 `b` `font` `center` 等等。\n\n\n### 對於 class 的思考\n\n[語義化 css](http://www.w3cplus.com/css/semantic-css-with-intelligent-selectors.html)\n\n用了那麼久的 class，我回去找了找 spec，發現了 w3c 對 class 的描述。\n\n> There are no additional restrictions on the tokens authors can use in the class attribute, but authors are encouraged to use values that describe the nature of the content, rather than values that describe the desired presentation of the content.  -w3c\n\n\n雖然 class 並沒有使用上的規定，但是鼓勵盡量將 class 用於表達元素內容而非描述元素的展現。也就是說那些 `col-md-*` 等表現性的 class 名稱其實在 w3c 的 spec 裡面是不符合規範的。但是會出現 unit class 的原因卻是因為我們沒有按照標準來而孵化出來的產物。雖然很多人擁護 unit class 的便利性跟節省開發的速度，但我認為比起開發上的時間節省，**身為網頁開發人員，我們要注重的更應該是頁面的表達跟使用者的互動**。\n\n當然不得不承認的是，在理想上跟實際上總是會有差異。因為嚴格說起來，facebook 也沒有符合規範，他們是用`css module`的方式進行開發。\n\n不過這裡想提出這樣子的想法跟大家討論。\n雖然標準的定案到瀏覽器的實作，總是要花不少時間。\n\n為什麼要符合標準？\n1. 標準規範是由一大堆科學家研究過後、大量的討論過後所制定出來的規範，給大家遵守以便達到統一性。\n2. 通常這些規範是 best practice。\n3. 為什麼我們要為了節省開發時間而寫出不符標準的網頁本末倒置？\n\n\n\n我們有更好的解決方案 > SASS\ntake id rethink\n我不會反對用挖掘機清理災難現場，但我不會拿來整理自己的家。\n給後代選擇器一個平反的機會，搭配 id 使用效果佳\n\n\n\n```html\n<!-- 元素展現 -->\n<div class=\"margin-b-10\">\n\n</div>\n\n<!-- 內容 -->\n<div class=\"user_info\">\n\n</div>\n\n```\n\n自己的理解是這樣。\n\n至於為什麼會造成這樣的原因，或許是因為在網頁發展初期，CSS 的支持性並不好，在語義化跟表現之間很難得到平衡，才會有當時純 style 的 `center` `width` 出現。但現在已經不是那個綁手綁腳的年代了。我們應該朝向語義化的年代前進，而且這也是`w3c`在推廣的事情，身為一個站在網路業尖端的優質網路招聘公司，就由我們來引領風騷吧！\n\n對 `unit class` 難道沒有其他辦法解決嗎？我自己非常喜歡語義化的 `class`，而且很討厭 `row` `col` `text-center`，每次寫起來都會有罪惡感...。\n\n至於用 unit class 的人，通常是因為不想花太多時間重寫 style 架構、節省開發時間、或是他根本不會 css，所以找個 `bootstrap` 直接套。但我們是前端工程師，我們有能力去組織 css。現在這個語義化年代，正是我們前端平反的好時機。\n\n1. 推行標準的目的是為技術交流構建一個統一的上下文語境平台，提高溝通效率，避免雞同鴨講。\n2. 同時標準跟規範的製定是經過一群資深開發者／科學家經過仔細研究及社區討論的，一套完整的一致的基礎架構系統是推進生態發展的必要條件。\n3. 就Web語義化這件事情而言，如果你的HTML是基於標準來編寫的，意味著你的頁面具備更多的可能性。比如搜索引擎友好，多終端適配(不是響應式。。是指兼容各種閱讀設備、讀屏軟件等。參見microformats )，更智能的風格查錯能力。\n4. 在前端開發體系裡，能體系專業性的地方不多。。拿程序複雜度而言，它跟大型後端系統差不止一個量級(前端的難度在於工程上)。。好不容易有一個能體現專業素養的領域(語義化Web)，為什麼我們不抓住機會為自己正名呢。。\n\n我覺得這並不會增加維護成本，反而會在長期內減少冗餘樣式、不可預知的樣式覆蓋等維護問題。唯一的成本可能就是你在開始一個頁面之前，需要去抽像一下可複用的單元，然後用sass表達出來。不過我感覺如果你採用的是正確的工作流(面向語義)，這些事情都是比較順理成章的。\n\n對於團隊開發如何確保面向語義，這確實是一個比較難解決的問題。除了需要提供一個清晰的團隊sass庫說明之外，貌似只能通過一些工程化手段解決了(加強code review流程、制定規範等等)。\n\n### grid system 是個很棒的東西耶！\n\n我承認 grid system 的確是個非常好用的模式，在實際場景也會遇到 layout 無法用語義化來表示的問題，但根據語義化的定義，為了寫出更好看的 HTML 跟易讀性，我們或許總有一天還是要把 grid system 拔掉。這會是個大工程，但在目前主站說大不大，說小不小的架構上，還是越早開始越好吧！\n\n- 使用 susy\n- @include @extend\n\n## Page Visibility API\n\n能夠知道目前 user 是否 focus 在這個 page 上。\n在很多情境下，我們希望當使用者沒有聚焦在這個網頁上（可能跳去別的應用程式、切換分頁時），可以盡量減少不必的請求或操作。facebook 好像也是當你回到網頁時才會有訊息的提示聲音。\n比較常見的情景是播放影片時，如果使用者跳出頁面，我們可以先自動讓影片停止，等使用者回來之後，影片在繼續播放。\n\n### 回頭看看 js 的事件傳播\n\n最近把犀牛書拿回來翻了翻，主要是為了釐清以前不是那麼明白的觀念。太多 js library 充斥在網路，我們是否已經忘記原生的 js 了？雖然高度的抽象化是科技趨於發達後一定會有的現象，但是了解一下內部的運作也是好的，對於之後寫 code 也會比較有概念！\n\n#### js 事件傳播\n\njs 的事件傳播主要分為兩大類型，`bubble` 跟 `capture`，大部分的傳播方式是用 `bubble`。什麼是 `bubble` 呢？在註冊對象元素的事件處理器被調用之後，事件就會開始往上漂浮（不包含某些元素的特定事件），然後再調用註冊於祖父元素上的處理器。這種現象會上升到 `document` 最後到達 `window`。\n\n在實際應用上，我們時常看到：\n```js\n$(\".abc\").on('click', e => {\n\t\n});\n\n$(\".ass\").on('click', e => {\n\t\n});\n\n$(\".asass\").on('click', e => {\n\t\n});\n\n```\n\n散亂的事件註冊在角落，不僅維護上困難，在尋找 code 的時候也沒有統一入口，非常難以除錯。於是我們可以利用 js 事件的冒泡特性，為 document 統一註冊事件。jQuery 的 on 第二個函數便提供了事件委託的功能，如下：\n\n```js\n$('document').on('click','.sass', e => {\n \n});\n```\n\n這樣的好處不僅減少了散亂的事件註冊，還統一了入口。如果要新增事件，只要在 document 統一做擴充即可。我們還可以在 html 這樣寫：\n\n```html\n\t<a  class=\"js_action\" data-action=\"foo\">\n\t<a  class=\"js_action\" data-action=\"bar\">\n```\n\n```js\n  var actionList = {\n  \tfoo: function(),\n  \tbar: function()\n\t}\n\t$('document').on('click','.js_action', e => {\n\t\tif(typeof e.target.dataset.action === 'function'){\n\t\t\tactionList[e.target.dataset.action]\n\t\t}\n\t})\n```\n\n像這樣，以後如果要增加新的 event handlder 只要在 acionList 新增就好，甚至搭配 extend 的方式，可以不用寫在 actionList 也沒關係。充分提高了擴充性\n\n\n那麼，為什麼那麼少人使用 capture 呢？最大的原因在於因為可愛的 IE 無法使用。再來事件捕捉只適用於 addEventListener 的方式。\n事件捕捉有點像是反過來，會先從祖父開始，依序向下船，直到**事件父元素的事件處理被被調用為止**，註冊於事件元素的事件處理器永遠不會被調用。\n\n#### 事件取消\n\n我們也常常看到類似 `e.preventDefault()` 的方法。其實像是舊版的瀏覽器並不支援，我們可以用一些比較 tricky 的方式來做取消。\n\n```js\nfunction cancelDefault(event) {\n\tvar event = event || window.event;\n\n\tif(event.preventDefault) event.preventDefault()\n\tif(event.returnValue) event.returnValue = false\n\treturn false\n}\n\n```\n\n","slug":"weekly-thought-5-30","published":1,"updated":"2016-11-14T11:51:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p8x001nb75tkwqwsf9n","content":"<p>這個禮拜不談「新」東西，多數會是關於網頁開發的重新思考。算是回過頭來漸漸補齊自己的技術債吧！比起前幾個禮拜所談的新東西，這一篇文章可能相對枯燥一點，當然篇幅也會比較長，但我認為這是必要的。</p>\n<p>這些東西在前端變化快速的時代下或許顯得不那麼重要，不過思考總是件好事。</p>\n<h2 id=\"語義化標籤\"><a href=\"#語義化標籤\" class=\"headerlink\" title=\"語義化標籤\"></a>語義化標籤</h2><h3 id=\"重新思考語義化這件事\"><a href=\"#重新思考語義化這件事\" class=\"headerlink\" title=\"重新思考語義化這件事\"></a>重新思考語義化這件事</h3><p>會有這個想法，是看到 <code>instant article</code> 的 html 架構，他們規範 instant article 的架構必須符合他們的規範，而且結構的表達也很清楚。我在裡頭看到了好多我以前沒有注意過的 html tag。像是 <code>address</code> <code>figure</code> <code>caption</code> <code>summary</code> 。好奇之下查了一下<a href=\"http://www.w3schools.com/tags/tag_html.asp\" target=\"_blank\" rel=\"external\">文件</a>等等。發現其實有很多語義化的標籤都已經支持目前主流的瀏覽器，spec 也寫得很清楚，但是目前主站多還是以 <code>div + class</code> 的方式做表達，雖然有些地方會套用 <code>header</code>，但我認為有更多適合的語義化標籤可以加入使用。除了減少不必要的 class 命名，也能夠提高 html 的易讀性跟 SEO，重點是，我們寫的是符合標準的 html。</p>\n<p>而且 w3c 在 html5 致力推廣語義化的標籤，諸如 <code>nav</code> <code>header</code> <code>dd</code> <code>dt</code> 等等，並且將一些沒有意義的 tag 刪除或是不推薦使用如 <code>b</code> <code>font</code> <code>center</code> 等等。</p>\n<h3 id=\"對於-class-的思考\"><a href=\"#對於-class-的思考\" class=\"headerlink\" title=\"對於 class 的思考\"></a>對於 class 的思考</h3><p><a href=\"http://www.w3cplus.com/css/semantic-css-with-intelligent-selectors.html\" target=\"_blank\" rel=\"external\">語義化 css</a></p>\n<p>用了那麼久的 class，我回去找了找 spec，發現了 w3c 對 class 的描述。</p>\n<blockquote>\n<p>There are no additional restrictions on the tokens authors can use in the class attribute, but authors are encouraged to use values that describe the nature of the content, rather than values that describe the desired presentation of the content.  -w3c</p>\n</blockquote>\n<p>雖然 class 並沒有使用上的規定，但是鼓勵盡量將 class 用於表達元素內容而非描述元素的展現。也就是說那些 <code>col-md-*</code> 等表現性的 class 名稱其實在 w3c 的 spec 裡面是不符合規範的。但是會出現 unit class 的原因卻是因為我們沒有按照標準來而孵化出來的產物。雖然很多人擁護 unit class 的便利性跟節省開發的速度，但我認為比起開發上的時間節省，<strong>身為網頁開發人員，我們要注重的更應該是頁面的表達跟使用者的互動</strong>。</p>\n<p>當然不得不承認的是，在理想上跟實際上總是會有差異。因為嚴格說起來，facebook 也沒有符合規範，他們是用<code>css module</code>的方式進行開發。</p>\n<p>不過這裡想提出這樣子的想法跟大家討論。<br>雖然標準的定案到瀏覽器的實作，總是要花不少時間。</p>\n<p>為什麼要符合標準？</p>\n<ol>\n<li>標準規範是由一大堆科學家研究過後、大量的討論過後所制定出來的規範，給大家遵守以便達到統一性。</li>\n<li>通常這些規範是 best practice。</li>\n<li>為什麼我們要為了節省開發時間而寫出不符標準的網頁本末倒置？</li>\n</ol>\n<p>我們有更好的解決方案 &gt; SASS<br>take id rethink<br>我不會反對用挖掘機清理災難現場，但我不會拿來整理自己的家。<br>給後代選擇器一個平反的機會，搭配 id 使用效果佳</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 元素展現 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"margin-b-10\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 內容 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"user_info\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>自己的理解是這樣。</p>\n<p>至於為什麼會造成這樣的原因，或許是因為在網頁發展初期，CSS 的支持性並不好，在語義化跟表現之間很難得到平衡，才會有當時純 style 的 <code>center</code> <code>width</code> 出現。但現在已經不是那個綁手綁腳的年代了。我們應該朝向語義化的年代前進，而且這也是<code>w3c</code>在推廣的事情，身為一個站在網路業尖端的優質網路招聘公司，就由我們來引領風騷吧！</p>\n<p>對 <code>unit class</code> 難道沒有其他辦法解決嗎？我自己非常喜歡語義化的 <code>class</code>，而且很討厭 <code>row</code> <code>col</code> <code>text-center</code>，每次寫起來都會有罪惡感…。</p>\n<p>至於用 unit class 的人，通常是因為不想花太多時間重寫 style 架構、節省開發時間、或是他根本不會 css，所以找個 <code>bootstrap</code> 直接套。但我們是前端工程師，我們有能力去組織 css。現在這個語義化年代，正是我們前端平反的好時機。</p>\n<ol>\n<li>推行標準的目的是為技術交流構建一個統一的上下文語境平台，提高溝通效率，避免雞同鴨講。</li>\n<li>同時標準跟規範的製定是經過一群資深開發者／科學家經過仔細研究及社區討論的，一套完整的一致的基礎架構系統是推進生態發展的必要條件。</li>\n<li>就Web語義化這件事情而言，如果你的HTML是基於標準來編寫的，意味著你的頁面具備更多的可能性。比如搜索引擎友好，多終端適配(不是響應式。。是指兼容各種閱讀設備、讀屏軟件等。參見microformats )，更智能的風格查錯能力。</li>\n<li>在前端開發體系裡，能體系專業性的地方不多。。拿程序複雜度而言，它跟大型後端系統差不止一個量級(前端的難度在於工程上)。。好不容易有一個能體現專業素養的領域(語義化Web)，為什麼我們不抓住機會為自己正名呢。。</li>\n</ol>\n<p>我覺得這並不會增加維護成本，反而會在長期內減少冗餘樣式、不可預知的樣式覆蓋等維護問題。唯一的成本可能就是你在開始一個頁面之前，需要去抽像一下可複用的單元，然後用sass表達出來。不過我感覺如果你採用的是正確的工作流(面向語義)，這些事情都是比較順理成章的。</p>\n<p>對於團隊開發如何確保面向語義，這確實是一個比較難解決的問題。除了需要提供一個清晰的團隊sass庫說明之外，貌似只能通過一些工程化手段解決了(加強code review流程、制定規範等等)。</p>\n<h3 id=\"grid-system-是個很棒的東西耶！\"><a href=\"#grid-system-是個很棒的東西耶！\" class=\"headerlink\" title=\"grid system 是個很棒的東西耶！\"></a>grid system 是個很棒的東西耶！</h3><p>我承認 grid system 的確是個非常好用的模式，在實際場景也會遇到 layout 無法用語義化來表示的問題，但根據語義化的定義，為了寫出更好看的 HTML 跟易讀性，我們或許總有一天還是要把 grid system 拔掉。這會是個大工程，但在目前主站說大不大，說小不小的架構上，還是越早開始越好吧！</p>\n<ul>\n<li>使用 susy</li>\n<li>@include @extend</li>\n</ul>\n<h2 id=\"Page-Visibility-API\"><a href=\"#Page-Visibility-API\" class=\"headerlink\" title=\"Page Visibility API\"></a>Page Visibility API</h2><p>能夠知道目前 user 是否 focus 在這個 page 上。<br>在很多情境下，我們希望當使用者沒有聚焦在這個網頁上（可能跳去別的應用程式、切換分頁時），可以盡量減少不必的請求或操作。facebook 好像也是當你回到網頁時才會有訊息的提示聲音。<br>比較常見的情景是播放影片時，如果使用者跳出頁面，我們可以先自動讓影片停止，等使用者回來之後，影片在繼續播放。</p>\n<h3 id=\"回頭看看-js-的事件傳播\"><a href=\"#回頭看看-js-的事件傳播\" class=\"headerlink\" title=\"回頭看看 js 的事件傳播\"></a>回頭看看 js 的事件傳播</h3><p>最近把犀牛書拿回來翻了翻，主要是為了釐清以前不是那麼明白的觀念。太多 js library 充斥在網路，我們是否已經忘記原生的 js 了？雖然高度的抽象化是科技趨於發達後一定會有的現象，但是了解一下內部的運作也是好的，對於之後寫 code 也會比較有概念！</p>\n<h4 id=\"js-事件傳播\"><a href=\"#js-事件傳播\" class=\"headerlink\" title=\"js 事件傳播\"></a>js 事件傳播</h4><p>js 的事件傳播主要分為兩大類型，<code>bubble</code> 跟 <code>capture</code>，大部分的傳播方式是用 <code>bubble</code>。什麼是 <code>bubble</code> 呢？在註冊對象元素的事件處理器被調用之後，事件就會開始往上漂浮（不包含某些元素的特定事件），然後再調用註冊於祖父元素上的處理器。這種現象會上升到 <code>document</code> 最後到達 <code>window</code>。</p>\n<p>在實際應用上，我們時常看到：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\".abc\"</span>).on(<span class=\"string\">'click'</span>, e =&gt; &#123;</div><div class=\"line\">\t</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\".ass\"</span>).on(<span class=\"string\">'click'</span>, e =&gt; &#123;</div><div class=\"line\">\t</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\".asass\"</span>).on(<span class=\"string\">'click'</span>, e =&gt; &#123;</div><div class=\"line\">\t</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>散亂的事件註冊在角落，不僅維護上困難，在尋找 code 的時候也沒有統一入口，非常難以除錯。於是我們可以利用 js 事件的冒泡特性，為 document 統一註冊事件。jQuery 的 on 第二個函數便提供了事件委託的功能，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'document'</span>).on(<span class=\"string\">'click'</span>,<span class=\"string\">'.sass'</span>, e =&gt; &#123;</div><div class=\"line\"> </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>這樣的好處不僅減少了散亂的事件註冊，還統一了入口。如果要新增事件，只要在 document 統一做擴充即可。我們還可以在 html 這樣寫：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span>  <span class=\"attr\">class</span>=<span class=\"string\">\"js_action\"</span> <span class=\"attr\">data-action</span>=<span class=\"string\">\"foo\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span>  <span class=\"attr\">class</span>=<span class=\"string\">\"js_action\"</span> <span class=\"attr\">data-action</span>=<span class=\"string\">\"bar\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">var</span> actionList = &#123;</div><div class=\"line\"> \t<span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>),</span></div><div class=\"line\"> \t<span class=\"title\">bar</span>: <span class=\"title\">function</span>(<span class=\"params\"></span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"title\">$</span>(<span class=\"params\"><span class=\"string\">'document'</span></span>).<span class=\"title\">on</span>(<span class=\"params\"><span class=\"string\">'click'</span>,<span class=\"string\">'.js_action'</span>, e =&gt; &#123;</span></div><div class=\"line\">\tif(typeof e.target.dataset.action === <span class=\"string\">'function'</span>)&#123;</div><div class=\"line\">\t\tactionList[e.target.dataset.action]</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>像這樣，以後如果要增加新的 event handlder 只要在 acionList 新增就好，甚至搭配 extend 的方式，可以不用寫在 actionList 也沒關係。充分提高了擴充性</p>\n<p>那麼，為什麼那麼少人使用 capture 呢？最大的原因在於因為可愛的 IE 無法使用。再來事件捕捉只適用於 addEventListener 的方式。<br>事件捕捉有點像是反過來，會先從祖父開始，依序向下船，直到<strong>事件父元素的事件處理被被調用為止</strong>，註冊於事件元素的事件處理器永遠不會被調用。</p>\n<h4 id=\"事件取消\"><a href=\"#事件取消\" class=\"headerlink\" title=\"事件取消\"></a>事件取消</h4><p>我們也常常看到類似 <code>e.preventDefault()</code> 的方法。其實像是舊版的瀏覽器並不支援，我們可以用一些比較 tricky 的方式來做取消。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cancelDefault</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> event = event || <span class=\"built_in\">window</span>.event;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span>(event.preventDefault) event.preventDefault()</div><div class=\"line\">\t<span class=\"keyword\">if</span>(event.returnValue) event.returnValue = <span class=\"literal\">false</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>這個禮拜不談「新」東西，多數會是關於網頁開發的重新思考。算是回過頭來漸漸補齊自己的技術債吧！比起前幾個禮拜所談的新東西，這一篇文章可能相對枯燥一點，當然篇幅也會比較長，但我認為這是必要的。</p>\n<p>這些東西在前端變化快速的時代下或許顯得不那麼重要，不過思考總是件好事。</p>\n<h2 id=\"語義化標籤\"><a href=\"#語義化標籤\" class=\"headerlink\" title=\"語義化標籤\"></a>語義化標籤</h2><h3 id=\"重新思考語義化這件事\"><a href=\"#重新思考語義化這件事\" class=\"headerlink\" title=\"重新思考語義化這件事\"></a>重新思考語義化這件事</h3><p>會有這個想法，是看到 <code>instant article</code> 的 html 架構，他們規範 instant article 的架構必須符合他們的規範，而且結構的表達也很清楚。我在裡頭看到了好多我以前沒有注意過的 html tag。像是 <code>address</code> <code>figure</code> <code>caption</code> <code>summary</code> 。好奇之下查了一下<a href=\"http://www.w3schools.com/tags/tag_html.asp\">文件</a>等等。發現其實有很多語義化的標籤都已經支持目前主流的瀏覽器，spec 也寫得很清楚，但是目前主站多還是以 <code>div + class</code> 的方式做表達，雖然有些地方會套用 <code>header</code>，但我認為有更多適合的語義化標籤可以加入使用。除了減少不必要的 class 命名，也能夠提高 html 的易讀性跟 SEO，重點是，我們寫的是符合標準的 html。</p>\n<p>而且 w3c 在 html5 致力推廣語義化的標籤，諸如 <code>nav</code> <code>header</code> <code>dd</code> <code>dt</code> 等等，並且將一些沒有意義的 tag 刪除或是不推薦使用如 <code>b</code> <code>font</code> <code>center</code> 等等。</p>\n<h3 id=\"對於-class-的思考\"><a href=\"#對於-class-的思考\" class=\"headerlink\" title=\"對於 class 的思考\"></a>對於 class 的思考</h3><p><a href=\"http://www.w3cplus.com/css/semantic-css-with-intelligent-selectors.html\">語義化 css</a></p>\n<p>用了那麼久的 class，我回去找了找 spec，發現了 w3c 對 class 的描述。</p>\n<blockquote>\n<p>There are no additional restrictions on the tokens authors can use in the class attribute, but authors are encouraged to use values that describe the nature of the content, rather than values that describe the desired presentation of the content.  -w3c</p>\n</blockquote>\n<p>雖然 class 並沒有使用上的規定，但是鼓勵盡量將 class 用於表達元素內容而非描述元素的展現。也就是說那些 <code>col-md-*</code> 等表現性的 class 名稱其實在 w3c 的 spec 裡面是不符合規範的。但是會出現 unit class 的原因卻是因為我們沒有按照標準來而孵化出來的產物。雖然很多人擁護 unit class 的便利性跟節省開發的速度，但我認為比起開發上的時間節省，<strong>身為網頁開發人員，我們要注重的更應該是頁面的表達跟使用者的互動</strong>。</p>\n<p>當然不得不承認的是，在理想上跟實際上總是會有差異。因為嚴格說起來，facebook 也沒有符合規範，他們是用<code>css module</code>的方式進行開發。</p>\n<p>不過這裡想提出這樣子的想法跟大家討論。<br>雖然標準的定案到瀏覽器的實作，總是要花不少時間。</p>\n<p>為什麼要符合標準？</p>\n<ol>\n<li>標準規範是由一大堆科學家研究過後、大量的討論過後所制定出來的規範，給大家遵守以便達到統一性。</li>\n<li>通常這些規範是 best practice。</li>\n<li>為什麼我們要為了節省開發時間而寫出不符標準的網頁本末倒置？</li>\n</ol>\n<p>我們有更好的解決方案 &gt; SASS<br>take id rethink<br>我不會反對用挖掘機清理災難現場，但我不會拿來整理自己的家。<br>給後代選擇器一個平反的機會，搭配 id 使用效果佳</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 元素展現 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"margin-b-10\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 內容 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"user_info\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>自己的理解是這樣。</p>\n<p>至於為什麼會造成這樣的原因，或許是因為在網頁發展初期，CSS 的支持性並不好，在語義化跟表現之間很難得到平衡，才會有當時純 style 的 <code>center</code> <code>width</code> 出現。但現在已經不是那個綁手綁腳的年代了。我們應該朝向語義化的年代前進，而且這也是<code>w3c</code>在推廣的事情，身為一個站在網路業尖端的優質網路招聘公司，就由我們來引領風騷吧！</p>\n<p>對 <code>unit class</code> 難道沒有其他辦法解決嗎？我自己非常喜歡語義化的 <code>class</code>，而且很討厭 <code>row</code> <code>col</code> <code>text-center</code>，每次寫起來都會有罪惡感…。</p>\n<p>至於用 unit class 的人，通常是因為不想花太多時間重寫 style 架構、節省開發時間、或是他根本不會 css，所以找個 <code>bootstrap</code> 直接套。但我們是前端工程師，我們有能力去組織 css。現在這個語義化年代，正是我們前端平反的好時機。</p>\n<ol>\n<li>推行標準的目的是為技術交流構建一個統一的上下文語境平台，提高溝通效率，避免雞同鴨講。</li>\n<li>同時標準跟規範的製定是經過一群資深開發者／科學家經過仔細研究及社區討論的，一套完整的一致的基礎架構系統是推進生態發展的必要條件。</li>\n<li>就Web語義化這件事情而言，如果你的HTML是基於標準來編寫的，意味著你的頁面具備更多的可能性。比如搜索引擎友好，多終端適配(不是響應式。。是指兼容各種閱讀設備、讀屏軟件等。參見microformats )，更智能的風格查錯能力。</li>\n<li>在前端開發體系裡，能體系專業性的地方不多。。拿程序複雜度而言，它跟大型後端系統差不止一個量級(前端的難度在於工程上)。。好不容易有一個能體現專業素養的領域(語義化Web)，為什麼我們不抓住機會為自己正名呢。。</li>\n</ol>\n<p>我覺得這並不會增加維護成本，反而會在長期內減少冗餘樣式、不可預知的樣式覆蓋等維護問題。唯一的成本可能就是你在開始一個頁面之前，需要去抽像一下可複用的單元，然後用sass表達出來。不過我感覺如果你採用的是正確的工作流(面向語義)，這些事情都是比較順理成章的。</p>\n<p>對於團隊開發如何確保面向語義，這確實是一個比較難解決的問題。除了需要提供一個清晰的團隊sass庫說明之外，貌似只能通過一些工程化手段解決了(加強code review流程、制定規範等等)。</p>\n<h3 id=\"grid-system-是個很棒的東西耶！\"><a href=\"#grid-system-是個很棒的東西耶！\" class=\"headerlink\" title=\"grid system 是個很棒的東西耶！\"></a>grid system 是個很棒的東西耶！</h3><p>我承認 grid system 的確是個非常好用的模式，在實際場景也會遇到 layout 無法用語義化來表示的問題，但根據語義化的定義，為了寫出更好看的 HTML 跟易讀性，我們或許總有一天還是要把 grid system 拔掉。這會是個大工程，但在目前主站說大不大，說小不小的架構上，還是越早開始越好吧！</p>\n<ul>\n<li>使用 susy</li>\n<li>@include @extend</li>\n</ul>\n<h2 id=\"Page-Visibility-API\"><a href=\"#Page-Visibility-API\" class=\"headerlink\" title=\"Page Visibility API\"></a>Page Visibility API</h2><p>能夠知道目前 user 是否 focus 在這個 page 上。<br>在很多情境下，我們希望當使用者沒有聚焦在這個網頁上（可能跳去別的應用程式、切換分頁時），可以盡量減少不必的請求或操作。facebook 好像也是當你回到網頁時才會有訊息的提示聲音。<br>比較常見的情景是播放影片時，如果使用者跳出頁面，我們可以先自動讓影片停止，等使用者回來之後，影片在繼續播放。</p>\n<h3 id=\"回頭看看-js-的事件傳播\"><a href=\"#回頭看看-js-的事件傳播\" class=\"headerlink\" title=\"回頭看看 js 的事件傳播\"></a>回頭看看 js 的事件傳播</h3><p>最近把犀牛書拿回來翻了翻，主要是為了釐清以前不是那麼明白的觀念。太多 js library 充斥在網路，我們是否已經忘記原生的 js 了？雖然高度的抽象化是科技趨於發達後一定會有的現象，但是了解一下內部的運作也是好的，對於之後寫 code 也會比較有概念！</p>\n<h4 id=\"js-事件傳播\"><a href=\"#js-事件傳播\" class=\"headerlink\" title=\"js 事件傳播\"></a>js 事件傳播</h4><p>js 的事件傳播主要分為兩大類型，<code>bubble</code> 跟 <code>capture</code>，大部分的傳播方式是用 <code>bubble</code>。什麼是 <code>bubble</code> 呢？在註冊對象元素的事件處理器被調用之後，事件就會開始往上漂浮（不包含某些元素的特定事件），然後再調用註冊於祖父元素上的處理器。這種現象會上升到 <code>document</code> 最後到達 <code>window</code>。</p>\n<p>在實際應用上，我們時常看到：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\".abc\"</span>).on(<span class=\"string\">'click'</span>, e =&gt; &#123;</div><div class=\"line\">\t</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\".ass\"</span>).on(<span class=\"string\">'click'</span>, e =&gt; &#123;</div><div class=\"line\">\t</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\".asass\"</span>).on(<span class=\"string\">'click'</span>, e =&gt; &#123;</div><div class=\"line\">\t</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>散亂的事件註冊在角落，不僅維護上困難，在尋找 code 的時候也沒有統一入口，非常難以除錯。於是我們可以利用 js 事件的冒泡特性，為 document 統一註冊事件。jQuery 的 on 第二個函數便提供了事件委託的功能，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'document'</span>).on(<span class=\"string\">'click'</span>,<span class=\"string\">'.sass'</span>, e =&gt; &#123;</div><div class=\"line\"> </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>這樣的好處不僅減少了散亂的事件註冊，還統一了入口。如果要新增事件，只要在 document 統一做擴充即可。我們還可以在 html 這樣寫：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span>  <span class=\"attr\">class</span>=<span class=\"string\">\"js_action\"</span> <span class=\"attr\">data-action</span>=<span class=\"string\">\"foo\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span>  <span class=\"attr\">class</span>=<span class=\"string\">\"js_action\"</span> <span class=\"attr\">data-action</span>=<span class=\"string\">\"bar\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">var</span> actionList = &#123;</div><div class=\"line\"> \t<span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>),</div><div class=\"line\"> \t<span class=\"title\">bar</span>: <span class=\"title\">function</span>(<span class=\"params\"></span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"title\">$</span>(<span class=\"params\"><span class=\"string\">'document'</span></span>).<span class=\"title\">on</span>(<span class=\"params\"><span class=\"string\">'click'</span>,<span class=\"string\">'.js_action'</span>, e =&gt; &#123;</div><div class=\"line\">\tif(typeof e.target.dataset.action === <span class=\"string\">'function'</span></span>)</span>&#123;</div><div class=\"line\">\t\tactionList[e.target.dataset.action]</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>像這樣，以後如果要增加新的 event handlder 只要在 acionList 新增就好，甚至搭配 extend 的方式，可以不用寫在 actionList 也沒關係。充分提高了擴充性</p>\n<p>那麼，為什麼那麼少人使用 capture 呢？最大的原因在於因為可愛的 IE 無法使用。再來事件捕捉只適用於 addEventListener 的方式。<br>事件捕捉有點像是反過來，會先從祖父開始，依序向下船，直到<strong>事件父元素的事件處理被被調用為止</strong>，註冊於事件元素的事件處理器永遠不會被調用。</p>\n<h4 id=\"事件取消\"><a href=\"#事件取消\" class=\"headerlink\" title=\"事件取消\"></a>事件取消</h4><p>我們也常常看到類似 <code>e.preventDefault()</code> 的方法。其實像是舊版的瀏覽器並不支援，我們可以用一些比較 tricky 的方式來做取消。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cancelDefault</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> event = event || <span class=\"built_in\">window</span>.event;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span>(event.preventDefault) event.preventDefault()</div><div class=\"line\">\t<span class=\"keyword\">if</span>(event.returnValue) event.returnValue = <span class=\"literal\">false</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"weekly-thought-7/31","date":"2016-07-31T06:45:18.000Z","_content":"\n\n## 發現的新東西\n\n### 瀏覽器的字體渲染\n\n前陣子發現了 `font-smoothing` 的屬性，雖然 w3c 已經把他從標準刪除，但在 chrome 上面還是可以使用這個屬性。\n\n但令人好奇的是，其他瀏覽器的字體渲染方式呢？\n\n其實字型渲染是一個一直以來容易被忽略，卻又是極為重要的議題。因為網站的易讀性除了 layout 之外，再來就是字體了。\n\n為了確認網站在瀏覽器的一致性，稍微研究了一下字體渲染的方式。\n分享在這邊給大家做參考。\n\n每個字，在電腦當中都會被當作一個向量圖像。而當我們把字體渲染在螢幕上的時候，就會把字型用像素渲染的方式呈現在螢幕上，所以每個字其實都是由一個個小方塊組合起來的。\n\n但問題發生了，用小方塊的壞處就是在邊緣會出現無可避免的鋸齒狀，造成閱讀體驗不佳。\n\n## 基本解法 grayscale\n\n這個解法是讓邊緣的像素補上一些灰階的像素，讓字型遠遠看起來比較圓滑，用這些灰階的像素來補償字體本來應該有的面積。這個方法很聰明又優雅，讓人不禁佩服。\n\n### 進階解法 subpixel\n\n顏色信息，如果我們把屏幕截圖不斷放大，可以看到字體邊緣有紅藍兩色出現，這就是亞像素渲染了。\n\n在LCD屏中，一個像素是由紅綠藍三個緊密排列的亞像素構成的，它們決定了這一像素的顏色和亮度。由於它們是如此之小，以至於肉眼不會把它們看作是一個個獨立的色點。如果我們仔細看看上圖中被白點標記的「紅色」像素，就可以發現它所採用的渲染策略：所有的亞像素都可以單獨控制開或關的；若「空白」像素最右側的亞像素是紅色的話，則此像素都將填滿紅色。\n\n### 問題點：百家爭鳴的瀏覽器\n\n每個瀏覽器實作字型渲染的方式都不盡相同，甚至不同的 OS 下也是。更蛋疼的是，在Windows下還可能採用兩種技術來渲染—— GDI或者DirectWrite。\n\nWindows\n在Windows系統下，字體格式對其渲染效果有很顯著的影響，比如PostScript字體和TrueType字體之間就存在著巨大的差別。但這種差別並不是由瀏覽器所引起的，只要底層的字體一樣，我們就可以看到完全相同的渲染效果。\n\n儘管這種方法並不十分可靠，但從字體的命名中我們可以大致推斷該字體所採用的渲染技術，比如，EOT和.ttf格式一定是TrueType技術，反之.otf通常是PostScript技術。但是還有一中封裝的字體格式WOFF，它可以包含其中任意一種字體格式。因此光看文件名 ​​是不可能清楚它所採用的渲染技術的。除了EOT​​和.ttf格式文件可以斷定是TrueType渲染技術外，其他文件格式所包含的是哪種字體都無法確定。因此在你購買字體時，你最好對想要購買的字體做一番了解。（@Ryekee :我覺得這一句根本不用翻譯，中國還有人會買字體麼？）\n\nTrueType和PostScript的區別在於描繪曲線時所採用的數學方法不同，但這一差異對柵格器並不會造成太大的影響，只有字型設計人員才需要考慮著兩者的差別。另一個重要的區別就是所採用的字體微調的方法。PostScript只包含了組成字體的各種元素的抽象位置信息，而TrueType則包含了非常詳細的底層命令，直接接管了渲染的進程。然而造成兩種渲染技術的差異並不是它們的設計理念上的差別，而是源於Micro$oft採對TrueType採用了新的渲染引擎。\n\n操作系统OS提供了支持不同的字体渲染方法的API。在windows下是GDI(Graphics Device Interface)和DirectWrite，OS X下是Quartz。\n\nGDI分为GDI Grayscale和GDI ClearType。前者为灰阶渲染API，后者是亚像素渲染API。由于GDI ClearType并未对字体进行垂直方向的平滑，因此当字体较大时会出现边缘不平滑的情况。为了弥补GDI ClearType的不足，MS实现了DirectWrite API，它在GDI ClearType的基础上增加了垂直方向的平滑。\n但是！字体渲染的API都是由浏览器厂商自己选择的！\n\n使用同一颜色，感官上的颜色深浅为：黑白渲染>grayscale>sub-pixel。\n\nChrome35/36采用的是GDI ClearType，因此在字体较大时边缘会出现毛刺，而FF30采用的DirectWrite则没有此类问题。如下图所示：\n\n不過最近看了一下 windows 的字型渲染，不得不說微軟在這方面還真是下了不少功夫。\n\n越來越多的字體設計師都開始注意到Web字體所帶來的技術問題，尤其是TrueType字體的微調。隨著Web字體產業的崛起，他們願意付出精力為屏幕顯示而優化字體。在不遠的將來，我們將看到大量精心設計的字體問世（或者至少是對現有字體的更新）。\n\n隨著屏幕分辨率的增加（以及對柵格器的重大改進），我們慢慢地不再擔心字體渲染的技術細節。採用GDI渲染模式的瀏覽器必將拖後腿，正因為此，未來數年內，我們都還無法放心的使用無微調的TrueType字體。只有當這一類瀏覽器用戶比例降到足夠低的程度的時候，TrueType字體微調（耗時又需要高超的技巧）才可以被扔到一邊。儘管目前市面上幾乎所有Web字體都是TrueType格式的，我仍希望字體行業能夠大規模轉向PostScript格式，因為這種字體能為設計師減少絕大部分的工作。\n\n不過好處是，科技日新月異。希望之後不用再擔心字型渲染的東西。\n\nMAC 使用他們自己的引擎來渲染字體，不管 truetype 跟 posttype 渲染方式都一樣。這個渲染引擎只有一個字，屌。\n\ntruetype 跟 posttype 的差別。\n\n### 結論\n\n如果想直接看結果，在網頁的時候，可以使用反鋸齒的技術來增加易讀性。\n但如果在手機上建議關閉，因為反鋸齒的演算需要比較多的 GPU 來做計算。通常直接採用灰階的渲染方式就夠用了！\n\n### 事件控制\n\n如果可以，希望在每個檔案都能夠新增一個 EventManager 的方式，統一管理事件。我很喜歡事件委託的方式。\n\n善用 data attribute 的方式來給標籤一些好用的屬性。\n\n## [microdata](http://lepture.com/zh/2015/fe-microdata)\n\n\n## Rails view\n\n最近希望把一些常用的 tag 跟撰寫方式拆成 helper，於是開始去研究 rails 裡面的 view helper method。發現裡面的 helper 撰寫大有學問，這邊跟大家分享：\n\n```ruby \ndef link_to(name = nil, options = nil, html_options = nil, &block)\n  html_options, options, name = options, name, block if block_given?\n  options ||= {}\n\n  html_options = convert_options_to_data_attributes(options, html_options)\n\n  url = url_for(options)\n  html_options['href'] ||= url\n\n  content_tag(:a, name || url, html_options, &block)\nend\n```\n\n這邊用 `link_to` 方法舉例，可以看到這邊分成了兩種方式，如果有給定 `block` 的話，會將傳入的參數作轉換，如果沒有的話，則是將 `option` 做處理之後，傳給 \t`content_tag` 這個方法。注意到這邊的 `block_given?` 方法，有這個方法我們就可以很容易的判斷是否有傳入 block。\n\n所以在設計 helper 的時候，可以適時包裝這些方法，簡化 helper 的複雜度：\n\n```ruby\n  def link_to_with_noopener(name = nil, options = {}, html_options = nil, &block)\n  \thtml_options.merge!({\n  \t\t:ref => \"noopener\"\n  \t})\n\t\tif block_given?\n\t\t  link_to(name, options, html_options, &block)\n\t\telse\n\t\t  link_to(name, options, html_options)\n\t\tend\n  end\n```\n請參考：[About rel=noopener](https://mathiasbynens.github.io/rel-noopener/)\n\n再來就是 viewhelper 裡面有很多還蠻好用的方法，我們不用再花很大的功夫重造輪子，像是：\n\n* [link_to_if](http://apidock.com/rails/v4.2.1/ActionView/Helpers/UrlHelper/link_to_if)\n* [link_to_unless](http://apidock.com/rails/v4.2.1/ActionView/Helpers/UrlHelper/link_to_unless)\n* [link_to_unless_current](http://apidock.com/rails/v4.2.1/ActionView/Helpers/UrlHelper/link_to_unless_current)\n\n不過每次只要一動到 helper 就很容易出包...，但直接用原生的 HTML 不但很醜，又不好維護，所以在撰寫 helper 的時候，為了保險還是寫一下 test 吧！\n\n最近的有個想法是將常用的片段程式碼拆成 partial，**並且用比較統一的方式管理！**，每次接到新的頁面就要先思考哪些會是局部代碼，哪些會是共用代碼。\n\n### partial 設計的幾個要點：\n\n經過這次標籤消失的事件，首先先跟顆顆說聲道歉之外，更應該檢討的是以下幾點：\n\n1. 預設值很重要！\n2. if else 判斷式要思考更全面\n3. 如果害怕沒有預設狀況，就乾脆讓他噴例外\n\n第三點的實作方法如下：\n\n```ruby\n# in component_helper.rb\n# ui_component 方法是對 render 的進一步包裝。\ndef ui_component(url, props = {})\n  render \"components/#{url}\", locals: props\nend\n\n# in error_helper.rb\ndef check_required_options!(locals, *options)\n    options.each do |option|\n      raise MissingOptionError, %Q{option \"#{option.to_s}\" is required.} if locals[option].nil?\n    end\n  end\n\n\n  private\n\n  class MissingOptionError < StandardError\n  end\n```\n\n然後在 partial 的程式碼裡面：\n\n```html\n// in _tags.html.erb\n<% check_required_options locals, :propA, :propsB, :propsC %>\n```\n\n這樣如果 locals 裡面的 option 不夠完整，就會在使用的時候噴出例外，不知道這樣的設計夠不夠完整。而且 partial 設計的時候很容易因為時間久的關係，忘記了 locals 裡面的選項，在 partial 裡面養成檢查 locals 的習慣，可以幫助我們補上遺落的 option。不知道這樣的設計夠不夠恰當跟完整？還請顆顆提出意見。\n\n### component 化\n\n這邊的 component 化並不是指全部使用 react 改寫，畢竟我們的頁面也還沒有到這種需求。但是既然 rails 有強大的 partial 機制跟 view heleper 方法，我們可以在撰寫的時候做更進一步的拆分：\n\n```html\n<div id=\"page_id\">\n  <header>\n    <%= load_component(\"company_header\") %>\n  </header>\n  <main>\n    <aside>\n    \t<%= load_component(\"company_sidebar__header\") %>\n\t    <%= load_component(\"company_sidebar__content\") %>\n    </aside>\n\t  <%= load_component(\"company_summary\") %>\n    <%= load_component(\"company_introduction\") %>\n\t\t<%= load_component(\"company_section\") %>\n  </main>\n  <footer>\n  \t<%= load_component(\"company_footer\") %>\n  </footer>\n</div>\n```\n\n但其實目前主站的頁面都仍時常變動，所以過早的抽象化反而會浪費更多成本吧！不過未來如果能用這樣的方式來撰寫程式碼，相信應該是非常好維護的！\n\n## Webstrom\n\n其實以前也是那種很瞧不起 IDE 的那一派，開起來要花我好幾秒，重點是又吃記憶體，然後又要常常使用滑鼠操作...。但使用 IDE 來幫助我們 debug、重構是一件非常省力又輕鬆的事情，只要右鍵 => refacter 即可。\n\n所以如果是一般的功能開發，如果牽扯到比較多檔案的 CSS 或是 JS 檔案的話，我會使用 Webstorm 來開發，搭配 react 跟 jsx 的 plugin，不用每次都會忘記 action 的名字在不同檔案跳來跳去，或是突然忘記長長的 API 又跑去找文件，要整理 code 也只要按下 refactor 就好，出錯的機率自然會降低、也節省了不必要的時間。\n\n但如果是剛入門的人還是建議從文字編輯器開始，門檻比較低。不然設定 IDE 的時間，都可以吃好幾碗肉骨茶麵了。\n\n## CSS @supports\n\n這個屬性\n","source":"_posts/weekly-thought-7-31.md","raw":"---\ntitle: weekly-thought-7/31\ncategories: 前端週刊\ntags: 前端\ndate: 2016-07-31 14:45:18\n---\n\n\n## 發現的新東西\n\n### 瀏覽器的字體渲染\n\n前陣子發現了 `font-smoothing` 的屬性，雖然 w3c 已經把他從標準刪除，但在 chrome 上面還是可以使用這個屬性。\n\n但令人好奇的是，其他瀏覽器的字體渲染方式呢？\n\n其實字型渲染是一個一直以來容易被忽略，卻又是極為重要的議題。因為網站的易讀性除了 layout 之外，再來就是字體了。\n\n為了確認網站在瀏覽器的一致性，稍微研究了一下字體渲染的方式。\n分享在這邊給大家做參考。\n\n每個字，在電腦當中都會被當作一個向量圖像。而當我們把字體渲染在螢幕上的時候，就會把字型用像素渲染的方式呈現在螢幕上，所以每個字其實都是由一個個小方塊組合起來的。\n\n但問題發生了，用小方塊的壞處就是在邊緣會出現無可避免的鋸齒狀，造成閱讀體驗不佳。\n\n## 基本解法 grayscale\n\n這個解法是讓邊緣的像素補上一些灰階的像素，讓字型遠遠看起來比較圓滑，用這些灰階的像素來補償字體本來應該有的面積。這個方法很聰明又優雅，讓人不禁佩服。\n\n### 進階解法 subpixel\n\n顏色信息，如果我們把屏幕截圖不斷放大，可以看到字體邊緣有紅藍兩色出現，這就是亞像素渲染了。\n\n在LCD屏中，一個像素是由紅綠藍三個緊密排列的亞像素構成的，它們決定了這一像素的顏色和亮度。由於它們是如此之小，以至於肉眼不會把它們看作是一個個獨立的色點。如果我們仔細看看上圖中被白點標記的「紅色」像素，就可以發現它所採用的渲染策略：所有的亞像素都可以單獨控制開或關的；若「空白」像素最右側的亞像素是紅色的話，則此像素都將填滿紅色。\n\n### 問題點：百家爭鳴的瀏覽器\n\n每個瀏覽器實作字型渲染的方式都不盡相同，甚至不同的 OS 下也是。更蛋疼的是，在Windows下還可能採用兩種技術來渲染—— GDI或者DirectWrite。\n\nWindows\n在Windows系統下，字體格式對其渲染效果有很顯著的影響，比如PostScript字體和TrueType字體之間就存在著巨大的差別。但這種差別並不是由瀏覽器所引起的，只要底層的字體一樣，我們就可以看到完全相同的渲染效果。\n\n儘管這種方法並不十分可靠，但從字體的命名中我們可以大致推斷該字體所採用的渲染技術，比如，EOT和.ttf格式一定是TrueType技術，反之.otf通常是PostScript技術。但是還有一中封裝的字體格式WOFF，它可以包含其中任意一種字體格式。因此光看文件名 ​​是不可能清楚它所採用的渲染技術的。除了EOT​​和.ttf格式文件可以斷定是TrueType渲染技術外，其他文件格式所包含的是哪種字體都無法確定。因此在你購買字體時，你最好對想要購買的字體做一番了解。（@Ryekee :我覺得這一句根本不用翻譯，中國還有人會買字體麼？）\n\nTrueType和PostScript的區別在於描繪曲線時所採用的數學方法不同，但這一差異對柵格器並不會造成太大的影響，只有字型設計人員才需要考慮著兩者的差別。另一個重要的區別就是所採用的字體微調的方法。PostScript只包含了組成字體的各種元素的抽象位置信息，而TrueType則包含了非常詳細的底層命令，直接接管了渲染的進程。然而造成兩種渲染技術的差異並不是它們的設計理念上的差別，而是源於Micro$oft採對TrueType採用了新的渲染引擎。\n\n操作系统OS提供了支持不同的字体渲染方法的API。在windows下是GDI(Graphics Device Interface)和DirectWrite，OS X下是Quartz。\n\nGDI分为GDI Grayscale和GDI ClearType。前者为灰阶渲染API，后者是亚像素渲染API。由于GDI ClearType并未对字体进行垂直方向的平滑，因此当字体较大时会出现边缘不平滑的情况。为了弥补GDI ClearType的不足，MS实现了DirectWrite API，它在GDI ClearType的基础上增加了垂直方向的平滑。\n但是！字体渲染的API都是由浏览器厂商自己选择的！\n\n使用同一颜色，感官上的颜色深浅为：黑白渲染>grayscale>sub-pixel。\n\nChrome35/36采用的是GDI ClearType，因此在字体较大时边缘会出现毛刺，而FF30采用的DirectWrite则没有此类问题。如下图所示：\n\n不過最近看了一下 windows 的字型渲染，不得不說微軟在這方面還真是下了不少功夫。\n\n越來越多的字體設計師都開始注意到Web字體所帶來的技術問題，尤其是TrueType字體的微調。隨著Web字體產業的崛起，他們願意付出精力為屏幕顯示而優化字體。在不遠的將來，我們將看到大量精心設計的字體問世（或者至少是對現有字體的更新）。\n\n隨著屏幕分辨率的增加（以及對柵格器的重大改進），我們慢慢地不再擔心字體渲染的技術細節。採用GDI渲染模式的瀏覽器必將拖後腿，正因為此，未來數年內，我們都還無法放心的使用無微調的TrueType字體。只有當這一類瀏覽器用戶比例降到足夠低的程度的時候，TrueType字體微調（耗時又需要高超的技巧）才可以被扔到一邊。儘管目前市面上幾乎所有Web字體都是TrueType格式的，我仍希望字體行業能夠大規模轉向PostScript格式，因為這種字體能為設計師減少絕大部分的工作。\n\n不過好處是，科技日新月異。希望之後不用再擔心字型渲染的東西。\n\nMAC 使用他們自己的引擎來渲染字體，不管 truetype 跟 posttype 渲染方式都一樣。這個渲染引擎只有一個字，屌。\n\ntruetype 跟 posttype 的差別。\n\n### 結論\n\n如果想直接看結果，在網頁的時候，可以使用反鋸齒的技術來增加易讀性。\n但如果在手機上建議關閉，因為反鋸齒的演算需要比較多的 GPU 來做計算。通常直接採用灰階的渲染方式就夠用了！\n\n### 事件控制\n\n如果可以，希望在每個檔案都能夠新增一個 EventManager 的方式，統一管理事件。我很喜歡事件委託的方式。\n\n善用 data attribute 的方式來給標籤一些好用的屬性。\n\n## [microdata](http://lepture.com/zh/2015/fe-microdata)\n\n\n## Rails view\n\n最近希望把一些常用的 tag 跟撰寫方式拆成 helper，於是開始去研究 rails 裡面的 view helper method。發現裡面的 helper 撰寫大有學問，這邊跟大家分享：\n\n```ruby \ndef link_to(name = nil, options = nil, html_options = nil, &block)\n  html_options, options, name = options, name, block if block_given?\n  options ||= {}\n\n  html_options = convert_options_to_data_attributes(options, html_options)\n\n  url = url_for(options)\n  html_options['href'] ||= url\n\n  content_tag(:a, name || url, html_options, &block)\nend\n```\n\n這邊用 `link_to` 方法舉例，可以看到這邊分成了兩種方式，如果有給定 `block` 的話，會將傳入的參數作轉換，如果沒有的話，則是將 `option` 做處理之後，傳給 \t`content_tag` 這個方法。注意到這邊的 `block_given?` 方法，有這個方法我們就可以很容易的判斷是否有傳入 block。\n\n所以在設計 helper 的時候，可以適時包裝這些方法，簡化 helper 的複雜度：\n\n```ruby\n  def link_to_with_noopener(name = nil, options = {}, html_options = nil, &block)\n  \thtml_options.merge!({\n  \t\t:ref => \"noopener\"\n  \t})\n\t\tif block_given?\n\t\t  link_to(name, options, html_options, &block)\n\t\telse\n\t\t  link_to(name, options, html_options)\n\t\tend\n  end\n```\n請參考：[About rel=noopener](https://mathiasbynens.github.io/rel-noopener/)\n\n再來就是 viewhelper 裡面有很多還蠻好用的方法，我們不用再花很大的功夫重造輪子，像是：\n\n* [link_to_if](http://apidock.com/rails/v4.2.1/ActionView/Helpers/UrlHelper/link_to_if)\n* [link_to_unless](http://apidock.com/rails/v4.2.1/ActionView/Helpers/UrlHelper/link_to_unless)\n* [link_to_unless_current](http://apidock.com/rails/v4.2.1/ActionView/Helpers/UrlHelper/link_to_unless_current)\n\n不過每次只要一動到 helper 就很容易出包...，但直接用原生的 HTML 不但很醜，又不好維護，所以在撰寫 helper 的時候，為了保險還是寫一下 test 吧！\n\n最近的有個想法是將常用的片段程式碼拆成 partial，**並且用比較統一的方式管理！**，每次接到新的頁面就要先思考哪些會是局部代碼，哪些會是共用代碼。\n\n### partial 設計的幾個要點：\n\n經過這次標籤消失的事件，首先先跟顆顆說聲道歉之外，更應該檢討的是以下幾點：\n\n1. 預設值很重要！\n2. if else 判斷式要思考更全面\n3. 如果害怕沒有預設狀況，就乾脆讓他噴例外\n\n第三點的實作方法如下：\n\n```ruby\n# in component_helper.rb\n# ui_component 方法是對 render 的進一步包裝。\ndef ui_component(url, props = {})\n  render \"components/#{url}\", locals: props\nend\n\n# in error_helper.rb\ndef check_required_options!(locals, *options)\n    options.each do |option|\n      raise MissingOptionError, %Q{option \"#{option.to_s}\" is required.} if locals[option].nil?\n    end\n  end\n\n\n  private\n\n  class MissingOptionError < StandardError\n  end\n```\n\n然後在 partial 的程式碼裡面：\n\n```html\n// in _tags.html.erb\n<% check_required_options locals, :propA, :propsB, :propsC %>\n```\n\n這樣如果 locals 裡面的 option 不夠完整，就會在使用的時候噴出例外，不知道這樣的設計夠不夠完整。而且 partial 設計的時候很容易因為時間久的關係，忘記了 locals 裡面的選項，在 partial 裡面養成檢查 locals 的習慣，可以幫助我們補上遺落的 option。不知道這樣的設計夠不夠恰當跟完整？還請顆顆提出意見。\n\n### component 化\n\n這邊的 component 化並不是指全部使用 react 改寫，畢竟我們的頁面也還沒有到這種需求。但是既然 rails 有強大的 partial 機制跟 view heleper 方法，我們可以在撰寫的時候做更進一步的拆分：\n\n```html\n<div id=\"page_id\">\n  <header>\n    <%= load_component(\"company_header\") %>\n  </header>\n  <main>\n    <aside>\n    \t<%= load_component(\"company_sidebar__header\") %>\n\t    <%= load_component(\"company_sidebar__content\") %>\n    </aside>\n\t  <%= load_component(\"company_summary\") %>\n    <%= load_component(\"company_introduction\") %>\n\t\t<%= load_component(\"company_section\") %>\n  </main>\n  <footer>\n  \t<%= load_component(\"company_footer\") %>\n  </footer>\n</div>\n```\n\n但其實目前主站的頁面都仍時常變動，所以過早的抽象化反而會浪費更多成本吧！不過未來如果能用這樣的方式來撰寫程式碼，相信應該是非常好維護的！\n\n## Webstrom\n\n其實以前也是那種很瞧不起 IDE 的那一派，開起來要花我好幾秒，重點是又吃記憶體，然後又要常常使用滑鼠操作...。但使用 IDE 來幫助我們 debug、重構是一件非常省力又輕鬆的事情，只要右鍵 => refacter 即可。\n\n所以如果是一般的功能開發，如果牽扯到比較多檔案的 CSS 或是 JS 檔案的話，我會使用 Webstorm 來開發，搭配 react 跟 jsx 的 plugin，不用每次都會忘記 action 的名字在不同檔案跳來跳去，或是突然忘記長長的 API 又跑去找文件，要整理 code 也只要按下 refactor 就好，出錯的機率自然會降低、也節省了不必要的時間。\n\n但如果是剛入門的人還是建議從文字編輯器開始，門檻比較低。不然設定 IDE 的時間，都可以吃好幾碗肉骨茶麵了。\n\n## CSS @supports\n\n這個屬性\n","slug":"weekly-thought-7-31","published":1,"updated":"2016-11-14T11:51:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p95001rb75tcddnhytp","content":"<h2 id=\"發現的新東西\"><a href=\"#發現的新東西\" class=\"headerlink\" title=\"發現的新東西\"></a>發現的新東西</h2><h3 id=\"瀏覽器的字體渲染\"><a href=\"#瀏覽器的字體渲染\" class=\"headerlink\" title=\"瀏覽器的字體渲染\"></a>瀏覽器的字體渲染</h3><p>前陣子發現了 <code>font-smoothing</code> 的屬性，雖然 w3c 已經把他從標準刪除，但在 chrome 上面還是可以使用這個屬性。</p>\n<p>但令人好奇的是，其他瀏覽器的字體渲染方式呢？</p>\n<p>其實字型渲染是一個一直以來容易被忽略，卻又是極為重要的議題。因為網站的易讀性除了 layout 之外，再來就是字體了。</p>\n<p>為了確認網站在瀏覽器的一致性，稍微研究了一下字體渲染的方式。<br>分享在這邊給大家做參考。</p>\n<p>每個字，在電腦當中都會被當作一個向量圖像。而當我們把字體渲染在螢幕上的時候，就會把字型用像素渲染的方式呈現在螢幕上，所以每個字其實都是由一個個小方塊組合起來的。</p>\n<p>但問題發生了，用小方塊的壞處就是在邊緣會出現無可避免的鋸齒狀，造成閱讀體驗不佳。</p>\n<h2 id=\"基本解法-grayscale\"><a href=\"#基本解法-grayscale\" class=\"headerlink\" title=\"基本解法 grayscale\"></a>基本解法 grayscale</h2><p>這個解法是讓邊緣的像素補上一些灰階的像素，讓字型遠遠看起來比較圓滑，用這些灰階的像素來補償字體本來應該有的面積。這個方法很聰明又優雅，讓人不禁佩服。</p>\n<h3 id=\"進階解法-subpixel\"><a href=\"#進階解法-subpixel\" class=\"headerlink\" title=\"進階解法 subpixel\"></a>進階解法 subpixel</h3><p>顏色信息，如果我們把屏幕截圖不斷放大，可以看到字體邊緣有紅藍兩色出現，這就是亞像素渲染了。</p>\n<p>在LCD屏中，一個像素是由紅綠藍三個緊密排列的亞像素構成的，它們決定了這一像素的顏色和亮度。由於它們是如此之小，以至於肉眼不會把它們看作是一個個獨立的色點。如果我們仔細看看上圖中被白點標記的「紅色」像素，就可以發現它所採用的渲染策略：所有的亞像素都可以單獨控制開或關的；若「空白」像素最右側的亞像素是紅色的話，則此像素都將填滿紅色。</p>\n<h3 id=\"問題點：百家爭鳴的瀏覽器\"><a href=\"#問題點：百家爭鳴的瀏覽器\" class=\"headerlink\" title=\"問題點：百家爭鳴的瀏覽器\"></a>問題點：百家爭鳴的瀏覽器</h3><p>每個瀏覽器實作字型渲染的方式都不盡相同，甚至不同的 OS 下也是。更蛋疼的是，在Windows下還可能採用兩種技術來渲染—— GDI或者DirectWrite。</p>\n<p>Windows<br>在Windows系統下，字體格式對其渲染效果有很顯著的影響，比如PostScript字體和TrueType字體之間就存在著巨大的差別。但這種差別並不是由瀏覽器所引起的，只要底層的字體一樣，我們就可以看到完全相同的渲染效果。</p>\n<p>儘管這種方法並不十分可靠，但從字體的命名中我們可以大致推斷該字體所採用的渲染技術，比如，EOT和.ttf格式一定是TrueType技術，反之.otf通常是PostScript技術。但是還有一中封裝的字體格式WOFF，它可以包含其中任意一種字體格式。因此光看文件名 ​​是不可能清楚它所採用的渲染技術的。除了EOT​​和.ttf格式文件可以斷定是TrueType渲染技術外，其他文件格式所包含的是哪種字體都無法確定。因此在你購買字體時，你最好對想要購買的字體做一番了解。（@Ryekee :我覺得這一句根本不用翻譯，中國還有人會買字體麼？）</p>\n<p>TrueType和PostScript的區別在於描繪曲線時所採用的數學方法不同，但這一差異對柵格器並不會造成太大的影響，只有字型設計人員才需要考慮著兩者的差別。另一個重要的區別就是所採用的字體微調的方法。PostScript只包含了組成字體的各種元素的抽象位置信息，而TrueType則包含了非常詳細的底層命令，直接接管了渲染的進程。然而造成兩種渲染技術的差異並不是它們的設計理念上的差別，而是源於Micro$oft採對TrueType採用了新的渲染引擎。</p>\n<p>操作系统OS提供了支持不同的字体渲染方法的API。在windows下是GDI(Graphics Device Interface)和DirectWrite，OS X下是Quartz。</p>\n<p>GDI分为GDI Grayscale和GDI ClearType。前者为灰阶渲染API，后者是亚像素渲染API。由于GDI ClearType并未对字体进行垂直方向的平滑，因此当字体较大时会出现边缘不平滑的情况。为了弥补GDI ClearType的不足，MS实现了DirectWrite API，它在GDI ClearType的基础上增加了垂直方向的平滑。<br>但是！字体渲染的API都是由浏览器厂商自己选择的！</p>\n<p>使用同一颜色，感官上的颜色深浅为：黑白渲染&gt;grayscale&gt;sub-pixel。</p>\n<p>Chrome35/36采用的是GDI ClearType，因此在字体较大时边缘会出现毛刺，而FF30采用的DirectWrite则没有此类问题。如下图所示：</p>\n<p>不過最近看了一下 windows 的字型渲染，不得不說微軟在這方面還真是下了不少功夫。</p>\n<p>越來越多的字體設計師都開始注意到Web字體所帶來的技術問題，尤其是TrueType字體的微調。隨著Web字體產業的崛起，他們願意付出精力為屏幕顯示而優化字體。在不遠的將來，我們將看到大量精心設計的字體問世（或者至少是對現有字體的更新）。</p>\n<p>隨著屏幕分辨率的增加（以及對柵格器的重大改進），我們慢慢地不再擔心字體渲染的技術細節。採用GDI渲染模式的瀏覽器必將拖後腿，正因為此，未來數年內，我們都還無法放心的使用無微調的TrueType字體。只有當這一類瀏覽器用戶比例降到足夠低的程度的時候，TrueType字體微調（耗時又需要高超的技巧）才可以被扔到一邊。儘管目前市面上幾乎所有Web字體都是TrueType格式的，我仍希望字體行業能夠大規模轉向PostScript格式，因為這種字體能為設計師減少絕大部分的工作。</p>\n<p>不過好處是，科技日新月異。希望之後不用再擔心字型渲染的東西。</p>\n<p>MAC 使用他們自己的引擎來渲染字體，不管 truetype 跟 posttype 渲染方式都一樣。這個渲染引擎只有一個字，屌。</p>\n<p>truetype 跟 posttype 的差別。</p>\n<h3 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h3><p>如果想直接看結果，在網頁的時候，可以使用反鋸齒的技術來增加易讀性。<br>但如果在手機上建議關閉，因為反鋸齒的演算需要比較多的 GPU 來做計算。通常直接採用灰階的渲染方式就夠用了！</p>\n<h3 id=\"事件控制\"><a href=\"#事件控制\" class=\"headerlink\" title=\"事件控制\"></a>事件控制</h3><p>如果可以，希望在每個檔案都能夠新增一個 EventManager 的方式，統一管理事件。我很喜歡事件委託的方式。</p>\n<p>善用 data attribute 的方式來給標籤一些好用的屬性。</p>\n<h2 id=\"microdata\"><a href=\"#microdata\" class=\"headerlink\" title=\"microdata\"></a><a href=\"http://lepture.com/zh/2015/fe-microdata\" target=\"_blank\" rel=\"external\">microdata</a></h2><h2 id=\"Rails-view\"><a href=\"#Rails-view\" class=\"headerlink\" title=\"Rails view\"></a>Rails view</h2><p>最近希望把一些常用的 tag 跟撰寫方式拆成 helper，於是開始去研究 rails 裡面的 view helper method。發現裡面的 helper 撰寫大有學問，這邊跟大家分享：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">link_to</span><span class=\"params\">(name = <span class=\"literal\">nil</span>, options = <span class=\"literal\">nil</span>, html_options = <span class=\"literal\">nil</span>, &amp;block)</span></span></div><div class=\"line\">  html_options, options, name = options, name, block <span class=\"keyword\">if</span> block_given?</div><div class=\"line\">  options <span class=\"params\">||</span>= &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  html_options = convert_options_to_data_attributes(options, html_options)</div><div class=\"line\"></div><div class=\"line\">  url = url_for(options)</div><div class=\"line\">  html_options[<span class=\"string\">'href'</span>] <span class=\"params\">||</span>= url</div><div class=\"line\"></div><div class=\"line\">  content_tag(<span class=\"symbol\">:a</span>, name <span class=\"params\">||</span> url, html_options, &amp;block)</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>這邊用 <code>link_to</code> 方法舉例，可以看到這邊分成了兩種方式，如果有給定 <code>block</code> 的話，會將傳入的參數作轉換，如果沒有的話，則是將 <code>option</code> 做處理之後，傳給     <code>content_tag</code> 這個方法。注意到這邊的 <code>block_given?</code> 方法，有這個方法我們就可以很容易的判斷是否有傳入 block。</p>\n<p>所以在設計 helper 的時候，可以適時包裝這些方法，簡化 helper 的複雜度：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">link_to_with_noopener</span><span class=\"params\">(name = <span class=\"literal\">nil</span>, options = &#123;&#125;, html_options = <span class=\"literal\">nil</span>, &amp;block)</span></span></div><div class=\"line\">\thtml_options.merge!(&#123;</div><div class=\"line\">\t\t<span class=\"symbol\">:ref</span> =&gt; <span class=\"string\">\"noopener\"</span></div><div class=\"line\">\t&#125;)</div><div class=\"line\"><span class=\"keyword\">if</span> block_given?</div><div class=\"line\">  link_to(name, options, html_options, &amp;block)</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">  link_to(name, options, html_options)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>請參考：<a href=\"https://mathiasbynens.github.io/rel-noopener/\" target=\"_blank\" rel=\"external\">About rel=noopener</a></p>\n<p>再來就是 viewhelper 裡面有很多還蠻好用的方法，我們不用再花很大的功夫重造輪子，像是：</p>\n<ul>\n<li><a href=\"http://apidock.com/rails/v4.2.1/ActionView/Helpers/UrlHelper/link_to_if\" target=\"_blank\" rel=\"external\">link_to_if</a></li>\n<li><a href=\"http://apidock.com/rails/v4.2.1/ActionView/Helpers/UrlHelper/link_to_unless\" target=\"_blank\" rel=\"external\">link_to_unless</a></li>\n<li><a href=\"http://apidock.com/rails/v4.2.1/ActionView/Helpers/UrlHelper/link_to_unless_current\" target=\"_blank\" rel=\"external\">link_to_unless_current</a></li>\n</ul>\n<p>不過每次只要一動到 helper 就很容易出包…，但直接用原生的 HTML 不但很醜，又不好維護，所以在撰寫 helper 的時候，為了保險還是寫一下 test 吧！</p>\n<p>最近的有個想法是將常用的片段程式碼拆成 partial，<strong>並且用比較統一的方式管理！</strong>，每次接到新的頁面就要先思考哪些會是局部代碼，哪些會是共用代碼。</p>\n<h3 id=\"partial-設計的幾個要點：\"><a href=\"#partial-設計的幾個要點：\" class=\"headerlink\" title=\"partial 設計的幾個要點：\"></a>partial 設計的幾個要點：</h3><p>經過這次標籤消失的事件，首先先跟顆顆說聲道歉之外，更應該檢討的是以下幾點：</p>\n<ol>\n<li>預設值很重要！</li>\n<li>if else 判斷式要思考更全面</li>\n<li>如果害怕沒有預設狀況，就乾脆讓他噴例外</li>\n</ol>\n<p>第三點的實作方法如下：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># in component_helper.rb</span></div><div class=\"line\"><span class=\"comment\"># ui_component 方法是對 render 的進一步包裝。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ui_component</span><span class=\"params\">(url, props = &#123;&#125;)</span></span></div><div class=\"line\">  render <span class=\"string\">\"components/<span class=\"subst\">#&#123;url&#125;</span>\"</span>, <span class=\"symbol\">locals:</span> props</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># in error_helper.rb</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check_required_options!</span><span class=\"params\">(locals, *options)</span></span></div><div class=\"line\">    options.each <span class=\"keyword\">do</span> <span class=\"params\">|option|</span></div><div class=\"line\">      raise MissingOptionError, <span class=\"string\">%Q&#123;option \"<span class=\"subst\">#&#123;option.to_s&#125;</span>\" is required.&#125;</span> <span class=\"keyword\">if</span> locals[option].<span class=\"literal\">nil</span>?</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  private</div><div class=\"line\"></div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MissingOptionError</span> &lt; StandardError</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>然後在 partial 的程式碼裡面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// in _tags.html.erb</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">check_required_options</span> <span class=\"attr\">locals</span>, <span class=\"attr\">:propA</span>, <span class=\"attr\">:propsB</span>, <span class=\"attr\">:propsC</span> %&gt;</span></div></pre></td></tr></table></figure>\n<p>這樣如果 locals 裡面的 option 不夠完整，就會在使用的時候噴出例外，不知道這樣的設計夠不夠完整。而且 partial 設計的時候很容易因為時間久的關係，忘記了 locals 裡面的選項，在 partial 裡面養成檢查 locals 的習慣，可以幫助我們補上遺落的 option。不知道這樣的設計夠不夠恰當跟完整？還請顆顆提出意見。</p>\n<h3 id=\"component-化\"><a href=\"#component-化\" class=\"headerlink\" title=\"component 化\"></a>component 化</h3><p>這邊的 component 化並不是指全部使用 react 改寫，畢竟我們的頁面也還沒有到這種需求。但是既然 rails 有強大的 partial 機制跟 view heleper 方法，我們可以在撰寫的時候做更進一步的拆分：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page_id\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">load_component</span>(\"<span class=\"attr\">company_header</span>\") %&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aside</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">load_component</span>(\"<span class=\"attr\">company_sidebar__header</span>\") %&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">load_component</span>(\"<span class=\"attr\">company_sidebar__content</span>\") %&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></div><div class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">load_component</span>(\"<span class=\"attr\">company_summary</span>\") %&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">load_component</span>(\"<span class=\"attr\">company_introduction</span>\") %&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">load_component</span>(\"<span class=\"attr\">company_section</span>\") %&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">load_component</span>(\"<span class=\"attr\">company_footer</span>\") %&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>但其實目前主站的頁面都仍時常變動，所以過早的抽象化反而會浪費更多成本吧！不過未來如果能用這樣的方式來撰寫程式碼，相信應該是非常好維護的！</p>\n<h2 id=\"Webstrom\"><a href=\"#Webstrom\" class=\"headerlink\" title=\"Webstrom\"></a>Webstrom</h2><p>其實以前也是那種很瞧不起 IDE 的那一派，開起來要花我好幾秒，重點是又吃記憶體，然後又要常常使用滑鼠操作…。但使用 IDE 來幫助我們 debug、重構是一件非常省力又輕鬆的事情，只要右鍵 =&gt; refacter 即可。</p>\n<p>所以如果是一般的功能開發，如果牽扯到比較多檔案的 CSS 或是 JS 檔案的話，我會使用 Webstorm 來開發，搭配 react 跟 jsx 的 plugin，不用每次都會忘記 action 的名字在不同檔案跳來跳去，或是突然忘記長長的 API 又跑去找文件，要整理 code 也只要按下 refactor 就好，出錯的機率自然會降低、也節省了不必要的時間。</p>\n<p>但如果是剛入門的人還是建議從文字編輯器開始，門檻比較低。不然設定 IDE 的時間，都可以吃好幾碗肉骨茶麵了。</p>\n<h2 id=\"CSS-supports\"><a href=\"#CSS-supports\" class=\"headerlink\" title=\"CSS @supports\"></a>CSS @supports</h2><p>這個屬性</p>\n","excerpt":"","more":"<h2 id=\"發現的新東西\"><a href=\"#發現的新東西\" class=\"headerlink\" title=\"發現的新東西\"></a>發現的新東西</h2><h3 id=\"瀏覽器的字體渲染\"><a href=\"#瀏覽器的字體渲染\" class=\"headerlink\" title=\"瀏覽器的字體渲染\"></a>瀏覽器的字體渲染</h3><p>前陣子發現了 <code>font-smoothing</code> 的屬性，雖然 w3c 已經把他從標準刪除，但在 chrome 上面還是可以使用這個屬性。</p>\n<p>但令人好奇的是，其他瀏覽器的字體渲染方式呢？</p>\n<p>其實字型渲染是一個一直以來容易被忽略，卻又是極為重要的議題。因為網站的易讀性除了 layout 之外，再來就是字體了。</p>\n<p>為了確認網站在瀏覽器的一致性，稍微研究了一下字體渲染的方式。<br>分享在這邊給大家做參考。</p>\n<p>每個字，在電腦當中都會被當作一個向量圖像。而當我們把字體渲染在螢幕上的時候，就會把字型用像素渲染的方式呈現在螢幕上，所以每個字其實都是由一個個小方塊組合起來的。</p>\n<p>但問題發生了，用小方塊的壞處就是在邊緣會出現無可避免的鋸齒狀，造成閱讀體驗不佳。</p>\n<h2 id=\"基本解法-grayscale\"><a href=\"#基本解法-grayscale\" class=\"headerlink\" title=\"基本解法 grayscale\"></a>基本解法 grayscale</h2><p>這個解法是讓邊緣的像素補上一些灰階的像素，讓字型遠遠看起來比較圓滑，用這些灰階的像素來補償字體本來應該有的面積。這個方法很聰明又優雅，讓人不禁佩服。</p>\n<h3 id=\"進階解法-subpixel\"><a href=\"#進階解法-subpixel\" class=\"headerlink\" title=\"進階解法 subpixel\"></a>進階解法 subpixel</h3><p>顏色信息，如果我們把屏幕截圖不斷放大，可以看到字體邊緣有紅藍兩色出現，這就是亞像素渲染了。</p>\n<p>在LCD屏中，一個像素是由紅綠藍三個緊密排列的亞像素構成的，它們決定了這一像素的顏色和亮度。由於它們是如此之小，以至於肉眼不會把它們看作是一個個獨立的色點。如果我們仔細看看上圖中被白點標記的「紅色」像素，就可以發現它所採用的渲染策略：所有的亞像素都可以單獨控制開或關的；若「空白」像素最右側的亞像素是紅色的話，則此像素都將填滿紅色。</p>\n<h3 id=\"問題點：百家爭鳴的瀏覽器\"><a href=\"#問題點：百家爭鳴的瀏覽器\" class=\"headerlink\" title=\"問題點：百家爭鳴的瀏覽器\"></a>問題點：百家爭鳴的瀏覽器</h3><p>每個瀏覽器實作字型渲染的方式都不盡相同，甚至不同的 OS 下也是。更蛋疼的是，在Windows下還可能採用兩種技術來渲染—— GDI或者DirectWrite。</p>\n<p>Windows<br>在Windows系統下，字體格式對其渲染效果有很顯著的影響，比如PostScript字體和TrueType字體之間就存在著巨大的差別。但這種差別並不是由瀏覽器所引起的，只要底層的字體一樣，我們就可以看到完全相同的渲染效果。</p>\n<p>儘管這種方法並不十分可靠，但從字體的命名中我們可以大致推斷該字體所採用的渲染技術，比如，EOT和.ttf格式一定是TrueType技術，反之.otf通常是PostScript技術。但是還有一中封裝的字體格式WOFF，它可以包含其中任意一種字體格式。因此光看文件名 ​​是不可能清楚它所採用的渲染技術的。除了EOT​​和.ttf格式文件可以斷定是TrueType渲染技術外，其他文件格式所包含的是哪種字體都無法確定。因此在你購買字體時，你最好對想要購買的字體做一番了解。（@Ryekee :我覺得這一句根本不用翻譯，中國還有人會買字體麼？）</p>\n<p>TrueType和PostScript的區別在於描繪曲線時所採用的數學方法不同，但這一差異對柵格器並不會造成太大的影響，只有字型設計人員才需要考慮著兩者的差別。另一個重要的區別就是所採用的字體微調的方法。PostScript只包含了組成字體的各種元素的抽象位置信息，而TrueType則包含了非常詳細的底層命令，直接接管了渲染的進程。然而造成兩種渲染技術的差異並不是它們的設計理念上的差別，而是源於Micro$oft採對TrueType採用了新的渲染引擎。</p>\n<p>操作系统OS提供了支持不同的字体渲染方法的API。在windows下是GDI(Graphics Device Interface)和DirectWrite，OS X下是Quartz。</p>\n<p>GDI分为GDI Grayscale和GDI ClearType。前者为灰阶渲染API，后者是亚像素渲染API。由于GDI ClearType并未对字体进行垂直方向的平滑，因此当字体较大时会出现边缘不平滑的情况。为了弥补GDI ClearType的不足，MS实现了DirectWrite API，它在GDI ClearType的基础上增加了垂直方向的平滑。<br>但是！字体渲染的API都是由浏览器厂商自己选择的！</p>\n<p>使用同一颜色，感官上的颜色深浅为：黑白渲染&gt;grayscale&gt;sub-pixel。</p>\n<p>Chrome35/36采用的是GDI ClearType，因此在字体较大时边缘会出现毛刺，而FF30采用的DirectWrite则没有此类问题。如下图所示：</p>\n<p>不過最近看了一下 windows 的字型渲染，不得不說微軟在這方面還真是下了不少功夫。</p>\n<p>越來越多的字體設計師都開始注意到Web字體所帶來的技術問題，尤其是TrueType字體的微調。隨著Web字體產業的崛起，他們願意付出精力為屏幕顯示而優化字體。在不遠的將來，我們將看到大量精心設計的字體問世（或者至少是對現有字體的更新）。</p>\n<p>隨著屏幕分辨率的增加（以及對柵格器的重大改進），我們慢慢地不再擔心字體渲染的技術細節。採用GDI渲染模式的瀏覽器必將拖後腿，正因為此，未來數年內，我們都還無法放心的使用無微調的TrueType字體。只有當這一類瀏覽器用戶比例降到足夠低的程度的時候，TrueType字體微調（耗時又需要高超的技巧）才可以被扔到一邊。儘管目前市面上幾乎所有Web字體都是TrueType格式的，我仍希望字體行業能夠大規模轉向PostScript格式，因為這種字體能為設計師減少絕大部分的工作。</p>\n<p>不過好處是，科技日新月異。希望之後不用再擔心字型渲染的東西。</p>\n<p>MAC 使用他們自己的引擎來渲染字體，不管 truetype 跟 posttype 渲染方式都一樣。這個渲染引擎只有一個字，屌。</p>\n<p>truetype 跟 posttype 的差別。</p>\n<h3 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h3><p>如果想直接看結果，在網頁的時候，可以使用反鋸齒的技術來增加易讀性。<br>但如果在手機上建議關閉，因為反鋸齒的演算需要比較多的 GPU 來做計算。通常直接採用灰階的渲染方式就夠用了！</p>\n<h3 id=\"事件控制\"><a href=\"#事件控制\" class=\"headerlink\" title=\"事件控制\"></a>事件控制</h3><p>如果可以，希望在每個檔案都能夠新增一個 EventManager 的方式，統一管理事件。我很喜歡事件委託的方式。</p>\n<p>善用 data attribute 的方式來給標籤一些好用的屬性。</p>\n<h2 id=\"microdata\"><a href=\"#microdata\" class=\"headerlink\" title=\"microdata\"></a><a href=\"http://lepture.com/zh/2015/fe-microdata\">microdata</a></h2><h2 id=\"Rails-view\"><a href=\"#Rails-view\" class=\"headerlink\" title=\"Rails view\"></a>Rails view</h2><p>最近希望把一些常用的 tag 跟撰寫方式拆成 helper，於是開始去研究 rails 裡面的 view helper method。發現裡面的 helper 撰寫大有學問，這邊跟大家分享：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">link_to</span><span class=\"params\">(name = <span class=\"literal\">nil</span>, options = <span class=\"literal\">nil</span>, html_options = <span class=\"literal\">nil</span>, &amp;block)</span></span></div><div class=\"line\">  html_options, options, name = options, name, block <span class=\"keyword\">if</span> block_given?</div><div class=\"line\">  options <span class=\"params\">||</span>= &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  html_options = convert_options_to_data_attributes(options, html_options)</div><div class=\"line\"></div><div class=\"line\">  url = url_for(options)</div><div class=\"line\">  html_options[<span class=\"string\">'href'</span>] <span class=\"params\">||</span>= url</div><div class=\"line\"></div><div class=\"line\">  content_tag(<span class=\"symbol\">:a</span>, name <span class=\"params\">||</span> url, html_options, &amp;block)</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>這邊用 <code>link_to</code> 方法舉例，可以看到這邊分成了兩種方式，如果有給定 <code>block</code> 的話，會將傳入的參數作轉換，如果沒有的話，則是將 <code>option</code> 做處理之後，傳給     <code>content_tag</code> 這個方法。注意到這邊的 <code>block_given?</code> 方法，有這個方法我們就可以很容易的判斷是否有傳入 block。</p>\n<p>所以在設計 helper 的時候，可以適時包裝這些方法，簡化 helper 的複雜度：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">link_to_with_noopener</span><span class=\"params\">(name = <span class=\"literal\">nil</span>, options = &#123;&#125;, html_options = <span class=\"literal\">nil</span>, &amp;block)</span></span></div><div class=\"line\">\thtml_options.merge!(&#123;</div><div class=\"line\">\t\t<span class=\"symbol\">:ref</span> =&gt; <span class=\"string\">\"noopener\"</span></div><div class=\"line\">\t&#125;)</div><div class=\"line\"><span class=\"keyword\">if</span> block_given?</div><div class=\"line\">  link_to(name, options, html_options, &amp;block)</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">  link_to(name, options, html_options)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>請參考：<a href=\"https://mathiasbynens.github.io/rel-noopener/\">About rel=noopener</a></p>\n<p>再來就是 viewhelper 裡面有很多還蠻好用的方法，我們不用再花很大的功夫重造輪子，像是：</p>\n<ul>\n<li><a href=\"http://apidock.com/rails/v4.2.1/ActionView/Helpers/UrlHelper/link_to_if\">link_to_if</a></li>\n<li><a href=\"http://apidock.com/rails/v4.2.1/ActionView/Helpers/UrlHelper/link_to_unless\">link_to_unless</a></li>\n<li><a href=\"http://apidock.com/rails/v4.2.1/ActionView/Helpers/UrlHelper/link_to_unless_current\">link_to_unless_current</a></li>\n</ul>\n<p>不過每次只要一動到 helper 就很容易出包…，但直接用原生的 HTML 不但很醜，又不好維護，所以在撰寫 helper 的時候，為了保險還是寫一下 test 吧！</p>\n<p>最近的有個想法是將常用的片段程式碼拆成 partial，<strong>並且用比較統一的方式管理！</strong>，每次接到新的頁面就要先思考哪些會是局部代碼，哪些會是共用代碼。</p>\n<h3 id=\"partial-設計的幾個要點：\"><a href=\"#partial-設計的幾個要點：\" class=\"headerlink\" title=\"partial 設計的幾個要點：\"></a>partial 設計的幾個要點：</h3><p>經過這次標籤消失的事件，首先先跟顆顆說聲道歉之外，更應該檢討的是以下幾點：</p>\n<ol>\n<li>預設值很重要！</li>\n<li>if else 判斷式要思考更全面</li>\n<li>如果害怕沒有預設狀況，就乾脆讓他噴例外</li>\n</ol>\n<p>第三點的實作方法如下：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># in component_helper.rb</span></div><div class=\"line\"><span class=\"comment\"># ui_component 方法是對 render 的進一步包裝。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ui_component</span><span class=\"params\">(url, props = &#123;&#125;)</span></span></div><div class=\"line\">  render <span class=\"string\">\"components/<span class=\"subst\">#&#123;url&#125;</span>\"</span>, <span class=\"symbol\">locals:</span> props</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># in error_helper.rb</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check_required_options!</span><span class=\"params\">(locals, *options)</span></span></div><div class=\"line\">    options.each <span class=\"keyword\">do</span> <span class=\"params\">|option|</span></div><div class=\"line\">      raise MissingOptionError, <span class=\"string\">%Q&#123;option \"<span class=\"subst\">#&#123;option.to_s&#125;</span>\" is required.&#125;</span> <span class=\"keyword\">if</span> locals[option].<span class=\"literal\">nil</span>?</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  private</div><div class=\"line\"></div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MissingOptionError</span> &lt; StandardError</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>然後在 partial 的程式碼裡面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// in _tags.html.erb</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">check_required_options</span> <span class=\"attr\">locals</span>, <span class=\"attr\">:propA</span>, <span class=\"attr\">:propsB</span>, <span class=\"attr\">:propsC</span> %&gt;</span></div></pre></td></tr></table></figure>\n<p>這樣如果 locals 裡面的 option 不夠完整，就會在使用的時候噴出例外，不知道這樣的設計夠不夠完整。而且 partial 設計的時候很容易因為時間久的關係，忘記了 locals 裡面的選項，在 partial 裡面養成檢查 locals 的習慣，可以幫助我們補上遺落的 option。不知道這樣的設計夠不夠恰當跟完整？還請顆顆提出意見。</p>\n<h3 id=\"component-化\"><a href=\"#component-化\" class=\"headerlink\" title=\"component 化\"></a>component 化</h3><p>這邊的 component 化並不是指全部使用 react 改寫，畢竟我們的頁面也還沒有到這種需求。但是既然 rails 有強大的 partial 機制跟 view heleper 方法，我們可以在撰寫的時候做更進一步的拆分：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page_id\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">load_component</span>(\"<span class=\"attr\">company_header</span>\") %&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aside</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">load_component</span>(\"<span class=\"attr\">company_sidebar__header</span>\") %&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">load_component</span>(\"<span class=\"attr\">company_sidebar__content</span>\") %&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></div><div class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">load_component</span>(\"<span class=\"attr\">company_summary</span>\") %&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">load_component</span>(\"<span class=\"attr\">company_introduction</span>\") %&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">load_component</span>(\"<span class=\"attr\">company_section</span>\") %&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">load_component</span>(\"<span class=\"attr\">company_footer</span>\") %&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>但其實目前主站的頁面都仍時常變動，所以過早的抽象化反而會浪費更多成本吧！不過未來如果能用這樣的方式來撰寫程式碼，相信應該是非常好維護的！</p>\n<h2 id=\"Webstrom\"><a href=\"#Webstrom\" class=\"headerlink\" title=\"Webstrom\"></a>Webstrom</h2><p>其實以前也是那種很瞧不起 IDE 的那一派，開起來要花我好幾秒，重點是又吃記憶體，然後又要常常使用滑鼠操作…。但使用 IDE 來幫助我們 debug、重構是一件非常省力又輕鬆的事情，只要右鍵 =&gt; refacter 即可。</p>\n<p>所以如果是一般的功能開發，如果牽扯到比較多檔案的 CSS 或是 JS 檔案的話，我會使用 Webstorm 來開發，搭配 react 跟 jsx 的 plugin，不用每次都會忘記 action 的名字在不同檔案跳來跳去，或是突然忘記長長的 API 又跑去找文件，要整理 code 也只要按下 refactor 就好，出錯的機率自然會降低、也節省了不必要的時間。</p>\n<p>但如果是剛入門的人還是建議從文字編輯器開始，門檻比較低。不然設定 IDE 的時間，都可以吃好幾碗肉骨茶麵了。</p>\n<h2 id=\"CSS-supports\"><a href=\"#CSS-supports\" class=\"headerlink\" title=\"CSS @supports\"></a>CSS @supports</h2><p>這個屬性</p>\n"},{"title":"weekly thought-7/17","keywords":"a, b,c","date":"2016-07-17T01:48:34.000Z","_content":"\n\n## 發現的新東西\n\n### [別跟我說你懂 margin](http://www.hicss.net/do-not-tell-me-you-understand-margin/)\n\n拿捏 margin 跟 padding 可以很容易地看出前端工程師對 CSS 的掌握程度。說真的超多眉眉角角的，不過看完文章發現原來 margin 的妙用這麼多。以後的實踐或許有比較容易的方法也說不定！\n\n### [MutationObserver](http://javascript.ruanyifeng.com/dom/mutationobserver.html)\n\n這個鮮為人知的 API，被喜歡翻 MSDN 的我挖掘到了，基本上已經支持目前主流的瀏覽器（IE11+)。\n\n看完介紹會發現他很像事件，專門給 DOM 的變化使用的，不過不同的是，一般的事件是同步的，而 MutationObserver 是**非同步**的。\n\n這可以幫助我們在 DOM 有變化的時候，做出相對應的反應。\n\n利用這個特性，我們可以達到以下幾個應用：\n1. lazy loading\n2. initialize\n\n因為在 HTML 實際被 render 之前，DOM 就已經先下載下來了，所以我們可以在 rendering 之前就改變 DOM 的內容。\n\n```js\nvar observer =  new  MutationObserver ( function ( mutations ){ \n  for  ( var i = 0 ; i < mutations . length ; i ++){ \n    for  ( var j = 0 ; j < mutations [ i ]. addedNodes . length ; j ++ ){ \n      lazyLoad ( mutations [ i ]. addedNodes [ j ]); \n    } \n  } \n});\n\nobserver . observe ( document . documentElement ,  { \n  childList :  true , \n  subtree :  true \n});\n```\n\n### [astrum](http://astrum.nodividestudio.com/)\n\n這是一個很炫砲的 style guide library。做得非常精緻。\n最近像這些 styleguide 的 library 一直推陳出新，其實就像潘大所說的。寫文件是好的，但是一定要評估成本、其他人的熟悉成本、要建構的時間等等，不能只是因為又潮又炫就自己跳下去自幹。而是要讓寫文件這件事情逐漸被引入。\n\n不過當作 side project 或是自己想玩玩看就另當別論了。\n\n### 新的問題\n\n每個框架都是為了解決某個問題而出現的。但使用了某個框架之後，好像逐漸又會萌生新的問題。我把一些自己在開發上常會碰到的問題整理了一下：\n\n1. 文件切換\n\n我覺得很麻煩的一點就是要一直在 component 之間跳來跳去，有時候還要切過去看看 action, reducer 之類的，久了很容易阻礙思考。\n\n2. Webpack 打包過慢\n\n要 bundle 的檔案越來越多，webpack 逐漸變得沒有那麼快了。每次寫完 code 還要等他 bundle，而且每次更新都會 reload 一次，說真的還挺麻煩的。\n\n### SudoDashboard\n\n其實只是想練習 dashboard 的 UI 跟 Websocket 的實作。不過感覺做起來還蠻實用的，最近空閒的時候應該會開始組織一下。還請潘大多多擔任設計指導。\n\n","source":"_posts/weekly-thought-7-17.md","raw":"---\ntitle: weekly thought-7/17\ncategories: 前端週刊\ntags:\n  - sudo週刊\nkeywords: 'a, b,c'\ndate: 2016-07-17 09:48:34\n---\n\n\n## 發現的新東西\n\n### [別跟我說你懂 margin](http://www.hicss.net/do-not-tell-me-you-understand-margin/)\n\n拿捏 margin 跟 padding 可以很容易地看出前端工程師對 CSS 的掌握程度。說真的超多眉眉角角的，不過看完文章發現原來 margin 的妙用這麼多。以後的實踐或許有比較容易的方法也說不定！\n\n### [MutationObserver](http://javascript.ruanyifeng.com/dom/mutationobserver.html)\n\n這個鮮為人知的 API，被喜歡翻 MSDN 的我挖掘到了，基本上已經支持目前主流的瀏覽器（IE11+)。\n\n看完介紹會發現他很像事件，專門給 DOM 的變化使用的，不過不同的是，一般的事件是同步的，而 MutationObserver 是**非同步**的。\n\n這可以幫助我們在 DOM 有變化的時候，做出相對應的反應。\n\n利用這個特性，我們可以達到以下幾個應用：\n1. lazy loading\n2. initialize\n\n因為在 HTML 實際被 render 之前，DOM 就已經先下載下來了，所以我們可以在 rendering 之前就改變 DOM 的內容。\n\n```js\nvar observer =  new  MutationObserver ( function ( mutations ){ \n  for  ( var i = 0 ; i < mutations . length ; i ++){ \n    for  ( var j = 0 ; j < mutations [ i ]. addedNodes . length ; j ++ ){ \n      lazyLoad ( mutations [ i ]. addedNodes [ j ]); \n    } \n  } \n});\n\nobserver . observe ( document . documentElement ,  { \n  childList :  true , \n  subtree :  true \n});\n```\n\n### [astrum](http://astrum.nodividestudio.com/)\n\n這是一個很炫砲的 style guide library。做得非常精緻。\n最近像這些 styleguide 的 library 一直推陳出新，其實就像潘大所說的。寫文件是好的，但是一定要評估成本、其他人的熟悉成本、要建構的時間等等，不能只是因為又潮又炫就自己跳下去自幹。而是要讓寫文件這件事情逐漸被引入。\n\n不過當作 side project 或是自己想玩玩看就另當別論了。\n\n### 新的問題\n\n每個框架都是為了解決某個問題而出現的。但使用了某個框架之後，好像逐漸又會萌生新的問題。我把一些自己在開發上常會碰到的問題整理了一下：\n\n1. 文件切換\n\n我覺得很麻煩的一點就是要一直在 component 之間跳來跳去，有時候還要切過去看看 action, reducer 之類的，久了很容易阻礙思考。\n\n2. Webpack 打包過慢\n\n要 bundle 的檔案越來越多，webpack 逐漸變得沒有那麼快了。每次寫完 code 還要等他 bundle，而且每次更新都會 reload 一次，說真的還挺麻煩的。\n\n### SudoDashboard\n\n其實只是想練習 dashboard 的 UI 跟 Websocket 的實作。不過感覺做起來還蠻實用的，最近空閒的時候應該會開始組織一下。還請潘大多多擔任設計指導。\n\n","slug":"weekly-thought-7-17","published":1,"updated":"2016-11-14T11:54:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizse9p97001tb75t4j89c1b8","content":"<h2 id=\"發現的新東西\"><a href=\"#發現的新東西\" class=\"headerlink\" title=\"發現的新東西\"></a>發現的新東西</h2><h3 id=\"別跟我說你懂-margin\"><a href=\"#別跟我說你懂-margin\" class=\"headerlink\" title=\"別跟我說你懂 margin\"></a><a href=\"http://www.hicss.net/do-not-tell-me-you-understand-margin/\" target=\"_blank\" rel=\"external\">別跟我說你懂 margin</a></h3><p>拿捏 margin 跟 padding 可以很容易地看出前端工程師對 CSS 的掌握程度。說真的超多眉眉角角的，不過看完文章發現原來 margin 的妙用這麼多。以後的實踐或許有比較容易的方法也說不定！</p>\n<h3 id=\"MutationObserver\"><a href=\"#MutationObserver\" class=\"headerlink\" title=\"MutationObserver\"></a><a href=\"http://javascript.ruanyifeng.com/dom/mutationobserver.html\" target=\"_blank\" rel=\"external\">MutationObserver</a></h3><p>這個鮮為人知的 API，被喜歡翻 MSDN 的我挖掘到了，基本上已經支持目前主流的瀏覽器（IE11+)。</p>\n<p>看完介紹會發現他很像事件，專門給 DOM 的變化使用的，不過不同的是，一般的事件是同步的，而 MutationObserver 是<strong>非同步</strong>的。</p>\n<p>這可以幫助我們在 DOM 有變化的時候，做出相對應的反應。</p>\n<p>利用這個特性，我們可以達到以下幾個應用：</p>\n<ol>\n<li>lazy loading</li>\n<li>initialize</li>\n</ol>\n<p>因為在 HTML 實際被 render 之前，DOM 就已經先下載下來了，所以我們可以在 rendering 之前就改變 DOM 的內容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> observer =  <span class=\"keyword\">new</span>  MutationObserver ( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> mutations </span>)</span>&#123; </div><div class=\"line\">  <span class=\"keyword\">for</span>  ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; mutations . length ; i ++)&#123; </div><div class=\"line\">    <span class=\"keyword\">for</span>  ( <span class=\"keyword\">var</span> j = <span class=\"number\">0</span> ; j &lt; mutations [ i ]. addedNodes . length ; j ++ )&#123; </div><div class=\"line\">      lazyLoad ( mutations [ i ]. addedNodes [ j ]); </div><div class=\"line\">    &#125; </div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">observer . observe ( <span class=\"built_in\">document</span> . documentElement ,  &#123; </div><div class=\"line\">  <span class=\"attr\">childList</span> :  <span class=\"literal\">true</span> , </div><div class=\"line\">  <span class=\"attr\">subtree</span> :  <span class=\"literal\">true</span> </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"astrum\"><a href=\"#astrum\" class=\"headerlink\" title=\"astrum\"></a><a href=\"http://astrum.nodividestudio.com/\" target=\"_blank\" rel=\"external\">astrum</a></h3><p>這是一個很炫砲的 style guide library。做得非常精緻。<br>最近像這些 styleguide 的 library 一直推陳出新，其實就像潘大所說的。寫文件是好的，但是一定要評估成本、其他人的熟悉成本、要建構的時間等等，不能只是因為又潮又炫就自己跳下去自幹。而是要讓寫文件這件事情逐漸被引入。</p>\n<p>不過當作 side project 或是自己想玩玩看就另當別論了。</p>\n<h3 id=\"新的問題\"><a href=\"#新的問題\" class=\"headerlink\" title=\"新的問題\"></a>新的問題</h3><p>每個框架都是為了解決某個問題而出現的。但使用了某個框架之後，好像逐漸又會萌生新的問題。我把一些自己在開發上常會碰到的問題整理了一下：</p>\n<ol>\n<li>文件切換</li>\n</ol>\n<p>我覺得很麻煩的一點就是要一直在 component 之間跳來跳去，有時候還要切過去看看 action, reducer 之類的，久了很容易阻礙思考。</p>\n<ol>\n<li>Webpack 打包過慢</li>\n</ol>\n<p>要 bundle 的檔案越來越多，webpack 逐漸變得沒有那麼快了。每次寫完 code 還要等他 bundle，而且每次更新都會 reload 一次，說真的還挺麻煩的。</p>\n<h3 id=\"SudoDashboard\"><a href=\"#SudoDashboard\" class=\"headerlink\" title=\"SudoDashboard\"></a>SudoDashboard</h3><p>其實只是想練習 dashboard 的 UI 跟 Websocket 的實作。不過感覺做起來還蠻實用的，最近空閒的時候應該會開始組織一下。還請潘大多多擔任設計指導。</p>\n","excerpt":"","more":"<h2 id=\"發現的新東西\"><a href=\"#發現的新東西\" class=\"headerlink\" title=\"發現的新東西\"></a>發現的新東西</h2><h3 id=\"別跟我說你懂-margin\"><a href=\"#別跟我說你懂-margin\" class=\"headerlink\" title=\"別跟我說你懂 margin\"></a><a href=\"http://www.hicss.net/do-not-tell-me-you-understand-margin/\">別跟我說你懂 margin</a></h3><p>拿捏 margin 跟 padding 可以很容易地看出前端工程師對 CSS 的掌握程度。說真的超多眉眉角角的，不過看完文章發現原來 margin 的妙用這麼多。以後的實踐或許有比較容易的方法也說不定！</p>\n<h3 id=\"MutationObserver\"><a href=\"#MutationObserver\" class=\"headerlink\" title=\"MutationObserver\"></a><a href=\"http://javascript.ruanyifeng.com/dom/mutationobserver.html\">MutationObserver</a></h3><p>這個鮮為人知的 API，被喜歡翻 MSDN 的我挖掘到了，基本上已經支持目前主流的瀏覽器（IE11+)。</p>\n<p>看完介紹會發現他很像事件，專門給 DOM 的變化使用的，不過不同的是，一般的事件是同步的，而 MutationObserver 是<strong>非同步</strong>的。</p>\n<p>這可以幫助我們在 DOM 有變化的時候，做出相對應的反應。</p>\n<p>利用這個特性，我們可以達到以下幾個應用：</p>\n<ol>\n<li>lazy loading</li>\n<li>initialize</li>\n</ol>\n<p>因為在 HTML 實際被 render 之前，DOM 就已經先下載下來了，所以我們可以在 rendering 之前就改變 DOM 的內容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> observer =  <span class=\"keyword\">new</span>  MutationObserver ( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> mutations </span>)</span>&#123; </div><div class=\"line\">  <span class=\"keyword\">for</span>  ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; mutations . length ; i ++)&#123; </div><div class=\"line\">    <span class=\"keyword\">for</span>  ( <span class=\"keyword\">var</span> j = <span class=\"number\">0</span> ; j &lt; mutations [ i ]. addedNodes . length ; j ++ )&#123; </div><div class=\"line\">      lazyLoad ( mutations [ i ]. addedNodes [ j ]); </div><div class=\"line\">    &#125; </div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">observer . observe ( <span class=\"built_in\">document</span> . documentElement ,  &#123; </div><div class=\"line\">  <span class=\"attr\">childList</span> :  <span class=\"literal\">true</span> , </div><div class=\"line\">  <span class=\"attr\">subtree</span> :  <span class=\"literal\">true</span> </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"astrum\"><a href=\"#astrum\" class=\"headerlink\" title=\"astrum\"></a><a href=\"http://astrum.nodividestudio.com/\">astrum</a></h3><p>這是一個很炫砲的 style guide library。做得非常精緻。<br>最近像這些 styleguide 的 library 一直推陳出新，其實就像潘大所說的。寫文件是好的，但是一定要評估成本、其他人的熟悉成本、要建構的時間等等，不能只是因為又潮又炫就自己跳下去自幹。而是要讓寫文件這件事情逐漸被引入。</p>\n<p>不過當作 side project 或是自己想玩玩看就另當別論了。</p>\n<h3 id=\"新的問題\"><a href=\"#新的問題\" class=\"headerlink\" title=\"新的問題\"></a>新的問題</h3><p>每個框架都是為了解決某個問題而出現的。但使用了某個框架之後，好像逐漸又會萌生新的問題。我把一些自己在開發上常會碰到的問題整理了一下：</p>\n<ol>\n<li>文件切換</li>\n</ol>\n<p>我覺得很麻煩的一點就是要一直在 component 之間跳來跳去，有時候還要切過去看看 action, reducer 之類的，久了很容易阻礙思考。</p>\n<ol>\n<li>Webpack 打包過慢</li>\n</ol>\n<p>要 bundle 的檔案越來越多，webpack 逐漸變得沒有那麼快了。每次寫完 code 還要等他 bundle，而且每次更新都會 reload 一次，說真的還挺麻煩的。</p>\n<h3 id=\"SudoDashboard\"><a href=\"#SudoDashboard\" class=\"headerlink\" title=\"SudoDashboard\"></a>SudoDashboard</h3><p>其實只是想練習 dashboard 的 UI 跟 Websocket 的實作。不過感覺做起來還蠻實用的，最近空閒的時候應該會開始組織一下。還請潘大多多擔任設計指導。</p>\n"}],"PostAsset":[{"_id":"source/_posts/chatops/payload.png","slug":"payload.png","post":"cizse9p3s0000b75toicfnouu","modified":1,"renderable":0},{"_id":"source/_posts/responsive-flex/example3.png","slug":"example3.png","post":"cizse9p8c0016b75tdyfm91ab","modified":1,"renderable":0},{"_id":"source/_posts/chatops/process.png","post":"cizse9p3s0000b75toicfnouu","slug":"process.png","modified":1,"renderable":1},{"_id":"source/_posts/chatops/success.png","post":"cizse9p3s0000b75toicfnouu","slug":"success.png","modified":1,"renderable":1},{"_id":"source/_posts/responsive-flex/example1.png","post":"cizse9p8c0016b75tdyfm91ab","slug":"example1.png","modified":1,"renderable":1},{"_id":"source/_posts/responsive-flex/example2.png","slug":"example2.png","post":"cizse9p8c0016b75tdyfm91ab","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cizse9p3s0000b75toicfnouu","category_id":"cizse9p430002b75tl7j28po3","_id":"cizse9p4d0006b75tstx2afuf"},{"post_id":"cizse9p3z0001b75ts6j9s5xe","category_id":"cizse9p4b0004b75t6uzjvgw5","_id":"cizse9p4h0008b75tl6junw4y"},{"post_id":"cizse9p6l000db75t203fts95","category_id":"cizse9p4b0004b75t6uzjvgw5","_id":"cizse9p6w000ib75t3ox5f2el"},{"post_id":"cizse9p6x000jb75tksktlz6a","category_id":"cizse9p4b0004b75t6uzjvgw5","_id":"cizse9p7o000pb75tyj16mio1"},{"post_id":"cizse9p6q000eb75tsgx722k1","category_id":"cizse9p6w000hb75tyjpr6adw","_id":"cizse9p7q000sb75tjblkug62"},{"post_id":"cizse9p7h000nb75t1jb7jbqv","category_id":"cizse9p4b0004b75t6uzjvgw5","_id":"cizse9p80000vb75tvny4qkyo"},{"post_id":"cizse9p7o000qb75tzzqjw2ln","category_id":"cizse9p4b0004b75t6uzjvgw5","_id":"cizse9p85000yb75tki1rl0mc"},{"post_id":"cizse9p6t000gb75tw5196ll0","category_id":"cizse9p7n000ob75tts78kpkq","_id":"cizse9p880011b75tcxp4p3r0"},{"post_id":"cizse9p7r000tb75tlo4oyokx","category_id":"cizse9p4b0004b75t6uzjvgw5","_id":"cizse9p8c0014b75tx6e6r4qk"},{"post_id":"cizse9p81000wb75t8lp4qdlv","category_id":"cizse9p4b0004b75t6uzjvgw5","_id":"cizse9p8g0019b75tmzd2vyw0"},{"post_id":"cizse9p7b000kb75tq94xn7zc","category_id":"cizse9p7n000ob75tts78kpkq","_id":"cizse9p8i001bb75tb5h433xw"},{"post_id":"cizse9p85000zb75t3hh9x4q9","category_id":"cizse9p7n000ob75tts78kpkq","_id":"cizse9p8n001eb75tjsyyiy1y"},{"post_id":"cizse9p8c0016b75tdyfm91ab","category_id":"cizse9p4b0004b75t6uzjvgw5","_id":"cizse9p8p001gb75tepz09szi"},{"post_id":"cizse9p8g001ab75tn5udjs87","category_id":"cizse9p4b0004b75t6uzjvgw5","_id":"cizse9p8t001jb75t78j7sj0u"},{"post_id":"cizse9p8j001cb75tcyjri65l","category_id":"cizse9p4b0004b75t6uzjvgw5","_id":"cizse9p8x001mb75t88vm6zn6"},{"post_id":"cizse9p880012b75t7zxcl7vz","category_id":"cizse9p8g0018b75th1yyngcu","_id":"cizse9p8z001qb75tx62nv0dx"},{"post_id":"cizse9p8n001fb75t2yrlte1z","category_id":"cizse9p4b0004b75t6uzjvgw5","_id":"cizse9p97001sb75tfvc5wtil"},{"post_id":"cizse9p8p001hb75t35hg4pcw","category_id":"cizse9p6w000hb75tyjpr6adw","_id":"cizse9p99001vb75tn64h57nt"},{"post_id":"cizse9p8u001kb75tovhksxkp","category_id":"cizse9p6w000hb75tyjpr6adw","_id":"cizse9p9a001xb75t20dkjblw"},{"post_id":"cizse9p8x001nb75tkwqwsf9n","category_id":"cizse9p6w000hb75tyjpr6adw","_id":"cizse9p9b001zb75t236va4a2"},{"post_id":"cizse9p95001rb75tcddnhytp","category_id":"cizse9p6w000hb75tyjpr6adw","_id":"cizse9p9b0021b75ttzizz4w1"},{"post_id":"cizse9p97001tb75t4j89c1b8","category_id":"cizse9p6w000hb75tyjpr6adw","_id":"cizse9p9b0022b75t5t06uw5r"}],"PostTag":[{"post_id":"cizse9p3s0000b75toicfnouu","tag_id":"cizse9p480003b75tfnwkmge4","_id":"cizse9p4h0009b75tic8mpz6p"},{"post_id":"cizse9p3s0000b75toicfnouu","tag_id":"cizse9p4c0005b75tywju7c2l","_id":"cizse9p4i000ab75tarle9eqo"},{"post_id":"cizse9p3s0000b75toicfnouu","tag_id":"cizse9p4e0007b75tqer8oy9g","_id":"cizse9p4i000bb75tfuephld0"},{"post_id":"cizse9p6l000db75t203fts95","tag_id":"cizse9p6s000fb75trtcff7xv","_id":"cizse9p7h000mb75tutiyn4bg"},{"post_id":"cizse9p6q000eb75tsgx722k1","tag_id":"cizse9p7d000lb75tftdaz7i6","_id":"cizse9p880010b75tj3geept9"},{"post_id":"cizse9p6q000eb75tsgx722k1","tag_id":"cizse9p7q000rb75tg9nmdloe","_id":"cizse9p8b0013b75t8qp4sl72"},{"post_id":"cizse9p6t000gb75tw5196ll0","tag_id":"cizse9p84000xb75t9299y3g6","_id":"cizse9p8g0017b75tbtot7dix"},{"post_id":"cizse9p6x000jb75tksktlz6a","tag_id":"cizse9p8c0015b75tsydutsly","_id":"cizse9p8w001lb75t8wnlx67o"},{"post_id":"cizse9p6x000jb75tksktlz6a","tag_id":"cizse9p8m001db75t39mssfkm","_id":"cizse9p8z001ob75tebaso5hb"},{"post_id":"cizse9p7b000kb75tq94xn7zc","tag_id":"cizse9p84000xb75t9299y3g6","_id":"cizse9p9a001wb75to5lf03id"},{"post_id":"cizse9p7b000kb75tq94xn7zc","tag_id":"cizse9p8z001pb75tcbkeexzz","_id":"cizse9p9a001yb75tmw2ruobi"},{"post_id":"cizse9p7h000nb75t1jb7jbqv","tag_id":"cizse9p99001ub75tmx336vxs","_id":"cizse9p9c0024b75tq19vaabm"},{"post_id":"cizse9p7h000nb75t1jb7jbqv","tag_id":"cizse9p9b0020b75tajikvxex","_id":"cizse9p9c0025b75te334vz3b"},{"post_id":"cizse9p7o000qb75tzzqjw2ln","tag_id":"cizse9p99001ub75tmx336vxs","_id":"cizse9p9c0028b75tei5v52fd"},{"post_id":"cizse9p7o000qb75tzzqjw2ln","tag_id":"cizse9p9b0020b75tajikvxex","_id":"cizse9p9c0029b75tpzhw1p56"},{"post_id":"cizse9p7r000tb75tlo4oyokx","tag_id":"cizse9p9c0027b75t0hcvuflq","_id":"cizse9p9e002db75thdq2wv4y"},{"post_id":"cizse9p7r000tb75tlo4oyokx","tag_id":"cizse9p99001ub75tmx336vxs","_id":"cizse9p9e002eb75t3sijw2vf"},{"post_id":"cizse9p7r000tb75tlo4oyokx","tag_id":"cizse9p9e002bb75tccquvz71","_id":"cizse9p9f002gb75t3m79brjj"},{"post_id":"cizse9p81000wb75t8lp4qdlv","tag_id":"cizse9p9e002cb75tnfzsa95g","_id":"cizse9p9g002ib75t7l2m4wn0"},{"post_id":"cizse9p81000wb75t8lp4qdlv","tag_id":"cizse9p9e002fb75twy9jeha7","_id":"cizse9p9g002jb75thcrlmvst"},{"post_id":"cizse9p85000zb75t3hh9x4q9","tag_id":"cizse9p84000xb75t9299y3g6","_id":"cizse9p9g002mb75t8gshjwjy"},{"post_id":"cizse9p85000zb75t3hh9x4q9","tag_id":"cizse9p9f002hb75t3f1jkfwr","_id":"cizse9p9g002nb75tns4jt806"},{"post_id":"cizse9p85000zb75t3hh9x4q9","tag_id":"cizse9p9g002kb75tnuq5zksz","_id":"cizse9p9h002pb75tfykdn470"},{"post_id":"cizse9p8c0016b75tdyfm91ab","tag_id":"cizse9p9g002lb75t5xowgy6e","_id":"cizse9p9h002qb75td9ym9mpf"},{"post_id":"cizse9p8g001ab75tn5udjs87","tag_id":"cizse9p9h002ob75tdoxlgm9e","_id":"cizse9p9i002ub75t9d052t2z"},{"post_id":"cizse9p8g001ab75tn5udjs87","tag_id":"cizse9p9h002rb75tgga11t9b","_id":"cizse9p9i002vb75t4f2o7oeo"},{"post_id":"cizse9p8g001ab75tn5udjs87","tag_id":"cizse9p9h002sb75tozon60el","_id":"cizse9p9k002xb75thj0ji1ke"},{"post_id":"cizse9p8j001cb75tcyjri65l","tag_id":"cizse9p9h002tb75toh62hayi","_id":"cizse9p9l002yb75t0z1pcqmk"},{"post_id":"cizse9p8n001fb75t2yrlte1z","tag_id":"cizse9p9k002wb75tnre2n5oz","_id":"cizse9p9m0031b75tf2p8z0wa"},{"post_id":"cizse9p8n001fb75t2yrlte1z","tag_id":"cizse9p9l002zb75t8w4qpnrh","_id":"cizse9p9m0032b75tp8hlq33l"},{"post_id":"cizse9p8u001kb75tovhksxkp","tag_id":"cizse9p9m0030b75tpuux64lh","_id":"cizse9p9n0036b75trsm334ur"},{"post_id":"cizse9p8u001kb75tovhksxkp","tag_id":"cizse9p9m0033b75th1einmeq","_id":"cizse9p9o0037b75t1h1vnuyn"},{"post_id":"cizse9p8u001kb75tovhksxkp","tag_id":"cizse9p9n0034b75tahdfxlzz","_id":"cizse9p9o0039b75tet7phq9r"},{"post_id":"cizse9p8x001nb75tkwqwsf9n","tag_id":"cizse9p9n0035b75tkd37rh17","_id":"cizse9p9p003bb75tzrqq7ctj"},{"post_id":"cizse9p8x001nb75tkwqwsf9n","tag_id":"cizse9p9o0038b75trlviddu3","_id":"cizse9p9p003cb75ts7sdc4w2"},{"post_id":"cizse9p8x001nb75tkwqwsf9n","tag_id":"cizse9p6s000fb75trtcff7xv","_id":"cizse9p9p003eb75t8v1pzzov"},{"post_id":"cizse9p95001rb75tcddnhytp","tag_id":"cizse9p9b0020b75tajikvxex","_id":"cizse9p9p003fb75twfpe9t5w"},{"post_id":"cizse9p97001tb75t4j89c1b8","tag_id":"cizse9p9p003db75tqgtmoxen","_id":"cizse9p9p003gb75tf2fys9bg"}],"Tag":[{"name":"devops","_id":"cizse9p480003b75tfnwkmge4"},{"name":"chatops","_id":"cizse9p4c0005b75tywju7c2l"},{"name":"capistrano","_id":"cizse9p4e0007b75tqer8oy9g"},{"name":"css","_id":"cizse9p6s000fb75trtcff7xv"},{"name":"react","_id":"cizse9p7d000lb75tftdaz7i6"},{"name":"webpack","_id":"cizse9p7q000rb75tg9nmdloe"},{"name":"伊坂幸太郎","_id":"cizse9p84000xb75t9299y3g6"},{"name":"postcss","_id":"cizse9p8c0015b75tsydutsly"},{"name":"sass","_id":"cizse9p8m001db75t39mssfkm"},{"name":"推理","_id":"cizse9p8z001pb75tcbkeexzz"},{"name":"重構","_id":"cizse9p99001ub75tmx336vxs"},{"name":"前端","_id":"cizse9p9b0020b75tajikvxex"},{"name":"HTML","_id":"cizse9p9c0027b75t0hcvuflq"},{"name":"aria","_id":"cizse9p9e002bb75tccquvz71"},{"name":"canvas","_id":"cizse9p9e002cb75tnfzsa95g"},{"name":"low poly","_id":"cizse9p9e002fb75twy9jeha7"},{"name":"卓别林","_id":"cizse9p9f002hb75t3f1jkfwr"},{"name":"摩登時代","_id":"cizse9p9g002kb75tnuq5zksz"},{"name":"flex","_id":"cizse9p9g002lb75t5xowgy6e"},{"name":"smooth scoll","_id":"cizse9p9h002ob75tdoxlgm9e"},{"name":"animation","_id":"cizse9p9h002rb75tgga11t9b"},{"name":"easing","_id":"cizse9p9h002sb75tozon60el"},{"name":"scroll","_id":"cizse9p9h002tb75toh62hayi"},{"name":"webGL","_id":"cizse9p9k002wb75tnre2n5oz"},{"name":"IT 鐵人幫","_id":"cizse9p9l002zb75t8w4qpnrh"},{"name":"js","_id":"cizse9p9m0030b75tpuux64lh"},{"name":"draft-js","_id":"cizse9p9m0033b75th1einmeq"},{"name":"flow","_id":"cizse9p9n0034b75tahdfxlzz"},{"name":"javascript","_id":"cizse9p9n0035b75tkd37rh17"},{"name":"html","_id":"cizse9p9o0038b75trlviddu3"},{"name":"sudo週刊","_id":"cizse9p9p003db75tqgtmoxen"}]}}