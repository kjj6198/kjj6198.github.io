{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hueman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hueman/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/s-left.png","path":"css/images/s-left.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/logo-header.png","path":"css/images/logo-header.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/opacity-10.png","path":"css/images/opacity-10.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default.png","path":"css/images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/styles.css","path":"libs/titillium-web/styles.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/jquery/2.0.3/jquery.min.js","path":"libs/jquery/2.0.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1487474999000},{"_id":"themes/hueman/.gitignore","hash":"cd089ae45ce870c45e434019e8f1ed4f066cd425","modified":1485879562000},{"_id":"themes/hueman/README.md","hash":"defb1f667677e1fd13b3a4799a6c70eae621f796","modified":1485879562000},{"_id":"themes/hueman/LICENSE","hash":"3975b7883caeb33f61fada7c0ef4add7ab189849","modified":1485879562000},{"_id":"themes/hueman/_config.yml.example","hash":"e2dfa4a9506f4cdc85757c95598a9b101aca9a14","modified":1485879562000},{"_id":"themes/hueman/ko.yml","hash":"81ea44ecda87a4398bb6d88a3b02f6b73c9a1637","modified":1485879562000},{"_id":"themes/hueman/package.json","hash":"d4ff853568e592265c2c9a21ce358f15babec14a","modified":1485879562000},{"_id":"themes/hueman/.github/ISSUE_TEMPLATE.md","hash":"1ce6c6330e2e37fcf4764d69ed2c43670e30eb23","modified":1485879562000},{"_id":"themes/hueman/languages/ca.yml","hash":"d082e6f9e7615556b8f6c5f1286f0db8a0db195e","modified":1485879562000},{"_id":"themes/hueman/languages/en.yml","hash":"3416fee358d869e6abf0cca695edf8386349053f","modified":1485879562000},{"_id":"themes/hueman/languages/es.yml","hash":"97191c8ab7ce5334369d96f6e53a6d365a2057b1","modified":1485879562000},{"_id":"themes/hueman/languages/fr.yml","hash":"0624f8f7532f1312caaf4f8d498aab69c80a92f2","modified":1485879562000},{"_id":"themes/hueman/languages/hu.yml","hash":"5dd987ad5f33748bcba1d9a7eb78c1800b7c8bed","modified":1485879562000},{"_id":"themes/hueman/languages/id.yml","hash":"03e45cf88b69e657a340362e18668e443ddaae47","modified":1485879562000},{"_id":"themes/hueman/languages/ja.yml","hash":"56f3af0bf5cc56f9f7bf24fe5cb881a6a1b34e7b","modified":1485879562000},{"_id":"themes/hueman/languages/pt-BR.yml","hash":"6f9539673e08d66866bb210b78863ef68023f991","modified":1485879562000},{"_id":"themes/hueman/languages/ru.yml","hash":"99f111b39f867d421ff4cb859dd1deb26caa382e","modified":1485879562000},{"_id":"themes/hueman/languages/tr.yml","hash":"003cb50200eba865d57e5c53925636f1a5ec0a70","modified":1485879562000},{"_id":"themes/hueman/languages/vi.yml","hash":"edeb4492a08af458fe958dc4d48101c96750b159","modified":1485879562000},{"_id":"themes/hueman/languages/zh-CN.yml","hash":"f8df1da457035c149e8d1f85ba909bbc76a410d4","modified":1487475384000},{"_id":"themes/hueman/layout/category.ejs","hash":"5096d3f019098d9940429152295f6d6161d887ba","modified":1485879562000},{"_id":"themes/hueman/layout/archive.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1485879562000},{"_id":"themes/hueman/layout/index.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1485879562000},{"_id":"themes/hueman/layout/page.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1485879562000},{"_id":"themes/hueman/layout/layout.ejs","hash":"35fd7fe6d4e2d313246a0a31446a597714facdea","modified":1485879562000},{"_id":"themes/hueman/layout/post.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1485879562000},{"_id":"themes/hueman/layout/tag.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1485879562000},{"_id":"themes/hueman/scripts/excerpt.js","hash":"630f17f2647b2ba5b207dba36fb3c6587a3aa04f","modified":1485879562000},{"_id":"themes/hueman/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1485879562000},{"_id":"themes/hueman/scripts/thumbnail.js","hash":"e78b1b978fa1acad5409afc685d13f669e80b24f","modified":1485879562000},{"_id":"themes/hueman/layout/comment/disqus.ejs","hash":"83158f5b00f95acf847524fd7ffeb5aab25add78","modified":1485879562000},{"_id":"themes/hueman/layout/comment/counter.ejs","hash":"9c41bc718322ba0e4e08c301f15fae720c995b2e","modified":1485879562000},{"_id":"themes/hueman/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1485879562000},{"_id":"themes/hueman/layout/comment/facebook.ejs","hash":"6407d3d6823503d043935b0bc16fa5f61aa9e4dc","modified":1485879562000},{"_id":"themes/hueman/layout/comment/index.ejs","hash":"1ecc5ba82ae4236da7635a58d4584fd67f6f1fc3","modified":1485879562000},{"_id":"themes/hueman/layout/comment/isso.ejs","hash":"4f8b81ff5bb418ec11ce080d515f247bfe436014","modified":1485879562000},{"_id":"themes/hueman/layout/comment/scripts.ejs","hash":"305aa07646ab03e00d8239a811f4ec6f75751e1e","modified":1485879562000},{"_id":"themes/hueman/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1485879562000},{"_id":"themes/hueman/layout/common/archive.ejs","hash":"bf909e4d6798374daf114cf41540f2bd300408d9","modified":1485879562000},{"_id":"themes/hueman/layout/common/article.ejs","hash":"bcb1e4ccb099ce116e172f4b35cef0af0c2c129a","modified":1485879562000},{"_id":"themes/hueman/layout/common/content-title.ejs","hash":"43288ebc0ea30d80e6d7df56f2e7ed5d7935ed1a","modified":1485879562000},{"_id":"themes/hueman/layout/common/footer.ejs","hash":"4d01bd3d28820936b0d09529b60e9d6930afc9fe","modified":1485879562000},{"_id":"themes/hueman/layout/common/header.ejs","hash":"4dbb53393c3ebef01088592babf135d2f6559f47","modified":1485879562000},{"_id":"themes/hueman/layout/common/head.ejs","hash":"dacc29256a51d4867c662b6f1805d0d7652de45d","modified":1485879562000},{"_id":"themes/hueman/layout/common/scripts.ejs","hash":"db677ab336d31292bffc071b2115e25e9c6f198d","modified":1485879562000},{"_id":"themes/hueman/layout/common/summary.ejs","hash":"3ee280d4847f2cde7d450e298f917b10b9c5d507","modified":1485879562000},{"_id":"themes/hueman/layout/common/sidebar.ejs","hash":"745666ee78b714aa34d8774a005a0598261ec349","modified":1485879562000},{"_id":"themes/hueman/layout/common/thumbnail.ejs","hash":"c5fba5d5287f49e02040c530cd92312b2221a2c1","modified":1485879562000},{"_id":"themes/hueman/layout/plugin/baidu-analytics.ejs","hash":"d99089976258050666208f29000f84496fe1029c","modified":1485879562000},{"_id":"themes/hueman/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1485879562000},{"_id":"themes/hueman/layout/plugin/scripts.ejs","hash":"52552496d83d032702f9fc40da8d62894dc51dae","modified":1485879562000},{"_id":"themes/hueman/layout/search/baidu.ejs","hash":"bcffa60f2d1750ac7499e928f538176e3804393b","modified":1485879562000},{"_id":"themes/hueman/layout/search/index.ejs","hash":"1a6a742727018567f60f8815be0bff5a45294ce5","modified":1485879562000},{"_id":"themes/hueman/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1485879562000},{"_id":"themes/hueman/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1485879562000},{"_id":"themes/hueman/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1485879562000},{"_id":"themes/hueman/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1485879562000},{"_id":"themes/hueman/layout/share/default.ejs","hash":"7492f5b375a56c67a1a1a4f6b893e37f49dc86dc","modified":1485879562000},{"_id":"themes/hueman/layout/share/index.ejs","hash":"029e91aace5a4c0d8387fc7744c477ccc6865c30","modified":1485879562000},{"_id":"themes/hueman/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1485879562000},{"_id":"themes/hueman/layout/widget/archive.ejs","hash":"c4d303eaaa23768e52ead324c422a8900b1fe448","modified":1485879562000},{"_id":"themes/hueman/layout/widget/category.ejs","hash":"2d705df76f2eef7d695a971266fc104e89ca6bcd","modified":1485879562000},{"_id":"themes/hueman/layout/widget/links.ejs","hash":"97dab84d6336a4c926ddc288d5a6c264f54c50c3","modified":1485879562000},{"_id":"themes/hueman/layout/widget/recent_posts.ejs","hash":"16a2bd28bdf520616202670a18c6cc93d1dd3f54","modified":1485879562000},{"_id":"themes/hueman/layout/widget/sticky_posts.ejs","hash":"6bad4126bed652f5f9e93027cbe3ee03b67b034a","modified":1485879562000},{"_id":"themes/hueman/layout/widget/tag.ejs","hash":"bfbc63e675439dcdc35e07dce6948e41500b649c","modified":1485879562000},{"_id":"themes/hueman/layout/widget/tagcloud.ejs","hash":"3ecb048d6098bc3953043a4c25f1f7c4b23397cf","modified":1485879562000},{"_id":"themes/hueman/source/css/_extend.styl","hash":"2860d503b68ae81ea7675c82c6e63873e0c9e761","modified":1485879562000},{"_id":"themes/hueman/source/css/_variables.styl","hash":"ce03de3658b55b5f90bb4dd18679be18ec38acaa","modified":1485879562000},{"_id":"themes/hueman/source/css/_responsive.styl","hash":"4addaf2f203563accf0479850eda1ab4f4a4c34b","modified":1485879562000},{"_id":"themes/hueman/source/css/style.styl","hash":"b76d43839bda01ee791e71093f009ad2c8b093b2","modified":1485879562000},{"_id":"themes/hueman/source/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1485879562000},{"_id":"themes/hueman/source/js/main.js","hash":"ebe5a326605ab655155235c532b54a78a0662988","modified":1485879562000},{"_id":"themes/hueman/layout/common/post/category.ejs","hash":"f47522c059d3b4d721ce501203c05f94a285c0b5","modified":1485879562000},{"_id":"themes/hueman/layout/common/post/nav.ejs","hash":"c5f41ebf451cff39eaf116096604ce706a175767","modified":1485879562000},{"_id":"themes/hueman/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1485879562000},{"_id":"themes/hueman/layout/common/post/date.ejs","hash":"2d090d33cbd23129d63a0ba768a03d717399d9c5","modified":1485879562000},{"_id":"themes/hueman/layout/common/post/tag.ejs","hash":"a364204d7152adf6c7522b6568990437e8308d1f","modified":1485879562000},{"_id":"themes/hueman/layout/common/post/title.ejs","hash":"6d19c61afb1f5f71c483be2ce37c6820ac2cd8b5","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/index.styl","hash":"d421ed06c84f7a561b293f662a670bf132d41c63","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1485879562000},{"_id":"themes/hueman/source/css/_partial/assets.styl","hash":"3d95417663c5a737f064a31ab4ef52bac7fda8df","modified":1485879562000},{"_id":"themes/hueman/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1485879562000},{"_id":"themes/hueman/source/css/_partial/archive.styl","hash":"5e5fb791ab54f0acf33850f586f7aa8cb2782f3a","modified":1485879562000},{"_id":"themes/hueman/source/css/_partial/article.styl","hash":"0d836e162fc5b933a0844945d8f9a7f33393bc62","modified":1485879562000},{"_id":"themes/hueman/source/css/_partial/comment.styl","hash":"d2de8f2c1cf6236ead0800c2a1566e01e7ae0b44","modified":1485879562000},{"_id":"themes/hueman/source/css/_partial/footer.styl","hash":"8dffae4ac6a57e506e378a9ce44b85a15a912cad","modified":1485879562000},{"_id":"themes/hueman/source/css/_partial/header.styl","hash":"f94fcb4e2cbda45c8dc910ddb8ff4f19ff0644bf","modified":1485879562000},{"_id":"themes/hueman/source/css/_partial/insight.styl","hash":"3d66323e7b75ad197e80d7189a8d9216e1e1ef2f","modified":1485879562000},{"_id":"themes/hueman/source/css/_partial/nav.styl","hash":"587a9c9d304ed83eb0331a1d16693461805311c3","modified":1485879562000},{"_id":"themes/hueman/source/css/_partial/sidebar.styl","hash":"1e6255f1bfa1a820f70d5cfdadf2caa726bf853d","modified":1485879562000},{"_id":"themes/hueman/source/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1485879562000},{"_id":"themes/hueman/source/css/images/logo-header.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1485879562000},{"_id":"themes/hueman/source/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1485879562000},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1485879562000},{"_id":"themes/hueman/source/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1485879562000},{"_id":"themes/hueman/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1485879562000},{"_id":"themes/hueman/source/libs/titillium-web/styles.css","hash":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1485879562000},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1485879562000},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1485879562000},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1485879562000},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1485879562000},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1485879562000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1485879562000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1485879562000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1485879562000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1485879562000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1485879562000},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1485879562000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1485879562000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1485879562000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1485879562000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1485879562000},{"_id":"themes/hueman/source/libs/jquery/2.0.3/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1485879562000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1485879562000},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1485879562000},{"_id":"themes/hueman/_config.yml","hash":"79a51542b8b5e02fc68a22866a425563d51659bb","modified":1487475533000},{"_id":"themes/hueman/languages/zh-TW.yml","hash":"f8df1da457035c149e8d1f85ba909bbc76a410d4","modified":1487475384000},{"_id":"source/_posts/responsive-flex/example1.png","hash":"46415e1e6b976f38c0bfb2a55fd43a297eb6106a","modified":1479124117000},{"_id":"source/_posts/responsive-flex/example3.png","hash":"010f246ab21f1db5ee419167087188f4090dc1f0","modified":1479124117000},{"_id":"source/_posts/responsive-flex/example2.png","hash":"0dfd4db0f1a75a820371232cbf645066d412ed2c","modified":1479124117000},{"_id":"source/.DS_Store","hash":"550f81bf8f4b8825ca1d2b3da277df87ee39dc0d","modified":1487475678000},{"_id":"source/_posts/Day11-聖誕節特輯Three.js - 畫一棵幾何聖誕樹吧！.md","hash":"e2ca7908c460b160901baa69a479df8f5c3e5b6b","modified":1485325881000},{"_id":"source/_posts/Day14-three-scene.md","hash":"90e58bc0e6aa88be40e8443f918a39e999007341","modified":1485325905000},{"_id":"source/_posts/Day15-three-advanced.md","hash":"5225f674b294fa8e65757bb06125489240f61989","modified":1485325911000},{"_id":"source/_posts/Day16-Three.js-example.md","hash":"16eaf57bd4a5e4339e76db299b6991561c835f84","modified":1485326045000},{"_id":"source/_posts/Day17-Three.js-paranoma.md","hash":"1b075dc38c6ca8a0965e099a0e611db8789560ed","modified":1485325915000},{"_id":"source/_posts/Day19-Three.js 實用 debug 小工具.md","hash":"c8b22370231b017828584e7243b64b4d31712e4a","modified":1485325923000},{"_id":"source/_posts/Day18-paranoma2.md","hash":"fadd87de127276d9872156097538d6b320ff8024","modified":1485325920000},{"_id":"source/_posts/Day22-Three.js-CSS3D.md","hash":"bf98e8402fa48d0e524ad5a57bdc36229415ba14","modified":1485325993000},{"_id":"source/_posts/Day24-Three.js Loader.md","hash":"43a592e9a5e6f3b299d602e588d32634a62bb584","modified":1485326011000},{"_id":"source/_posts/Day25-aframe-introduction.md","hash":"a8390a3187bc1f5cb24718a1535d4b7023b68439","modified":1485325755000},{"_id":"source/_posts/Day26-aframe-api.md","hash":"427d74719226061e9ce5fb83915f4d189b6ba8f7","modified":1485325755000},{"_id":"source/_posts/Day27-aframe-overview.md","hash":"f7f623c44ebae87a99d4d8493ecd02de681ddfe7","modified":1485326088000},{"_id":"source/_posts/Day28-aframe-example.md","hash":"3fe60cc62732f55528c2f6394a7e51b141c53ab9","modified":1485325755000},{"_id":"source/_posts/Day29-example-d3-with-aframe.md","hash":"9168f3826bc96950793d410e4912de9b685aae9b","modified":1485325755000},{"_id":"source/_posts/Day30-aframe-curved-image.md","hash":"89e0ae3c312693cc1b5898052f1e39c8695b8790","modified":1485325755000},{"_id":"source/_posts/code-review-101.md","hash":"6fbd537e9015be52485ad10c1fe5cb7f73d4eb8e","modified":1478702365000},{"_id":"source/_posts/context-switch.md","hash":"89cbda99edcb28443b9a6326058a86830e808eb1","modified":1477562027000},{"_id":"source/_posts/css-variable.md","hash":"224408ecdf8800f8793889c278a3a8c37ed33865","modified":1479125236000},{"_id":"source/_posts/day1-introduction.md","hash":"e77fd8699bd035c96ac7cfcfb0ca6178b61c524c","modified":1485325864000},{"_id":"source/_posts/day10-perspective-and-light.md","hash":"8fe3552a74fffd4d86df61edde94b97ce539ec70","modified":1485325850000},{"_id":"source/_posts/day12-threeAPI.md","hash":"6021891ba8bda9a07987d6a71275d741eaa824ef","modified":1485325889000},{"_id":"source/_posts/day2-why-webgl.md","hash":"4c0b47b574d23bfbebb7354aa767a0a495c9e802","modified":1485325755000},{"_id":"source/_posts/day21-threejs-interaction.md","hash":"e3ee5118828379609e67e53740c7eae57a6ff553","modified":1485325929000},{"_id":"source/_posts/day23-three.js-css3DRenderer.md","hash":"e221c6c746efe5b86c15b5430471da77cf4cbd2a","modified":1485325934000},{"_id":"source/_posts/day3-how-we-see-the-image.md","hash":"9918c602c90238102cd27f3db2917d46a6182564","modified":1485325755000},{"_id":"source/_posts/day4-webGL-fundemental.md","hash":"03bc964b92f33f437f9bf6324d87a9f28d5e7613","modified":1485325755000},{"_id":"source/_posts/day5-webGL-passing-data.md","hash":"0ffba3daf49de496121624dd84d2d3622e0d6137","modified":1485325755000},{"_id":"source/_posts/day6-webG-basic-animation.md","hash":"9883e367f447e491ae2743e8fcfeb1ea46fd21b2","modified":1485325967000},{"_id":"source/_posts/day7-3d-model.md","hash":"6da9e41cbbbdb6c7eb43b17481d71db0f469a59b","modified":1485325963000},{"_id":"source/_posts/day8-webGL-effect.md","hash":"17b03d2b00f486ff595c83c34a650ff890a645de","modified":1485325958000},{"_id":"source/_posts/day9-webGL-conclusion.md","hash":"3637f27187604b9f63a6fec295b821df55b210ca","modified":1485325755000},{"_id":"source/_posts/gasline.md","hash":"f8f3df29a6d38af068dc3f48a4bdd099d98f5912","modified":1479128093000},{"_id":"source/_posts/go-to-postcss-or-not.md","hash":"11fc4afea797e66fc4b73136121ffdd2aefd733a","modified":1476359097000},{"_id":"source/_posts/isaka-kupa.md","hash":"47e71a7eb0415328a7b73d97097617391d72fb41","modified":1476601193000},{"_id":"source/_posts/legacy-code.md","hash":"5ae91cdbac99e2a576e5c6c23ee982937508a7f2","modified":1476790298000},{"_id":"source/_posts/legacy-code2.md","hash":"8eaadd71ff9484f677ef2ef8334654472dc76eff","modified":1476790320000},{"_id":"source/_posts/legacy-code3.md","hash":"bdee6536ca8fc789184b9ed5804cdccec4d83c1c","modified":1476790338000},{"_id":"source/_posts/rails-view.md","hash":"4ce7e119299ce1b6b9dd65ff681ca0daf66717d9","modified":1479124449000},{"_id":"source/_posts/low-poly-art.md","hash":"759f785008a48b19889f1d73888a870d1dcb9803","modified":1482548026000},{"_id":"source/_posts/redesign-blog.md","hash":"3bed4f95dad953fc210b7505b047011c8cb498a7","modified":1476112579000},{"_id":"source/_posts/responsive-design.md","hash":"cfd11a16e32ef0b8c75a222308b059bcb94b9fd8","modified":1479124069000},{"_id":"source/_posts/responsive-flex.md","hash":"8995081312bc3d4608ff84b5e526856488c98538","modified":1479124117000},{"_id":"source/_posts/scroll-animation-2.md","hash":"cf04f726b9361ea21ca1f13b6b63257c4410fb15","modified":1476858045000},{"_id":"source/_posts/scroll-animation.md","hash":"618e37f477bfd10aa96f86318d908575636fb9fe","modified":1476858064000},{"_id":"source/_posts/sql-note.md","hash":"5e6a28e4dc672da4c580b35bb3f876c6314483e3","modified":1476146041000},{"_id":"source/_posts/weekly-6-6.md","hash":"12e8d546c41271ed7a4d1ba27b583d4e001face5","modified":1479123910000},{"_id":"source/_posts/weekly-thought-5-23.md","hash":"0107d976525ac156799808aa79f02040e800961f","modified":1479123921000},{"_id":"source/_posts/weekly-thought-5-29.md","hash":"f01e47f26c1213aa9477bbf87c16776c89ed74df","modified":1479124011000},{"_id":"source/_posts/weekly-thought-5-30.md","hash":"adbfde5480313c4ca6c738dc6bdd6b12686d07c7","modified":1479124299000},{"_id":"source/_posts/weekly-thought-7-17.md","hash":"91c64a62746b92649187d0da38aee58d457856d3","modified":1479124491000},{"_id":"source/_posts/weekly-thought-7-31.md","hash":"0b955314fbed8d8e8855e614fff788500469b516","modified":1479124266000},{"_id":"source/_posts/.DS_Store","hash":"5cab42b751bc8af5d9b3e2ad878e647f17dded8b","modified":1487475683000}],"Category":[{"name":"前端週刊","_id":"cizc4k38d001bty5t5pls4hdf"},{"name":"前端","_id":"cizc4k39v001lty5tt6fnegwq"},{"name":"webGL","_id":"cizc4k3ai001sty5to4knipw9"},{"name":"前端","parent":"cizc4k3ai001sty5to4knipw9","_id":"cizc4k3ch0029ty5te08p9wb9"},{"name":"讀書心得","_id":"cizc4k3fn004qty5t34gijrc9"},{"name":"隨筆","_id":"cizc4k3h1005mty5tupictv8b"}],"Data":[],"Page":[],"Post":[{"title":"從 legacy code 中尋找出口（上）","date":"2016-06-11T00:56:15.000Z","_content":"\n\n在我第一次進入主產品開發後，把代碼從 Github 上面 pull 下來。\n\n「這是什麼鬼東西？」\n\n結構混亂，大量覆寫的 class 各處都是，以及很可怕的巢狀 ID。\nview 的部分也有些地方非常雜亂......。看來 legacy code 跟 refactor 永遠都在進行式。\n\n對於日新月異的前端來說，要接觸一個新技術、框架並不是太困難的事。但困難點在於如何在現有的大型專案中做取捨，我們常常會有其他考量。例如團隊的接受度、team leader、其他政治因素等等而無法輕易地將新框架套用在目前的專案上。\n\n這個系列的文章主要會分享如何在既有的專案中小心地進行重構。希望對各位有些幫助。\n\n## 目前遇到的問題\n\nHTML 的架構混亂肥大，許多 `util class` 四散各處，在 CSS 中更可以看到大量的覆寫 class。雖然聽說之前已經有整理過了，但顯然這個房間還充滿許多灰塵。\n\n我認為前端常常遇到的 smell 問題有：\n\n- 復用性不足：儘管已經採用 React，但仍有許多高耦合的 component。而且其中還夾雜著 flux 與 redux 兩種不同的 library\n- 大量混雜業務邏輯的代碼（如 API ability 的判斷等），不僅要實際去了解業務流程外，還要知道檔案放在哪，必要時可能還要去看後端的程式碼\n- HTML 的撰寫不夠語義化，充斥太多 `util class` 及 `atomic class`，後面接手的人比較難搞懂這行 view 裡頭所要表達的東西。\n- CSS 檔案的撰寫不夠模組化。有太多混雜的模組都放在同一隻檔案中，查找非常不方便。\n- 大量的覆寫 class 造成上版時有很多意外的狀況發生。\n\n沒有統一的規範跟撰寫方式，很快代碼就會往指數性的肥大邁進。\n\n身為一個前端工程師，經驗還稍嫌不足的我來說，雖然目前正在孤軍奮戰中，但其實還能做一些事。有問題對我來說是一件非常值得興奮的事，至少對我來說，那是一個可以捲起袖子來做事的大好機會。\n\n## 解法\n\n那麼，到底該怎麼做呢？我認為可以從以下幾點開始下手\n\n- 著手撰寫 `styleguide`，讓自己與之後的前端團隊快速上手，並且有一定的準則可以遵守\n- 技術選型：自動化工具、code quality 工具、選擇與淘汰\n- test 框架：前端代碼大部分都還沒寫 test，未來等架構穩定的時候希望可以趕快補上。\n- 讓重構變得簡單\n- 讓 comment 及 doc 變成習慣： comment 的 doc 永遠是工程師的好朋友！\n- 提交代碼的規範\n\n本系列的文章主要會著重在重構的部分，最後一篇會再跟大家分享文件應該寫些什麼，以及前端如何提交代碼及發送 pull request 給 code reviewer。\n\n目前已經大致撰寫了 styguide 的架構，下一步是逐漸重整 CSS 的架構以及拆分 HTML 組件。\n\n這不是一朝一夕就能完成的東西，甚至就某種角度來看會拖延到專案的進度。有點像是默默付出的工作吧...！畢竟在原有的專案中做改變本來就有較大的阻力。\n\n## 何時應該重構\n\n隨時重構，不要為了重構而重構。再來可以參考[三次法則](http://www.wikiwand.com/zh-tw/%E4%B8%89%E6%AC%A1%E6%B3%95%E5%88%99_(%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1))\n\n- 上版的時候對現有的 HTML 及 CSS 重構，或者對應的 component\n- 寫新的 js 模組時重構，順便撰寫 Comment 及文件\n- 送 pull request 的時候：不過要確定自己有寫上詳細的 comment 及 doc，才能提高 code reviewer 的 review 意願，而 senior 總是能更快看出代碼裡面的問題。\n\n我們常常對一些既有代碼的架構感到心癢，或者很想要趕快重構。但在 workaround 的情況下，有時重構的成本是非常大的。\n\n## 何時不應該重構\n\n其實比起重構來說，更重要的應該是拿捏不應該重構的程度。身為工程師或多或少都會對別人的代碼嗤之以鼻，恨不得趕快把 code 清掉。\n但，既然 code 有某種程度的肥大，代表他或多或少解決了問題。而且重構是需要**成本**的。就算是以目前的開發來說，通常也是先著重於將功能實作後，在有限度地作小幅度的調整以及逐漸補齊文件及註解。對於重構來說，最重要的是 `consistency`。s\n\n- 目前的解法雖然不漂亮，但確實解決問題的時候。\n- 目前的代碼重複率還不高的時候\n- 重構的成本太大，甚至影響到系統本身的時候。\n\n## 保持心平氣和\n\n重構的時候記得控制自己的情緒。我們很可能一不小心就在咒罵代碼或前任，然後在情緒上頭反而過度重構，造成更多的問題也說不定。\n\n> 代碼的存在是有歷史的\n\n有可能是進度太趕、有可能是政治因素、又或者當時的技術還沒到位。但可以確定的是，情緒化完全無法解決問題。\n\n[don't let anger contol you](http://www.apa.org/topics/anger/control.aspx)\n\n\n> Talk is cheap. Show me the code.\n\n下一篇，我會開始分享一些重構的技巧。\n\n## Final Word\n\n最後還是要聲明一下，這篇文章雖然會著重在一些重構的技巧上，但其實從 legacy code 中尋找出口的方法不只是重構而已。希望大家不要過往矯正，一看到髒 code 就急著捲起袖子重構。退一步評估一下成本跟重構的價值再做決定。\n\n#### Legacy Code 專欄\n\n- {% post_link 'legacy-code2' %}\n- {% post_link 'legacy-code3' %}\n","source":"_posts/legacy-code.md","raw":"---\ntitle: 從 legacy code 中尋找出口（上）\ncategories: 前端\ntags:\n  - 重構\n  - 前端\ndate: 2016-06-11 08:56:15\n---\n\n\n在我第一次進入主產品開發後，把代碼從 Github 上面 pull 下來。\n\n「這是什麼鬼東西？」\n\n結構混亂，大量覆寫的 class 各處都是，以及很可怕的巢狀 ID。\nview 的部分也有些地方非常雜亂......。看來 legacy code 跟 refactor 永遠都在進行式。\n\n對於日新月異的前端來說，要接觸一個新技術、框架並不是太困難的事。但困難點在於如何在現有的大型專案中做取捨，我們常常會有其他考量。例如團隊的接受度、team leader、其他政治因素等等而無法輕易地將新框架套用在目前的專案上。\n\n這個系列的文章主要會分享如何在既有的專案中小心地進行重構。希望對各位有些幫助。\n\n## 目前遇到的問題\n\nHTML 的架構混亂肥大，許多 `util class` 四散各處，在 CSS 中更可以看到大量的覆寫 class。雖然聽說之前已經有整理過了，但顯然這個房間還充滿許多灰塵。\n\n我認為前端常常遇到的 smell 問題有：\n\n- 復用性不足：儘管已經採用 React，但仍有許多高耦合的 component。而且其中還夾雜著 flux 與 redux 兩種不同的 library\n- 大量混雜業務邏輯的代碼（如 API ability 的判斷等），不僅要實際去了解業務流程外，還要知道檔案放在哪，必要時可能還要去看後端的程式碼\n- HTML 的撰寫不夠語義化，充斥太多 `util class` 及 `atomic class`，後面接手的人比較難搞懂這行 view 裡頭所要表達的東西。\n- CSS 檔案的撰寫不夠模組化。有太多混雜的模組都放在同一隻檔案中，查找非常不方便。\n- 大量的覆寫 class 造成上版時有很多意外的狀況發生。\n\n沒有統一的規範跟撰寫方式，很快代碼就會往指數性的肥大邁進。\n\n身為一個前端工程師，經驗還稍嫌不足的我來說，雖然目前正在孤軍奮戰中，但其實還能做一些事。有問題對我來說是一件非常值得興奮的事，至少對我來說，那是一個可以捲起袖子來做事的大好機會。\n\n## 解法\n\n那麼，到底該怎麼做呢？我認為可以從以下幾點開始下手\n\n- 著手撰寫 `styleguide`，讓自己與之後的前端團隊快速上手，並且有一定的準則可以遵守\n- 技術選型：自動化工具、code quality 工具、選擇與淘汰\n- test 框架：前端代碼大部分都還沒寫 test，未來等架構穩定的時候希望可以趕快補上。\n- 讓重構變得簡單\n- 讓 comment 及 doc 變成習慣： comment 的 doc 永遠是工程師的好朋友！\n- 提交代碼的規範\n\n本系列的文章主要會著重在重構的部分，最後一篇會再跟大家分享文件應該寫些什麼，以及前端如何提交代碼及發送 pull request 給 code reviewer。\n\n目前已經大致撰寫了 styguide 的架構，下一步是逐漸重整 CSS 的架構以及拆分 HTML 組件。\n\n這不是一朝一夕就能完成的東西，甚至就某種角度來看會拖延到專案的進度。有點像是默默付出的工作吧...！畢竟在原有的專案中做改變本來就有較大的阻力。\n\n## 何時應該重構\n\n隨時重構，不要為了重構而重構。再來可以參考[三次法則](http://www.wikiwand.com/zh-tw/%E4%B8%89%E6%AC%A1%E6%B3%95%E5%88%99_(%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1))\n\n- 上版的時候對現有的 HTML 及 CSS 重構，或者對應的 component\n- 寫新的 js 模組時重構，順便撰寫 Comment 及文件\n- 送 pull request 的時候：不過要確定自己有寫上詳細的 comment 及 doc，才能提高 code reviewer 的 review 意願，而 senior 總是能更快看出代碼裡面的問題。\n\n我們常常對一些既有代碼的架構感到心癢，或者很想要趕快重構。但在 workaround 的情況下，有時重構的成本是非常大的。\n\n## 何時不應該重構\n\n其實比起重構來說，更重要的應該是拿捏不應該重構的程度。身為工程師或多或少都會對別人的代碼嗤之以鼻，恨不得趕快把 code 清掉。\n但，既然 code 有某種程度的肥大，代表他或多或少解決了問題。而且重構是需要**成本**的。就算是以目前的開發來說，通常也是先著重於將功能實作後，在有限度地作小幅度的調整以及逐漸補齊文件及註解。對於重構來說，最重要的是 `consistency`。s\n\n- 目前的解法雖然不漂亮，但確實解決問題的時候。\n- 目前的代碼重複率還不高的時候\n- 重構的成本太大，甚至影響到系統本身的時候。\n\n## 保持心平氣和\n\n重構的時候記得控制自己的情緒。我們很可能一不小心就在咒罵代碼或前任，然後在情緒上頭反而過度重構，造成更多的問題也說不定。\n\n> 代碼的存在是有歷史的\n\n有可能是進度太趕、有可能是政治因素、又或者當時的技術還沒到位。但可以確定的是，情緒化完全無法解決問題。\n\n[don't let anger contol you](http://www.apa.org/topics/anger/control.aspx)\n\n\n> Talk is cheap. Show me the code.\n\n下一篇，我會開始分享一些重構的技巧。\n\n## Final Word\n\n最後還是要聲明一下，這篇文章雖然會著重在一些重構的技巧上，但其實從 legacy code 中尋找出口的方法不只是重構而已。希望大家不要過往矯正，一看到髒 code 就急著捲起袖子重構。退一步評估一下成本跟重構的價值再做決定。\n\n#### Legacy Code 專欄\n\n- {% post_link 'legacy-code2' %}\n- {% post_link 'legacy-code3' %}\n","slug":"legacy-code","published":1,"updated":"2016-10-18T11:31:38.000Z","_id":"cizc4k1ra000yty5t8l84eypd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在我第一次進入主產品開發後，把代碼從 Github 上面 pull 下來。</p>\n<p>「這是什麼鬼東西？」</p>\n<p>結構混亂，大量覆寫的 class 各處都是，以及很可怕的巢狀 ID。<br>view 的部分也有些地方非常雜亂……。看來 legacy code 跟 refactor 永遠都在進行式。</p>\n<p>對於日新月異的前端來說，要接觸一個新技術、框架並不是太困難的事。但困難點在於如何在現有的大型專案中做取捨，我們常常會有其他考量。例如團隊的接受度、team leader、其他政治因素等等而無法輕易地將新框架套用在目前的專案上。</p>\n<p>這個系列的文章主要會分享如何在既有的專案中小心地進行重構。希望對各位有些幫助。</p>\n<h2 id=\"目前遇到的問題\"><a href=\"#目前遇到的問題\" class=\"headerlink\" title=\"目前遇到的問題\"></a>目前遇到的問題</h2><p>HTML 的架構混亂肥大，許多 <code>util class</code> 四散各處，在 CSS 中更可以看到大量的覆寫 class。雖然聽說之前已經有整理過了，但顯然這個房間還充滿許多灰塵。</p>\n<p>我認為前端常常遇到的 smell 問題有：</p>\n<ul>\n<li>復用性不足：儘管已經採用 React，但仍有許多高耦合的 component。而且其中還夾雜著 flux 與 redux 兩種不同的 library</li>\n<li>大量混雜業務邏輯的代碼（如 API ability 的判斷等），不僅要實際去了解業務流程外，還要知道檔案放在哪，必要時可能還要去看後端的程式碼</li>\n<li>HTML 的撰寫不夠語義化，充斥太多 <code>util class</code> 及 <code>atomic class</code>，後面接手的人比較難搞懂這行 view 裡頭所要表達的東西。</li>\n<li>CSS 檔案的撰寫不夠模組化。有太多混雜的模組都放在同一隻檔案中，查找非常不方便。</li>\n<li>大量的覆寫 class 造成上版時有很多意外的狀況發生。</li>\n</ul>\n<p>沒有統一的規範跟撰寫方式，很快代碼就會往指數性的肥大邁進。</p>\n<p>身為一個前端工程師，經驗還稍嫌不足的我來說，雖然目前正在孤軍奮戰中，但其實還能做一些事。有問題對我來說是一件非常值得興奮的事，至少對我來說，那是一個可以捲起袖子來做事的大好機會。</p>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><p>那麼，到底該怎麼做呢？我認為可以從以下幾點開始下手</p>\n<ul>\n<li>著手撰寫 <code>styleguide</code>，讓自己與之後的前端團隊快速上手，並且有一定的準則可以遵守</li>\n<li>技術選型：自動化工具、code quality 工具、選擇與淘汰</li>\n<li>test 框架：前端代碼大部分都還沒寫 test，未來等架構穩定的時候希望可以趕快補上。</li>\n<li>讓重構變得簡單</li>\n<li>讓 comment 及 doc 變成習慣： comment 的 doc 永遠是工程師的好朋友！</li>\n<li>提交代碼的規範</li>\n</ul>\n<p>本系列的文章主要會著重在重構的部分，最後一篇會再跟大家分享文件應該寫些什麼，以及前端如何提交代碼及發送 pull request 給 code reviewer。</p>\n<p>目前已經大致撰寫了 styguide 的架構，下一步是逐漸重整 CSS 的架構以及拆分 HTML 組件。</p>\n<p>這不是一朝一夕就能完成的東西，甚至就某種角度來看會拖延到專案的進度。有點像是默默付出的工作吧…！畢竟在原有的專案中做改變本來就有較大的阻力。</p>\n<h2 id=\"何時應該重構\"><a href=\"#何時應該重構\" class=\"headerlink\" title=\"何時應該重構\"></a>何時應該重構</h2><p>隨時重構，不要為了重構而重構。再來可以參考<a href=\"http://www.wikiwand.com/zh-tw/%E4%B8%89%E6%AC%A1%E6%B3%95%E5%88%99_(%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\" target=\"_blank\" rel=\"external\">三次法則</a>)</p>\n<ul>\n<li>上版的時候對現有的 HTML 及 CSS 重構，或者對應的 component</li>\n<li>寫新的 js 模組時重構，順便撰寫 Comment 及文件</li>\n<li>送 pull request 的時候：不過要確定自己有寫上詳細的 comment 及 doc，才能提高 code reviewer 的 review 意願，而 senior 總是能更快看出代碼裡面的問題。</li>\n</ul>\n<p>我們常常對一些既有代碼的架構感到心癢，或者很想要趕快重構。但在 workaround 的情況下，有時重構的成本是非常大的。</p>\n<h2 id=\"何時不應該重構\"><a href=\"#何時不應該重構\" class=\"headerlink\" title=\"何時不應該重構\"></a>何時不應該重構</h2><p>其實比起重構來說，更重要的應該是拿捏不應該重構的程度。身為工程師或多或少都會對別人的代碼嗤之以鼻，恨不得趕快把 code 清掉。<br>但，既然 code 有某種程度的肥大，代表他或多或少解決了問題。而且重構是需要<strong>成本</strong>的。就算是以目前的開發來說，通常也是先著重於將功能實作後，在有限度地作小幅度的調整以及逐漸補齊文件及註解。對於重構來說，最重要的是 <code>consistency</code>。s</p>\n<ul>\n<li>目前的解法雖然不漂亮，但確實解決問題的時候。</li>\n<li>目前的代碼重複率還不高的時候</li>\n<li>重構的成本太大，甚至影響到系統本身的時候。</li>\n</ul>\n<h2 id=\"保持心平氣和\"><a href=\"#保持心平氣和\" class=\"headerlink\" title=\"保持心平氣和\"></a>保持心平氣和</h2><p>重構的時候記得控制自己的情緒。我們很可能一不小心就在咒罵代碼或前任，然後在情緒上頭反而過度重構，造成更多的問題也說不定。</p>\n<blockquote>\n<p>代碼的存在是有歷史的</p>\n</blockquote>\n<p>有可能是進度太趕、有可能是政治因素、又或者當時的技術還沒到位。但可以確定的是，情緒化完全無法解決問題。</p>\n<p><a href=\"http://www.apa.org/topics/anger/control.aspx\" target=\"_blank\" rel=\"external\">don’t let anger contol you</a></p>\n<blockquote>\n<p>Talk is cheap. Show me the code.</p>\n</blockquote>\n<p>下一篇，我會開始分享一些重構的技巧。</p>\n<h2 id=\"Final-Word\"><a href=\"#Final-Word\" class=\"headerlink\" title=\"Final Word\"></a>Final Word</h2><p>最後還是要聲明一下，這篇文章雖然會著重在一些重構的技巧上，但其實從 legacy code 中尋找出口的方法不只是重構而已。希望大家不要過往矯正，一看到髒 code 就急著捲起袖子重構。退一步評估一下成本跟重構的價值再做決定。</p>\n<h4 id=\"Legacy-Code-專欄\"><a href=\"#Legacy-Code-專欄\" class=\"headerlink\" title=\"Legacy Code 專欄\"></a>Legacy Code 專欄</h4><ul>\n<li><a href=\"/2016/06/14/legacy-code2/\" title=\"如何從 legacy code 中尋找出口（中）- CSS 篇\">如何從 legacy code 中尋找出口（中）- CSS 篇</a></li>\n<li><a href=\"/2016/09/17/legacy-code3/\" title=\"從 legacy code 中尋找出口（中）- HTML 篇\">從 legacy code 中尋找出口（中）- HTML 篇</a>\n</li>\n</ul>\n","excerpt":"","more":"<p>在我第一次進入主產品開發後，把代碼從 Github 上面 pull 下來。</p>\n<p>「這是什麼鬼東西？」</p>\n<p>結構混亂，大量覆寫的 class 各處都是，以及很可怕的巢狀 ID。<br>view 的部分也有些地方非常雜亂……。看來 legacy code 跟 refactor 永遠都在進行式。</p>\n<p>對於日新月異的前端來說，要接觸一個新技術、框架並不是太困難的事。但困難點在於如何在現有的大型專案中做取捨，我們常常會有其他考量。例如團隊的接受度、team leader、其他政治因素等等而無法輕易地將新框架套用在目前的專案上。</p>\n<p>這個系列的文章主要會分享如何在既有的專案中小心地進行重構。希望對各位有些幫助。</p>\n<h2 id=\"目前遇到的問題\"><a href=\"#目前遇到的問題\" class=\"headerlink\" title=\"目前遇到的問題\"></a>目前遇到的問題</h2><p>HTML 的架構混亂肥大，許多 <code>util class</code> 四散各處，在 CSS 中更可以看到大量的覆寫 class。雖然聽說之前已經有整理過了，但顯然這個房間還充滿許多灰塵。</p>\n<p>我認為前端常常遇到的 smell 問題有：</p>\n<ul>\n<li>復用性不足：儘管已經採用 React，但仍有許多高耦合的 component。而且其中還夾雜著 flux 與 redux 兩種不同的 library</li>\n<li>大量混雜業務邏輯的代碼（如 API ability 的判斷等），不僅要實際去了解業務流程外，還要知道檔案放在哪，必要時可能還要去看後端的程式碼</li>\n<li>HTML 的撰寫不夠語義化，充斥太多 <code>util class</code> 及 <code>atomic class</code>，後面接手的人比較難搞懂這行 view 裡頭所要表達的東西。</li>\n<li>CSS 檔案的撰寫不夠模組化。有太多混雜的模組都放在同一隻檔案中，查找非常不方便。</li>\n<li>大量的覆寫 class 造成上版時有很多意外的狀況發生。</li>\n</ul>\n<p>沒有統一的規範跟撰寫方式，很快代碼就會往指數性的肥大邁進。</p>\n<p>身為一個前端工程師，經驗還稍嫌不足的我來說，雖然目前正在孤軍奮戰中，但其實還能做一些事。有問題對我來說是一件非常值得興奮的事，至少對我來說，那是一個可以捲起袖子來做事的大好機會。</p>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><p>那麼，到底該怎麼做呢？我認為可以從以下幾點開始下手</p>\n<ul>\n<li>著手撰寫 <code>styleguide</code>，讓自己與之後的前端團隊快速上手，並且有一定的準則可以遵守</li>\n<li>技術選型：自動化工具、code quality 工具、選擇與淘汰</li>\n<li>test 框架：前端代碼大部分都還沒寫 test，未來等架構穩定的時候希望可以趕快補上。</li>\n<li>讓重構變得簡單</li>\n<li>讓 comment 及 doc 變成習慣： comment 的 doc 永遠是工程師的好朋友！</li>\n<li>提交代碼的規範</li>\n</ul>\n<p>本系列的文章主要會著重在重構的部分，最後一篇會再跟大家分享文件應該寫些什麼，以及前端如何提交代碼及發送 pull request 給 code reviewer。</p>\n<p>目前已經大致撰寫了 styguide 的架構，下一步是逐漸重整 CSS 的架構以及拆分 HTML 組件。</p>\n<p>這不是一朝一夕就能完成的東西，甚至就某種角度來看會拖延到專案的進度。有點像是默默付出的工作吧…！畢竟在原有的專案中做改變本來就有較大的阻力。</p>\n<h2 id=\"何時應該重構\"><a href=\"#何時應該重構\" class=\"headerlink\" title=\"何時應該重構\"></a>何時應該重構</h2><p>隨時重構，不要為了重構而重構。再來可以參考<a href=\"http://www.wikiwand.com/zh-tw/%E4%B8%89%E6%AC%A1%E6%B3%95%E5%88%99_(%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\">三次法則</a>)</p>\n<ul>\n<li>上版的時候對現有的 HTML 及 CSS 重構，或者對應的 component</li>\n<li>寫新的 js 模組時重構，順便撰寫 Comment 及文件</li>\n<li>送 pull request 的時候：不過要確定自己有寫上詳細的 comment 及 doc，才能提高 code reviewer 的 review 意願，而 senior 總是能更快看出代碼裡面的問題。</li>\n</ul>\n<p>我們常常對一些既有代碼的架構感到心癢，或者很想要趕快重構。但在 workaround 的情況下，有時重構的成本是非常大的。</p>\n<h2 id=\"何時不應該重構\"><a href=\"#何時不應該重構\" class=\"headerlink\" title=\"何時不應該重構\"></a>何時不應該重構</h2><p>其實比起重構來說，更重要的應該是拿捏不應該重構的程度。身為工程師或多或少都會對別人的代碼嗤之以鼻，恨不得趕快把 code 清掉。<br>但，既然 code 有某種程度的肥大，代表他或多或少解決了問題。而且重構是需要<strong>成本</strong>的。就算是以目前的開發來說，通常也是先著重於將功能實作後，在有限度地作小幅度的調整以及逐漸補齊文件及註解。對於重構來說，最重要的是 <code>consistency</code>。s</p>\n<ul>\n<li>目前的解法雖然不漂亮，但確實解決問題的時候。</li>\n<li>目前的代碼重複率還不高的時候</li>\n<li>重構的成本太大，甚至影響到系統本身的時候。</li>\n</ul>\n<h2 id=\"保持心平氣和\"><a href=\"#保持心平氣和\" class=\"headerlink\" title=\"保持心平氣和\"></a>保持心平氣和</h2><p>重構的時候記得控制自己的情緒。我們很可能一不小心就在咒罵代碼或前任，然後在情緒上頭反而過度重構，造成更多的問題也說不定。</p>\n<blockquote>\n<p>代碼的存在是有歷史的</p>\n</blockquote>\n<p>有可能是進度太趕、有可能是政治因素、又或者當時的技術還沒到位。但可以確定的是，情緒化完全無法解決問題。</p>\n<p><a href=\"http://www.apa.org/topics/anger/control.aspx\">don’t let anger contol you</a></p>\n<blockquote>\n<p>Talk is cheap. Show me the code.</p>\n</blockquote>\n<p>下一篇，我會開始分享一些重構的技巧。</p>\n<h2 id=\"Final-Word\"><a href=\"#Final-Word\" class=\"headerlink\" title=\"Final Word\"></a>Final Word</h2><p>最後還是要聲明一下，這篇文章雖然會著重在一些重構的技巧上，但其實從 legacy code 中尋找出口的方法不只是重構而已。希望大家不要過往矯正，一看到髒 code 就急著捲起袖子重構。退一步評估一下成本跟重構的價值再做決定。</p>\n<h4 id=\"Legacy-Code-專欄\"><a href=\"#Legacy-Code-專欄\" class=\"headerlink\" title=\"Legacy Code 專欄\"></a>Legacy Code 專欄</h4><ul>\n<li><a href=\"/2016/06/14/legacy-code2/\" title=\"如何從 legacy code 中尋找出口（中）- CSS 篇\">如何從 legacy code 中尋找出口（中）- CSS 篇</a></li>\n<li><a href=\"/2016/09/17/legacy-code3/\" title=\"從 legacy code 中尋找出口（中）- HTML 篇\">從 legacy code 中尋找出口（中）- HTML 篇</a>\n</li>\n</ul>\n"},{"title":"如何從 legacy code 中尋找出口（中）- CSS 篇","date":"2016-06-14T04:01:52.000Z","_content":"\n\n## 前言\n\n我們的第一步是先從 CSS 下手，因為 css 是相對於其他前端部分來說比較容易重構的部分。很容易髒亂的 code 也是 CSS。\n\n\n上一篇描述了在大型專案中引入新框架及技術的困難點，這一篇主要會專注在如何透過現有的工具及框架來重構現有的代碼。\n\n本次的重構技巧會以 SCSS 為主，所以在閱讀本文之前，我先假設你已經有基本的 SCSS 以及 CSS 的基礎。其他預處理器的概念應該是相通的。\n\n## 引入 style linter 及 editorconfig\n\n我們採取的第一步是先引入審查代碼工具。目前比較流行的 css linter 是 stylelinter，他能夠針對 scss sass 語法做 lint。也可以搭配其他 IDE、文字編輯器 plugin。這邊的範例是使用 sublime，其他的 IDE 應該也有類似的功能。\n\n### 1. 加入 stylelint\n\nstylelint 除了可以針對 scss 語法做 lint 之外。由於其本身是用 js 撰寫的，可以客製化自己的 rule 跟加入其他開源的 plugin。\n\n因為 stylelint 是以 AST 的方式解析，所以可以很容易的對文件中的節點做操作。\n\n關於 stylelint 的深入使用，已經超過本文篇幅，有興趣的人可以參考 css trick 的[教學](https://css-tricks.com/stylelint/)\n\n首先，先來安裝 `stylelint`，run `npm install -g stylelint`。\n\n再來設置 .stylelintrc 檔，詳細的 rules 可以到[這裡](http://stylelint.io/user-guide/rules/) 查看。如果你不想要那麼麻煩自己手動一個一個設定的話。可以考慮使用 [stylelint-config-standard](https://github.com/stylelint/stylelint-config-standard) 這個插件，再根據自己的需求做調整。\n\n`npm install --save-dev stylelint-config-standard`\n\n**這邊還是建議花時間瞭解一下專案的需求來制定 rule，不然有時候太嚴格的 rule，滿江紅看到也懶得改了。**\n\n\n### 2. 加入 .editorconfig\n\nEditorConfig 是一個為了統一代碼風格的解決方案。每個人文字編輯器的環境可能不盡相同，為了統一彼此之間的環境，這邊我們採用的 `editorconfig`\n\n設定非常簡單，只要新增一個檔案就好。[editorconfig](http://EditorConfig.org)。\n\n目前幾乎主流的文字編輯器都有支援 editorconfig。\n\n## 常見的 code smell 以及 refactor 方式\n\n在開始捲起袖子做事之前，還是先來確認一下目前的專案是否需要 refactor：\n\n- 許多元件（如 button input）等放在同一個檔案內，查找非常不易。\n- 覆寫了許多 class 造成預期之外的行為發生\n- 早期沒有統一的代碼規範，tab、空白夾雜在一起，閱讀性大幅降低\n- !important 四散各處\n- 變數的命名跟管理不夠統一\n- 團隊開始擴增\n- 相關的文件不足\n\n接下來介紹一些比較常見的 code smell\n\n### Order\n\nclass 變多之後，如果 rule 裡面沒有一定的排列順序的話，其實查找很不方便。而且易讀性並不高，像是下列的 code\n\n```css\n.class {\n\tposition: absolute;\n\tdisplay: none;\n\tpadding: 30px;\n\tcursor: pointer;\n\tlist-style: none;\n\tfont-size: 20px;\n\tbackground: white;\n\tmargin:0;\n\ttop:0;\n\tleft:0;\n\twidth: 250px;\n\tpadding-left: 15px;\n\toverflow-y: scroll;\n\toverflow-x: hidden;\n\tborder: 1px solid $hr-gray;\n\tz-index: 9999999;\n}\n```\n\n那麼要怎樣排序會比較好呢？這邊提供幾個大原則：\n\n1. display、position\n2. box-model\n3. font、typography\n4. layout(包含 color、border-radius 等)\n5. 其他屬性(如animation)\n\n\n原因：對一個 class 來說，最重要的就是 display 與 position ，所以應該擺在最上面。而其次重要的內容是文字，所以擺第二，最後才是 `layout` 與其他屬性。\n至於屬於同屬性的話不限制順序，例如 padding margin 順序調換沒有關係，因為找起來都很方便。只要維持一定的邏輯即可。\n\n```css\n.class {\n\tdisplay: none;\n\tposition: absolute;\n\ttop:0;\n\tleft:0;\n\tz-index: 9999999;\n\t\n\twidth: 250px;\n\n\tpadding: 30px;\n\tpadding-left: 15px;\n\tmargin:0;\n\n\tfont-size: 20px;\n\n\tbackground: white;\n\tborder: 1px solid #aaa;\n\n\tlist-style: none;\n\tcursor: pointer;\n\t\n\toverflow-y: scroll;\n\toverflow-x: hidden;\t\n}\n```\n\n### 善用 sass map 管理變數\n\nstyle 檔案變多了之後，相對的要管理的變數也會變得越來越多。\n除了在命名時加上前綴之外，我們也可以利用 sass map 的方式來統一管理。而且 sass map 提供了一些很方便的 [function](http://sass-lang.com/documentation/Sass/Script/Functions.html) 來操作，像是 `map-get` `map-has-key`等等，可以很有效地把變數 group 起來。很像 js 的 object。\n\n以 `z-index` 來說，我們可以改寫下面的 code\n\n\n```CSS\n/* before */\n$zindex-navbar: 100;\n$zindex-dropdown: 200;\n$zindex-tooltip: 300;\n$zindex-modal: 400;\n\n.navbar {\n\tz-index: $zindex-navbar;\n}\n\n/* after */\n$zindex: (\n  navbar: 100,\n  dropdown: 200,\n  tooltip: 300,\n  modal: 400\n);\n\n.navbar {\n\tz-index: map-get($zindex, 'navbar');\n}\n```\n\n用 `map` 的方式取值，看起來好像比較厚工一點，我們可以用 sass 的 function 包裝起來：\n\n```css\n/**\n * z alias for z-index\n * get zindex map value\n */\n@function z($key) {\n\t@if(map-has-key($zindex, $key)){\n    @return map-get($zindex, $key);\n  } @else {\n    @error \"unknown key #{$key}\";\n  }\n}\n.navbar {\n\tz-index: z($zindex, 'navbar');\n}\n```\n\n當然還有其他的應用像是 `color` `typography` 等等，都可以搭配 sass map 的方式來操作。\n\n如果你認為上述的方式跟用前綴的方式分類變數沒有什麼不同的話，不套用也沒關係，重構是為了讓之後的開發更舒服。\n\n### 大量的巢狀 class\n\n我的建議是不要超過三層，第一是易讀性非常低，再來很容易覆蓋到權重。\n可以採用一些目前比較熱門的 css 命名規範如 OOCSS 或是 BEM，或者搭配兩者一起使用。\n\n但最重要的一點是自己寫起來的感覺，不要讓規範箝制你了。\n\n如果想要使用 scss 的巢狀功能方便閱讀，又不想要讓巢狀 class 覆蓋權重的話，可以使用 @at-root，@at-root 在編譯的時候會幫你把巢狀拆出來到 root。\n\n另外可以使用 `>` 子元素選擇器來取代後代選擇器。\n\n```css\n.classA {\n\t@at-root .classB {\n    // bla\n\t}\n}\n\n// compiled\n\n.classA {\n\t\n}\n  .classB {\n    // bla\n  }\n```\n\n實際的 use case 如下：\n\n```css \n.alert-modal {\n  @at-root &__header {\n\n  }\n\n  @at-root &__body {\n\n  }\n\n  @at-root &__footer {\n\n  }\n}\n```\n\n以上的代碼好像沒有想像中的好看，等下可以搭配 mixin 把它進一步做簡化。\n\n## 善用 Mixin 簡化程式\n\n除了一般使用 mixin 來加入 `prefixer` 之外，mixin 能夠做的事情還有很多，這邊提出幾個方法給大家參考。\n\n### BEM mixin\n\nBEM 的命名方式，如果一直手動 key 的話，感覺也挺麻煩的，而且 key 錯的機率也蠻高的，我們可以利用 mixin 來簡化他。\n\n順便一提，如果你的專案已經套用了 `postCSS`，可以使用 [postcss-bem](https://www.npmjs.com/package/postcss-bem) 來幫助命名。\n\n如果你不喜歡他的命名方式，或是當前還無法套用 postCSS 的話也沒關係，我們可以自己做一個。\n\n上面的 code 可以改成下面的形式：\n\n```css\n@mixin block($block_name) {\n  .#{$block_name} { @content; }\n}\n\n@mixin element($element_name) { \n  @at-root &__#{$element_name} { @content; }\n}\n\n@mixin modifier($modifier_name) {\n  @at-root &-#{$modifier_name} { @content; }\t\n}\n\n@mixin state($state_name) {\n\t&.is-${#state_name} {@content;}\n}\n\n// modal.scss\n\n// before\n.alert-modal {\n  @at-root &__header {\n\n  }\n\n  @at-root &__body {\n\n  }\n\n  @at-root &__footer {\n\n  }\n}\n\n// after\n@include block(\"alert-modal\") {\n\t@include element(\"header\") {}\n\t@include element(\"body\") {}\n\t@include element(\"footer\") {}\n}\n```\n\n這樣一來簡單的 BEM mixins 就製作完成了。注意到這邊我們使用 `at-root` 的方式來避免巢狀 class。\n\n可以按照自己的喜好來調整命名方式，或者嚴謹一點對參數做一些處理（轉為小寫等等）、加入判斷式等等，或者今天你想要使用巢狀 class 的話可以加入額外的判斷參數。\n\n```css\n@mixin element($element_name, $at-root: true) { \n  @if($at-root) {\n    @at-root &__#{$element_name} { @content; }\n  }\n  @else {\n    &__#{$element_name} { @content; }\n  }\n  \n}\n```\n\n### util mixin\n\n舉例來說，在設置 padding margin 的時候，我們常常會將上下或是左右的值設為一樣。寫久了難免會嫌麻煩，這時候就可以拜託 mixin 了。\n\n```css\n// before\n.classA {\n\tmargin-right: 10px;\n\tmargin-left: 10px;\n}\n\n// after\n\n/*\n * lr Alias for left right\n */\n@mixin lr($box_model, $value) {\n\t#{$box_model}-left: $value;\n\t#{$box_model}-right: $value;\n};\n.classA {\n\t@include lr(\"margin\", 10px);\n}\n```\n這邊沒有寫得很嚴謹，你可以另外加入判斷式來保證輸入的值是合法的，類似的概念也能套用到 top left 設值上。\n\n或是常常遇到的 clearfix。\n\n```css\n@mixin clearfix() {\n\t&:before, &:after {\n    display: table;\n    content: \"\";\n\t\tclear: both;\n  }\n}\n\n.column {\n\t@include clearfix;\n}\n```\n\n### child selector mixin\n\n常常會遇到使用 child selector 的情境。我們可以用 mixin 進一步包裝起來。\n\n```css\n// before\n.list {\n\t&:first-child {\n\t  //bla\n\t}\n\n\t&:nth-child(2n) {\n\t  //bla\n\t}\n}\n// after \n@mixin first() {\n\t&:first-child { @content; }\n}\n.list {\n\t@include first() {};\n}\n```\n\n這邊推薦 [Family.scss](http://lukyvj.github.io/family.scss/)，搜集了許多好用 child selector mixin。\n\n**p.s：我認為剛入門 CSS 的人還是從純 CSS 開始學習比較好，以免被 SCSS 的語法糖給寵壞了**\n\n## 善用 Comment\n\n在缺乏 function 的 css 下，使用 comment 來解釋 class 更為重要。這邊提供一些，comment 的技巧。\n\n註解不但方便自己閱讀，之後別人接手也會比較快理解這個 class 該如何使用、在哪個場景使用。\n\n### 目錄\n\n如果文件包含的 class 較多，可以考慮在文件最前面加入目錄，方便之後查找。\n\n```css\n/**\n * INPUT\n *  text\n *  select\n *  number\n * BUTTON\n *  primary\n *  warn\n */\n```\n\n### 魔術數字、HACK、使用方式\n\n```css\n/*\n * for input[type=\"text\"]\n * e.g: <input type=\"text\" />\n */\n \n.text-input[type=\"text\"] {\n  padding: 20px;\n\n  /* page offset */\n\ttop: 27px;\n  /* IE 8+ hack */\n  // ...\n}\n```\n\n## CSS 結構\n\n基本上分成幾個大方向：`module` `base` `config` `helper`\n\n### module\n\nmodule 資料夾裡存放所有模組化的元件，像是 button input modal 等等。如果元件拆得更細的話，可以再另外開資料夾，像是 button 有可能樣式比較多，這時候我們可以另外開一個 `button` 資料夾，裡頭存放所有 button 的樣式。\n\n### base \n\nbase 裡頭放置了像是 `grid` `normalize` `reset` `typography` 等比較基本的架構。\n\n### config\n\n存放變數跟 color 的地方，設定的內容統一存放在這個資料夾統一管理。\n\n### helper\n\n存放客製化的 function 跟 mixin。\n\n## 寫在最後\n\n如果你有額外的時間，建議你還是可以去看看像是 [postCSS](https://github.com/postcss/postcss)、[css-modules](https://github.com/css-modules/css-modules)、[webpack](https://github.com/webpack/webpack) 等優秀的開源工具。\n不然整天跟 CSS 打架總有一天會精神耗弱的XD。\n\n做了一個[DEMO](https://github.com/kjj6198/css-structure-example)，非常陽春。\n\n如果你也想分享自己在前端跟 legacy code 奮鬥的過程，或是有更好的解決方案，歡迎在下面留言。\n\n## 持續關注前端趨勢\n\n這裡分享幾個覺得蠻優質的資源。\n\n[掘金網](http://gold.xitu.io/)\n\n[碼天狗（但最近前端的分享不多）](http://weekly.codetengu.com/)\n\n[TechBrige](https://www.techbridge.cc/)\n\n[CSS wizard](http://csswizardry.com/)\n\n\n### reference\n\n[CSS guideline](http://cssguidelin.es/)\n\n[Why Stylelint](https://www.smashingmagazine.com/2016/05/stylelint-the-style-sheet-linter-weve-always-wanted/)\n\n[CSS coding techniques](https://hacks.mozilla.org/2016/05/css-coding-techniques/?utm_campaign=CodeTengu&utm_medium=email&utm_source=CodeTengu_44)\n\n[why you should refactor your css](http://seesparkbox.com/foundry/why_you_need_to_refactor_your_css)\n\n[rsscss.io](http://rscss.io/)\n\n#### Legacy Code 專欄\n\n- {% post_link 'legacy-code' %}\n- {% post_link 'legacy-code3' %}\n","source":"_posts/legacy-code2.md","raw":"---\ntitle: 如何從 legacy code 中尋找出口（中）- CSS 篇\ncategories: 前端\ntags:\n  - 重構\n  - 前端\ndate: 2016-06-14 12:01:52\n---\n\n\n## 前言\n\n我們的第一步是先從 CSS 下手，因為 css 是相對於其他前端部分來說比較容易重構的部分。很容易髒亂的 code 也是 CSS。\n\n\n上一篇描述了在大型專案中引入新框架及技術的困難點，這一篇主要會專注在如何透過現有的工具及框架來重構現有的代碼。\n\n本次的重構技巧會以 SCSS 為主，所以在閱讀本文之前，我先假設你已經有基本的 SCSS 以及 CSS 的基礎。其他預處理器的概念應該是相通的。\n\n## 引入 style linter 及 editorconfig\n\n我們採取的第一步是先引入審查代碼工具。目前比較流行的 css linter 是 stylelinter，他能夠針對 scss sass 語法做 lint。也可以搭配其他 IDE、文字編輯器 plugin。這邊的範例是使用 sublime，其他的 IDE 應該也有類似的功能。\n\n### 1. 加入 stylelint\n\nstylelint 除了可以針對 scss 語法做 lint 之外。由於其本身是用 js 撰寫的，可以客製化自己的 rule 跟加入其他開源的 plugin。\n\n因為 stylelint 是以 AST 的方式解析，所以可以很容易的對文件中的節點做操作。\n\n關於 stylelint 的深入使用，已經超過本文篇幅，有興趣的人可以參考 css trick 的[教學](https://css-tricks.com/stylelint/)\n\n首先，先來安裝 `stylelint`，run `npm install -g stylelint`。\n\n再來設置 .stylelintrc 檔，詳細的 rules 可以到[這裡](http://stylelint.io/user-guide/rules/) 查看。如果你不想要那麼麻煩自己手動一個一個設定的話。可以考慮使用 [stylelint-config-standard](https://github.com/stylelint/stylelint-config-standard) 這個插件，再根據自己的需求做調整。\n\n`npm install --save-dev stylelint-config-standard`\n\n**這邊還是建議花時間瞭解一下專案的需求來制定 rule，不然有時候太嚴格的 rule，滿江紅看到也懶得改了。**\n\n\n### 2. 加入 .editorconfig\n\nEditorConfig 是一個為了統一代碼風格的解決方案。每個人文字編輯器的環境可能不盡相同，為了統一彼此之間的環境，這邊我們採用的 `editorconfig`\n\n設定非常簡單，只要新增一個檔案就好。[editorconfig](http://EditorConfig.org)。\n\n目前幾乎主流的文字編輯器都有支援 editorconfig。\n\n## 常見的 code smell 以及 refactor 方式\n\n在開始捲起袖子做事之前，還是先來確認一下目前的專案是否需要 refactor：\n\n- 許多元件（如 button input）等放在同一個檔案內，查找非常不易。\n- 覆寫了許多 class 造成預期之外的行為發生\n- 早期沒有統一的代碼規範，tab、空白夾雜在一起，閱讀性大幅降低\n- !important 四散各處\n- 變數的命名跟管理不夠統一\n- 團隊開始擴增\n- 相關的文件不足\n\n接下來介紹一些比較常見的 code smell\n\n### Order\n\nclass 變多之後，如果 rule 裡面沒有一定的排列順序的話，其實查找很不方便。而且易讀性並不高，像是下列的 code\n\n```css\n.class {\n\tposition: absolute;\n\tdisplay: none;\n\tpadding: 30px;\n\tcursor: pointer;\n\tlist-style: none;\n\tfont-size: 20px;\n\tbackground: white;\n\tmargin:0;\n\ttop:0;\n\tleft:0;\n\twidth: 250px;\n\tpadding-left: 15px;\n\toverflow-y: scroll;\n\toverflow-x: hidden;\n\tborder: 1px solid $hr-gray;\n\tz-index: 9999999;\n}\n```\n\n那麼要怎樣排序會比較好呢？這邊提供幾個大原則：\n\n1. display、position\n2. box-model\n3. font、typography\n4. layout(包含 color、border-radius 等)\n5. 其他屬性(如animation)\n\n\n原因：對一個 class 來說，最重要的就是 display 與 position ，所以應該擺在最上面。而其次重要的內容是文字，所以擺第二，最後才是 `layout` 與其他屬性。\n至於屬於同屬性的話不限制順序，例如 padding margin 順序調換沒有關係，因為找起來都很方便。只要維持一定的邏輯即可。\n\n```css\n.class {\n\tdisplay: none;\n\tposition: absolute;\n\ttop:0;\n\tleft:0;\n\tz-index: 9999999;\n\t\n\twidth: 250px;\n\n\tpadding: 30px;\n\tpadding-left: 15px;\n\tmargin:0;\n\n\tfont-size: 20px;\n\n\tbackground: white;\n\tborder: 1px solid #aaa;\n\n\tlist-style: none;\n\tcursor: pointer;\n\t\n\toverflow-y: scroll;\n\toverflow-x: hidden;\t\n}\n```\n\n### 善用 sass map 管理變數\n\nstyle 檔案變多了之後，相對的要管理的變數也會變得越來越多。\n除了在命名時加上前綴之外，我們也可以利用 sass map 的方式來統一管理。而且 sass map 提供了一些很方便的 [function](http://sass-lang.com/documentation/Sass/Script/Functions.html) 來操作，像是 `map-get` `map-has-key`等等，可以很有效地把變數 group 起來。很像 js 的 object。\n\n以 `z-index` 來說，我們可以改寫下面的 code\n\n\n```CSS\n/* before */\n$zindex-navbar: 100;\n$zindex-dropdown: 200;\n$zindex-tooltip: 300;\n$zindex-modal: 400;\n\n.navbar {\n\tz-index: $zindex-navbar;\n}\n\n/* after */\n$zindex: (\n  navbar: 100,\n  dropdown: 200,\n  tooltip: 300,\n  modal: 400\n);\n\n.navbar {\n\tz-index: map-get($zindex, 'navbar');\n}\n```\n\n用 `map` 的方式取值，看起來好像比較厚工一點，我們可以用 sass 的 function 包裝起來：\n\n```css\n/**\n * z alias for z-index\n * get zindex map value\n */\n@function z($key) {\n\t@if(map-has-key($zindex, $key)){\n    @return map-get($zindex, $key);\n  } @else {\n    @error \"unknown key #{$key}\";\n  }\n}\n.navbar {\n\tz-index: z($zindex, 'navbar');\n}\n```\n\n當然還有其他的應用像是 `color` `typography` 等等，都可以搭配 sass map 的方式來操作。\n\n如果你認為上述的方式跟用前綴的方式分類變數沒有什麼不同的話，不套用也沒關係，重構是為了讓之後的開發更舒服。\n\n### 大量的巢狀 class\n\n我的建議是不要超過三層，第一是易讀性非常低，再來很容易覆蓋到權重。\n可以採用一些目前比較熱門的 css 命名規範如 OOCSS 或是 BEM，或者搭配兩者一起使用。\n\n但最重要的一點是自己寫起來的感覺，不要讓規範箝制你了。\n\n如果想要使用 scss 的巢狀功能方便閱讀，又不想要讓巢狀 class 覆蓋權重的話，可以使用 @at-root，@at-root 在編譯的時候會幫你把巢狀拆出來到 root。\n\n另外可以使用 `>` 子元素選擇器來取代後代選擇器。\n\n```css\n.classA {\n\t@at-root .classB {\n    // bla\n\t}\n}\n\n// compiled\n\n.classA {\n\t\n}\n  .classB {\n    // bla\n  }\n```\n\n實際的 use case 如下：\n\n```css \n.alert-modal {\n  @at-root &__header {\n\n  }\n\n  @at-root &__body {\n\n  }\n\n  @at-root &__footer {\n\n  }\n}\n```\n\n以上的代碼好像沒有想像中的好看，等下可以搭配 mixin 把它進一步做簡化。\n\n## 善用 Mixin 簡化程式\n\n除了一般使用 mixin 來加入 `prefixer` 之外，mixin 能夠做的事情還有很多，這邊提出幾個方法給大家參考。\n\n### BEM mixin\n\nBEM 的命名方式，如果一直手動 key 的話，感覺也挺麻煩的，而且 key 錯的機率也蠻高的，我們可以利用 mixin 來簡化他。\n\n順便一提，如果你的專案已經套用了 `postCSS`，可以使用 [postcss-bem](https://www.npmjs.com/package/postcss-bem) 來幫助命名。\n\n如果你不喜歡他的命名方式，或是當前還無法套用 postCSS 的話也沒關係，我們可以自己做一個。\n\n上面的 code 可以改成下面的形式：\n\n```css\n@mixin block($block_name) {\n  .#{$block_name} { @content; }\n}\n\n@mixin element($element_name) { \n  @at-root &__#{$element_name} { @content; }\n}\n\n@mixin modifier($modifier_name) {\n  @at-root &-#{$modifier_name} { @content; }\t\n}\n\n@mixin state($state_name) {\n\t&.is-${#state_name} {@content;}\n}\n\n// modal.scss\n\n// before\n.alert-modal {\n  @at-root &__header {\n\n  }\n\n  @at-root &__body {\n\n  }\n\n  @at-root &__footer {\n\n  }\n}\n\n// after\n@include block(\"alert-modal\") {\n\t@include element(\"header\") {}\n\t@include element(\"body\") {}\n\t@include element(\"footer\") {}\n}\n```\n\n這樣一來簡單的 BEM mixins 就製作完成了。注意到這邊我們使用 `at-root` 的方式來避免巢狀 class。\n\n可以按照自己的喜好來調整命名方式，或者嚴謹一點對參數做一些處理（轉為小寫等等）、加入判斷式等等，或者今天你想要使用巢狀 class 的話可以加入額外的判斷參數。\n\n```css\n@mixin element($element_name, $at-root: true) { \n  @if($at-root) {\n    @at-root &__#{$element_name} { @content; }\n  }\n  @else {\n    &__#{$element_name} { @content; }\n  }\n  \n}\n```\n\n### util mixin\n\n舉例來說，在設置 padding margin 的時候，我們常常會將上下或是左右的值設為一樣。寫久了難免會嫌麻煩，這時候就可以拜託 mixin 了。\n\n```css\n// before\n.classA {\n\tmargin-right: 10px;\n\tmargin-left: 10px;\n}\n\n// after\n\n/*\n * lr Alias for left right\n */\n@mixin lr($box_model, $value) {\n\t#{$box_model}-left: $value;\n\t#{$box_model}-right: $value;\n};\n.classA {\n\t@include lr(\"margin\", 10px);\n}\n```\n這邊沒有寫得很嚴謹，你可以另外加入判斷式來保證輸入的值是合法的，類似的概念也能套用到 top left 設值上。\n\n或是常常遇到的 clearfix。\n\n```css\n@mixin clearfix() {\n\t&:before, &:after {\n    display: table;\n    content: \"\";\n\t\tclear: both;\n  }\n}\n\n.column {\n\t@include clearfix;\n}\n```\n\n### child selector mixin\n\n常常會遇到使用 child selector 的情境。我們可以用 mixin 進一步包裝起來。\n\n```css\n// before\n.list {\n\t&:first-child {\n\t  //bla\n\t}\n\n\t&:nth-child(2n) {\n\t  //bla\n\t}\n}\n// after \n@mixin first() {\n\t&:first-child { @content; }\n}\n.list {\n\t@include first() {};\n}\n```\n\n這邊推薦 [Family.scss](http://lukyvj.github.io/family.scss/)，搜集了許多好用 child selector mixin。\n\n**p.s：我認為剛入門 CSS 的人還是從純 CSS 開始學習比較好，以免被 SCSS 的語法糖給寵壞了**\n\n## 善用 Comment\n\n在缺乏 function 的 css 下，使用 comment 來解釋 class 更為重要。這邊提供一些，comment 的技巧。\n\n註解不但方便自己閱讀，之後別人接手也會比較快理解這個 class 該如何使用、在哪個場景使用。\n\n### 目錄\n\n如果文件包含的 class 較多，可以考慮在文件最前面加入目錄，方便之後查找。\n\n```css\n/**\n * INPUT\n *  text\n *  select\n *  number\n * BUTTON\n *  primary\n *  warn\n */\n```\n\n### 魔術數字、HACK、使用方式\n\n```css\n/*\n * for input[type=\"text\"]\n * e.g: <input type=\"text\" />\n */\n \n.text-input[type=\"text\"] {\n  padding: 20px;\n\n  /* page offset */\n\ttop: 27px;\n  /* IE 8+ hack */\n  // ...\n}\n```\n\n## CSS 結構\n\n基本上分成幾個大方向：`module` `base` `config` `helper`\n\n### module\n\nmodule 資料夾裡存放所有模組化的元件，像是 button input modal 等等。如果元件拆得更細的話，可以再另外開資料夾，像是 button 有可能樣式比較多，這時候我們可以另外開一個 `button` 資料夾，裡頭存放所有 button 的樣式。\n\n### base \n\nbase 裡頭放置了像是 `grid` `normalize` `reset` `typography` 等比較基本的架構。\n\n### config\n\n存放變數跟 color 的地方，設定的內容統一存放在這個資料夾統一管理。\n\n### helper\n\n存放客製化的 function 跟 mixin。\n\n## 寫在最後\n\n如果你有額外的時間，建議你還是可以去看看像是 [postCSS](https://github.com/postcss/postcss)、[css-modules](https://github.com/css-modules/css-modules)、[webpack](https://github.com/webpack/webpack) 等優秀的開源工具。\n不然整天跟 CSS 打架總有一天會精神耗弱的XD。\n\n做了一個[DEMO](https://github.com/kjj6198/css-structure-example)，非常陽春。\n\n如果你也想分享自己在前端跟 legacy code 奮鬥的過程，或是有更好的解決方案，歡迎在下面留言。\n\n## 持續關注前端趨勢\n\n這裡分享幾個覺得蠻優質的資源。\n\n[掘金網](http://gold.xitu.io/)\n\n[碼天狗（但最近前端的分享不多）](http://weekly.codetengu.com/)\n\n[TechBrige](https://www.techbridge.cc/)\n\n[CSS wizard](http://csswizardry.com/)\n\n\n### reference\n\n[CSS guideline](http://cssguidelin.es/)\n\n[Why Stylelint](https://www.smashingmagazine.com/2016/05/stylelint-the-style-sheet-linter-weve-always-wanted/)\n\n[CSS coding techniques](https://hacks.mozilla.org/2016/05/css-coding-techniques/?utm_campaign=CodeTengu&utm_medium=email&utm_source=CodeTengu_44)\n\n[why you should refactor your css](http://seesparkbox.com/foundry/why_you_need_to_refactor_your_css)\n\n[rsscss.io](http://rscss.io/)\n\n#### Legacy Code 專欄\n\n- {% post_link 'legacy-code' %}\n- {% post_link 'legacy-code3' %}\n","slug":"legacy-code2","published":1,"updated":"2016-10-18T11:32:00.000Z","_id":"cizc4k1rc000zty5trs7nosvs","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我們的第一步是先從 CSS 下手，因為 css 是相對於其他前端部分來說比較容易重構的部分。很容易髒亂的 code 也是 CSS。</p>\n<p>上一篇描述了在大型專案中引入新框架及技術的困難點，這一篇主要會專注在如何透過現有的工具及框架來重構現有的代碼。</p>\n<p>本次的重構技巧會以 SCSS 為主，所以在閱讀本文之前，我先假設你已經有基本的 SCSS 以及 CSS 的基礎。其他預處理器的概念應該是相通的。</p>\n<h2 id=\"引入-style-linter-及-editorconfig\"><a href=\"#引入-style-linter-及-editorconfig\" class=\"headerlink\" title=\"引入 style linter 及 editorconfig\"></a>引入 style linter 及 editorconfig</h2><p>我們採取的第一步是先引入審查代碼工具。目前比較流行的 css linter 是 stylelinter，他能夠針對 scss sass 語法做 lint。也可以搭配其他 IDE、文字編輯器 plugin。這邊的範例是使用 sublime，其他的 IDE 應該也有類似的功能。</p>\n<h3 id=\"1-加入-stylelint\"><a href=\"#1-加入-stylelint\" class=\"headerlink\" title=\"1. 加入 stylelint\"></a>1. 加入 stylelint</h3><p>stylelint 除了可以針對 scss 語法做 lint 之外。由於其本身是用 js 撰寫的，可以客製化自己的 rule 跟加入其他開源的 plugin。</p>\n<p>因為 stylelint 是以 AST 的方式解析，所以可以很容易的對文件中的節點做操作。</p>\n<p>關於 stylelint 的深入使用，已經超過本文篇幅，有興趣的人可以參考 css trick 的<a href=\"https://css-tricks.com/stylelint/\" target=\"_blank\" rel=\"external\">教學</a></p>\n<p>首先，先來安裝 <code>stylelint</code>，run <code>npm install -g stylelint</code>。</p>\n<p>再來設置 .stylelintrc 檔，詳細的 rules 可以到<a href=\"http://stylelint.io/user-guide/rules/\" target=\"_blank\" rel=\"external\">這裡</a> 查看。如果你不想要那麼麻煩自己手動一個一個設定的話。可以考慮使用 <a href=\"https://github.com/stylelint/stylelint-config-standard\" target=\"_blank\" rel=\"external\">stylelint-config-standard</a> 這個插件，再根據自己的需求做調整。</p>\n<p><code>npm install --save-dev stylelint-config-standard</code></p>\n<p><strong>這邊還是建議花時間瞭解一下專案的需求來制定 rule，不然有時候太嚴格的 rule，滿江紅看到也懶得改了。</strong></p>\n<h3 id=\"2-加入-editorconfig\"><a href=\"#2-加入-editorconfig\" class=\"headerlink\" title=\"2. 加入 .editorconfig\"></a>2. 加入 .editorconfig</h3><p>EditorConfig 是一個為了統一代碼風格的解決方案。每個人文字編輯器的環境可能不盡相同，為了統一彼此之間的環境，這邊我們採用的 <code>editorconfig</code></p>\n<p>設定非常簡單，只要新增一個檔案就好。<a href=\"http://EditorConfig.org\" target=\"_blank\" rel=\"external\">editorconfig</a>。</p>\n<p>目前幾乎主流的文字編輯器都有支援 editorconfig。</p>\n<h2 id=\"常見的-code-smell-以及-refactor-方式\"><a href=\"#常見的-code-smell-以及-refactor-方式\" class=\"headerlink\" title=\"常見的 code smell 以及 refactor 方式\"></a>常見的 code smell 以及 refactor 方式</h2><p>在開始捲起袖子做事之前，還是先來確認一下目前的專案是否需要 refactor：</p>\n<ul>\n<li>許多元件（如 button input）等放在同一個檔案內，查找非常不易。</li>\n<li>覆寫了許多 class 造成預期之外的行為發生</li>\n<li>早期沒有統一的代碼規範，tab、空白夾雜在一起，閱讀性大幅降低</li>\n<li>!important 四散各處</li>\n<li>變數的命名跟管理不夠統一</li>\n<li>團隊開始擴增</li>\n<li>相關的文件不足</li>\n</ul>\n<p>接下來介紹一些比較常見的 code smell</p>\n<h3 id=\"Order\"><a href=\"#Order\" class=\"headerlink\" title=\"Order\"></a>Order</h3><p>class 變多之後，如果 rule 裡面沒有一定的排列順序的話，其實查找很不方便。而且易讀性並不高，像是下列的 code</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.class</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">\t<span class=\"attribute\">display</span>: none;</div><div class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">30px</span>;</div><div class=\"line\">\t<span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">\t<span class=\"attribute\">list-style</span>: none;</div><div class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background</span>: white;</div><div class=\"line\">\t<span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">250px</span>;</div><div class=\"line\">\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">15px</span>;</div><div class=\"line\">\t<span class=\"attribute\">overflow-y</span>: scroll;</div><div class=\"line\">\t<span class=\"attribute\">overflow-x</span>: hidden;</div><div class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid $hr-gray;</div><div class=\"line\">\t<span class=\"attribute\">z-index</span>: <span class=\"number\">9999999</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>那麼要怎樣排序會比較好呢？這邊提供幾個大原則：</p>\n<ol>\n<li>display、position</li>\n<li>box-model</li>\n<li>font、typography</li>\n<li>layout(包含 color、border-radius 等)</li>\n<li>其他屬性(如animation)</li>\n</ol>\n<p>原因：對一個 class 來說，最重要的就是 display 與 position ，所以應該擺在最上面。而其次重要的內容是文字，所以擺第二，最後才是 <code>layout</code> 與其他屬性。<br>至於屬於同屬性的話不限制順序，例如 padding margin 順序調換沒有關係，因為找起來都很方便。只要維持一定的邏輯即可。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.class</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">display</span>: none;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">\t<span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">z-index</span>: <span class=\"number\">9999999</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">250px</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">30px</span>;</div><div class=\"line\">\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">15px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"attribute\">background</span>: white;</div><div class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#aaa</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"attribute\">list-style</span>: none;</div><div class=\"line\">\t<span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"attribute\">overflow-y</span>: scroll;</div><div class=\"line\">\t<span class=\"attribute\">overflow-x</span>: hidden;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"善用-sass-map-管理變數\"><a href=\"#善用-sass-map-管理變數\" class=\"headerlink\" title=\"善用 sass map 管理變數\"></a>善用 sass map 管理變數</h3><p>style 檔案變多了之後，相對的要管理的變數也會變得越來越多。<br>除了在命名時加上前綴之外，我們也可以利用 sass map 的方式來統一管理。而且 sass map 提供了一些很方便的 <a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html\" target=\"_blank\" rel=\"external\">function</a> 來操作，像是 <code>map-get</code> <code>map-has-key</code>等等，可以很有效地把變數 group 起來。很像 js 的 object。</p>\n<p>以 <code>z-index</code> 來說，我們可以改寫下面的 code</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* before */</div><div class=\"line\">$zindex-navbar: 100;</div><div class=\"line\">$zindex-dropdown: 200;</div><div class=\"line\">$zindex-tooltip: 300;</div><div class=\"line\">$zindex-modal: 400;</div><div class=\"line\"></div><div class=\"line\">.navbar &#123;</div><div class=\"line\">\tz-index: $zindex-navbar;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/* after */</div><div class=\"line\">$zindex: (</div><div class=\"line\">  navbar: 100,</div><div class=\"line\">  dropdown: 200,</div><div class=\"line\">  tooltip: 300,</div><div class=\"line\">  modal: 400</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">.navbar &#123;</div><div class=\"line\">\tz-index: map-get($zindex, 'navbar');</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>用 <code>map</code> 的方式取值，看起來好像比較厚工一點，我們可以用 sass 的 function 包裝起來：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * z alias for z-index</div><div class=\"line\"> * get zindex map value</div><div class=\"line\"> */</div><div class=\"line\">@<span class=\"keyword\">function</span> z($key) &#123;</div><div class=\"line\">\t@<span class=\"keyword\">if</span>(<span class=\"keyword\">map</span>-<span class=\"keyword\">has</span>-<span class=\"keyword\">key</span>($<span class=\"keyword\">zindex</span>, $key))&#123;</div><div class=\"line\">    @<span class=\"keyword\">return</span> map-get($zindex, $key);</div><div class=\"line\">  &#125; @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    @<span class=\"keyword\">error</span> <span class=\"string\">\"unknown key #&#123;$key&#125;\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.navbar</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">z-index</span>: <span class=\"built_in\">z</span>($zindex, <span class=\"string\">'navbar'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>當然還有其他的應用像是 <code>color</code> <code>typography</code> 等等，都可以搭配 sass map 的方式來操作。</p>\n<p>如果你認為上述的方式跟用前綴的方式分類變數沒有什麼不同的話，不套用也沒關係，重構是為了讓之後的開發更舒服。</p>\n<h3 id=\"大量的巢狀-class\"><a href=\"#大量的巢狀-class\" class=\"headerlink\" title=\"大量的巢狀 class\"></a>大量的巢狀 class</h3><p>我的建議是不要超過三層，第一是易讀性非常低，再來很容易覆蓋到權重。<br>可以採用一些目前比較熱門的 css 命名規範如 OOCSS 或是 BEM，或者搭配兩者一起使用。</p>\n<p>但最重要的一點是自己寫起來的感覺，不要讓規範箝制你了。</p>\n<p>如果想要使用 scss 的巢狀功能方便閱讀，又不想要讓巢狀 class 覆蓋權重的話，可以使用 @at-root，@at-root 在編譯的時候會幫你把巢狀拆出來到 root。</p>\n<p>另外可以使用 <code>&gt;</code> 子元素選擇器來取代後代選擇器。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">.classA &#123;</div><div class=\"line\">\t@at-root .classB &#123;</div><div class=\"line\">    // bla</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// compiled</div><div class=\"line\"></div><div class=\"line\">.classA &#123;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div><div class=\"line\">  .classB &#123;</div><div class=\"line\">    // bla</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>實際的 use case 如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">.alert-modal &#123;</div><div class=\"line\">  @at-root &amp;__header &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @at-root &amp;__body &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @at-root &amp;__footer &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上的代碼好像沒有想像中的好看，等下可以搭配 mixin 把它進一步做簡化。</p>\n<h2 id=\"善用-Mixin-簡化程式\"><a href=\"#善用-Mixin-簡化程式\" class=\"headerlink\" title=\"善用 Mixin 簡化程式\"></a>善用 Mixin 簡化程式</h2><p>除了一般使用 mixin 來加入 <code>prefixer</code> 之外，mixin 能夠做的事情還有很多，這邊提出幾個方法給大家參考。</p>\n<h3 id=\"BEM-mixin\"><a href=\"#BEM-mixin\" class=\"headerlink\" title=\"BEM mixin\"></a>BEM mixin</h3><p>BEM 的命名方式，如果一直手動 key 的話，感覺也挺麻煩的，而且 key 錯的機率也蠻高的，我們可以利用 mixin 來簡化他。</p>\n<p>順便一提，如果你的專案已經套用了 <code>postCSS</code>，可以使用 <a href=\"https://www.npmjs.com/package/postcss-bem\" target=\"_blank\" rel=\"external\">postcss-bem</a> 來幫助命名。</p>\n<p>如果你不喜歡他的命名方式，或是當前還無法套用 postCSS 的話也沒關係，我們可以自己做一個。</p>\n<p>上面的 code 可以改成下面的形式：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin block($block_name) &#123;</div><div class=\"line\">  .#&#123;$block_name&#125; &#123; @content; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@mixin element($element_name) &#123; </div><div class=\"line\">  @at-root &amp;__#&#123;$element_name&#125; &#123; @content; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@mixin modifier($modifier_name) &#123;</div><div class=\"line\">  @at-root &amp;-#&#123;$modifier_name&#125; &#123; @content; &#125;\t</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@mixin state($state_name) &#123;</div><div class=\"line\">\t&amp;.is-$&#123;#state_name&#125; &#123;@content;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// modal.scss</div><div class=\"line\"></div><div class=\"line\">// before</div><div class=\"line\">.alert-modal &#123;</div><div class=\"line\">  @at-root &amp;__header &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @at-root &amp;__body &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @at-root &amp;__footer &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// after</div><div class=\"line\">@include block(\"alert-modal\") &#123;</div><div class=\"line\">\t@include element(\"header\") &#123;&#125;</div><div class=\"line\">\t@include element(\"body\") &#123;&#125;</div><div class=\"line\">\t@include element(\"footer\") &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這樣一來簡單的 BEM mixins 就製作完成了。注意到這邊我們使用 <code>at-root</code> 的方式來避免巢狀 class。</p>\n<p>可以按照自己的喜好來調整命名方式，或者嚴謹一點對參數做一些處理（轉為小寫等等）、加入判斷式等等，或者今天你想要使用巢狀 class 的話可以加入額外的判斷參數。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin element($element_name, $at-root: true) &#123; </div><div class=\"line\">  @if($at-root) &#123;</div><div class=\"line\">    @at-root &amp;__#&#123;$element_name&#125; &#123; @content; &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  @else &#123;</div><div class=\"line\">    &amp;__#&#123;$element_name&#125; &#123; @content; &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"util-mixin\"><a href=\"#util-mixin\" class=\"headerlink\" title=\"util mixin\"></a>util mixin</h3><p>舉例來說，在設置 padding margin 的時候，我們常常會將上下或是左右的值設為一樣。寫久了難免會嫌麻煩，這時候就可以拜託 mixin 了。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">// before</div><div class=\"line\">.classA &#123;</div><div class=\"line\">\tmargin-right: 10px;</div><div class=\"line\">\tmargin-left: 10px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// after</div><div class=\"line\"></div><div class=\"line\">/*</div><div class=\"line\"> * lr Alias for left right</div><div class=\"line\"> */</div><div class=\"line\">@mixin lr($box_model, $value) &#123;</div><div class=\"line\">\t#&#123;$box_model&#125;-left: $value;</div><div class=\"line\">\t#&#123;$box_model&#125;-right: $value;</div><div class=\"line\">&#125;;</div><div class=\"line\">.classA &#123;</div><div class=\"line\">\t@include lr(\"margin\", 10px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這邊沒有寫得很嚴謹，你可以另外加入判斷式來保證輸入的值是合法的，類似的概念也能套用到 top left 設值上。</p>\n<p>或是常常遇到的 clearfix。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin clearfix() &#123;</div><div class=\"line\">\t&amp;:before, &amp;:after &#123;</div><div class=\"line\">    display: table;</div><div class=\"line\">    content: \"\";</div><div class=\"line\">\t\tclear: both;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.column &#123;</div><div class=\"line\">\t@include clearfix;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"child-selector-mixin\"><a href=\"#child-selector-mixin\" class=\"headerlink\" title=\"child selector mixin\"></a>child selector mixin</h3><p>常常會遇到使用 child selector 的情境。我們可以用 mixin 進一步包裝起來。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// before</div><div class=\"line\">.list &#123;</div><div class=\"line\">\t&amp;:first-child &#123;</div><div class=\"line\">\t  //bla</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&amp;:nth-child(2n) &#123;</div><div class=\"line\">\t  //bla</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">// after </div><div class=\"line\">@mixin first() &#123;</div><div class=\"line\">\t&amp;:first-child &#123; @content; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">.list &#123;</div><div class=\"line\">\t@include first() &#123;&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這邊推薦 <a href=\"http://lukyvj.github.io/family.scss/\" target=\"_blank\" rel=\"external\">Family.scss</a>，搜集了許多好用 child selector mixin。</p>\n<p><strong>p.s：我認為剛入門 CSS 的人還是從純 CSS 開始學習比較好，以免被 SCSS 的語法糖給寵壞了</strong></p>\n<h2 id=\"善用-Comment\"><a href=\"#善用-Comment\" class=\"headerlink\" title=\"善用 Comment\"></a>善用 Comment</h2><p>在缺乏 function 的 css 下，使用 comment 來解釋 class 更為重要。這邊提供一些，comment 的技巧。</p>\n<p>註解不但方便自己閱讀，之後別人接手也會比較快理解這個 class 該如何使用、在哪個場景使用。</p>\n<h3 id=\"目錄\"><a href=\"#目錄\" class=\"headerlink\" title=\"目錄\"></a>目錄</h3><p>如果文件包含的 class 較多，可以考慮在文件最前面加入目錄，方便之後查找。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * INPUT</div><div class=\"line\"> *  text</div><div class=\"line\"> *  select</div><div class=\"line\"> *  number</div><div class=\"line\"> * BUTTON</div><div class=\"line\"> *  primary</div><div class=\"line\"> *  warn</div><div class=\"line\"> */</div></pre></td></tr></table></figure>\n<h3 id=\"魔術數字、HACK、使用方式\"><a href=\"#魔術數字、HACK、使用方式\" class=\"headerlink\" title=\"魔術數字、HACK、使用方式\"></a>魔術數字、HACK、使用方式</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*</div><div class=\"line\"> * for input[type=\"text\"]</div><div class=\"line\"> * e.g: &lt;input type=\"text\" /&gt;</div><div class=\"line\"> */</div><div class=\"line\"> </div><div class=\"line\">.text-input[type=\"text\"] &#123;</div><div class=\"line\">  padding: 20px;</div><div class=\"line\"></div><div class=\"line\">  /* page offset */</div><div class=\"line\">\ttop: 27px;</div><div class=\"line\">  /* IE 8+ hack */</div><div class=\"line\">  // ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"CSS-結構\"><a href=\"#CSS-結構\" class=\"headerlink\" title=\"CSS 結構\"></a>CSS 結構</h2><p>基本上分成幾個大方向：<code>module</code> <code>base</code> <code>config</code> <code>helper</code></p>\n<h3 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h3><p>module 資料夾裡存放所有模組化的元件，像是 button input modal 等等。如果元件拆得更細的話，可以再另外開資料夾，像是 button 有可能樣式比較多，這時候我們可以另外開一個 <code>button</code> 資料夾，裡頭存放所有 button 的樣式。</p>\n<h3 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h3><p>base 裡頭放置了像是 <code>grid</code> <code>normalize</code> <code>reset</code> <code>typography</code> 等比較基本的架構。</p>\n<h3 id=\"config\"><a href=\"#config\" class=\"headerlink\" title=\"config\"></a>config</h3><p>存放變數跟 color 的地方，設定的內容統一存放在這個資料夾統一管理。</p>\n<h3 id=\"helper\"><a href=\"#helper\" class=\"headerlink\" title=\"helper\"></a>helper</h3><p>存放客製化的 function 跟 mixin。</p>\n<h2 id=\"寫在最後\"><a href=\"#寫在最後\" class=\"headerlink\" title=\"寫在最後\"></a>寫在最後</h2><p>如果你有額外的時間，建議你還是可以去看看像是 <a href=\"https://github.com/postcss/postcss\" target=\"_blank\" rel=\"external\">postCSS</a>、<a href=\"https://github.com/css-modules/css-modules\" target=\"_blank\" rel=\"external\">css-modules</a>、<a href=\"https://github.com/webpack/webpack\" target=\"_blank\" rel=\"external\">webpack</a> 等優秀的開源工具。<br>不然整天跟 CSS 打架總有一天會精神耗弱的XD。</p>\n<p>做了一個<a href=\"https://github.com/kjj6198/css-structure-example\" target=\"_blank\" rel=\"external\">DEMO</a>，非常陽春。</p>\n<p>如果你也想分享自己在前端跟 legacy code 奮鬥的過程，或是有更好的解決方案，歡迎在下面留言。</p>\n<h2 id=\"持續關注前端趨勢\"><a href=\"#持續關注前端趨勢\" class=\"headerlink\" title=\"持續關注前端趨勢\"></a>持續關注前端趨勢</h2><p>這裡分享幾個覺得蠻優質的資源。</p>\n<p><a href=\"http://gold.xitu.io/\" target=\"_blank\" rel=\"external\">掘金網</a></p>\n<p><a href=\"http://weekly.codetengu.com/\" target=\"_blank\" rel=\"external\">碼天狗（但最近前端的分享不多）</a></p>\n<p><a href=\"https://www.techbridge.cc/\" target=\"_blank\" rel=\"external\">TechBrige</a></p>\n<p><a href=\"http://csswizardry.com/\" target=\"_blank\" rel=\"external\">CSS wizard</a></p>\n<h3 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h3><p><a href=\"http://cssguidelin.es/\" target=\"_blank\" rel=\"external\">CSS guideline</a></p>\n<p><a href=\"https://www.smashingmagazine.com/2016/05/stylelint-the-style-sheet-linter-weve-always-wanted/\" target=\"_blank\" rel=\"external\">Why Stylelint</a></p>\n<p><a href=\"https://hacks.mozilla.org/2016/05/css-coding-techniques/?utm_campaign=CodeTengu&amp;utm_medium=email&amp;utm_source=CodeTengu_44\" target=\"_blank\" rel=\"external\">CSS coding techniques</a></p>\n<p><a href=\"http://seesparkbox.com/foundry/why_you_need_to_refactor_your_css\" target=\"_blank\" rel=\"external\">why you should refactor your css</a></p>\n<p><a href=\"http://rscss.io/\" target=\"_blank\" rel=\"external\">rsscss.io</a></p>\n<h4 id=\"Legacy-Code-專欄\"><a href=\"#Legacy-Code-專欄\" class=\"headerlink\" title=\"Legacy Code 專欄\"></a>Legacy Code 專欄</h4><ul>\n<li><a href=\"/2016/06/11/legacy-code/\" title=\"從 legacy code 中尋找出口（上）\">從 legacy code 中尋找出口（上）</a></li>\n<li><a href=\"/2016/09/17/legacy-code3/\" title=\"從 legacy code 中尋找出口（中）- HTML 篇\">從 legacy code 中尋找出口（中）- HTML 篇</a>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我們的第一步是先從 CSS 下手，因為 css 是相對於其他前端部分來說比較容易重構的部分。很容易髒亂的 code 也是 CSS。</p>\n<p>上一篇描述了在大型專案中引入新框架及技術的困難點，這一篇主要會專注在如何透過現有的工具及框架來重構現有的代碼。</p>\n<p>本次的重構技巧會以 SCSS 為主，所以在閱讀本文之前，我先假設你已經有基本的 SCSS 以及 CSS 的基礎。其他預處理器的概念應該是相通的。</p>\n<h2 id=\"引入-style-linter-及-editorconfig\"><a href=\"#引入-style-linter-及-editorconfig\" class=\"headerlink\" title=\"引入 style linter 及 editorconfig\"></a>引入 style linter 及 editorconfig</h2><p>我們採取的第一步是先引入審查代碼工具。目前比較流行的 css linter 是 stylelinter，他能夠針對 scss sass 語法做 lint。也可以搭配其他 IDE、文字編輯器 plugin。這邊的範例是使用 sublime，其他的 IDE 應該也有類似的功能。</p>\n<h3 id=\"1-加入-stylelint\"><a href=\"#1-加入-stylelint\" class=\"headerlink\" title=\"1. 加入 stylelint\"></a>1. 加入 stylelint</h3><p>stylelint 除了可以針對 scss 語法做 lint 之外。由於其本身是用 js 撰寫的，可以客製化自己的 rule 跟加入其他開源的 plugin。</p>\n<p>因為 stylelint 是以 AST 的方式解析，所以可以很容易的對文件中的節點做操作。</p>\n<p>關於 stylelint 的深入使用，已經超過本文篇幅，有興趣的人可以參考 css trick 的<a href=\"https://css-tricks.com/stylelint/\">教學</a></p>\n<p>首先，先來安裝 <code>stylelint</code>，run <code>npm install -g stylelint</code>。</p>\n<p>再來設置 .stylelintrc 檔，詳細的 rules 可以到<a href=\"http://stylelint.io/user-guide/rules/\">這裡</a> 查看。如果你不想要那麼麻煩自己手動一個一個設定的話。可以考慮使用 <a href=\"https://github.com/stylelint/stylelint-config-standard\">stylelint-config-standard</a> 這個插件，再根據自己的需求做調整。</p>\n<p><code>npm install --save-dev stylelint-config-standard</code></p>\n<p><strong>這邊還是建議花時間瞭解一下專案的需求來制定 rule，不然有時候太嚴格的 rule，滿江紅看到也懶得改了。</strong></p>\n<h3 id=\"2-加入-editorconfig\"><a href=\"#2-加入-editorconfig\" class=\"headerlink\" title=\"2. 加入 .editorconfig\"></a>2. 加入 .editorconfig</h3><p>EditorConfig 是一個為了統一代碼風格的解決方案。每個人文字編輯器的環境可能不盡相同，為了統一彼此之間的環境，這邊我們採用的 <code>editorconfig</code></p>\n<p>設定非常簡單，只要新增一個檔案就好。<a href=\"http://EditorConfig.org\">editorconfig</a>。</p>\n<p>目前幾乎主流的文字編輯器都有支援 editorconfig。</p>\n<h2 id=\"常見的-code-smell-以及-refactor-方式\"><a href=\"#常見的-code-smell-以及-refactor-方式\" class=\"headerlink\" title=\"常見的 code smell 以及 refactor 方式\"></a>常見的 code smell 以及 refactor 方式</h2><p>在開始捲起袖子做事之前，還是先來確認一下目前的專案是否需要 refactor：</p>\n<ul>\n<li>許多元件（如 button input）等放在同一個檔案內，查找非常不易。</li>\n<li>覆寫了許多 class 造成預期之外的行為發生</li>\n<li>早期沒有統一的代碼規範，tab、空白夾雜在一起，閱讀性大幅降低</li>\n<li>!important 四散各處</li>\n<li>變數的命名跟管理不夠統一</li>\n<li>團隊開始擴增</li>\n<li>相關的文件不足</li>\n</ul>\n<p>接下來介紹一些比較常見的 code smell</p>\n<h3 id=\"Order\"><a href=\"#Order\" class=\"headerlink\" title=\"Order\"></a>Order</h3><p>class 變多之後，如果 rule 裡面沒有一定的排列順序的話，其實查找很不方便。而且易讀性並不高，像是下列的 code</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.class</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">\t<span class=\"attribute\">display</span>: none;</div><div class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">30px</span>;</div><div class=\"line\">\t<span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">\t<span class=\"attribute\">list-style</span>: none;</div><div class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background</span>: white;</div><div class=\"line\">\t<span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">250px</span>;</div><div class=\"line\">\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">15px</span>;</div><div class=\"line\">\t<span class=\"attribute\">overflow-y</span>: scroll;</div><div class=\"line\">\t<span class=\"attribute\">overflow-x</span>: hidden;</div><div class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid $hr-gray;</div><div class=\"line\">\t<span class=\"attribute\">z-index</span>: <span class=\"number\">9999999</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>那麼要怎樣排序會比較好呢？這邊提供幾個大原則：</p>\n<ol>\n<li>display、position</li>\n<li>box-model</li>\n<li>font、typography</li>\n<li>layout(包含 color、border-radius 等)</li>\n<li>其他屬性(如animation)</li>\n</ol>\n<p>原因：對一個 class 來說，最重要的就是 display 與 position ，所以應該擺在最上面。而其次重要的內容是文字，所以擺第二，最後才是 <code>layout</code> 與其他屬性。<br>至於屬於同屬性的話不限制順序，例如 padding margin 順序調換沒有關係，因為找起來都很方便。只要維持一定的邏輯即可。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.class</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">display</span>: none;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">\t<span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">z-index</span>: <span class=\"number\">9999999</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">250px</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">30px</span>;</div><div class=\"line\">\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">15px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"attribute\">background</span>: white;</div><div class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#aaa</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"attribute\">list-style</span>: none;</div><div class=\"line\">\t<span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"attribute\">overflow-y</span>: scroll;</div><div class=\"line\">\t<span class=\"attribute\">overflow-x</span>: hidden;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"善用-sass-map-管理變數\"><a href=\"#善用-sass-map-管理變數\" class=\"headerlink\" title=\"善用 sass map 管理變數\"></a>善用 sass map 管理變數</h3><p>style 檔案變多了之後，相對的要管理的變數也會變得越來越多。<br>除了在命名時加上前綴之外，我們也可以利用 sass map 的方式來統一管理。而且 sass map 提供了一些很方便的 <a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html\">function</a> 來操作，像是 <code>map-get</code> <code>map-has-key</code>等等，可以很有效地把變數 group 起來。很像 js 的 object。</p>\n<p>以 <code>z-index</code> 來說，我們可以改寫下面的 code</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* before */</div><div class=\"line\">$zindex-navbar: 100;</div><div class=\"line\">$zindex-dropdown: 200;</div><div class=\"line\">$zindex-tooltip: 300;</div><div class=\"line\">$zindex-modal: 400;</div><div class=\"line\"></div><div class=\"line\">.navbar &#123;</div><div class=\"line\">\tz-index: $zindex-navbar;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/* after */</div><div class=\"line\">$zindex: (</div><div class=\"line\">  navbar: 100,</div><div class=\"line\">  dropdown: 200,</div><div class=\"line\">  tooltip: 300,</div><div class=\"line\">  modal: 400</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">.navbar &#123;</div><div class=\"line\">\tz-index: map-get($zindex, 'navbar');</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>用 <code>map</code> 的方式取值，看起來好像比較厚工一點，我們可以用 sass 的 function 包裝起來：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * z alias for z-index</div><div class=\"line\"> * get zindex map value</div><div class=\"line\"> */</span></div><div class=\"line\">@<span class=\"keyword\">function</span> z($key) &#123;</div><div class=\"line\">\t@<span class=\"keyword\">if</span>(<span class=\"keyword\">map</span>-<span class=\"keyword\">has</span>-<span class=\"keyword\">key</span>($<span class=\"keyword\">zindex</span>, $key))&#123;</div><div class=\"line\">    @<span class=\"keyword\">return</span> map-get($zindex, $key);</div><div class=\"line\">  &#125; @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    @<span class=\"keyword\">error</span> <span class=\"string\">\"unknown key #&#123;$key&#125;\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.navbar</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">z-index</span>: <span class=\"built_in\">z</span>($zindex, <span class=\"string\">'navbar'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>當然還有其他的應用像是 <code>color</code> <code>typography</code> 等等，都可以搭配 sass map 的方式來操作。</p>\n<p>如果你認為上述的方式跟用前綴的方式分類變數沒有什麼不同的話，不套用也沒關係，重構是為了讓之後的開發更舒服。</p>\n<h3 id=\"大量的巢狀-class\"><a href=\"#大量的巢狀-class\" class=\"headerlink\" title=\"大量的巢狀 class\"></a>大量的巢狀 class</h3><p>我的建議是不要超過三層，第一是易讀性非常低，再來很容易覆蓋到權重。<br>可以採用一些目前比較熱門的 css 命名規範如 OOCSS 或是 BEM，或者搭配兩者一起使用。</p>\n<p>但最重要的一點是自己寫起來的感覺，不要讓規範箝制你了。</p>\n<p>如果想要使用 scss 的巢狀功能方便閱讀，又不想要讓巢狀 class 覆蓋權重的話，可以使用 @at-root，@at-root 在編譯的時候會幫你把巢狀拆出來到 root。</p>\n<p>另外可以使用 <code>&gt;</code> 子元素選擇器來取代後代選擇器。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">.classA &#123;</div><div class=\"line\">\t@at-root .classB &#123;</div><div class=\"line\">    // bla</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// compiled</div><div class=\"line\"></div><div class=\"line\">.classA &#123;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div><div class=\"line\">  .classB &#123;</div><div class=\"line\">    // bla</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>實際的 use case 如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">.alert-modal &#123;</div><div class=\"line\">  @at-root &amp;__header &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @at-root &amp;__body &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @at-root &amp;__footer &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上的代碼好像沒有想像中的好看，等下可以搭配 mixin 把它進一步做簡化。</p>\n<h2 id=\"善用-Mixin-簡化程式\"><a href=\"#善用-Mixin-簡化程式\" class=\"headerlink\" title=\"善用 Mixin 簡化程式\"></a>善用 Mixin 簡化程式</h2><p>除了一般使用 mixin 來加入 <code>prefixer</code> 之外，mixin 能夠做的事情還有很多，這邊提出幾個方法給大家參考。</p>\n<h3 id=\"BEM-mixin\"><a href=\"#BEM-mixin\" class=\"headerlink\" title=\"BEM mixin\"></a>BEM mixin</h3><p>BEM 的命名方式，如果一直手動 key 的話，感覺也挺麻煩的，而且 key 錯的機率也蠻高的，我們可以利用 mixin 來簡化他。</p>\n<p>順便一提，如果你的專案已經套用了 <code>postCSS</code>，可以使用 <a href=\"https://www.npmjs.com/package/postcss-bem\">postcss-bem</a> 來幫助命名。</p>\n<p>如果你不喜歡他的命名方式，或是當前還無法套用 postCSS 的話也沒關係，我們可以自己做一個。</p>\n<p>上面的 code 可以改成下面的形式：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin block($block_name) &#123;</div><div class=\"line\">  .#&#123;$block_name&#125; &#123; @content; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@mixin element($element_name) &#123; </div><div class=\"line\">  @at-root &amp;__#&#123;$element_name&#125; &#123; @content; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@mixin modifier($modifier_name) &#123;</div><div class=\"line\">  @at-root &amp;-#&#123;$modifier_name&#125; &#123; @content; &#125;\t</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@mixin state($state_name) &#123;</div><div class=\"line\">\t&amp;.is-$&#123;#state_name&#125; &#123;@content;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// modal.scss</div><div class=\"line\"></div><div class=\"line\">// before</div><div class=\"line\">.alert-modal &#123;</div><div class=\"line\">  @at-root &amp;__header &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @at-root &amp;__body &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @at-root &amp;__footer &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// after</div><div class=\"line\">@include block(\"alert-modal\") &#123;</div><div class=\"line\">\t@include element(\"header\") &#123;&#125;</div><div class=\"line\">\t@include element(\"body\") &#123;&#125;</div><div class=\"line\">\t@include element(\"footer\") &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這樣一來簡單的 BEM mixins 就製作完成了。注意到這邊我們使用 <code>at-root</code> 的方式來避免巢狀 class。</p>\n<p>可以按照自己的喜好來調整命名方式，或者嚴謹一點對參數做一些處理（轉為小寫等等）、加入判斷式等等，或者今天你想要使用巢狀 class 的話可以加入額外的判斷參數。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin element($element_name, $at-root: true) &#123; </div><div class=\"line\">  @if($at-root) &#123;</div><div class=\"line\">    @at-root &amp;__#&#123;$element_name&#125; &#123; @content; &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  @else &#123;</div><div class=\"line\">    &amp;__#&#123;$element_name&#125; &#123; @content; &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"util-mixin\"><a href=\"#util-mixin\" class=\"headerlink\" title=\"util mixin\"></a>util mixin</h3><p>舉例來說，在設置 padding margin 的時候，我們常常會將上下或是左右的值設為一樣。寫久了難免會嫌麻煩，這時候就可以拜託 mixin 了。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">// before</div><div class=\"line\">.classA &#123;</div><div class=\"line\">\tmargin-right: 10px;</div><div class=\"line\">\tmargin-left: 10px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// after</div><div class=\"line\"></div><div class=\"line\">/*</div><div class=\"line\"> * lr Alias for left right</div><div class=\"line\"> */</div><div class=\"line\">@mixin lr($box_model, $value) &#123;</div><div class=\"line\">\t#&#123;$box_model&#125;-left: $value;</div><div class=\"line\">\t#&#123;$box_model&#125;-right: $value;</div><div class=\"line\">&#125;;</div><div class=\"line\">.classA &#123;</div><div class=\"line\">\t@include lr(\"margin\", 10px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這邊沒有寫得很嚴謹，你可以另外加入判斷式來保證輸入的值是合法的，類似的概念也能套用到 top left 設值上。</p>\n<p>或是常常遇到的 clearfix。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin clearfix() &#123;</div><div class=\"line\">\t&amp;:before, &amp;:after &#123;</div><div class=\"line\">    display: table;</div><div class=\"line\">    content: \"\";</div><div class=\"line\">\t\tclear: both;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.column &#123;</div><div class=\"line\">\t@include clearfix;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"child-selector-mixin\"><a href=\"#child-selector-mixin\" class=\"headerlink\" title=\"child selector mixin\"></a>child selector mixin</h3><p>常常會遇到使用 child selector 的情境。我們可以用 mixin 進一步包裝起來。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// before</div><div class=\"line\">.list &#123;</div><div class=\"line\">\t&amp;:first-child &#123;</div><div class=\"line\">\t  //bla</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&amp;:nth-child(2n) &#123;</div><div class=\"line\">\t  //bla</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">// after </div><div class=\"line\">@mixin first() &#123;</div><div class=\"line\">\t&amp;:first-child &#123; @content; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">.list &#123;</div><div class=\"line\">\t@include first() &#123;&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>這邊推薦 <a href=\"http://lukyvj.github.io/family.scss/\">Family.scss</a>，搜集了許多好用 child selector mixin。</p>\n<p><strong>p.s：我認為剛入門 CSS 的人還是從純 CSS 開始學習比較好，以免被 SCSS 的語法糖給寵壞了</strong></p>\n<h2 id=\"善用-Comment\"><a href=\"#善用-Comment\" class=\"headerlink\" title=\"善用 Comment\"></a>善用 Comment</h2><p>在缺乏 function 的 css 下，使用 comment 來解釋 class 更為重要。這邊提供一些，comment 的技巧。</p>\n<p>註解不但方便自己閱讀，之後別人接手也會比較快理解這個 class 該如何使用、在哪個場景使用。</p>\n<h3 id=\"目錄\"><a href=\"#目錄\" class=\"headerlink\" title=\"目錄\"></a>目錄</h3><p>如果文件包含的 class 較多，可以考慮在文件最前面加入目錄，方便之後查找。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * INPUT</div><div class=\"line\"> *  text</div><div class=\"line\"> *  select</div><div class=\"line\"> *  number</div><div class=\"line\"> * BUTTON</div><div class=\"line\"> *  primary</div><div class=\"line\"> *  warn</div><div class=\"line\"> */</span></div></pre></td></tr></table></figure>\n<h3 id=\"魔術數字、HACK、使用方式\"><a href=\"#魔術數字、HACK、使用方式\" class=\"headerlink\" title=\"魔術數字、HACK、使用方式\"></a>魔術數字、HACK、使用方式</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*</div><div class=\"line\"> * for input[type=\"text\"]</div><div class=\"line\"> * e.g: &lt;input type=\"text\" /&gt;</div><div class=\"line\"> */</div><div class=\"line\"> </div><div class=\"line\">.text-input[type=\"text\"] &#123;</div><div class=\"line\">  padding: 20px;</div><div class=\"line\"></div><div class=\"line\">  /* page offset */</div><div class=\"line\">\ttop: 27px;</div><div class=\"line\">  /* IE 8+ hack */</div><div class=\"line\">  // ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"CSS-結構\"><a href=\"#CSS-結構\" class=\"headerlink\" title=\"CSS 結構\"></a>CSS 結構</h2><p>基本上分成幾個大方向：<code>module</code> <code>base</code> <code>config</code> <code>helper</code></p>\n<h3 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h3><p>module 資料夾裡存放所有模組化的元件，像是 button input modal 等等。如果元件拆得更細的話，可以再另外開資料夾，像是 button 有可能樣式比較多，這時候我們可以另外開一個 <code>button</code> 資料夾，裡頭存放所有 button 的樣式。</p>\n<h3 id=\"base\"><a href=\"#base\" class=\"headerlink\" title=\"base\"></a>base</h3><p>base 裡頭放置了像是 <code>grid</code> <code>normalize</code> <code>reset</code> <code>typography</code> 等比較基本的架構。</p>\n<h3 id=\"config\"><a href=\"#config\" class=\"headerlink\" title=\"config\"></a>config</h3><p>存放變數跟 color 的地方，設定的內容統一存放在這個資料夾統一管理。</p>\n<h3 id=\"helper\"><a href=\"#helper\" class=\"headerlink\" title=\"helper\"></a>helper</h3><p>存放客製化的 function 跟 mixin。</p>\n<h2 id=\"寫在最後\"><a href=\"#寫在最後\" class=\"headerlink\" title=\"寫在最後\"></a>寫在最後</h2><p>如果你有額外的時間，建議你還是可以去看看像是 <a href=\"https://github.com/postcss/postcss\">postCSS</a>、<a href=\"https://github.com/css-modules/css-modules\">css-modules</a>、<a href=\"https://github.com/webpack/webpack\">webpack</a> 等優秀的開源工具。<br>不然整天跟 CSS 打架總有一天會精神耗弱的XD。</p>\n<p>做了一個<a href=\"https://github.com/kjj6198/css-structure-example\">DEMO</a>，非常陽春。</p>\n<p>如果你也想分享自己在前端跟 legacy code 奮鬥的過程，或是有更好的解決方案，歡迎在下面留言。</p>\n<h2 id=\"持續關注前端趨勢\"><a href=\"#持續關注前端趨勢\" class=\"headerlink\" title=\"持續關注前端趨勢\"></a>持續關注前端趨勢</h2><p>這裡分享幾個覺得蠻優質的資源。</p>\n<p><a href=\"http://gold.xitu.io/\">掘金網</a></p>\n<p><a href=\"http://weekly.codetengu.com/\">碼天狗（但最近前端的分享不多）</a></p>\n<p><a href=\"https://www.techbridge.cc/\">TechBrige</a></p>\n<p><a href=\"http://csswizardry.com/\">CSS wizard</a></p>\n<h3 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h3><p><a href=\"http://cssguidelin.es/\">CSS guideline</a></p>\n<p><a href=\"https://www.smashingmagazine.com/2016/05/stylelint-the-style-sheet-linter-weve-always-wanted/\">Why Stylelint</a></p>\n<p><a href=\"https://hacks.mozilla.org/2016/05/css-coding-techniques/?utm_campaign=CodeTengu&amp;utm_medium=email&amp;utm_source=CodeTengu_44\">CSS coding techniques</a></p>\n<p><a href=\"http://seesparkbox.com/foundry/why_you_need_to_refactor_your_css\">why you should refactor your css</a></p>\n<p><a href=\"http://rscss.io/\">rsscss.io</a></p>\n<h4 id=\"Legacy-Code-專欄\"><a href=\"#Legacy-Code-專欄\" class=\"headerlink\" title=\"Legacy Code 專欄\"></a>Legacy Code 專欄</h4><ul>\n<li><a href=\"/2016/06/11/legacy-code/\" title=\"從 legacy code 中尋找出口（上）\">從 legacy code 中尋找出口（上）</a></li>\n<li><a href=\"/2016/09/17/legacy-code3/\" title=\"從 legacy code 中尋找出口（中）- HTML 篇\">從 legacy code 中尋找出口（中）- HTML 篇</a>\n</li>\n</ul>\n"},{"title":"從 legacy code 中尋找出口（中）- HTML 篇","date":"2016-09-17T02:40:16.000Z","_content":"\n\n講完 CSS 的重構技巧之後，接下來會專注在 HTML 的重構技巧上。本系列的文章將不會談論 js 的重構部分，因為牽扯到較多的程式撰寫技巧，而且網路上類似的文章應該是不勝枚舉。\n\n## 前言\n\n其實 HTML 能夠重構的點並不多，主要就是標籤的正確使用以及顧慮 accessibility 等小細節。\n\n所以這篇文章會著重在如何使用正確的標籤以及語義化；基本的 accessiblity 認識跟 aria 標籤的使用，不僅對 screen reader 較友善，語義化的標籤使用也能夠在之後修改 HTML 時更有效率；最後是模板語言的技巧應用，這邊會用 rails 的 views 為例，不過概念的部分應該是相通的。 \n\n---\n\n### 語義化\n\n首先，我們先來看看 HTML5 新增的 tag 有哪些\n\n#### section\n\n* 用來表示網頁裡的一個**段落**，常見的誤解是用來表示一篇文章。\n\n* 基本上跟 div 沒有太大的差別，只有語義化的表現。\n\n#### article\n\n* 用來表示一篇**文章**\n\n#### datalist\n\n#### dl dt dd\n\n* 如果資訊是以條列式來呈現，可以使用 dt, dd 來區分。\n\n  > Definition lists, created using the DL element, generally consist of a series of term\\/definition pairs \\(although definition lists may have other applications\\). Thus, when advertising a product, one might use a definition list:\n\n```html\n\n<dl class=\"information\">\n\n  <dt>薪水：</dt>\n\n  <dd>100000 ~ 300000<dd>\n\n  <dt>工作地點：</dt>\n\n  <dd>台北市</dd>\n\n</dl>\n```\n\n任何以成對方式呈現的資訊都可以使用 dt, dd 包裝，像是範例中的：薪水搭配 100000 ~ 300000、工作地點搭配台北市。不過要注意的一點是 dl 預設會將內容縮排（就跟 ul, ol 一樣）。可以將 padding 設置為 0 來解決。\n\n#### figure figcaption\n\n* 使用在和主內容相關的圖片、代碼，或其他資訊，不一定只能放圖而已\n\n* 搭配 figcaption 來定義標題\n\n#### legend\n\n* 搭配 fieldset 使用，用來表示輸入表單的內容\n\n* 預設的邊框很醜，如果要使用這樣的結構可能要重置一下 CSS\n\n<iframe height='265' scrolling='no' src='//codepen.io/kjj6198/embed/LRkQAB/?height=265&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='http://codepen.io/kjj6198/pen/LRkQAB/'>fieldset</a> by 愷開 (<a href='http://codepen.io/kjj6198'>@kjj6198</a>) on <a href='http://codepen.io'>CodePen</a>.\n</iframe>\n\n族繁不及備載，tag 的部分就在此告一段落。我個人覺得有一大部分是因為**不知道**才沒有使用這些 tag 的，詳情可以到[w3c](http://www.w3school.com.cn/tags/tag_legend.asp) 的網站看看。之後會再將其他 tag 的使用方式補上。\n\n#### 如果都沒辦法滿足怎麼辦？\n\n如果以上的 tag 都沒有辦法滿足你的需求，最常見的做法就是用純 div。而 HTML 為了因應這樣的需求，也提出的 ARIA 的 spec，讓開發者可以更容易製作客製化的元件。如果我們想要使用 div 來模擬按鈕的行為，除了在 class 加上 `btn` 之外，我們同時可以加上 role attribute，並且使用相對應的 aria-\\* 標籤來做對應的狀態處理（是否按下、disabled、haspopup 等等），除了更加語義化之外，這些看起來有點麻煩的細節，都會大幅地改善使用 screen reader 的體驗。\n\n但是，盡量不要取代原本語義化的標籤的含義，例如將 button 標籤加入 `role=\"modal\"`  之後當作 modal 使用。\n\n> Web developers _must not_ use the ARIA `role` and `aria-*` attributes in a manner that conflicts with the semantics described in the [Document conformance requirements for use of ARIA attributes in HTML](https://www.w3.org/TR/html-aria/#docconformance)table. Web developers _should not_ set the ARIA `role` and `aria-*` attributes to values that match the default implicit ARIA semantics defined in the table. - [w3c spec](https://www.w3.org/TR/html-aria/#rules-wd)\n\n當然，雖然 spec 這麼說，但某些 tag 像是 `input + label` 的 hack 對前端開發來講真的很方便。這部分或許就看大家的取捨了。\n\n```html\n\n<div class=\"btn\" role=\"button\" aria-disabled=\"false\">Click to Signup</div>\n\n```\n\n### Accessibility\n\naccessibility 其實可以另外再寫一篇文章來討論，但因為不再本篇的討論範圍內，這邊只列幾點關於 accessibility 的注意要點。\n\n* 文字的大小\n\n* 顏色的對比\n\n* 是否加入適當的 attr。（img 的 alt, link 的 title 等）\n\n* 適當的 aria-\\* 使用\n\n如果對 accessility 有興趣，建議大家看看：\n\n- [ARIA](https://www.w3.org/TR/html-aria/) w3c 的 aria 標準。\n\n- [WebAIM checklist](http://webaim.org/standards/wcag/checklist) WCAG 的 checklist\n\n- [WebAIM inviblecontent](http://webaim.org/techniques/css/invisiblecontent/) 關於 CSS invisible content 的介紹\n\n### 模板語言（已 rails views 為例）\n\n目前市面上有很多模板引擎，像是 `ejs` `erb` `handlebar` `jade` 等等，都有一套特定的語法、partial、客製化的函數等等幫助你簡化冗長的 HTML。\n\n就 rails views 來說\n\n```html\n\n<%= render 'partial/buttons/primary', locals: {\n\n  :name => 'foo'\n\n  :title => 'bar'\n\n} %>\n\n```\n\n將常用的元件拆成 partial，並且放在對應的資料夾（我的習慣是將所有 partial 檔統一資料夾管理，除非那個 partial 只有在某一個特定頁面使用）。這樣一來就可以很容易地引入已經撰寫好的 HTML 架構。\n\n```html\n\n<%= render 'partial/modal', locals: {\n :name => 'foo',\n :title => 'bar',\n :image => image_path('a.png')\n} %>\n```\n\n## 結論\n\nHTML 的重構比起 CSS 跟 JS，算是簡單許多（只要 css 撰寫的時候不用 tag 做 styling），不過從頭看下來，要顧慮的事情也不少。正確的使用 tag 以及顧慮 accessibility，能夠有效地增加 UX，同時自己在修改的時候也不會看到一大堆 div 看到心癢癢。\n\n#### Legacy Code 專欄\n\n- {% post_link 'legacy-code' %}\n- {% post_link 'legacy-code2' %}\n","source":"_posts/legacy-code3.md","raw":"---\ntitle: 從 legacy code 中尋找出口（中）- HTML 篇\ncategories: 前端\ntags:\n  - HTML\n  - 重構\n  - aria\ndate: 2016-09-17 10:40:16\n---\n\n\n講完 CSS 的重構技巧之後，接下來會專注在 HTML 的重構技巧上。本系列的文章將不會談論 js 的重構部分，因為牽扯到較多的程式撰寫技巧，而且網路上類似的文章應該是不勝枚舉。\n\n## 前言\n\n其實 HTML 能夠重構的點並不多，主要就是標籤的正確使用以及顧慮 accessibility 等小細節。\n\n所以這篇文章會著重在如何使用正確的標籤以及語義化；基本的 accessiblity 認識跟 aria 標籤的使用，不僅對 screen reader 較友善，語義化的標籤使用也能夠在之後修改 HTML 時更有效率；最後是模板語言的技巧應用，這邊會用 rails 的 views 為例，不過概念的部分應該是相通的。 \n\n---\n\n### 語義化\n\n首先，我們先來看看 HTML5 新增的 tag 有哪些\n\n#### section\n\n* 用來表示網頁裡的一個**段落**，常見的誤解是用來表示一篇文章。\n\n* 基本上跟 div 沒有太大的差別，只有語義化的表現。\n\n#### article\n\n* 用來表示一篇**文章**\n\n#### datalist\n\n#### dl dt dd\n\n* 如果資訊是以條列式來呈現，可以使用 dt, dd 來區分。\n\n  > Definition lists, created using the DL element, generally consist of a series of term\\/definition pairs \\(although definition lists may have other applications\\). Thus, when advertising a product, one might use a definition list:\n\n```html\n\n<dl class=\"information\">\n\n  <dt>薪水：</dt>\n\n  <dd>100000 ~ 300000<dd>\n\n  <dt>工作地點：</dt>\n\n  <dd>台北市</dd>\n\n</dl>\n```\n\n任何以成對方式呈現的資訊都可以使用 dt, dd 包裝，像是範例中的：薪水搭配 100000 ~ 300000、工作地點搭配台北市。不過要注意的一點是 dl 預設會將內容縮排（就跟 ul, ol 一樣）。可以將 padding 設置為 0 來解決。\n\n#### figure figcaption\n\n* 使用在和主內容相關的圖片、代碼，或其他資訊，不一定只能放圖而已\n\n* 搭配 figcaption 來定義標題\n\n#### legend\n\n* 搭配 fieldset 使用，用來表示輸入表單的內容\n\n* 預設的邊框很醜，如果要使用這樣的結構可能要重置一下 CSS\n\n<iframe height='265' scrolling='no' src='//codepen.io/kjj6198/embed/LRkQAB/?height=265&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='http://codepen.io/kjj6198/pen/LRkQAB/'>fieldset</a> by 愷開 (<a href='http://codepen.io/kjj6198'>@kjj6198</a>) on <a href='http://codepen.io'>CodePen</a>.\n</iframe>\n\n族繁不及備載，tag 的部分就在此告一段落。我個人覺得有一大部分是因為**不知道**才沒有使用這些 tag 的，詳情可以到[w3c](http://www.w3school.com.cn/tags/tag_legend.asp) 的網站看看。之後會再將其他 tag 的使用方式補上。\n\n#### 如果都沒辦法滿足怎麼辦？\n\n如果以上的 tag 都沒有辦法滿足你的需求，最常見的做法就是用純 div。而 HTML 為了因應這樣的需求，也提出的 ARIA 的 spec，讓開發者可以更容易製作客製化的元件。如果我們想要使用 div 來模擬按鈕的行為，除了在 class 加上 `btn` 之外，我們同時可以加上 role attribute，並且使用相對應的 aria-\\* 標籤來做對應的狀態處理（是否按下、disabled、haspopup 等等），除了更加語義化之外，這些看起來有點麻煩的細節，都會大幅地改善使用 screen reader 的體驗。\n\n但是，盡量不要取代原本語義化的標籤的含義，例如將 button 標籤加入 `role=\"modal\"`  之後當作 modal 使用。\n\n> Web developers _must not_ use the ARIA `role` and `aria-*` attributes in a manner that conflicts with the semantics described in the [Document conformance requirements for use of ARIA attributes in HTML](https://www.w3.org/TR/html-aria/#docconformance)table. Web developers _should not_ set the ARIA `role` and `aria-*` attributes to values that match the default implicit ARIA semantics defined in the table. - [w3c spec](https://www.w3.org/TR/html-aria/#rules-wd)\n\n當然，雖然 spec 這麼說，但某些 tag 像是 `input + label` 的 hack 對前端開發來講真的很方便。這部分或許就看大家的取捨了。\n\n```html\n\n<div class=\"btn\" role=\"button\" aria-disabled=\"false\">Click to Signup</div>\n\n```\n\n### Accessibility\n\naccessibility 其實可以另外再寫一篇文章來討論，但因為不再本篇的討論範圍內，這邊只列幾點關於 accessibility 的注意要點。\n\n* 文字的大小\n\n* 顏色的對比\n\n* 是否加入適當的 attr。（img 的 alt, link 的 title 等）\n\n* 適當的 aria-\\* 使用\n\n如果對 accessility 有興趣，建議大家看看：\n\n- [ARIA](https://www.w3.org/TR/html-aria/) w3c 的 aria 標準。\n\n- [WebAIM checklist](http://webaim.org/standards/wcag/checklist) WCAG 的 checklist\n\n- [WebAIM inviblecontent](http://webaim.org/techniques/css/invisiblecontent/) 關於 CSS invisible content 的介紹\n\n### 模板語言（已 rails views 為例）\n\n目前市面上有很多模板引擎，像是 `ejs` `erb` `handlebar` `jade` 等等，都有一套特定的語法、partial、客製化的函數等等幫助你簡化冗長的 HTML。\n\n就 rails views 來說\n\n```html\n\n<%= render 'partial/buttons/primary', locals: {\n\n  :name => 'foo'\n\n  :title => 'bar'\n\n} %>\n\n```\n\n將常用的元件拆成 partial，並且放在對應的資料夾（我的習慣是將所有 partial 檔統一資料夾管理，除非那個 partial 只有在某一個特定頁面使用）。這樣一來就可以很容易地引入已經撰寫好的 HTML 架構。\n\n```html\n\n<%= render 'partial/modal', locals: {\n :name => 'foo',\n :title => 'bar',\n :image => image_path('a.png')\n} %>\n```\n\n## 結論\n\nHTML 的重構比起 CSS 跟 JS，算是簡單許多（只要 css 撰寫的時候不用 tag 做 styling），不過從頭看下來，要顧慮的事情也不少。正確的使用 tag 以及顧慮 accessibility，能夠有效地增加 UX，同時自己在修改的時候也不會看到一大堆 div 看到心癢癢。\n\n#### Legacy Code 專欄\n\n- {% post_link 'legacy-code' %}\n- {% post_link 'legacy-code2' %}\n","slug":"legacy-code3","published":1,"updated":"2016-10-18T11:32:18.000Z","_id":"cizc4k1rk0010ty5td9l48btb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>講完 CSS 的重構技巧之後，接下來會專注在 HTML 的重構技巧上。本系列的文章將不會談論 js 的重構部分，因為牽扯到較多的程式撰寫技巧，而且網路上類似的文章應該是不勝枚舉。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>其實 HTML 能夠重構的點並不多，主要就是標籤的正確使用以及顧慮 accessibility 等小細節。</p>\n<p>所以這篇文章會著重在如何使用正確的標籤以及語義化；基本的 accessiblity 認識跟 aria 標籤的使用，不僅對 screen reader 較友善，語義化的標籤使用也能夠在之後修改 HTML 時更有效率；最後是模板語言的技巧應用，這邊會用 rails 的 views 為例，不過概念的部分應該是相通的。 </p>\n<hr>\n<h3 id=\"語義化\"><a href=\"#語義化\" class=\"headerlink\" title=\"語義化\"></a>語義化</h3><p>首先，我們先來看看 HTML5 新增的 tag 有哪些</p>\n<h4 id=\"section\"><a href=\"#section\" class=\"headerlink\" title=\"section\"></a>section</h4><ul>\n<li><p>用來表示網頁裡的一個<strong>段落</strong>，常見的誤解是用來表示一篇文章。</p>\n</li>\n<li><p>基本上跟 div 沒有太大的差別，只有語義化的表現。</p>\n</li>\n</ul>\n<h4 id=\"article\"><a href=\"#article\" class=\"headerlink\" title=\"article\"></a>article</h4><ul>\n<li>用來表示一篇<strong>文章</strong></li>\n</ul>\n<h4 id=\"datalist\"><a href=\"#datalist\" class=\"headerlink\" title=\"datalist\"></a>datalist</h4><h4 id=\"dl-dt-dd\"><a href=\"#dl-dt-dd\" class=\"headerlink\" title=\"dl dt dd\"></a>dl dt dd</h4><ul>\n<li><p>如果資訊是以條列式來呈現，可以使用 dt, dd 來區分。</p>\n<blockquote>\n<p>Definition lists, created using the DL element, generally consist of a series of term\\/definition pairs (although definition lists may have other applications). Thus, when advertising a product, one might use a definition list:</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">class</span>=<span class=\"string\">\"information\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>薪水：<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>100000 ~ 300000<span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>工作地點：<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>台北市<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>任何以成對方式呈現的資訊都可以使用 dt, dd 包裝，像是範例中的：薪水搭配 100000 ~ 300000、工作地點搭配台北市。不過要注意的一點是 dl 預設會將內容縮排（就跟 ul, ol 一樣）。可以將 padding 設置為 0 來解決。</p>\n<h4 id=\"figure-figcaption\"><a href=\"#figure-figcaption\" class=\"headerlink\" title=\"figure figcaption\"></a>figure figcaption</h4><ul>\n<li><p>使用在和主內容相關的圖片、代碼，或其他資訊，不一定只能放圖而已</p>\n</li>\n<li><p>搭配 figcaption 來定義標題</p>\n</li>\n</ul>\n<h4 id=\"legend\"><a href=\"#legend\" class=\"headerlink\" title=\"legend\"></a>legend</h4><ul>\n<li><p>搭配 fieldset 使用，用來表示輸入表單的內容</p>\n</li>\n<li><p>預設的邊框很醜，如果要使用這樣的結構可能要重置一下 CSS</p>\n</li>\n</ul>\n<iframe height=\"265\" scrolling=\"no\" src=\"//codepen.io/kjj6198/embed/LRkQAB/?height=265&theme-id=0&default-tab=html,result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"http://codepen.io/kjj6198/pen/LRkQAB/\" target=\"_blank\" rel=\"external\">fieldset</a> by 愷開 (<a href=\"http://codepen.io/kjj6198\" target=\"_blank\" rel=\"external\">@kjj6198</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"external\">CodePen</a>.<br></iframe>\n\n<p>族繁不及備載，tag 的部分就在此告一段落。我個人覺得有一大部分是因為<strong>不知道</strong>才沒有使用這些 tag 的，詳情可以到<a href=\"http://www.w3school.com.cn/tags/tag_legend.asp\" target=\"_blank\" rel=\"external\">w3c</a> 的網站看看。之後會再將其他 tag 的使用方式補上。</p>\n<h4 id=\"如果都沒辦法滿足怎麼辦？\"><a href=\"#如果都沒辦法滿足怎麼辦？\" class=\"headerlink\" title=\"如果都沒辦法滿足怎麼辦？\"></a>如果都沒辦法滿足怎麼辦？</h4><p>如果以上的 tag 都沒有辦法滿足你的需求，最常見的做法就是用純 div。而 HTML 為了因應這樣的需求，也提出的 ARIA 的 spec，讓開發者可以更容易製作客製化的元件。如果我們想要使用 div 來模擬按鈕的行為，除了在 class 加上 <code>btn</code> 之外，我們同時可以加上 role attribute，並且使用相對應的 aria-* 標籤來做對應的狀態處理（是否按下、disabled、haspopup 等等），除了更加語義化之外，這些看起來有點麻煩的細節，都會大幅地改善使用 screen reader 的體驗。</p>\n<p>但是，盡量不要取代原本語義化的標籤的含義，例如將 button 標籤加入 <code>role=&quot;modal&quot;</code>  之後當作 modal 使用。</p>\n<blockquote>\n<p>Web developers <em>must not</em> use the ARIA <code>role</code> and <code>aria-*</code> attributes in a manner that conflicts with the semantics described in the <a href=\"https://www.w3.org/TR/html-aria/#docconformance\" target=\"_blank\" rel=\"external\">Document conformance requirements for use of ARIA attributes in HTML</a>table. Web developers <em>should not</em> set the ARIA <code>role</code> and <code>aria-*</code> attributes to values that match the default implicit ARIA semantics defined in the table. - <a href=\"https://www.w3.org/TR/html-aria/#rules-wd\" target=\"_blank\" rel=\"external\">w3c spec</a></p>\n</blockquote>\n<p>當然，雖然 spec 這麼說，但某些 tag 像是 <code>input + label</code> 的 hack 對前端開發來講真的很方便。這部分或許就看大家的取捨了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">aria-disabled</span>=<span class=\"string\">\"false\"</span>&gt;</span>Click to Signup<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Accessibility\"><a href=\"#Accessibility\" class=\"headerlink\" title=\"Accessibility\"></a>Accessibility</h3><p>accessibility 其實可以另外再寫一篇文章來討論，但因為不再本篇的討論範圍內，這邊只列幾點關於 accessibility 的注意要點。</p>\n<ul>\n<li><p>文字的大小</p>\n</li>\n<li><p>顏色的對比</p>\n</li>\n<li><p>是否加入適當的 attr。（img 的 alt, link 的 title 等）</p>\n</li>\n<li><p>適當的 aria-* 使用</p>\n</li>\n</ul>\n<p>如果對 accessility 有興趣，建議大家看看：</p>\n<ul>\n<li><p><a href=\"https://www.w3.org/TR/html-aria/\" target=\"_blank\" rel=\"external\">ARIA</a> w3c 的 aria 標準。</p>\n</li>\n<li><p><a href=\"http://webaim.org/standards/wcag/checklist\" target=\"_blank\" rel=\"external\">WebAIM checklist</a> WCAG 的 checklist</p>\n</li>\n<li><p><a href=\"http://webaim.org/techniques/css/invisiblecontent/\" target=\"_blank\" rel=\"external\">WebAIM inviblecontent</a> 關於 CSS invisible content 的介紹</p>\n</li>\n</ul>\n<h3 id=\"模板語言（已-rails-views-為例）\"><a href=\"#模板語言（已-rails-views-為例）\" class=\"headerlink\" title=\"模板語言（已 rails views 為例）\"></a>模板語言（已 rails views 為例）</h3><p>目前市面上有很多模板引擎，像是 <code>ejs</code> <code>erb</code> <code>handlebar</code> <code>jade</code> 等等，都有一套特定的語法、partial、客製化的函數等等幫助你簡化冗長的 HTML。</p>\n<p>就 rails views 來說</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">render</span> '<span class=\"attr\">partial</span>/<span class=\"attr\">buttons</span>/<span class=\"attr\">primary</span>', <span class=\"attr\">locals:</span> &#123;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">:name</span> =&gt; 'foo'</div><div class=\"line\"></div><div class=\"line\">  :title =&gt; 'bar'</div><div class=\"line\"></div><div class=\"line\">&#125; %&gt;</div></pre></td></tr></table></figure>\n<p>將常用的元件拆成 partial，並且放在對應的資料夾（我的習慣是將所有 partial 檔統一資料夾管理，除非那個 partial 只有在某一個特定頁面使用）。這樣一來就可以很容易地引入已經撰寫好的 HTML 架構。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">render</span> '<span class=\"attr\">partial</span>/<span class=\"attr\">modal</span>', <span class=\"attr\">locals:</span> &#123;</span></div><div class=\"line\"> <span class=\"attr\">:name</span> =&gt; 'foo',</div><div class=\"line\"> :title =&gt; 'bar',</div><div class=\"line\"> :image =&gt; image_path('a.png')</div><div class=\"line\">&#125; %&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>HTML 的重構比起 CSS 跟 JS，算是簡單許多（只要 css 撰寫的時候不用 tag 做 styling），不過從頭看下來，要顧慮的事情也不少。正確的使用 tag 以及顧慮 accessibility，能夠有效地增加 UX，同時自己在修改的時候也不會看到一大堆 div 看到心癢癢。</p>\n<h4 id=\"Legacy-Code-專欄\"><a href=\"#Legacy-Code-專欄\" class=\"headerlink\" title=\"Legacy Code 專欄\"></a>Legacy Code 專欄</h4><ul>\n<li><a href=\"/2016/06/11/legacy-code/\" title=\"從 legacy code 中尋找出口（上）\">從 legacy code 中尋找出口（上）</a></li>\n<li><a href=\"/2016/06/14/legacy-code2/\" title=\"如何從 legacy code 中尋找出口（中）- CSS 篇\">如何從 legacy code 中尋找出口（中）- CSS 篇</a>\n</li>\n</ul>\n","excerpt":"","more":"<p>講完 CSS 的重構技巧之後，接下來會專注在 HTML 的重構技巧上。本系列的文章將不會談論 js 的重構部分，因為牽扯到較多的程式撰寫技巧，而且網路上類似的文章應該是不勝枚舉。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>其實 HTML 能夠重構的點並不多，主要就是標籤的正確使用以及顧慮 accessibility 等小細節。</p>\n<p>所以這篇文章會著重在如何使用正確的標籤以及語義化；基本的 accessiblity 認識跟 aria 標籤的使用，不僅對 screen reader 較友善，語義化的標籤使用也能夠在之後修改 HTML 時更有效率；最後是模板語言的技巧應用，這邊會用 rails 的 views 為例，不過概念的部分應該是相通的。 </p>\n<hr>\n<h3 id=\"語義化\"><a href=\"#語義化\" class=\"headerlink\" title=\"語義化\"></a>語義化</h3><p>首先，我們先來看看 HTML5 新增的 tag 有哪些</p>\n<h4 id=\"section\"><a href=\"#section\" class=\"headerlink\" title=\"section\"></a>section</h4><ul>\n<li><p>用來表示網頁裡的一個<strong>段落</strong>，常見的誤解是用來表示一篇文章。</p>\n</li>\n<li><p>基本上跟 div 沒有太大的差別，只有語義化的表現。</p>\n</li>\n</ul>\n<h4 id=\"article\"><a href=\"#article\" class=\"headerlink\" title=\"article\"></a>article</h4><ul>\n<li>用來表示一篇<strong>文章</strong></li>\n</ul>\n<h4 id=\"datalist\"><a href=\"#datalist\" class=\"headerlink\" title=\"datalist\"></a>datalist</h4><h4 id=\"dl-dt-dd\"><a href=\"#dl-dt-dd\" class=\"headerlink\" title=\"dl dt dd\"></a>dl dt dd</h4><ul>\n<li><p>如果資訊是以條列式來呈現，可以使用 dt, dd 來區分。</p>\n<blockquote>\n<p>Definition lists, created using the DL element, generally consist of a series of term\\/definition pairs (although definition lists may have other applications). Thus, when advertising a product, one might use a definition list:</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">class</span>=<span class=\"string\">\"information\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>薪水：<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>100000 ~ 300000<span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>工作地點：<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>台北市<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>任何以成對方式呈現的資訊都可以使用 dt, dd 包裝，像是範例中的：薪水搭配 100000 ~ 300000、工作地點搭配台北市。不過要注意的一點是 dl 預設會將內容縮排（就跟 ul, ol 一樣）。可以將 padding 設置為 0 來解決。</p>\n<h4 id=\"figure-figcaption\"><a href=\"#figure-figcaption\" class=\"headerlink\" title=\"figure figcaption\"></a>figure figcaption</h4><ul>\n<li><p>使用在和主內容相關的圖片、代碼，或其他資訊，不一定只能放圖而已</p>\n</li>\n<li><p>搭配 figcaption 來定義標題</p>\n</li>\n</ul>\n<h4 id=\"legend\"><a href=\"#legend\" class=\"headerlink\" title=\"legend\"></a>legend</h4><ul>\n<li><p>搭配 fieldset 使用，用來表示輸入表單的內容</p>\n</li>\n<li><p>預設的邊框很醜，如果要使用這樣的結構可能要重置一下 CSS</p>\n</li>\n</ul>\n<iframe height='265' scrolling='no' src='//codepen.io/kjj6198/embed/LRkQAB/?height=265&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='http://codepen.io/kjj6198/pen/LRkQAB/'>fieldset</a> by 愷開 (<a href='http://codepen.io/kjj6198'>@kjj6198</a>) on <a href='http://codepen.io'>CodePen</a>.<br></iframe>\n\n<p>族繁不及備載，tag 的部分就在此告一段落。我個人覺得有一大部分是因為<strong>不知道</strong>才沒有使用這些 tag 的，詳情可以到<a href=\"http://www.w3school.com.cn/tags/tag_legend.asp\">w3c</a> 的網站看看。之後會再將其他 tag 的使用方式補上。</p>\n<h4 id=\"如果都沒辦法滿足怎麼辦？\"><a href=\"#如果都沒辦法滿足怎麼辦？\" class=\"headerlink\" title=\"如果都沒辦法滿足怎麼辦？\"></a>如果都沒辦法滿足怎麼辦？</h4><p>如果以上的 tag 都沒有辦法滿足你的需求，最常見的做法就是用純 div。而 HTML 為了因應這樣的需求，也提出的 ARIA 的 spec，讓開發者可以更容易製作客製化的元件。如果我們想要使用 div 來模擬按鈕的行為，除了在 class 加上 <code>btn</code> 之外，我們同時可以加上 role attribute，並且使用相對應的 aria-* 標籤來做對應的狀態處理（是否按下、disabled、haspopup 等等），除了更加語義化之外，這些看起來有點麻煩的細節，都會大幅地改善使用 screen reader 的體驗。</p>\n<p>但是，盡量不要取代原本語義化的標籤的含義，例如將 button 標籤加入 <code>role=&quot;modal&quot;</code>  之後當作 modal 使用。</p>\n<blockquote>\n<p>Web developers <em>must not</em> use the ARIA <code>role</code> and <code>aria-*</code> attributes in a manner that conflicts with the semantics described in the <a href=\"https://www.w3.org/TR/html-aria/#docconformance\">Document conformance requirements for use of ARIA attributes in HTML</a>table. Web developers <em>should not</em> set the ARIA <code>role</code> and <code>aria-*</code> attributes to values that match the default implicit ARIA semantics defined in the table. - <a href=\"https://www.w3.org/TR/html-aria/#rules-wd\">w3c spec</a></p>\n</blockquote>\n<p>當然，雖然 spec 這麼說，但某些 tag 像是 <code>input + label</code> 的 hack 對前端開發來講真的很方便。這部分或許就看大家的取捨了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">aria-disabled</span>=<span class=\"string\">\"false\"</span>&gt;</span>Click to Signup<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Accessibility\"><a href=\"#Accessibility\" class=\"headerlink\" title=\"Accessibility\"></a>Accessibility</h3><p>accessibility 其實可以另外再寫一篇文章來討論，但因為不再本篇的討論範圍內，這邊只列幾點關於 accessibility 的注意要點。</p>\n<ul>\n<li><p>文字的大小</p>\n</li>\n<li><p>顏色的對比</p>\n</li>\n<li><p>是否加入適當的 attr。（img 的 alt, link 的 title 等）</p>\n</li>\n<li><p>適當的 aria-* 使用</p>\n</li>\n</ul>\n<p>如果對 accessility 有興趣，建議大家看看：</p>\n<ul>\n<li><p><a href=\"https://www.w3.org/TR/html-aria/\">ARIA</a> w3c 的 aria 標準。</p>\n</li>\n<li><p><a href=\"http://webaim.org/standards/wcag/checklist\">WebAIM checklist</a> WCAG 的 checklist</p>\n</li>\n<li><p><a href=\"http://webaim.org/techniques/css/invisiblecontent/\">WebAIM inviblecontent</a> 關於 CSS invisible content 的介紹</p>\n</li>\n</ul>\n<h3 id=\"模板語言（已-rails-views-為例）\"><a href=\"#模板語言（已-rails-views-為例）\" class=\"headerlink\" title=\"模板語言（已 rails views 為例）\"></a>模板語言（已 rails views 為例）</h3><p>目前市面上有很多模板引擎，像是 <code>ejs</code> <code>erb</code> <code>handlebar</code> <code>jade</code> 等等，都有一套特定的語法、partial、客製化的函數等等幫助你簡化冗長的 HTML。</p>\n<p>就 rails views 來說</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">render</span> '<span class=\"attr\">partial</span>/<span class=\"attr\">buttons</span>/<span class=\"attr\">primary</span>', <span class=\"attr\">locals:</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">:name</span> =&gt;</span> 'foo'</div><div class=\"line\"></div><div class=\"line\">  :title =&gt; 'bar'</div><div class=\"line\"></div><div class=\"line\">&#125; %&gt;</div></pre></td></tr></table></figure>\n<p>將常用的元件拆成 partial，並且放在對應的資料夾（我的習慣是將所有 partial 檔統一資料夾管理，除非那個 partial 只有在某一個特定頁面使用）。這樣一來就可以很容易地引入已經撰寫好的 HTML 架構。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">render</span> '<span class=\"attr\">partial</span>/<span class=\"attr\">modal</span>', <span class=\"attr\">locals:</span> &#123;</div><div class=\"line\"> <span class=\"attr\">:name</span> =&gt;</span> 'foo',</div><div class=\"line\"> :title =&gt; 'bar',</div><div class=\"line\"> :image =&gt; image_path('a.png')</div><div class=\"line\">&#125; %&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>HTML 的重構比起 CSS 跟 JS，算是簡單許多（只要 css 撰寫的時候不用 tag 做 styling），不過從頭看下來，要顧慮的事情也不少。正確的使用 tag 以及顧慮 accessibility，能夠有效地增加 UX，同時自己在修改的時候也不會看到一大堆 div 看到心癢癢。</p>\n<h4 id=\"Legacy-Code-專欄\"><a href=\"#Legacy-Code-專欄\" class=\"headerlink\" title=\"Legacy Code 專欄\"></a>Legacy Code 專欄</h4><ul>\n<li><a href=\"/2016/06/11/legacy-code/\" title=\"從 legacy code 中尋找出口（上）\">從 legacy code 中尋找出口（上）</a></li>\n<li><a href=\"/2016/06/14/legacy-code2/\" title=\"如何從 legacy code 中尋找出口（中）- CSS 篇\">如何從 legacy code 中尋找出口（中）- CSS 篇</a>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cizc4k1ra000yty5t8l84eypd","category_id":"cizc4k39v001lty5tt6fnegwq","_id":"cizc4k3f8003uty5tznua17ia"},{"post_id":"cizc4k1rc000zty5trs7nosvs","category_id":"cizc4k39v001lty5tt6fnegwq","_id":"cizc4k3fd0042ty5thbfk635f"},{"post_id":"cizc4k1rk0010ty5td9l48btb","category_id":"cizc4k39v001lty5tt6fnegwq","_id":"cizc4k3fe0044ty5td2p9wlva"}],"PostTag":[{"post_id":"cizc4k1ra000yty5t8l84eypd","tag_id":"cizc4k3el0039ty5truf4pffl","_id":"cizc4k3ey003mty5tca3ukp1w"},{"post_id":"cizc4k1ra000yty5t8l84eypd","tag_id":"cizc4k3ep003gty5tu72r4ylt","_id":"cizc4k3f5003pty5tb26uw89f"},{"post_id":"cizc4k1rc000zty5trs7nosvs","tag_id":"cizc4k3el0039ty5truf4pffl","_id":"cizc4k3fa003wty5t3gvbmggl"},{"post_id":"cizc4k1rc000zty5trs7nosvs","tag_id":"cizc4k3ep003gty5tu72r4ylt","_id":"cizc4k3fc003zty5tx0fydmn0"},{"post_id":"cizc4k1rk0010ty5td9l48btb","tag_id":"cizc4k3f8003vty5ttxn7hmte","_id":"cizc4k3fi004bty5t371dogti"},{"post_id":"cizc4k1rk0010ty5td9l48btb","tag_id":"cizc4k3el0039ty5truf4pffl","_id":"cizc4k3fi004ety5t6vg5wgp3"},{"post_id":"cizc4k1rk0010ty5td9l48btb","tag_id":"cizc4k3ff0045ty5t3ebqcy62","_id":"cizc4k3fj004hty5tmewwjxmm"}],"Tag":[{"name":"react","_id":"cizc4k38l001dty5t0q0as2tc"},{"name":"webpack","_id":"cizc4k392001fty5t7gb8itrj"},{"name":"js","_id":"cizc4k39q001ity5t9ul12jne"},{"name":"draft-js","_id":"cizc4k39z001nty5t2o7ev4hg"},{"name":"flow","_id":"cizc4k3aa001qty5t4fz9pmg9"},{"name":"code review","_id":"cizc4k3ap001tty5t3r9hlo6c"},{"name":"pull request","_id":"cizc4k3b3001yty5tjsz0fkz4"},{"name":"css","_id":"cizc4k3ba0021ty5t1ca5n7jk"},{"name":"伊坂幸太郎","_id":"cizc4k3dr002kty5tmo9m0vx7"},{"name":"postcss","_id":"cizc4k3e0002oty5t3bji5o72"},{"name":"sass","_id":"cizc4k3e7002uty5tamiy1lk3"},{"name":"推理","_id":"cizc4k3ei0035ty5thbb9vtlc"},{"name":"重構","_id":"cizc4k3el0039ty5truf4pffl"},{"name":"前端","_id":"cizc4k3ep003gty5tu72r4ylt"},{"name":"HTML","_id":"cizc4k3f8003vty5ttxn7hmte"},{"name":"aria","_id":"cizc4k3ff0045ty5t3ebqcy62"},{"name":"canvas","_id":"cizc4k3fh0049ty5tl29kn7m9"},{"name":"low poly","_id":"cizc4k3fj004fty5tv1epdxcc"},{"name":"javascript","_id":"cizc4k3gt005ity5t0srr0ycl"},{"name":"html","_id":"cizc4k3h1005lty5tjab93gz4"},{"name":"sudo週刊","_id":"cizc4k3h6005oty5t5rfaw976"},{"name":"rails","_id":"cizc4k3ha005tty5tbqdlhl41"},{"name":"views","_id":"cizc4k3hb005xty5tr7ykgl7a"},{"name":"helper","_id":"cizc4k3hc005yty5tai2cv23m"},{"name":"部落格計畫","_id":"cizc4k3hd005zty5t4fg2o5uo"},{"name":"flex","_id":"cizc4k3hd0062ty5tecl2qb78"},{"name":"scroll","_id":"cizc4k3i10067ty5tp91763i9"},{"name":"smooth scoll","_id":"cizc4k3i2006aty5temcuyl65"},{"name":"animation","_id":"cizc4k3i3006cty5t7qkoglpd"},{"name":"easing","_id":"cizc4k3i3006dty5tntw6wh8u"}]}}